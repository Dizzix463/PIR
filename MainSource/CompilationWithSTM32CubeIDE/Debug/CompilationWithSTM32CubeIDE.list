
CompilationWithSTM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c0a0  0800c0a0  0001c0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c50c  0800c50c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800c50c  0800c50c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c50c  0800c50c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c50c  0800c50c  0001c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800c514  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000218  0800c728  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0800c728  00020a40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114f1  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eec  00000000  00000000  0003172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00035660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b52  00000000  00000000  000365a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fcd  00000000  00000000  000500f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3af  00000000  00000000  000630bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f046e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000f04c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c084 	.word	0x0800c084

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800c084 	.word	0x0800c084

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fc93 	bl	80009bc <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa09 	bl	80004d8 <__aeabi_dmul>
 80010c6:	f7ff fcc9 	bl	8000a5c <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f98a 	bl	80003e4 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa00 	bl	80004d8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f842 	bl	8000168 <__aeabi_dsub>
 80010e4:	f7ff fcba 	bl	8000a5c <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2a      	ldr	r2, [pc, #168]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CRK_synch_Pin|CRK_synch_temp_Pin|first_CRK_synch_Pin|second_CRK_synch___CAM_Overflow___CRK_Overflow_Pin
 8001168:	2200      	movs	r2, #0
 800116a:	217f      	movs	r1, #127	; 0x7f
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <MX_GPIO_Init+0xe0>)
 800116e:	f001 fc8a 	bl	8002a86 <HAL_GPIO_WritePin>
                          |CRK_TOOTH_PER___CRK_SHO_LEVEL___SEG_ADP_ER_LIM___CrkPlsOrng___CRK_GAP_NOT_DET_Pin|LD2_Pin|CAM_PER_cam_spk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRK_synch_Pin|CRK_synch_temp_Pin|first_CRK_synch_Pin|second_CRK_synch___CAM_Overflow___CRK_Overflow_Pin
 8001172:	237f      	movs	r3, #127	; 0x7f
 8001174:	613b      	str	r3, [r7, #16]
                          |CRK_TOOTH_PER___CRK_SHO_LEVEL___SEG_ADP_ER_LIM___CrkPlsOrng___CRK_GAP_NOT_DET_Pin|LD2_Pin|CAM_PER_cam_spk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_GPIO_Init+0xe0>)
 800118a:	f001 fae1 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800118e:	f44f 43f6 	mov.w	r3, #31488	; 0x7b00
 8001192:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_GPIO_Init+0xe4>)
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <MX_GPIO_Init+0xe8>)
 80011a4:	f001 fad4 	bl	8002750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2017      	movs	r0, #23
 80011ae:	f001 f9e8 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b2:	2017      	movs	r0, #23
 80011b4:	f001 fa01 	bl	80025ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f001 f9e0 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f001 f9f9 	bl	80025ba <HAL_NVIC_EnableIRQ>

}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	10110000 	.word	0x10110000
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ffc2 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ### EXTI Callback functions ###
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == 8) // Capture Event rising edge --CRK--
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d158      	bne.n	800133a <HAL_GPIO_EXTI_Callback+0xc2>
	{
		CRK_signal = true; // Set actual signal level
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]

		if (should_record)
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d014      	beq.n	80012c2 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			bool is_crk_buffer_full = CRK_save(GetTimestamp(), CRK_signal);
 8001298:	f007 f802 	bl	80082a0 <GetTimestamp>
 800129c:	4603      	mov	r3, r0
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 f9c7 	bl	8006638 <CRK_save>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
			if (is_crk_buffer_full)
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_GPIO_EXTI_Callback+0x4a>
			{
				should_record = false;
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		if (failure_active == false) // Set CRK-output
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_GPIO_EXTI_Callback+0x120>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			output_CRK_no_failure();
 80012d0:	f003 fb1a 	bl	8004908 <output_CRK_no_failure>
 80012d4:	e025      	b.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
		}
		else if (failure_identify != '1' && failure_identify != '4'
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b31      	cmp	r3, #49	; 0x31
 80012dc:	d021      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b34      	cmp	r3, #52	; 0x34
 80012e4:	d01d      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'f' && failure_identify != 'b'
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b66      	cmp	r3, #102	; 0x66
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b62      	cmp	r3, #98	; 0x62
 80012f4:	d015      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'i' && failure_identify != 'j'
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b69      	cmp	r3, #105	; 0x69
 80012fc:	d011      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b6a      	cmp	r3, #106	; 0x6a
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'k' && failure_identify != 'l'
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b6b      	cmp	r3, #107	; 0x6b
 800130c:	d009      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b6c      	cmp	r3, #108	; 0x6c
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'm')
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b6d      	cmp	r3, #109	; 0x6d
 800131c:	d001      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
		{
			output_CRK_no_failure();
 800131e:	f003 faf3 	bl	8004908 <output_CRK_no_failure>
		}

		low_time_CRK = IC1BUF; // Set actual low time of CRK signal
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001328:	6013      	str	r3, [r2, #0]

		output_CRK(failure_identify); // CRK Output
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f003 f93a 	bl	80045a8 <output_CRK>
		timer_overflow_CRK = 0;       // edge was detected, so no stalling
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

	}

	if (GPIO_Pin == 9) //## Capture Event falling edge --CRK--
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d16b      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x1a0>
	{
		CRK_signal = false; // Set actual signal level
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]

		if (should_record)
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0x102>
		{
			bool is_crk_buffer_full = CRK_save(GetTimestamp(), CRK_signal);
 8001350:	f006 ffa6 	bl	80082a0 <GetTimestamp>
 8001354:	4603      	mov	r3, r0
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f005 f96b 	bl	8006638 <CRK_save>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	73bb      	strb	r3, [r7, #14]
			if (is_crk_buffer_full)
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0x102>
			{
				should_record = false;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		if (failure_active == false) // Set CRK-output
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_GPIO_EXTI_Callback+0x120>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <HAL_GPIO_EXTI_Callback+0x134>
		{
			output_CRK_no_failure();
 8001388:	f003 fabe 	bl	8004908 <output_CRK_no_failure>
 800138c:	e034      	b.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 800138e:	bf00      	nop
 8001390:	200002ab 	.word	0x200002ab
 8001394:	20000794 	.word	0x20000794
 8001398:	20000674 	.word	0x20000674
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	2000025c 	.word	0x2000025c
 80013a4:	20000270 	.word	0x20000270
 80013a8:	20000274 	.word	0x20000274
		}
		else if (failure_identify != '1' && failure_identify != '4'
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b31      	cmp	r3, #49	; 0x31
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013b4:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b34      	cmp	r3, #52	; 0x34
 80013ba:	d01d      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'f' && failure_identify != 'h'
 80013bc:	4b62      	ldr	r3, [pc, #392]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b66      	cmp	r3, #102	; 0x66
 80013c2:	d019      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013c4:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b68      	cmp	r3, #104	; 0x68
 80013ca:	d015      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'i' && failure_identify != 'j'
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b69      	cmp	r3, #105	; 0x69
 80013d2:	d011      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013d4:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b6a      	cmp	r3, #106	; 0x6a
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'k' && failure_identify != 'l'
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b6b      	cmp	r3, #107	; 0x6b
 80013e2:	d009      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013e4:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b6c      	cmp	r3, #108	; 0x6c
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'm')
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b6d      	cmp	r3, #109	; 0x6d
 80013f2:	d001      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
		{
			output_CRK_no_failure();
 80013f4:	f003 fa88 	bl	8004908 <output_CRK_no_failure>
		}

		sync_CRK_preparation(); // CRK synchronisation preparation
 80013f8:	f006 fa02 	bl	8007800 <sync_CRK_preparation>

		output_CRK(failure_identify); // CRK Output
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 f8d1 	bl	80045a8 <output_CRK>
		if (configuration_complete == true)
 8001406:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_GPIO_EXTI_Callback+0x19a>
		{
			sync_CRK(); // CRK synchronisation
 800140e:	f005 f997 	bl	8006740 <sync_CRK>
		}
		timer_overflow_CRK = 0; // edge was detected, so no stalling
 8001412:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 14) //## Capture Event rising edge --CAM1--
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b0e      	cmp	r3, #14
 800141c:	d12c      	bne.n	8001478 <HAL_GPIO_EXTI_Callback+0x200>
	{

		CAM_signal[0] = true; // Set actual signal level
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]

		if (should_record)
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d014      	beq.n	8001458 <HAL_GPIO_EXTI_Callback+0x1e0>
		{
			bool is_cam_buffer_full = CAM_save(GetTimestamp(), CAM_signal[0]);
 800142e:	f006 ff37 	bl	80082a0 <GetTimestamp>
 8001432:	4603      	mov	r3, r0
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f005 f93e 	bl	80066bc <CAM_save>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]
			if (is_cam_buffer_full)
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_GPIO_EXTI_Callback+0x1e0>
			{
				should_record = false;
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		output_CAM(failure_identify, 0); // CAM1 Output
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f96a 	bl	8004738 <output_CAM>

		if (configuration_complete == true)
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_EXTI_Callback+0x1fa>
		{
			sync_CAM_CRK(0); // CAM_CRK Synchronisation
 800146c:	2000      	movs	r0, #0
 800146e:	f005 fba1 	bl	8006bb4 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 11)	//## Capture Event falling edge --CAM1--
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b0b      	cmp	r3, #11
 800147c:	d12e      	bne.n	80014dc <HAL_GPIO_EXTI_Callback+0x264>
	{
		CAM_signal[0] = false;	// Set actual signal level
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

		if (should_record)
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d014      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x240>
		{
			bool is_cam_buffer_full = CAM_save(GetTimestamp(), CAM_signal[0]);
 800148e:	f006 ff07 	bl	80082a0 <GetTimestamp>
 8001492:	4603      	mov	r3, r0
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f005 f90e 	bl	80066bc <CAM_save>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	733b      	strb	r3, [r7, #12]
			if (is_cam_buffer_full)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x240>
			{
				should_record = false;
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		TIM2_Reset();
 80014b8:	f006 fe3c 	bl	8008134 <TIM2_Reset>

		output_CAM(failure_identify, 0);	// CAM1 Output
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 f938 	bl	8004738 <output_CAM>

		if (configuration_complete == true)
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_EXTI_Callback+0x25e>
		{
			sync_CAM_CRK(0); // CAM_CRK Synchronisation
 80014d0:	2000      	movs	r0, #0
 80014d2:	f005 fb6f 	bl	8006bb4 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 12) //## Capture Event rising edge --CAM2--
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d112      	bne.n	8001508 <HAL_GPIO_EXTI_Callback+0x290>
	{
		CAM_signal[1] = true; // Set actual signal level
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	705a      	strb	r2, [r3, #1]

		output_CAM(failure_identify, 1); // CAM2 Output
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 f922 	bl	8004738 <output_CAM>

		if (configuration_complete == true)
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_GPIO_EXTI_Callback+0x28a>
		{
			sync_CAM_CRK(1); // CAM_CRK Synchronisation
 80014fc:	2001      	movs	r0, #1
 80014fe:	f005 fb59 	bl	8006bb4 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 13) //## Capture Event falling edge --CAM2--
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	2b0d      	cmp	r3, #13
 800150c:	d118      	bne.n	8001540 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		if (number_of_CAM == 2)
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d114      	bne.n	8001540 <HAL_GPIO_EXTI_Callback+0x2c8>
		{
			CAM_signal[1] = false; // Set actual signal level
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]

			TIM2_Reset();
 800151c:	f006 fe0a 	bl	8008134 <TIM2_Reset>

			output_CAM(failure_identify, 1); // CAM2 Output
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f906 	bl	8004738 <output_CAM>

			if (configuration_complete == true)
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_GPIO_EXTI_Callback+0x2c2>
			{
				sync_CAM_CRK(1); // CAM_CRK Synchronisation
 8001534:	2001      	movs	r0, #1
 8001536:	f005 fb3d 	bl	8006bb4 <sync_CAM_CRK>
			}
			timer_overflow_CAM = 0; // edge was detected, so no stalling
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000000c 	.word	0x2000000c
 800154c:	200005e8 	.word	0x200005e8
 8001550:	20000274 	.word	0x20000274
 8001554:	20000660 	.word	0x20000660
 8001558:	20000794 	.word	0x20000794
 800155c:	200005ec 	.word	0x200005ec
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		TIM1_PeriodElapsedCallback();
 8001574:	f000 f81e 	bl	80015b4 <TIM1_PeriodElapsedCallback>
	}
	if (htim == &htim2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		TIM2_PeriodElapsedCallback();
 8001580:	f000 f826 	bl	80015d0 <TIM2_PeriodElapsedCallback>
	}
	if (htim == &htim3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		TIM3_PeriodElapsedCallback();
 800158c:	f000 f82e 	bl	80015ec <TIM3_PeriodElapsedCallback>
	}
	if (htim == &htim4)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		TIM4_PeriodElapsedCallback();
 8001598:	f000 f896 	bl	80016c8 <TIM4_PeriodElapsedCallback>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200008a4 	.word	0x200008a4
 80015a8:	200008ec 	.word	0x200008ec
 80015ac:	20000934 	.word	0x20000934
 80015b0:	2000097c 	.word	0x2000097c

080015b4 <TIM1_PeriodElapsedCallback>:

//## Timer 1 Interrupt CRK tooth time (previously timer2)

void TIM1_PeriodElapsedCallback(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

	// all overflows between the events
	timer_overflow_CRK++;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <TIM1_PeriodElapsedCallback+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <TIM1_PeriodElapsedCallback+0x18>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000274 	.word	0x20000274

080015d0 <TIM2_PeriodElapsedCallback>:

//## Timer 2 Interrupt CAM tooth time (previously timer3)

void TIM2_PeriodElapsedCallback(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
// all overflows between the events
// test
	timer_overflow_CAM++;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <TIM2_PeriodElapsedCallback+0x18>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <TIM2_PeriodElapsedCallback+0x18>)
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200005ec 	.word	0x200005ec

080015ec <TIM3_PeriodElapsedCallback>:
//## Timer 3 Interrupt: CAM_PER - start value

void TIM3_PeriodElapsedCallback(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

	if (failure_identify == '5')
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b35      	cmp	r3, #53	; 0x35
 80015f6:	d128      	bne.n	800164a <TIM3_PeriodElapsedCallback+0x5e>
	{ // CAM_PER: error identified by '5'

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	482e      	ldr	r0, [pc, #184]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 80015fe:	f001 fa2b 	bl	8002a58 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <TIM3_PeriodElapsedCallback+0x2a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160e:	482a      	ldr	r0, [pc, #168]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 8001610:	f001 fa39 	bl	8002a86 <HAL_GPIO_WritePin>
 8001614:	e005      	b.n	8001622 <TIM3_PeriodElapsedCallback+0x36>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161c:	4826      	ldr	r0, [pc, #152]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800161e:	f001 fa32 	bl	8002a86 <HAL_GPIO_WritePin>
		}

		counter_CAM_PER[0]++; // Number of times we lost CAM with timer 6
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800162a:	6013      	str	r3, [r2, #0]
		if (counter_CAM_PER[0] == 2)
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d105      	bne.n	8001640 <TIM3_PeriodElapsedCallback+0x54>
		{
			HAL_TIM_Base_Stop(&htim3);
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001636:	f001 ff0b 	bl	8003450 <HAL_TIM_Base_Stop>
			counter_CAM_PER[0] = 0; // Reset timer 6 CAM lost counter
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0); // reset the timers counter
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

		HAL_TIM_Base_Stop(&htim3);
	}
}
 8001648:	e031      	b.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
	else if (failure_identify == '6')
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b36      	cmp	r3, #54	; 0x36
 8001650:	d121      	bne.n	8001696 <TIM3_PeriodElapsedCallback+0xaa>
		__HAL_TIM_SET_AUTORELOAD(&htim4, 1439); // Define ARR value 20us*72Mhz = 1440 (PSC=0 pour TIM7)
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f240 529f 	movw	r2, #1439	; 0x59f
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 800165e:	f240 529f 	movw	r2, #1439	; 0x59f
 8001662:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Stop(&htim4);
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 8001666:	f001 fef3 	bl	8003450 <HAL_TIM_Base_Stop>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 800166a:	2110      	movs	r1, #16
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800166e:	f001 f9f3 	bl	8002a58 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <TIM3_PeriodElapsedCallback+0x98>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2110      	movs	r1, #16
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800167e:	f001 fa02 	bl	8002a86 <HAL_GPIO_WritePin>
 8001682:	e004      	b.n	800168e <TIM3_PeriodElapsedCallback+0xa2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2110      	movs	r1, #16
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800168a:	f001 f9fc 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001690:	f001 fede 	bl	8003450 <HAL_TIM_Base_Stop>
}
 8001694:	e00b      	b.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
	else if (failure_identify == 'b')
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b62      	cmp	r3, #98	; 0x62
 800169c:	d107      	bne.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2110      	movs	r1, #16
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 80016a4:	f001 f9ef 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 80016aa:	f001 fed1 	bl	8003450 <HAL_TIM_Base_Stop>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	40010800 	.word	0x40010800
 80016bc:	20000690 	.word	0x20000690
 80016c0:	20000934 	.word	0x20000934
 80016c4:	2000097c 	.word	0x2000097c

080016c8 <TIM4_PeriodElapsedCallback>:

//## Timer 4 Interrupt: CAM_PER - pulse duration

void TIM4_PeriodElapsedCallback(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	if (failure_identify == '5') // CAM_PER --> Cam_Spk
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b35      	cmp	r3, #53	; 0x35
 80016d2:	d125      	bne.n	8001720 <TIM4_PeriodElapsedCallback+0x58>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1)
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4848      	ldr	r0, [pc, #288]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016d8:	f001 f9be 	bl	8002a58 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <TIM4_PeriodElapsedCallback+0x26>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4844      	ldr	r0, [pc, #272]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016e8:	f001 f9cd 	bl	8002a86 <HAL_GPIO_WritePin>
 80016ec:	e004      	b.n	80016f8 <TIM4_PeriodElapsedCallback+0x30>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4841      	ldr	r0, [pc, #260]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016f4:	f001 f9c7 	bl	8002a86 <HAL_GPIO_WritePin>
		}

		counter_CAM_PER[1]++; // Number of times we lost CAM with timer 7
 80016f8:	4b40      	ldr	r3, [pc, #256]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001700:	6053      	str	r3, [r2, #4]
		if (counter_CAM_PER[1] == 2)
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d105      	bne.n	8001716 <TIM4_PeriodElapsedCallback+0x4e>
		{

			HAL_TIM_Base_Stop(&htim4);
 800170a:	483d      	ldr	r0, [pc, #244]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 800170c:	f001 fea0 	bl	8003450 <HAL_TIM_Base_Stop>

			counter_CAM_PER[1] = 0; // Reset timer 7 CAM counter
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
		}

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else
	{
		HAL_TIM_Base_Stop(&htim4);
	}
}
 800171e:	e067      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	else if (failure_identify == '6') // CRK_TOOTH_PER
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b36      	cmp	r3, #54	; 0x36
 8001726:	d115      	bne.n	8001754 <TIM4_PeriodElapsedCallback+0x8c>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 8001728:	2110      	movs	r1, #16
 800172a:	4833      	ldr	r0, [pc, #204]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800172c:	f001 f994 	bl	8002a58 <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <TIM4_PeriodElapsedCallback+0x7a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2110      	movs	r1, #16
 800173a:	482f      	ldr	r0, [pc, #188]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800173c:	f001 f9a3 	bl	8002a86 <HAL_GPIO_WritePin>
 8001740:	e004      	b.n	800174c <TIM4_PeriodElapsedCallback+0x84>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2110      	movs	r1, #16
 8001746:	482c      	ldr	r0, [pc, #176]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 8001748:	f001 f99d 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim4);
 800174c:	482c      	ldr	r0, [pc, #176]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 800174e:	f001 fe7f 	bl	8003450 <HAL_TIM_Base_Stop>
}
 8001752:	e04d      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	else if (failure_identify == 'j')
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b6a      	cmp	r3, #106	; 0x6a
 800175a:	d139      	bne.n	80017d0 <TIM4_PeriodElapsedCallback+0x108>
		timer_Counter_SEG_ADP_ER_LIM++;
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 8001764:	6013      	str	r3, [r2, #0]
		switch (timer_Counter_SEG_ADP_ER_LIM)
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d002      	beq.n	8001774 <TIM4_PeriodElapsedCallback+0xac>
 800176e:	2b02      	cmp	r3, #2
 8001770:	d027      	beq.n	80017c2 <TIM4_PeriodElapsedCallback+0xfa>
 8001772:	e029      	b.n	80017c8 <TIM4_PeriodElapsedCallback+0x100>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	481f      	ldr	r0, [pc, #124]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800177a:	f001 f984 	bl	8002a86 <HAL_GPIO_WritePin>
			if (failure_waiting == true)
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <TIM4_PeriodElapsedCallback+0x140>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <TIM4_PeriodElapsedCallback+0xf2>
				if (sensortype_CRK == 'c') // sensor is cpdd
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <TIM4_PeriodElapsedCallback+0x144>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b63      	cmp	r3, #99	; 0x63
 800178c:	d104      	bne.n	8001798 <TIM4_PeriodElapsedCallback+0xd0>
					SysTick_Config(3600); // 72MHz*50us=3600
 800178e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001792:	f7ff fd4f 	bl	8001234 <SysTick_Config>
 8001796:	e00e      	b.n	80017b6 <TIM4_PeriodElapsedCallback+0xee>
				else if (sensortype_CRK == 'h')
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <TIM4_PeriodElapsedCallback+0x144>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b68      	cmp	r3, #104	; 0x68
 800179e:	d107      	bne.n	80017b0 <TIM4_PeriodElapsedCallback+0xe8>
					SysTick_Config((T_TOOTH_RAW / 2) - 1);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <TIM4_PeriodElapsedCallback+0x148>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd43 	bl	8001234 <SysTick_Config>
 80017ae:	e002      	b.n	80017b6 <TIM4_PeriodElapsedCallback+0xee>
					SysTick_Config(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fd3f 	bl	8001234 <SysTick_Config>
				HAL_ResumeTick();
 80017b6:	f000 fdff 	bl	80023b8 <HAL_ResumeTick>
			failure_passed = true;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <TIM4_PeriodElapsedCallback+0x14c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
			break;
 80017c0:	e002      	b.n	80017c8 <TIM4_PeriodElapsedCallback+0x100>
			SEG_ADP_ER_LIM_reset(); //SEG_... failure_inactive, passed and waiting =false, init timer 7 & 8, SEG_...error counter reset
 80017c2:	f004 fc2b 	bl	800601c <SEG_ADP_ER_LIM_reset>
			break;
 80017c6:	bf00      	nop
		HAL_TIM_Base_Stop(&htim4);
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017ca:	f001 fe41 	bl	8003450 <HAL_TIM_Base_Stop>
}
 80017ce:	e00f      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	else if (failure_identify == 'k') // CrkPlsOrng
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b6b      	cmp	r3, #107	; 0x6b
 80017d6:	d108      	bne.n	80017ea <TIM4_PeriodElapsedCallback+0x122>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2110      	movs	r1, #16
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80017de:	f001 f952 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim4);
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017e4:	f001 fe34 	bl	8003450 <HAL_TIM_Base_Stop>
}
 80017e8:	e002      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
		HAL_TIM_Base_Stop(&htim4);
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017ec:	f001 fe30 	bl	8003450 <HAL_TIM_Base_Stop>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	40010800 	.word	0x40010800
 80017fc:	20000690 	.word	0x20000690
 8001800:	2000097c 	.word	0x2000097c
 8001804:	20000768 	.word	0x20000768
 8001808:	20000678 	.word	0x20000678
 800180c:	20000258 	.word	0x20000258
 8001810:	2000026c 	.word	0x2000026c
 8001814:	20000677 	.word	0x20000677

08001818 <HAL_UART_RxCpltCallback>:

// ### USART Receive Callback function ###
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2120      	movs	r1, #32
 8001824:	4841      	ldr	r0, [pc, #260]	; (800192c <HAL_UART_RxCpltCallback+0x114>)
 8001826:	f001 f92e 	bl	8002a86 <HAL_GPIO_WritePin>
// Likely similar to an interrupt triggering whenever a char is received as all the receptions we will get are of size 1 char
	if (huart == &huart1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a40      	ldr	r2, [pc, #256]	; (8001930 <HAL_UART_RxCpltCallback+0x118>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d104      	bne.n	800183c <HAL_UART_RxCpltCallback+0x24>
	{
		// UART Receive
		USART_ProcessMessage();
 8001832:	f006 fd59 	bl	80082e8 <USART_ProcessMessage>

		//? the receiver buffer and the UxRSR to the empty state
		USART_ProcessMessage();
 8001836:	f006 fd57 	bl	80082e8 <USART_ProcessMessage>
 800183a:	e070      	b.n	800191e <HAL_UART_RxCpltCallback+0x106>
	}
	else
	{
		char_counter++;
 800183c:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 8001844:	6013      	str	r3, [r2, #0]

		if (com_error == false && receiving == true && in != end_char)
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_UART_RxCpltCallback+0x120>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f083 0301 	eor.w	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d011      	beq.n	8001878 <HAL_UART_RxCpltCallback+0x60>
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_UART_RxCpltCallback+0x124>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_UART_RxCpltCallback+0x60>
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_UART_RxCpltCallback+0x128>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_UART_RxCpltCallback+0x12c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d007      	beq.n	8001878 <HAL_UART_RxCpltCallback+0x60>
		{
			input_chars[char_counter - 2] = in; // write received char in array
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b02      	subs	r3, #2
 800186e:	4a34      	ldr	r2, [pc, #208]	; (8001940 <HAL_UART_RxCpltCallback+0x128>)
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	4a35      	ldr	r2, [pc, #212]	; (8001948 <HAL_UART_RxCpltCallback+0x130>)
 8001874:	54d1      	strb	r1, [r2, r3]
 8001876:	e052      	b.n	800191e <HAL_UART_RxCpltCallback+0x106>
		}
		else if (com_error == false && in == end_char && receiving == true
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_UART_RxCpltCallback+0x120>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01d      	beq.n	80018c2 <HAL_UART_RxCpltCallback+0xaa>
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_UART_RxCpltCallback+0x128>)
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_UART_RxCpltCallback+0x12c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d117      	bne.n	80018c2 <HAL_UART_RxCpltCallback+0xaa>
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_UART_RxCpltCallback+0x124>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d013      	beq.n	80018c2 <HAL_UART_RxCpltCallback+0xaa>
				&& char_counter > 2)
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	dd0f      	ble.n	80018c2 <HAL_UART_RxCpltCallback+0xaa>
		{
			input_chars[char_counter - 2] = '\0'; // set length of array
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3b02      	subs	r3, #2
 80018a8:	4a27      	ldr	r2, [pc, #156]	; (8001948 <HAL_UART_RxCpltCallback+0x130>)
 80018aa:	2100      	movs	r1, #0
 80018ac:	54d1      	strb	r1, [r2, r3]

			char_counter = 0; // reset counter value
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
			receiving = false; // reset label that indicates receiving status
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_UART_RxCpltCallback+0x124>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			message_received = true; // set label that indicates succesfully received message
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_UART_RxCpltCallback+0x134>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e02d      	b.n	800191e <HAL_UART_RxCpltCallback+0x106>
		}
		else if (in == start_char && char_counter == 1)
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_UART_RxCpltCallback+0x128>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_UART_RxCpltCallback+0x138>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d10d      	bne.n	80018ea <HAL_UART_RxCpltCallback+0xd2>
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d109      	bne.n	80018ea <HAL_UART_RxCpltCallback+0xd2>
		{

			char_counter = 0;        // reset counter value
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
			receiving = false; // reset label that indicates receiving status
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_UART_RxCpltCallback+0x124>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
			message_received = true; // set label that indicates succesfully received message
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_UART_RxCpltCallback+0x134>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e019      	b.n	800191e <HAL_UART_RxCpltCallback+0x106>
		}
		else if (in == start_char && char_counter == 1)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_UART_RxCpltCallback+0x128>)
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_UART_RxCpltCallback+0x138>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d113      	bne.n	800191e <HAL_UART_RxCpltCallback+0x106>
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_UART_RxCpltCallback+0x11c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10f      	bne.n	800191e <HAL_UART_RxCpltCallback+0x106>
		{
			uint8_t msg13 = message[13];
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_RxCpltCallback+0x13c>)
 8001900:	7b5b      	ldrb	r3, [r3, #13]
 8001902:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart1, &msg13, 1);
 8001904:	f107 030f 	add.w	r3, r7, #15
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <HAL_UART_RxCpltCallback+0x118>)
 800190e:	f002 f9f8 	bl	8003d02 <HAL_UART_Transmit_IT>
			receiving = true;  // set label that indicates receiving status
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_UART_RxCpltCallback+0x124>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
			com_error = false; // reset COM error, due to received start char
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_UART_RxCpltCallback+0x120>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
		else
		{
			// send failure message
		}
	}
	USART_ProcessMessage();
 800191e:	f006 fce3 	bl	80082e8 <USART_ProcessMessage>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40010800 	.word	0x40010800
 8001930:	200009c4 	.word	0x200009c4
 8001934:	20000798 	.word	0x20000798
 8001938:	2000089b 	.word	0x2000089b
 800193c:	20000899 	.word	0x20000899
 8001940:	200007a0 	.word	0x200007a0
 8001944:	20000021 	.word	0x20000021
 8001948:	200007a4 	.word	0x200007a4
 800194c:	2000089a 	.word	0x2000089a
 8001950:	20000020 	.word	0x20000020
 8001954:	20000024 	.word	0x20000024

08001958 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800195c:	f000 fcca 	bl	80022f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001960:	f000 f8a6 	bl	8001ab0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001964:	f7ff fbc6 	bl	80010f4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001968:	f000 fa6e 	bl	8001e48 <MX_TIM1_Init>
	MX_TIM2_Init();
 800196c:	f000 fabc 	bl	8001ee8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001970:	f000 fb08 	bl	8001f84 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001974:	f000 fb54 	bl	8002020 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8001978:	f000 fc18 	bl	80021ac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
// ## User init ##
	SysTickInit(); //TODO: Check on the systick here
 800197c:	f006 fbba 	bl	80080f4 <SysTickInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	483c      	ldr	r0, [pc, #240]	; (8001a78 <main+0x120>)
 8001986:	f001 f87e 	bl	8002a86 <HAL_GPIO_WritePin>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Receive_IT(&huart1, input_chars, 3);
 800198a:	2203      	movs	r2, #3
 800198c:	493b      	ldr	r1, [pc, #236]	; (8001a7c <main+0x124>)
 800198e:	483c      	ldr	r0, [pc, #240]	; (8001a80 <main+0x128>)
 8001990:	f002 f9fb 	bl	8003d8a <HAL_UART_Receive_IT>
		// failure processing
		if (configuration_complete)
 8001994:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <main+0x12c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <main+0x4e>
		{
			failure_processing(failure_identify);
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <main+0x130>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fd15 	bl	80063d0 <failure_processing>
		}

		// process the received message
		if (message_received == true && com_error == false)
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <main+0x134>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <main+0x68>
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <main+0x138>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <main+0x68>
		{
			USART_ProcessMessage();
 80019bc:	f006 fc94 	bl	80082e8 <USART_ProcessMessage>
		}

		// reset all values when CRK stalling is detected
		if ((timer_overflow_CRK > 10)) // || (timer_overflow_CAM > 5))
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <main+0x13c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b0a      	cmp	r3, #10
 80019c6:	d906      	bls.n	80019d6 <main+0x7e>
		{
			// Stalling_detection();
			Stalling_detection_CRK();
 80019c8:	f005 fdee 	bl	80075a8 <Stalling_detection_CRK>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2108      	movs	r1, #8
 80019d0:	4829      	ldr	r0, [pc, #164]	; (8001a78 <main+0x120>)
 80019d2:	f001 f858 	bl	8002a86 <HAL_GPIO_WritePin>
		}
		// reset all values when CAM stalling is detected //was not here before
		if ((timer_overflow_CAM > 5))
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <main+0x140>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d90a      	bls.n	80019f4 <main+0x9c>
		{
			Stalling_detection_CAM(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f005 fe72 	bl	80076c8 <Stalling_detection_CAM>
			Stalling_detection_CAM(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f005 fe6f 	bl	80076c8 <Stalling_detection_CAM>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2108      	movs	r1, #8
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <main+0x120>)
 80019f0:	f001 f849 	bl	8002a86 <HAL_GPIO_WritePin>
		}

		// send failure configuration status
		USART_send_failure_configuration_status(failure_identify,
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <main+0x130>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <main+0x144>)
 80019fa:	7811      	ldrb	r1, [r2, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	; (8001aa0 <main+0x148>)
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fb43 	bl	800908c <USART_send_failure_configuration_status>
				failure_configured, failure_configured_CAM_blank_out);

		// check input signal level and set corresponding output level
		Input_signal_observe(output_level_setting);
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <main+0x14c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 fa42 	bl	8007e94 <Input_signal_observe>
		if (CRK_synch)
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <main+0x150>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <main+0xd6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <main+0x120>)
 8001a1e:	f001 f832 	bl	8002a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2104      	movs	r1, #4
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <main+0x120>)
 8001a28:	f001 f82d 	bl	8002a86 <HAL_GPIO_WritePin>
 8001a2c:	e004      	b.n	8001a38 <main+0xe0>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2101      	movs	r1, #1
 8001a32:	4811      	ldr	r0, [pc, #68]	; (8001a78 <main+0x120>)
 8001a34:	f001 f827 	bl	8002a86 <HAL_GPIO_WritePin>
		}

		if (CRK_synch_temp)
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <main+0x154>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <main+0xf4>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2102      	movs	r1, #2
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <main+0x120>)
 8001a46:	f001 f81e 	bl	8002a86 <HAL_GPIO_WritePin>
 8001a4a:	e004      	b.n	8001a56 <main+0xfe>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <main+0x120>)
 8001a52:	f001 f818 	bl	8002a86 <HAL_GPIO_WritePin>
		}

		if (CRK_synch)
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <main+0x150>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <main+0x112>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2108      	movs	r1, #8
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <main+0x120>)
 8001a64:	f001 f80f 	bl	8002a86 <HAL_GPIO_WritePin>
 8001a68:	e78f      	b.n	800198a <main+0x32>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	4802      	ldr	r0, [pc, #8]	; (8001a78 <main+0x120>)
 8001a70:	f001 f809 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, input_chars, 3);
 8001a74:	e789      	b.n	800198a <main+0x32>
 8001a76:	bf00      	nop
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	200007a4 	.word	0x200007a4
 8001a80:	200009c4 	.word	0x200009c4
 8001a84:	200005e8 	.word	0x200005e8
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	2000089a 	.word	0x2000089a
 8001a90:	2000089b 	.word	0x2000089b
 8001a94:	20000274 	.word	0x20000274
 8001a98:	200005ec 	.word	0x200005ec
 8001a9c:	20000679 	.word	0x20000679
 8001aa0:	2000067a 	.word	0x2000067a
 8001aa4:	200005e9 	.word	0x200005e9
 8001aa8:	200002a8 	.word	0x200002a8
 8001aac:	200002a9 	.word	0x200002a9

08001ab0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b090      	sub	sp, #64	; 0x40
 8001ab4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2228      	movs	r2, #40	; 0x28
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 fbcc 	bl	800925c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ada:	2310      	movs	r3, #16
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ae6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001aea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fff9 	bl	8002ae8 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001afc:	f000 f81a 	bl	8001b34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b10:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fa66 	bl	8002fec <HAL_RCC_ClockConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0x7a>
	{
		Error_Handler();
 8001b26:	f000 f805 	bl	8001b34 <Error_Handler>
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	3740      	adds	r7, #64	; 0x40
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit_IT(&huart1, "ERROR", 6);
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	4905      	ldr	r1, [pc, #20]	; (8001b54 <Error_Handler+0x20>)
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <Error_Handler+0x24>)
 8001b42:	f002 f8de 	bl	8003d02 <HAL_UART_Transmit_IT>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2120      	movs	r1, #32
 8001b4a:	4804      	ldr	r0, [pc, #16]	; (8001b5c <Error_Handler+0x28>)
 8001b4c:	f000 ff9b 	bl	8002a86 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, "ERROR", 6);
 8001b50:	e7f4      	b.n	8001b3c <Error_Handler+0x8>
 8001b52:	bf00      	nop
 8001b54:	0800c0a0 	.word	0x0800c0a0
 8001b58:	200009c4 	.word	0x200009c4
 8001b5c:	40010800 	.word	0x40010800

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_MspInit+0x60>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_MspInit+0x60>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0a:	f000 fbb9 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c1a:	f000 ff4d 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c22:	f000 ff49 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM1_UP_IRQHandler+0x10>)
 8001c32:	f001 fcb3 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200008a4 	.word	0x200008a4

08001c40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM2_IRQHandler+0x10>)
 8001c46:	f001 fca9 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200008ec 	.word	0x200008ec

08001c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM3_IRQHandler+0x10>)
 8001c5a:	f001 fc9f 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000934 	.word	0x20000934

08001c68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM4_IRQHandler+0x10>)
 8001c6e:	f001 fc95 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000097c 	.word	0x2000097c

08001c7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <USART1_IRQHandler+0x14>)
 8001c82:	f002 f8b3 	bl	8003dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart1);
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <USART1_IRQHandler+0x14>)
 8001c88:	f7ff fdc6 	bl	8001818 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200009c4 	.word	0x200009c4

08001c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c9c:	f000 ff0c 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ca0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ca4:	f000 ff08 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cac:	f000 ff04 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001cb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cb4:	f000 ff00 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
	return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_kill>:

int _kill(int pid, int sig)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cd4:	f007 fa90 	bl	80091f8 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2216      	movs	r2, #22
 8001cdc:	601a      	str	r2, [r3, #0]
	return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_exit>:

void _exit (int status)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffe7 	bl	8001cca <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cfc:	e7fe      	b.n	8001cfc <_exit+0x12>

08001cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e00a      	b.n	8001d26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d10:	f3af 8000 	nop.w
 8001d14:	4601      	mov	r1, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	60ba      	str	r2, [r7, #8]
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf0      	blt.n	8001d10 <_read+0x12>
	}

return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e009      	b.n	8001d5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbf1      	blt.n	8001d4a <_write+0x12>
	}
	return len;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_close>:

int _close(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d96:	605a      	str	r2, [r3, #4]
	return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_isatty>:

int _isatty(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f007 f9fa 	bl	80091f8 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20005000 	.word	0x20005000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	200008a0 	.word	0x200008a0
 8001e38:	20000a40 	.word	0x20000a40

08001e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <MX_TIM1_Init+0x9c>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e6c:	2277      	movs	r2, #119	; 0x77
 8001e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62999;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e78:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e90:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e92:	f001 fa43 	bl	800331c <HAL_TIM_Base_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e9c:	f7ff fe4a 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001eae:	f001 fc7d 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001eb8:	f7ff fe3c 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001eca:	f001 fe5d 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ed4:	f7ff fe2e 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200008a4 	.word	0x200008a4
 8001ee4:	40012c00 	.word	0x40012c00

08001ee8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f0e:	f240 12df 	movw	r2, #479	; 0x1df
 8001f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62999;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f1c:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001f20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f2e:	4814      	ldr	r0, [pc, #80]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f30:	f001 f9f4 	bl	800331c <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f3a:	f7ff fdfb 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f4c:	f001 fc2e 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f56:	f7ff fded 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_TIM2_Init+0x98>)
 8001f68:	f001 fe0e 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f72:	f7ff fddf 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200008ec 	.word	0x200008ec

08001f84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <MX_TIM3_Init+0x98>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fa8:	220f      	movs	r2, #15
 8001faa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62999;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fb4:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001fb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fc8:	f001 f9a8 	bl	800331c <HAL_TIM_Base_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fd2:	f7ff fdaf 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fe4:	f001 fbe2 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001fee:	f7ff fda1 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_TIM3_Init+0x94>)
 8002000:	f001 fdc2 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800200a:	f7ff fd93 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000934 	.word	0x20000934
 800201c:	40000400 	.word	0x40000400

08002020 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	463b      	mov	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM4_Init+0x94>)
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <MX_TIM4_Init+0x98>)
 8002040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_TIM4_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002050:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002054:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_TIM4_Init+0x94>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002064:	f001 f95a 	bl	800331c <HAL_TIM_Base_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800206e:	f7ff fd61 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_TIM4_Init+0x94>)
 8002080:	f001 fb94 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800208a:	f7ff fd53 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002096:	463b      	mov	r3, r7
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <MX_TIM4_Init+0x94>)
 800209c:	f001 fd74 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020a6:	f7ff fd45 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000097c 	.word	0x2000097c
 80020b8:	40000800 	.word	0x40000800

080020bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_TIM_Base_MspInit+0xe0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d114      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fa49 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 fa62 	bl	80025ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020f6:	e04c      	b.n	8002192 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d114      	bne.n	800212c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201c      	movs	r0, #28
 8002120:	f000 fa2f 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002124:	201c      	movs	r0, #28
 8002126:	f000 fa48 	bl	80025ba <HAL_NVIC_EnableIRQ>
}
 800212a:	e032      	b.n	8002192 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_TIM_Base_MspInit+0xe8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d114      	bne.n	8002160 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	201d      	movs	r0, #29
 8002154:	f000 fa15 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002158:	201d      	movs	r0, #29
 800215a:	f000 fa2e 	bl	80025ba <HAL_NVIC_EnableIRQ>
}
 800215e:	e018      	b.n	8002192 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_TIM_Base_MspInit+0xec>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_TIM_Base_MspInit+0xe4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201e      	movs	r0, #30
 8002188:	f000 f9fb 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800218c:	201e      	movs	r0, #30
 800218e:	f000 fa14 	bl	80025ba <HAL_NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800

080021ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART1_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021e4:	f001 fd40 	bl	8003c68 <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f7ff fca1 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200009c4 	.word	0x200009c4
 80021fc:	40013800 	.word	0x40013800

08002200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_UART_MspInit+0x9c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d139      	bne.n	8002294 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 8002226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_UART_MspInit+0xa0>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	480f      	ldr	r0, [pc, #60]	; (80022a4 <HAL_UART_MspInit+0xa4>)
 8002266:	f000 fa73 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800226a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	4619      	mov	r1, r3
 800227e:	4809      	ldr	r0, [pc, #36]	; (80022a4 <HAL_UART_MspInit+0xa4>)
 8002280:	f000 fa66 	bl	8002750 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	2025      	movs	r0, #37	; 0x25
 800228a:	f000 f97a 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800228e:	2025      	movs	r0, #37	; 0x25
 8002290:	f000 f993 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013800 	.word	0x40013800
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010800 	.word	0x40010800

080022a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ce:	f7ff fdb5 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f006 ff97 	bl	8009204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d6:	f7ff fb3f 	bl	8001958 <main>
  bx lr
 80022da:	4770      	bx	lr
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80022e4:	0800c514 	.word	0x0800c514
  ldr r2, =_sbss
 80022e8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80022ec:	20000a40 	.word	0x20000a40

080022f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_2_IRQHandler>
	...

080022f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_Init+0x28>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_Init+0x28>)
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 f931 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	2000      	movs	r0, #0
 800230c:	f000 f808 	bl	8002320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fc26 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f949 	bl	80025d6 <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 f911 	bl	8002582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	; (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000034 	.word	0x20000034
 8002378:	2000003c 	.word	0x2000003c
 800237c:	20000038 	.word	0x20000038

08002380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_IncTick+0x1c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x20>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_IncTick+0x20>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	2000003c 	.word	0x2000003c
 80023a0:	20000a08 	.word	0x20000a08

080023a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <HAL_GetTick+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000a08 	.word	0x20000a08

080023b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <HAL_ResumeTick+0x18>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_ResumeTick+0x18>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <__NVIC_SetPriorityGrouping>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4906      	ldr	r1, [pc, #24]	; (800246c <__NVIC_EnableIRQ+0x34>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100

08002470 <__NVIC_SetPriority>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	2b00      	cmp	r3, #0
 8002482:	db0a      	blt.n	800249a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	490c      	ldr	r1, [pc, #48]	; (80024bc <__NVIC_SetPriority+0x4c>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	440b      	add	r3, r1
 8002494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002498:	e00a      	b.n	80024b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4908      	ldr	r1, [pc, #32]	; (80024c0 <__NVIC_SetPriority+0x50>)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3b04      	subs	r3, #4
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	761a      	strb	r2, [r3, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <NVIC_EncodePriority>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f1c3 0307 	rsb	r3, r3, #7
 80024de:	2b04      	cmp	r3, #4
 80024e0:	bf28      	it	cs
 80024e2:	2304      	movcs	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d902      	bls.n	80024f4 <NVIC_EncodePriority+0x30>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3b03      	subs	r3, #3
 80024f2:	e000      	b.n	80024f6 <NVIC_EncodePriority+0x32>
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800250c:	f04f 31ff 	mov.w	r1, #4294967295
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	43d9      	mvns	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	4313      	orrs	r3, r2
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <SysTick_Config>:
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f7ff ff90 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff2d 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff42 	bl	800241c <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff90 	bl	80024c4 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5f 	bl	8002470 <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff35 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffa2 	bl	8002528 <SysTick_Config>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002600:	2b02      	cmp	r3, #2
 8002602:	d008      	beq.n	8002616 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2204      	movs	r2, #4
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e020      	b.n	8002658 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020e 	bic.w	r2, r2, #14
 8002624:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002676:	2b02      	cmp	r3, #2
 8002678:	d005      	beq.n	8002686 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2204      	movs	r2, #4
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e051      	b.n	800272a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020e 	bic.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_DMA_Abort_IT+0xd0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d029      	beq.n	8002704 <HAL_DMA_Abort_IT+0xa0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <HAL_DMA_Abort_IT+0xd4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <HAL_DMA_Abort_IT+0x9c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_DMA_Abort_IT+0xd8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d01a      	beq.n	80026fa <HAL_DMA_Abort_IT+0x96>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_DMA_Abort_IT+0xdc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d012      	beq.n	80026f4 <HAL_DMA_Abort_IT+0x90>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_DMA_Abort_IT+0xe0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00a      	beq.n	80026ee <HAL_DMA_Abort_IT+0x8a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <HAL_DMA_Abort_IT+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d102      	bne.n	80026e8 <HAL_DMA_Abort_IT+0x84>
 80026e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026e6:	e00e      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 80026e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ec:	e00b      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 80026ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f2:	e008      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 80026f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f8:	e005      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 80026fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fe:	e002      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 8002700:	2310      	movs	r3, #16
 8002702:	e000      	b.n	8002706 <HAL_DMA_Abort_IT+0xa2>
 8002704:	2301      	movs	r3, #1
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_DMA_Abort_IT+0xe8>)
 8002708:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    } 
  }
  return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40020008 	.word	0x40020008
 8002738:	4002001c 	.word	0x4002001c
 800273c:	40020030 	.word	0x40020030
 8002740:	40020044 	.word	0x40020044
 8002744:	40020058 	.word	0x40020058
 8002748:	4002006c 	.word	0x4002006c
 800274c:	40020000 	.word	0x40020000

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002762:	e169      	b.n	8002a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002764:	2201      	movs	r2, #1
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8158 	bne.w	8002a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a9a      	ldr	r2, [pc, #616]	; (80029f0 <HAL_GPIO_Init+0x2a0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d05e      	beq.n	800284a <HAL_GPIO_Init+0xfa>
 800278c:	4a98      	ldr	r2, [pc, #608]	; (80029f0 <HAL_GPIO_Init+0x2a0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d875      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 8002792:	4a98      	ldr	r2, [pc, #608]	; (80029f4 <HAL_GPIO_Init+0x2a4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d058      	beq.n	800284a <HAL_GPIO_Init+0xfa>
 8002798:	4a96      	ldr	r2, [pc, #600]	; (80029f4 <HAL_GPIO_Init+0x2a4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d86f      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 800279e:	4a96      	ldr	r2, [pc, #600]	; (80029f8 <HAL_GPIO_Init+0x2a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d052      	beq.n	800284a <HAL_GPIO_Init+0xfa>
 80027a4:	4a94      	ldr	r2, [pc, #592]	; (80029f8 <HAL_GPIO_Init+0x2a8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d869      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 80027aa:	4a94      	ldr	r2, [pc, #592]	; (80029fc <HAL_GPIO_Init+0x2ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d04c      	beq.n	800284a <HAL_GPIO_Init+0xfa>
 80027b0:	4a92      	ldr	r2, [pc, #584]	; (80029fc <HAL_GPIO_Init+0x2ac>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d863      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 80027b6:	4a92      	ldr	r2, [pc, #584]	; (8002a00 <HAL_GPIO_Init+0x2b0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d046      	beq.n	800284a <HAL_GPIO_Init+0xfa>
 80027bc:	4a90      	ldr	r2, [pc, #576]	; (8002a00 <HAL_GPIO_Init+0x2b0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d85d      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d82a      	bhi.n	800281c <HAL_GPIO_Init+0xcc>
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d859      	bhi.n	800287e <HAL_GPIO_Init+0x12e>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_GPIO_Init+0x80>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	0800284b 	.word	0x0800284b
 80027d4:	08002825 	.word	0x08002825
 80027d8:	08002837 	.word	0x08002837
 80027dc:	08002879 	.word	0x08002879
 80027e0:	0800287f 	.word	0x0800287f
 80027e4:	0800287f 	.word	0x0800287f
 80027e8:	0800287f 	.word	0x0800287f
 80027ec:	0800287f 	.word	0x0800287f
 80027f0:	0800287f 	.word	0x0800287f
 80027f4:	0800287f 	.word	0x0800287f
 80027f8:	0800287f 	.word	0x0800287f
 80027fc:	0800287f 	.word	0x0800287f
 8002800:	0800287f 	.word	0x0800287f
 8002804:	0800287f 	.word	0x0800287f
 8002808:	0800287f 	.word	0x0800287f
 800280c:	0800287f 	.word	0x0800287f
 8002810:	0800287f 	.word	0x0800287f
 8002814:	0800282d 	.word	0x0800282d
 8002818:	08002841 	.word	0x08002841
 800281c:	4a79      	ldr	r2, [pc, #484]	; (8002a04 <HAL_GPIO_Init+0x2b4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002822:	e02c      	b.n	800287e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	623b      	str	r3, [r7, #32]
          break;
 800282a:	e029      	b.n	8002880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	3304      	adds	r3, #4
 8002832:	623b      	str	r3, [r7, #32]
          break;
 8002834:	e024      	b.n	8002880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	3308      	adds	r3, #8
 800283c:	623b      	str	r3, [r7, #32]
          break;
 800283e:	e01f      	b.n	8002880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	330c      	adds	r3, #12
 8002846:	623b      	str	r3, [r7, #32]
          break;
 8002848:	e01a      	b.n	8002880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002852:	2304      	movs	r3, #4
 8002854:	623b      	str	r3, [r7, #32]
          break;
 8002856:	e013      	b.n	8002880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002860:	2308      	movs	r3, #8
 8002862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	611a      	str	r2, [r3, #16]
          break;
 800286a:	e009      	b.n	8002880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800286c:	2308      	movs	r3, #8
 800286e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	615a      	str	r2, [r3, #20]
          break;
 8002876:	e003      	b.n	8002880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x130>
          break;
 800287e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2bff      	cmp	r3, #255	; 0xff
 8002884:	d801      	bhi.n	800288a <HAL_GPIO_Init+0x13a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	e001      	b.n	800288e <HAL_GPIO_Init+0x13e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d802      	bhi.n	800289c <HAL_GPIO_Init+0x14c>
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x152>
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	3b08      	subs	r3, #8
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	210f      	movs	r1, #15
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	6a39      	ldr	r1, [r7, #32]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80b1 	beq.w	8002a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x2b8>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <HAL_GPIO_Init+0x2b8>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <HAL_GPIO_Init+0x2b8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2bc>)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a40      	ldr	r2, [pc, #256]	; (8002a10 <HAL_GPIO_Init+0x2c0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <HAL_GPIO_Init+0x1ec>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <HAL_GPIO_Init+0x2c4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_GPIO_Init+0x1e8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <HAL_GPIO_Init+0x2c8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_GPIO_Init+0x1e4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <HAL_GPIO_Init+0x2cc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_GPIO_Init+0x1e0>
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002930:	2304      	movs	r3, #4
 8002932:	e004      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002934:	2302      	movs	r3, #2
 8002936:	e002      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_GPIO_Init+0x1ee>
 800293c:	2300      	movs	r3, #0
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	f002 0203 	and.w	r2, r2, #3
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4093      	lsls	r3, r2
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800294e:	492f      	ldr	r1, [pc, #188]	; (8002a0c <HAL_GPIO_Init+0x2bc>)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	492c      	ldr	r1, [pc, #176]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	43db      	mvns	r3, r3
 800297e:	4928      	ldr	r1, [pc, #160]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002980:	4013      	ands	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4922      	ldr	r1, [pc, #136]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	491e      	ldr	r1, [pc, #120]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4918      	ldr	r1, [pc, #96]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	4914      	ldr	r1, [pc, #80]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d021      	beq.n	8002a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
 80029ec:	e021      	b.n	8002a32 <HAL_GPIO_Init+0x2e2>
 80029ee:	bf00      	nop
 80029f0:	10320000 	.word	0x10320000
 80029f4:	10310000 	.word	0x10310000
 80029f8:	10220000 	.word	0x10220000
 80029fc:	10210000 	.word	0x10210000
 8002a00:	10120000 	.word	0x10120000
 8002a04:	10110000 	.word	0x10110000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40010800 	.word	0x40010800
 8002a14:	40010c00 	.word	0x40010c00
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40011400 	.word	0x40011400
 8002a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_GPIO_Init+0x304>)
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <HAL_GPIO_Init+0x304>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	3301      	adds	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f47f ae8e 	bne.w	8002764 <HAL_GPIO_Init+0x14>
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	372c      	adds	r7, #44	; 0x2c
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40010400 	.word	0x40010400

08002a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e001      	b.n	8002a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	807b      	strh	r3, [r7, #2]
 8002a92:	4613      	mov	r3, r2
 8002a94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a96:	787b      	ldrb	r3, [r7, #1]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aa2:	e003      	b.n	8002aac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	041a      	lsls	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fbce 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e272      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8087 	beq.w	8002c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b08:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b14:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x12c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d168      	bne.n	8002c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e24c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x76>
 8002b50:	4b80      	ldr	r3, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7f      	ldr	r2, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e02e      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x98>
 8002b66:	4b7b      	ldr	r3, [pc, #492]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7a      	ldr	r2, [pc, #488]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a77      	ldr	r2, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xbc>
 8002b8a:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002ba4:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff fbee 	bl	80023a4 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fbea 	bl	80023a4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e200      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xe4>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff fbda 	bl	80023a4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff fbd6 	bl	80023a4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1ec      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x10c>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1c0      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4939      	ldr	r1, [pc, #228]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fb8f 	bl	80023a4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7ff fb8b 	bl	80023a4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4927      	ldr	r1, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fb6e 	bl	80023a4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7ff fb6a 	bl	80023a4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e180      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7ff fb4e 	bl	80023a4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7ff fb4a 	bl	80023a4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e160      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f000 fad8 	bl	80032e0 <RCC_Delay>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7ff fb34 	bl	80023a4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3e:	e00f      	b.n	8002d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff fb30 	bl	80023a4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e146      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	42420000 	.word	0x42420000
 8002d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b92      	ldr	r3, [pc, #584]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e9      	bne.n	8002d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a6 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	61d3      	str	r3, [r2, #28]
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7e      	ldr	r2, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff faf1 	bl	80023a4 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7ff faed 	bl	80023a4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e103      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x312>
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e02d      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x334>
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	e01c      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x356>
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a60      	ldr	r2, [pc, #384]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d015      	beq.n	8002e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff faa1 	bl	80023a4 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7ff fa9d 	bl	80023a4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0b1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ee      	beq.n	8002e66 <HAL_RCC_OscConfig+0x37e>
 8002e88:	e014      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7ff fa8b 	bl	80023a4 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7ff fa87 	bl	80023a4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e09b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ee      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d061      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d146      	bne.n	8002f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff fa5b 	bl	80023a4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff fa57 	bl	80023a4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e06d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d108      	bne.n	8002f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4921      	ldr	r1, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a19      	ldr	r1, [r3, #32]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	491b      	ldr	r1, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7ff fa2b 	bl	80023a4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7ff fa27 	bl	80023a4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x46a>
 8002f70:	e035      	b.n	8002fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff fa14 	bl	80023a4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7ff fa10 	bl	80023a4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e026      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x498>
 8002f9e:	e01e      	b.n	8002fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e019      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x500>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d0      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4965      	ldr	r1, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800306a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d040      	beq.n	800310c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e073      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030dc:	f7ff f962 	bl	80023a4 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7ff f95e 	bl	80023a4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e053      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d210      	bcs.n	800313c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1d0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f8c0 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40021000 	.word	0x40021000
 80031b4:	0800c0bc 	.word	0x0800c0bc
 80031b8:	20000034 	.word	0x20000034
 80031bc:	20000038 	.word	0x20000038

080031c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b490      	push	{r4, r7}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_GetSysClockFreq+0xac>)
 80031c8:	1d3c      	adds	r4, r7, #4
 80031ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031d0:	f240 2301 	movw	r3, #513	; 0x201
 80031d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x40>
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x46>
 80031fe:	e02b      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003202:	623b      	str	r3, [r7, #32]
      break;
 8003204:	e02b      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	0c9b      	lsrs	r3, r3, #18
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3328      	adds	r3, #40	; 0x28
 8003210:	443b      	add	r3, r7
 8003212:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003216:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0c5b      	lsrs	r3, r3, #17
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	3328      	adds	r3, #40	; 0x28
 800322e:	443b      	add	r3, r7
 8003230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800323a:	fb03 f202 	mul.w	r2, r3, r2
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	e004      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	623b      	str	r3, [r7, #32]
      break;
 8003256:	e002      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800325a:	623b      	str	r3, [r7, #32]
      break;
 800325c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325e:	6a3b      	ldr	r3, [r7, #32]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3728      	adds	r7, #40	; 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc90      	pop	{r4, r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	0800c0a8 	.word	0x0800c0a8
 8003270:	40021000 	.word	0x40021000
 8003274:	007a1200 	.word	0x007a1200
 8003278:	003d0900 	.word	0x003d0900

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003280:	4b02      	ldr	r3, [pc, #8]	; (800328c <HAL_RCC_GetHCLKFreq+0x10>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000034 	.word	0x20000034

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003294:	f7ff fff2 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	0800c0cc 	.word	0x0800c0cc

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032bc:	f7ff ffde 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	0adb      	lsrs	r3, r3, #11
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	0800c0cc 	.word	0x0800c0cc

080032e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <RCC_Delay+0x34>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <RCC_Delay+0x38>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0a5b      	lsrs	r3, r3, #9
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032fc:	bf00      	nop
  }
  while (Delay --);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	60fa      	str	r2, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f9      	bne.n	80032fc <RCC_Delay+0x1c>
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000034 	.word	0x20000034
 8003318:	10624dd3 	.word	0x10624dd3

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e041      	b.n	80033b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe feba 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fb1c 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_TIM_Base_Start+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_TIM_Base_Start+0x48>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d009      	beq.n	8003404 <HAL_TIM_Base_Start+0x48>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <HAL_TIM_Base_Start+0x8c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_Base_Start+0x48>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_TIM_Base_Start+0x90>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d010      	beq.n	8003438 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	e007      	b.n	8003438 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800

08003450 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10f      	bne.n	8003488 <HAL_TIM_Base_Stop+0x38>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a1a      	ldr	r2, [r3, #32]
 800346e:	f240 4344 	movw	r3, #1092	; 0x444
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_TIM_Base_Stop+0x38>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e03a      	b.n	800352a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIM_Base_Start_IT+0x98>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x58>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x58>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_TIM_Base_Start_IT+0x9c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x58>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIM_Base_Start_IT+0xa0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d111      	bne.n	8003518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d010      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	e007      	b.n	8003528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800

08003540 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10f      	bne.n	8003588 <HAL_TIM_Base_Stop_IT+0x48>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	f240 4344 	movw	r3, #1092	; 0x444
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <HAL_TIM_Base_Stop_IT+0x48>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0202 	mvn.w	r2, #2
 80035c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9b1 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9a4 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f9b3 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f987 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f97a 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f989 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0208 	mvn.w	r2, #8
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f95d 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f950 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f95f 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f933 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f926 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f935 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0201 	mvn.w	r2, #1
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd ff22 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa85 	bl	8003c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8f9 	bl	800396a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0220 	mvn.w	r2, #32
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa50 	bl	8003c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_ConfigClockSource+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0b3      	b.n	800392c <HAL_TIM_ConfigClockSource+0x180>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fc:	d03e      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xd0>
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	f200 8087 	bhi.w	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	f000 8085 	beq.w	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d87f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d01a      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xa2>
 8003818:	2b70      	cmp	r3, #112	; 0x70
 800381a:	d87b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d050      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x116>
 8003820:	2b60      	cmp	r3, #96	; 0x60
 8003822:	d877      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d03c      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003828:	2b50      	cmp	r3, #80	; 0x50
 800382a:	d873      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d058      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x136>
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d86f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d064      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003838:	2b30      	cmp	r3, #48	; 0x30
 800383a:	d86b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d060      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d867      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05c      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003848:	2b10      	cmp	r3, #16
 800384a:	d05a      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800384c:	e062      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f000 f974 	bl	8003b4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003870:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	609a      	str	r2, [r3, #8]
      break;
 800387a:	e04e      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f000 f95d 	bl	8003b4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389e:	609a      	str	r2, [r3, #8]
      break;
 80038a0:	e03b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 f8d4 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2150      	movs	r1, #80	; 0x50
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f92b 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e02b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 f8f2 	bl	8003ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2160      	movs	r1, #96	; 0x60
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f91b 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e01b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 f8b4 	bl	8003a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f90b 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003900:	e00b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f000 f902 	bl	8003b16 <TIM_ITRx_SetConfig>
        break;
 8003912:	e002      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return htim->State;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398a:	b2db      	uxtb	r3, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f023 0210 	bic.w	r2, r3, #16
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	031b      	lsls	r3, r3, #12
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 0307 	orr.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	609a      	str	r2, [r3, #8]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e046      	b.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d009      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10c      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e03f      	b.n	8003cfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe fab6 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fbed 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d130      	bne.n	8003d7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_Transmit_IT+0x26>
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e029      	b.n	8003d80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Transmit_IT+0x38>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e022      	b.n	8003d80 <HAL_UART_Transmit_IT+0x7e>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2221      	movs	r2, #33	; 0x21
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	4613      	mov	r3, r2
 8003d96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d11d      	bne.n	8003de0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Receive_IT+0x26>
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e016      	b.n	8003de2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Receive_IT+0x38>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e00f      	b.n	8003de2 <HAL_UART_Receive_IT+0x58>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f9cf 	bl	800417a <UART_Start_Receive_IT>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x52>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa7f 	bl	800433a <UART_Receive_IT>
      return;
 8003e3c:	e17b      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80b1 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x1bc>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_UART_IRQHandler+0x70>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a6 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_UART_IRQHandler+0x90>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_UART_IRQHandler+0xb0>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0202 	orr.w	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_UART_IRQHandler+0xd0>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00f      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xfa>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_UART_IRQHandler+0xee>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0208 	orr.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 811e 	beq.w	800412c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_UART_IRQHandler+0x11e>
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa18 	bl	800433a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_UART_IRQHandler+0x146>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d031      	beq.n	8003f96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f95a 	bl	80041ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d023      	beq.n	8003f8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d013      	beq.n	8003f86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_UART_IRQHandler+0x350>)
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fb7a 	bl	8002664 <HAL_DMA_Abort_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f80:	4610      	mov	r0, r2
 8003f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00e      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8e3 	bl	8004152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00a      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8df 	bl	8004152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e006      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8db 	bl	8004152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fa2:	e0c3      	b.n	800412c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	bf00      	nop
    return;
 8003fa6:	e0c1      	b.n	800412c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 80a1 	bne.w	80040f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809b 	beq.w	80040f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8095 	beq.w	80040f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04e      	beq.n	800408c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ff8:	8a3b      	ldrh	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8098 	beq.w	8004130 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004004:	8a3a      	ldrh	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	f080 8092 	bcs.w	8004130 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8a3a      	ldrh	r2, [r7, #16]
 8004010:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b20      	cmp	r3, #32
 800401a:	d02b      	beq.n	8004074 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0210 	bic.w	r2, r2, #16
 8004068:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fabd 	bl	80025ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f86d 	bl	8004164 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800408a:	e051      	b.n	8004130 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004094:	b29b      	uxth	r3, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d047      	beq.n	8004134 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040a4:	8a7b      	ldrh	r3, [r7, #18]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e8:	8a7b      	ldrh	r3, [r7, #18]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f839 	bl	8004164 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040f2:	e01f      	b.n	8004134 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_UART_IRQHandler+0x324>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8af 	bl	800426c <UART_Transmit_IT>
    return;
 800410e:	e012      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_UART_IRQHandler+0x34a>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8f0 	bl	800430a <UART_EndTransmit_IT>
    return;
 800412a:	e004      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
    return;
 800412c:	bf00      	nop
 800412e:	e002      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
      return;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
      return;
 8004134:	bf00      	nop
  }
}
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	08004245 	.word	0x08004245

08004140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	; 0x22
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004202:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0210 	bic.w	r2, r2, #16
 800422a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff77 	bl	8004152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b21      	cmp	r3, #33	; 0x21
 800427e:	d13e      	bne.n	80042fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d114      	bne.n	80042b4 <UART_Transmit_IT+0x48>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]
 80042b2:	e008      	b.n	80042c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6211      	str	r1, [r2, #32]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ff08 	bl	8004140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	f040 8099 	bne.w	8004482 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d117      	bne.n	800438a <UART_Receive_IT+0x50>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	b29a      	uxth	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
 8004388:	e026      	b.n	80043d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d007      	beq.n	80043ae <UART_Receive_IT+0x74>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <UART_Receive_IT+0x82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e008      	b.n	80043ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4619      	mov	r1, r3
 80043e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d148      	bne.n	800447e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0220 	bic.w	r2, r2, #32
 80043fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b01      	cmp	r3, #1
 800442a:	d123      	bne.n	8004474 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0210 	bic.w	r2, r2, #16
 8004440:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d10a      	bne.n	8004466 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fe79 	bl	8004164 <HAL_UARTEx_RxEventCallback>
 8004472:	e002      	b.n	800447a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd f9cf 	bl	8001818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e002      	b.n	8004484 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044c6:	f023 030c 	bic.w	r3, r3, #12
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <UART_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe fee0 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	e002      	b.n	8004502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fec8 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8004500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	0119      	lsls	r1, r3, #4
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb2 f2f3 	udiv	r2, r2, r3
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <UART_SetConfig+0x118>)
 800453a:	fba3 0302 	umull	r0, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	4419      	add	r1, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <UART_SetConfig+0x118>)
 8004572:	fba3 0302 	umull	r0, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2064      	movs	r0, #100	; 0x64
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	; 0x32
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <UART_SetConfig+0x118>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	440a      	add	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40013800 	.word	0x40013800
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <output_CRK>:

/* Public functions -------------------------------------------------------- */

//## Output Function CRK
void output_CRK(char failure_ident)  // processed at each CRK edge
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	3b31      	subs	r3, #49	; 0x31
 80045b6:	2b3c      	cmp	r3, #60	; 0x3c
 80045b8:	f200 80b6 	bhi.w	8004728 <output_CRK+0x180>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <output_CRK+0x1c>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	08004729 	.word	0x08004729
 80045c8:	08004729 	.word	0x08004729
 80045cc:	08004729 	.word	0x08004729
 80045d0:	080046b9 	.word	0x080046b9
 80045d4:	08004729 	.word	0x08004729
 80045d8:	080046bf 	.word	0x080046bf
 80045dc:	080046c5 	.word	0x080046c5
 80045e0:	08004729 	.word	0x08004729
 80045e4:	080046d1 	.word	0x080046d1
 80045e8:	08004729 	.word	0x08004729
 80045ec:	08004729 	.word	0x08004729
 80045f0:	08004729 	.word	0x08004729
 80045f4:	08004729 	.word	0x08004729
 80045f8:	08004729 	.word	0x08004729
 80045fc:	08004729 	.word	0x08004729
 8004600:	08004729 	.word	0x08004729
 8004604:	08004729 	.word	0x08004729
 8004608:	08004729 	.word	0x08004729
 800460c:	08004729 	.word	0x08004729
 8004610:	08004729 	.word	0x08004729
 8004614:	08004729 	.word	0x08004729
 8004618:	08004729 	.word	0x08004729
 800461c:	08004729 	.word	0x08004729
 8004620:	08004729 	.word	0x08004729
 8004624:	08004729 	.word	0x08004729
 8004628:	08004729 	.word	0x08004729
 800462c:	08004729 	.word	0x08004729
 8004630:	08004729 	.word	0x08004729
 8004634:	08004729 	.word	0x08004729
 8004638:	08004729 	.word	0x08004729
 800463c:	08004729 	.word	0x08004729
 8004640:	08004729 	.word	0x08004729
 8004644:	08004729 	.word	0x08004729
 8004648:	08004729 	.word	0x08004729
 800464c:	08004729 	.word	0x08004729
 8004650:	08004729 	.word	0x08004729
 8004654:	08004729 	.word	0x08004729
 8004658:	08004729 	.word	0x08004729
 800465c:	08004729 	.word	0x08004729
 8004660:	08004729 	.word	0x08004729
 8004664:	08004729 	.word	0x08004729
 8004668:	08004729 	.word	0x08004729
 800466c:	08004729 	.word	0x08004729
 8004670:	08004729 	.word	0x08004729
 8004674:	08004729 	.word	0x08004729
 8004678:	08004729 	.word	0x08004729
 800467c:	08004729 	.word	0x08004729
 8004680:	08004729 	.word	0x08004729
 8004684:	08004729 	.word	0x08004729
 8004688:	08004729 	.word	0x08004729
 800468c:	08004729 	.word	0x08004729
 8004690:	08004729 	.word	0x08004729
 8004694:	08004729 	.word	0x08004729
 8004698:	08004729 	.word	0x08004729
 800469c:	08004729 	.word	0x08004729
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	08004705 	.word	0x08004705
 80046a8:	0800470b 	.word	0x0800470b
 80046ac:	08004711 	.word	0x08004711
 80046b0:	08004717 	.word	0x08004717
 80046b4:	0800471d 	.word	0x0800471d
        case '3': {
            break;
        }
        case '4':  // CRK_RUN_OUT
        {
            output_CRK_RUN_OUT();
 80046b8:	f000 f970 	bl	800499c <output_CRK_RUN_OUT>
            break;
 80046bc:	e035      	b.n	800472a <output_CRK+0x182>
        }
        case '6':  // CRK_TOOTH_PER
        {
            output_CRK_TOOTH_PER();
 80046be:	f000 fcb5 	bl	800502c <output_CRK_TOOTH_PER>

            break;
 80046c2:	e032      	b.n	800472a <output_CRK+0x182>
        }
        case '7':  // CAM_TOOTH_OFF
        {
            CAM_delay_counter(active_cam_failure);
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <output_CRK+0x18c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f82f 	bl	800572c <CAM_delay_counter>

            break;
 80046ce:	e02c      	b.n	800472a <output_CRK+0x182>
        {
            break;
        }
        case '9':  // CAM_SYN_CRK
        {
            if (active_cam_failure == 2) {
 80046d0:	4b18      	ldr	r3, [pc, #96]	; (8004734 <output_CRK+0x18c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d106      	bne.n	80046e6 <output_CRK+0x13e>
                CAM_delay_counter(0);  // for CAM1
 80046d8:	2000      	movs	r0, #0
 80046da:	f001 f827 	bl	800572c <CAM_delay_counter>
                CAM_delay_counter(1);  // for CAM2
 80046de:	2001      	movs	r0, #1
 80046e0:	f001 f824 	bl	800572c <CAM_delay_counter>
            } else if (active_cam_failure == 1) {
                CAM_delay_counter(1);  // for CAM2
            } else {
                CAM_delay_counter(0);  // for CAM1
            }
            break;
 80046e4:	e021      	b.n	800472a <output_CRK+0x182>
            } else if (active_cam_failure == 1) {
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <output_CRK+0x18c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d103      	bne.n	80046f6 <output_CRK+0x14e>
                CAM_delay_counter(1);  // for CAM2
 80046ee:	2001      	movs	r0, #1
 80046f0:	f001 f81c 	bl	800572c <CAM_delay_counter>
            break;
 80046f4:	e019      	b.n	800472a <output_CRK+0x182>
                CAM_delay_counter(0);  // for CAM1
 80046f6:	2000      	movs	r0, #0
 80046f8:	f001 f818 	bl	800572c <CAM_delay_counter>
            break;
 80046fc:	e015      	b.n	800472a <output_CRK+0x182>
        {
            break;
        }
        case 'h':  // CRK_TOOTH_OFF
        {
            output_CRK_TOOTH_OFF();
 80046fe:	f001 f9f1 	bl	8005ae4 <output_CRK_TOOTH_OFF>
            break;
 8004702:	e012      	b.n	800472a <output_CRK+0x182>
        }
        case 'i':  // CRK_GAP_NOT_DET
        {
            output_CRK_GAP_NOT_DET();
 8004704:	f001 fab0 	bl	8005c68 <output_CRK_GAP_NOT_DET>
            break;
 8004708:	e00f      	b.n	800472a <output_CRK+0x182>
        }
        case 'j':  // SEG_ADP_ER_LIM
        {
            output_SEG_ADP_ER_LIM();
 800470a:	f001 fb45 	bl	8005d98 <output_SEG_ADP_ER_LIM>
            break;
 800470e:	e00c      	b.n	800472a <output_CRK+0x182>
        }
        case 'k':  // CRK_pulse_duration
        {
            output_CRK_pulse_duration();
 8004710:	f001 fca0 	bl	8006054 <output_CRK_pulse_duration>
            break;
 8004714:	e009      	b.n	800472a <output_CRK+0x182>
        }
        case 'l':  // POSN_ENG_STST
        {
            output_POSN_ENG_STST();
 8004716:	f001 fcc3 	bl	80060a0 <output_POSN_ENG_STST>
            break;
 800471a:	e006      	b.n	800472a <output_CRK+0x182>
        }
        case 'm':  // SC_CAM_CRK
        {
            output_SC_CAM_CRK(active_cam_failure);
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <output_CRK+0x18c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f001 fddd 	bl	80062e0 <output_SC_CAM_CRK>
            break;
 8004726:	e000      	b.n	800472a <output_CRK+0x182>
        }
        default:
            break;
 8004728:	bf00      	nop
    }
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000670 	.word	0x20000670

08004738 <output_CAM>:

//## Output Function CAM
void output_CAM(char failure_ident, int cam_id) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
    if ((cam_id == active_cam_failure) || active_cam_failure == 2) {
 8004744:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <output_CAM+0x1cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d004      	beq.n	8004758 <output_CAM+0x20>
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <output_CAM+0x1cc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	f040 80cd 	bne.w	80048f2 <output_CAM+0x1ba>
        switch (failure_ident) {
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	3b30      	subs	r3, #48	; 0x30
 800475c:	2b3d      	cmp	r3, #61	; 0x3d
 800475e:	f200 80c6 	bhi.w	80048ee <output_CAM+0x1b6>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <output_CAM+0x30>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	08004861 	.word	0x08004861
 800476c:	08004869 	.word	0x08004869
 8004770:	08004871 	.word	0x08004871
 8004774:	08004879 	.word	0x08004879
 8004778:	08004881 	.word	0x08004881
 800477c:	08004889 	.word	0x08004889
 8004780:	08004897 	.word	0x08004897
 8004784:	080048ef 	.word	0x080048ef
 8004788:	0800489f 	.word	0x0800489f
 800478c:	080048a7 	.word	0x080048a7
 8004790:	080048ef 	.word	0x080048ef
 8004794:	080048ef 	.word	0x080048ef
 8004798:	080048ef 	.word	0x080048ef
 800479c:	080048ef 	.word	0x080048ef
 80047a0:	080048ef 	.word	0x080048ef
 80047a4:	080048ef 	.word	0x080048ef
 80047a8:	080048ef 	.word	0x080048ef
 80047ac:	080048ef 	.word	0x080048ef
 80047b0:	080048ef 	.word	0x080048ef
 80047b4:	080048ef 	.word	0x080048ef
 80047b8:	080048ef 	.word	0x080048ef
 80047bc:	080048ef 	.word	0x080048ef
 80047c0:	080048ef 	.word	0x080048ef
 80047c4:	080048ef 	.word	0x080048ef
 80047c8:	080048ef 	.word	0x080048ef
 80047cc:	080048ef 	.word	0x080048ef
 80047d0:	080048ef 	.word	0x080048ef
 80047d4:	080048ef 	.word	0x080048ef
 80047d8:	080048ef 	.word	0x080048ef
 80047dc:	080048ef 	.word	0x080048ef
 80047e0:	080048ef 	.word	0x080048ef
 80047e4:	080048ef 	.word	0x080048ef
 80047e8:	080048ef 	.word	0x080048ef
 80047ec:	080048ef 	.word	0x080048ef
 80047f0:	080048ef 	.word	0x080048ef
 80047f4:	080048ef 	.word	0x080048ef
 80047f8:	080048ef 	.word	0x080048ef
 80047fc:	080048ef 	.word	0x080048ef
 8004800:	080048ef 	.word	0x080048ef
 8004804:	080048ef 	.word	0x080048ef
 8004808:	080048ef 	.word	0x080048ef
 800480c:	080048ef 	.word	0x080048ef
 8004810:	080048ef 	.word	0x080048ef
 8004814:	080048ef 	.word	0x080048ef
 8004818:	080048ef 	.word	0x080048ef
 800481c:	080048ef 	.word	0x080048ef
 8004820:	080048ef 	.word	0x080048ef
 8004824:	080048ef 	.word	0x080048ef
 8004828:	080048ef 	.word	0x080048ef
 800482c:	080048ef 	.word	0x080048ef
 8004830:	080048af 	.word	0x080048af
 8004834:	080048ef 	.word	0x080048ef
 8004838:	080048ef 	.word	0x080048ef
 800483c:	080048ef 	.word	0x080048ef
 8004840:	080048b7 	.word	0x080048b7
 8004844:	080048ef 	.word	0x080048ef
 8004848:	080048bf 	.word	0x080048bf
 800484c:	080048c7 	.word	0x080048c7
 8004850:	080048cf 	.word	0x080048cf
 8004854:	080048d7 	.word	0x080048d7
 8004858:	080048df 	.word	0x080048df
 800485c:	080048e7 	.word	0x080048e7
            case '0':  // NO_FAILURE
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f000 f869 	bl	8004938 <output_CAM_no_failure>
                break;
 8004866:	e043      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '1':  // CRK_NO_SIG
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f000 f865 	bl	8004938 <output_CAM_no_failure>
                break;
 800486e:	e03f      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '2':  // CAM_NO_SIG
            {
                output_CAM_no_failure(cam_id);
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f000 f861 	bl	8004938 <output_CAM_no_failure>
                break;
 8004876:	e03b      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '3':  // CRK/CAM_NO_SIG
            {
                output_CAM_no_failure(cam_id);
 8004878:	6838      	ldr	r0, [r7, #0]
 800487a:	f000 f85d 	bl	8004938 <output_CAM_no_failure>
                break;
 800487e:	e037      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '4':  // CRK_RUN_OUT
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f000 f859 	bl	8004938 <output_CAM_no_failure>
                break;
 8004886:	e033      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '5':  // CAM_PER
            {
                output_CAM_no_failure(cam_id);
 8004888:	6838      	ldr	r0, [r7, #0]
 800488a:	f000 f855 	bl	8004938 <output_CAM_no_failure>
                output_CAM_PER(cam_id);
 800488e:	6838      	ldr	r0, [r7, #0]
 8004890:	f000 f95e 	bl	8004b50 <output_CAM_PER>
                break;
 8004894:	e02c      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '6':  // CRK_TOOTH_PER
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8004896:	6838      	ldr	r0, [r7, #0]
 8004898:	f000 f84e 	bl	8004938 <output_CAM_no_failure>
                break;
 800489c:	e028      	b.n	80048f0 <output_CAM+0x1b8>
            {
                break;
            }
            case '8':  // CAM_PAT_ERR
            {
                output_CAM_PAT_ERR(cam_id);
 800489e:	6838      	ldr	r0, [r7, #0]
 80048a0:	f001 fc44 	bl	800612c <output_CAM_PAT_ERR>
                break;
 80048a4:	e024      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case '9':  // CAM_SYN_CRK
            {
                Output_CAM_delay(cam_id);
 80048a6:	6838      	ldr	r0, [r7, #0]
 80048a8:	f000 fbfe 	bl	80050a8 <Output_CAM_delay>
                break;
 80048ac:	e020      	b.n	80048f0 <output_CAM+0x1b8>
            {
                break;
            }
            case 'b':  // CRK_SHO_LEVEL
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 80048ae:	6838      	ldr	r0, [r7, #0]
 80048b0:	f000 f842 	bl	8004938 <output_CAM_no_failure>
                break;
 80048b4:	e01c      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'f':  // CRK_TOOTH_NR
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 80048b6:	6838      	ldr	r0, [r7, #0]
 80048b8:	f000 f83e 	bl	8004938 <output_CAM_no_failure>
                break;
 80048bc:	e018      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'h':  // CRK_TOOTH_OFF
            {
                output_CAM_no_failure(cam_id);
 80048be:	6838      	ldr	r0, [r7, #0]
 80048c0:	f000 f83a 	bl	8004938 <output_CAM_no_failure>
                break;
 80048c4:	e014      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'i':  // CRK_Gap_Not_Det
            {
                output_CAM_no_failure(cam_id);
 80048c6:	6838      	ldr	r0, [r7, #0]
 80048c8:	f000 f836 	bl	8004938 <output_CAM_no_failure>
                break;
 80048cc:	e010      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'j':  // SEG_ADP_ER_LIM
            {
                output_CAM_no_failure(cam_id);
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f000 f832 	bl	8004938 <output_CAM_no_failure>
                break;
 80048d4:	e00c      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'k':  // CRK_pulse_duration
            {
                output_CAM_no_failure(cam_id);
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f000 f82e 	bl	8004938 <output_CAM_no_failure>
                break;
 80048dc:	e008      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'l':  // POSN_ENG_STST
            {
                output_CAM_no_failure(cam_id);
 80048de:	6838      	ldr	r0, [r7, #0]
 80048e0:	f000 f82a 	bl	8004938 <output_CAM_no_failure>
                break;
 80048e4:	e004      	b.n	80048f0 <output_CAM+0x1b8>
            }
            case 'm':  // SC_CAM_CRK
            {
                output_SC_CAM_CRK(cam_id);
 80048e6:	6838      	ldr	r0, [r7, #0]
 80048e8:	f001 fcfa 	bl	80062e0 <output_SC_CAM_CRK>
                break;
 80048ec:	e000      	b.n	80048f0 <output_CAM+0x1b8>
            }
            default:
                break;
 80048ee:	bf00      	nop
        switch (failure_ident) {
 80048f0:	e003      	b.n	80048fa <output_CAM+0x1c2>
        }
    } else {
        output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 80048f2:	6838      	ldr	r0, [r7, #0]
 80048f4:	f000 f820 	bl	8004938 <output_CAM_no_failure>
    }
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000670 	.word	0x20000670

08004908 <output_CRK_no_failure>:
/**
 * @brief This function outputs the CRK signal in its normal state (no failure).
 * This simply consists in reproducing the CRK signal as is.
 *
 */
void output_CRK_no_failure(void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <output_CRK_no_failure+0x28>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <output_CRK_no_failure+0x18>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004914:	2201      	movs	r2, #1
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	4806      	ldr	r0, [pc, #24]	; (8004934 <output_CRK_no_failure+0x2c>)
 800491a:	f7fe f8b4 	bl	8002a86 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    }
}
 800491e:	e004      	b.n	800492a <output_CRK_no_failure+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004920:	2200      	movs	r2, #0
 8004922:	2140      	movs	r1, #64	; 0x40
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <output_CRK_no_failure+0x2c>)
 8004926:	f7fe f8ae 	bl	8002a86 <HAL_GPIO_WritePin>
}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200002ab 	.word	0x200002ab
 8004934:	40010800 	.word	0x40010800

08004938 <output_CAM_no_failure>:

//## Output_CAM no Failure Function
void output_CAM_no_failure(int cam_id) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    if (CAM_signal[cam_id] == true) {
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <output_CAM_no_failure+0x5c>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00f      	beq.n	800496c <output_CAM_no_failure+0x34>
        if (cam_id == 0) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <output_CAM_no_failure+0x28>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004952:	2201      	movs	r2, #1
 8004954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004958:	480f      	ldr	r0, [pc, #60]	; (8004998 <output_CAM_no_failure+0x60>)
 800495a:	f7fe f894 	bl	8002a86 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
        }
    }
}
 800495e:	e014      	b.n	800498a <output_CAM_no_failure+0x52>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004960:	2201      	movs	r2, #1
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	480c      	ldr	r0, [pc, #48]	; (8004998 <output_CAM_no_failure+0x60>)
 8004966:	f7fe f88e 	bl	8002a86 <HAL_GPIO_WritePin>
}
 800496a:	e00e      	b.n	800498a <output_CAM_no_failure+0x52>
        if (cam_id == 0) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <output_CAM_no_failure+0x48>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004972:	2200      	movs	r2, #0
 8004974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004978:	4807      	ldr	r0, [pc, #28]	; (8004998 <output_CAM_no_failure+0x60>)
 800497a:	f7fe f884 	bl	8002a86 <HAL_GPIO_WritePin>
}
 800497e:	e004      	b.n	800498a <output_CAM_no_failure+0x52>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004980:	2200      	movs	r2, #0
 8004982:	2140      	movs	r1, #64	; 0x40
 8004984:	4804      	ldr	r0, [pc, #16]	; (8004998 <output_CAM_no_failure+0x60>)
 8004986:	f7fe f87e 	bl	8002a86 <HAL_GPIO_WritePin>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000660 	.word	0x20000660
 8004998:	40010800 	.word	0x40010800

0800499c <output_CRK_RUN_OUT>:

//### Output CRK: RUN_OUT ###
void output_CRK_RUN_OUT(void) {
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 80049a0:	4b55      	ldr	r3, [pc, #340]	; (8004af8 <output_CRK_RUN_OUT+0x15c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d014      	beq.n	80049d2 <output_CRK_RUN_OUT+0x36>
        if (teeth_count_CRK != number_teeth_between_gaps) {  // count the teeths on th rising edge
 80049a8:	4b54      	ldr	r3, [pc, #336]	; (8004afc <output_CRK_RUN_OUT+0x160>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b54      	ldr	r3, [pc, #336]	; (8004b00 <output_CRK_RUN_OUT+0x164>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <output_CRK_RUN_OUT+0x24>
            teeth_counter_CRK_RUN_OUT = teeth_count_CRK + 1;
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <output_CRK_RUN_OUT+0x160>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e008      	b.n	80049d2 <output_CRK_RUN_OUT+0x36>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {  // if we reched a gap
 80049c0:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <output_CRK_RUN_OUT+0x160>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <output_CRK_RUN_OUT+0x164>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d102      	bne.n	80049d2 <output_CRK_RUN_OUT+0x36>
            teeth_counter_CRK_RUN_OUT = 1;
 80049cc:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
        }
    }

    if (failure_active == true) {                                                                                                 // if failure is active
 80049d2:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <output_CRK_RUN_OUT+0x16c>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d03a      	beq.n	8004a50 <output_CRK_RUN_OUT+0xb4>
        if ((teeth_counter_CRK_RUN_OUT * revolution_CRK) >= (failure_period_CRK_RUN_OUT + angle_to_start_failure_CRK_RUN_OUT)) {  // once we have reached the failure end
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fd00 	bl	80003e4 <__aeabi_ui2d>
 80049e4:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <output_CRK_RUN_OUT+0x170>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f7fb fd75 	bl	80004d8 <__aeabi_dmul>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4614      	mov	r4, r2
 80049f4:	461d      	mov	r5, r3
 80049f6:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <output_CRK_RUN_OUT+0x174>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <output_CRK_RUN_OUT+0x178>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4413      	add	r3, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fcef 	bl	80003e4 <__aeabi_ui2d>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fb ffe9 	bl	80009e4 <__aeabi_dcmpge>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <output_CRK_RUN_OUT+0x8a>
            failure_active = false;
 8004a18:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <output_CRK_RUN_OUT+0x16c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
            failure_passed = true;
 8004a1e:	4b3e      	ldr	r3, [pc, #248]	; (8004b18 <output_CRK_RUN_OUT+0x17c>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
            failure_active = true;
        } else {
        }
        output_CRK_no_failure();
    }
}
 8004a24:	e065      	b.n	8004af2 <output_CRK_RUN_OUT+0x156>
            if (sc_type_CRK_RUN_OUT == 'g') {
 8004a26:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <output_CRK_RUN_OUT+0x180>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b67      	cmp	r3, #103	; 0x67
 8004a2c:	d106      	bne.n	8004a3c <output_CRK_RUN_OUT+0xa0>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);  // set CRK as low
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a34:	483a      	ldr	r0, [pc, #232]	; (8004b20 <output_CRK_RUN_OUT+0x184>)
 8004a36:	f7fe f826 	bl	8002a86 <HAL_GPIO_WritePin>
}
 8004a3a:	e05a      	b.n	8004af2 <output_CRK_RUN_OUT+0x156>
            } else if (sc_type_CRK_RUN_OUT == 'b') {
 8004a3c:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <output_CRK_RUN_OUT+0x180>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b62      	cmp	r3, #98	; 0x62
 8004a42:	d156      	bne.n	8004af2 <output_CRK_RUN_OUT+0x156>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // set CRK as hight
 8004a44:	2201      	movs	r2, #1
 8004a46:	2110      	movs	r1, #16
 8004a48:	4835      	ldr	r0, [pc, #212]	; (8004b20 <output_CRK_RUN_OUT+0x184>)
 8004a4a:	f7fe f81c 	bl	8002a86 <HAL_GPIO_WritePin>
}
 8004a4e:	e050      	b.n	8004af2 <output_CRK_RUN_OUT+0x156>
    } else if (failure_passed == true) {  // once the failure finished have a normal output
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <output_CRK_RUN_OUT+0x17c>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <output_CRK_RUN_OUT+0xda>
        if (teeth_count_CRK == number_teeth_between_gaps) {
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <output_CRK_RUN_OUT+0x160>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <output_CRK_RUN_OUT+0x164>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d102      	bne.n	8004a6a <output_CRK_RUN_OUT+0xce>
            failure_passed = false;
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <output_CRK_RUN_OUT+0x17c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
        teeth_counter_CRK_RUN_OUT = 1;
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
        output_CRK_no_failure();
 8004a70:	f7ff ff4a 	bl	8004908 <output_CRK_no_failure>
}
 8004a74:	e03d      	b.n	8004af2 <output_CRK_RUN_OUT+0x156>
        if ((angle_to_start_failure_CRK_RUN_OUT < (teeth_counter_CRK_RUN_OUT * revolution_CRK)) && ((teeth_counter_CRK_RUN_OUT * revolution_CRK) < (angle_to_start_failure_CRK_RUN_OUT + failure_period_CRK_RUN_OUT))) {  // if we are past the the angle of fairue start and still in the failure period
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <output_CRK_RUN_OUT+0x178>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fcb2 	bl	80003e4 <__aeabi_ui2d>
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fb fcab 	bl	80003e4 <__aeabi_ui2d>
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <output_CRK_RUN_OUT+0x170>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fd20 	bl	80004d8 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fb ff8c 	bl	80009bc <__aeabi_dcmplt>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d021      	beq.n	8004aee <output_CRK_RUN_OUT+0x152>
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <output_CRK_RUN_OUT+0x168>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fc98 	bl	80003e4 <__aeabi_ui2d>
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <output_CRK_RUN_OUT+0x170>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fd0d 	bl	80004d8 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <output_CRK_RUN_OUT+0x178>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <output_CRK_RUN_OUT+0x174>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4413      	add	r3, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb fc87 	bl	80003e4 <__aeabi_ui2d>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb ff6d 	bl	80009bc <__aeabi_dcmplt>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <output_CRK_RUN_OUT+0x152>
            failure_active = true;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <output_CRK_RUN_OUT+0x16c>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
        output_CRK_no_failure();
 8004aee:	f7ff ff0b 	bl	8004908 <output_CRK_no_failure>
}
 8004af2:	bf00      	nop
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200002ab 	.word	0x200002ab
 8004afc:	20000278 	.word	0x20000278
 8004b00:	20000288 	.word	0x20000288
 8004b04:	2000067c 	.word	0x2000067c
 8004b08:	20000674 	.word	0x20000674
 8004b0c:	200002a0 	.word	0x200002a0
 8004b10:	20000684 	.word	0x20000684
 8004b14:	20000680 	.word	0x20000680
 8004b18:	20000677 	.word	0x20000677
 8004b1c:	2000067b 	.word	0x2000067b
 8004b20:	40010800 	.word	0x40010800

08004b24 <CRK_RUN_OUT_reset>:

//### CRK_RUN_OUT_reset ###
void CRK_RUN_OUT_reset(void) {
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
    failure_active = false;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <CRK_RUN_OUT_reset+0x20>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
    failure_passed = false;
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <CRK_RUN_OUT_reset+0x24>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
    period_counter_CRK_RUN_OUT = 0;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <CRK_RUN_OUT_reset+0x28>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000674 	.word	0x20000674
 8004b48:	20000677 	.word	0x20000677
 8004b4c:	20000688 	.word	0x20000688

08004b50 <output_CAM_PER>:

//## Output CAM: CAM_PER
void output_CAM_PER(int cam_id) {
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    if (active_edges_CAM_PER == 'b') {
 8004b58:	4bb2      	ldr	r3, [pc, #712]	; (8004e24 <output_CAM_PER+0x2d4>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b62      	cmp	r3, #98	; 0x62
 8004b5e:	f040 80a9 	bne.w	8004cb4 <output_CAM_PER+0x164>
        if (cam_id == 0) {          // For CAM1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d152      	bne.n	8004c0e <output_CAM_PER+0xbe>
            HAL_TIM_Base_Stop(&htim3); // Enable Timer3 (formerly Timer6 on microchip)
 8004b68:	48af      	ldr	r0, [pc, #700]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004b6a:	f7fe fc71 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004b6e:	4aaf      	ldr	r2, [pc, #700]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b82:	f7fb fdd3 	bl	800072c <__aeabi_ddiv>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	4ba7      	ldr	r3, [pc, #668]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004b94:	f7fb fae8 	bl	8000168 <__aeabi_dsub>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4ba4      	ldr	r3, [pc, #656]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f7fb fdc1 	bl	800072c <__aeabi_ddiv>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	499e      	ldr	r1, [pc, #632]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004bb0:	680c      	ldr	r4, [r1, #0]
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7fb ff51 	bl	8000a5c <__aeabi_d2uiz>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bbe:	4a9b      	ldr	r2, [pc, #620]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bd2:	f7fb fdab 	bl	800072c <__aeabi_ddiv>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004be4:	f7fb fac0 	bl	8000168 <__aeabi_dsub>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4b90      	ldr	r3, [pc, #576]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fd99 	bl	800072c <__aeabi_ddiv>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7fb ff2b 	bl	8000a5c <__aeabi_d2uiz>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a87      	ldr	r2, [pc, #540]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004c0a:	60d3      	str	r3, [r2, #12]
        } else {                    // For CAM2
            HAL_TIM_Base_Stop(&htim4); // Enable Timer4 (formerly Timer7 on microchip)
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
        }
    }
}
 8004c0c:	e1cd      	b.n	8004faa <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4);  // Enable Timer4 (formerly Timer7 on microchip)
 8004c0e:	488a      	ldr	r0, [pc, #552]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004c10:	f7fe fc1e 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004c14:	4a85      	ldr	r2, [pc, #532]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c28:	f7fb fd80 	bl	800072c <__aeabi_ddiv>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b7d      	ldr	r3, [pc, #500]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004c3a:	f7fb fa95 	bl	8000168 <__aeabi_dsub>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4b7b      	ldr	r3, [pc, #492]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f7fb fd6e 	bl	800072c <__aeabi_ddiv>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4978      	ldr	r1, [pc, #480]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004c56:	680c      	ldr	r4, [r1, #0]
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f7fb fefe 	bl	8000a5c <__aeabi_d2uiz>
 8004c60:	4603      	mov	r3, r0
 8004c62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c64:	4a71      	ldr	r2, [pc, #452]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c78:	f7fb fd58 	bl	800072c <__aeabi_ddiv>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	4b69      	ldr	r3, [pc, #420]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004c8a:	f7fb fa6d 	bl	8000168 <__aeabi_dsub>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4b67      	ldr	r3, [pc, #412]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb fd46 	bl	800072c <__aeabi_ddiv>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f7fb fed8 	bl	8000a5c <__aeabi_d2uiz>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a62      	ldr	r2, [pc, #392]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004cb0:	60d3      	str	r3, [r2, #12]
}
 8004cb2:	e17a      	b.n	8004faa <output_CAM_PER+0x45a>
    } else if (active_edges_CAM_PER == 'f' && CAM_signal[cam_id] == false) {
 8004cb4:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <output_CAM_PER+0x2d4>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b66      	cmp	r3, #102	; 0x66
 8004cba:	f040 80c1 	bne.w	8004e40 <output_CAM_PER+0x2f0>
 8004cbe:	4a5f      	ldr	r2, [pc, #380]	; (8004e3c <output_CAM_PER+0x2ec>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	f083 0301 	eor.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80b7 	beq.w	8004e40 <output_CAM_PER+0x2f0>
        if (cam_id == 0) {          // For CAM1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d152      	bne.n	8004d7e <output_CAM_PER+0x22e>
            HAL_TIM_Base_Stop(&htim3);  // Enable Timer3 (formerly Timer6 on microchip)
 8004cd8:	4853      	ldr	r0, [pc, #332]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004cda:	f7fe fbb9 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004cde:	4a53      	ldr	r2, [pc, #332]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cf2:	f7fb fd1b 	bl	800072c <__aeabi_ddiv>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004d04:	f7fb fa30 	bl	8000168 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fd09 	bl	800072c <__aeabi_ddiv>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4942      	ldr	r1, [pc, #264]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004d20:	680c      	ldr	r4, [r1, #0]
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7fb fe99 	bl	8000a5c <__aeabi_d2uiz>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d42:	f7fb fcf3 	bl	800072c <__aeabi_ddiv>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004d54:	f7fb fa08 	bl	8000168 <__aeabi_dsub>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fce1 	bl	800072c <__aeabi_ddiv>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7fb fe73 	bl	8000a5c <__aeabi_d2uiz>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <output_CAM_PER+0x2d8>)
 8004d7a:	60d3      	str	r3, [r2, #12]
        if (cam_id == 0) {          // For CAM1
 8004d7c:	e115      	b.n	8004faa <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4);  // Enable Timer4 (formerly Timer7 on microchip)
 8004d7e:	482e      	ldr	r0, [pc, #184]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004d80:	f7fe fb66 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004d84:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d98:	f7fb fcc8 	bl	800072c <__aeabi_ddiv>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004daa:	f7fb f9dd 	bl	8000168 <__aeabi_dsub>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb fcb6 	bl	800072c <__aeabi_ddiv>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	491c      	ldr	r1, [pc, #112]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004dc6:	680c      	ldr	r4, [r1, #0]
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7fb fe46 	bl	8000a5c <__aeabi_d2uiz>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dd4:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <output_CAM_PER+0x2dc>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de8:	f7fb fca0 	bl	800072c <__aeabi_ddiv>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <output_CAM_PER+0x2e0>)
 8004dfa:	f7fb f9b5 	bl	8000168 <__aeabi_dsub>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <output_CAM_PER+0x2e4>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f7fb fc8e 	bl	800072c <__aeabi_ddiv>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7fb fe20 	bl	8000a5c <__aeabi_d2uiz>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4a06      	ldr	r2, [pc, #24]	; (8004e38 <output_CAM_PER+0x2e8>)
 8004e20:	60d3      	str	r3, [r2, #12]
        if (cam_id == 0) {          // For CAM1
 8004e22:	e0c2      	b.n	8004faa <output_CAM_PER+0x45a>
 8004e24:	2000069c 	.word	0x2000069c
 8004e28:	20000934 	.word	0x20000934
 8004e2c:	200002c0 	.word	0x200002c0
 8004e30:	40140000 	.word	0x40140000
 8004e34:	20000010 	.word	0x20000010
 8004e38:	2000097c 	.word	0x2000097c
 8004e3c:	20000660 	.word	0x20000660
    } else if (active_edges_CAM_PER == 'r' && CAM_signal[cam_id] == true) {
 8004e40:	4b5c      	ldr	r3, [pc, #368]	; (8004fb4 <output_CAM_PER+0x464>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b72      	cmp	r3, #114	; 0x72
 8004e46:	f040 80b0 	bne.w	8004faa <output_CAM_PER+0x45a>
 8004e4a:	4a5b      	ldr	r2, [pc, #364]	; (8004fb8 <output_CAM_PER+0x468>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a9 	beq.w	8004faa <output_CAM_PER+0x45a>
        if (cam_id == 0) {          // For CAM1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d152      	bne.n	8004f04 <output_CAM_PER+0x3b4>
            HAL_TIM_Base_Stop(&htim3);   // Enable Timer3 (formerly Timer6 on microchip)
 8004e5e:	4857      	ldr	r0, [pc, #348]	; (8004fbc <output_CAM_PER+0x46c>)
 8004e60:	f7fe faf6 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004e64:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <output_CAM_PER+0x470>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e78:	f7fb fc58 	bl	800072c <__aeabi_ddiv>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	4b4e      	ldr	r3, [pc, #312]	; (8004fc4 <output_CAM_PER+0x474>)
 8004e8a:	f7fb f96d 	bl	8000168 <__aeabi_dsub>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <output_CAM_PER+0x478>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb fc46 	bl	800072c <__aeabi_ddiv>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4945      	ldr	r1, [pc, #276]	; (8004fbc <output_CAM_PER+0x46c>)
 8004ea6:	680c      	ldr	r4, [r1, #0]
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb fdd6 	bl	8000a5c <__aeabi_d2uiz>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eb4:	4a42      	ldr	r2, [pc, #264]	; (8004fc0 <output_CAM_PER+0x470>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec8:	f7fb fc30 	bl	800072c <__aeabi_ddiv>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <output_CAM_PER+0x474>)
 8004eda:	f7fb f945 	bl	8000168 <__aeabi_dsub>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <output_CAM_PER+0x478>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb fc1e 	bl	800072c <__aeabi_ddiv>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f7fb fdb0 	bl	8000a5c <__aeabi_d2uiz>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <output_CAM_PER+0x46c>)
 8004f00:	60d3      	str	r3, [r2, #12]
}
 8004f02:	e052      	b.n	8004faa <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4); // Enable Timer4 (formerly Timer7 on microchip)
 8004f04:	4831      	ldr	r0, [pc, #196]	; (8004fcc <output_CAM_PER+0x47c>)
 8004f06:	f7fe faa3 	bl	8003450 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004f0a:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <output_CAM_PER+0x470>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f1e:	f7fb fc05 	bl	800072c <__aeabi_ddiv>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <output_CAM_PER+0x474>)
 8004f30:	f7fb f91a 	bl	8000168 <__aeabi_dsub>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <output_CAM_PER+0x478>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f7fb fbf3 	bl	800072c <__aeabi_ddiv>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4920      	ldr	r1, [pc, #128]	; (8004fcc <output_CAM_PER+0x47c>)
 8004f4c:	680c      	ldr	r4, [r1, #0]
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7fb fd83 	bl	8000a5c <__aeabi_d2uiz>
 8004f56:	4603      	mov	r3, r0
 8004f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <output_CAM_PER+0x470>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f6e:	f7fb fbdd 	bl	800072c <__aeabi_ddiv>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <output_CAM_PER+0x474>)
 8004f80:	f7fb f8f2 	bl	8000168 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <output_CAM_PER+0x478>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb fbcb 	bl	800072c <__aeabi_ddiv>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f7fb fd5d 	bl	8000a5c <__aeabi_d2uiz>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <output_CAM_PER+0x47c>)
 8004fa6:	60d3      	str	r3, [r2, #12]
}
 8004fa8:	e7ff      	b.n	8004faa <output_CAM_PER+0x45a>
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	2000069c 	.word	0x2000069c
 8004fb8:	20000660 	.word	0x20000660
 8004fbc:	20000934 	.word	0x20000934
 8004fc0:	200002c0 	.word	0x200002c0
 8004fc4:	40140000 	.word	0x40140000
 8004fc8:	20000010 	.word	0x20000010
 8004fcc:	2000097c 	.word	0x2000097c

08004fd0 <CAM_PER_reset>:

//## CAM_PER_reset
void CAM_PER_reset(void) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if TIM3 is busy
 8004fd4:	4812      	ldr	r0, [pc, #72]	; (8005020 <CAM_PER_reset+0x50>)
 8004fd6:	f7fe fcd1 	bl	800397c <HAL_TIM_Base_GetState>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d106      	bne.n	8004fee <CAM_PER_reset+0x1e>
    {
        HAL_TIM_Base_Stop_IT(&htim3);
 8004fe0:	480f      	ldr	r0, [pc, #60]	; (8005020 <CAM_PER_reset+0x50>)
 8004fe2:	f7fe faad 	bl	8003540 <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_SET_COUNTER(&htim3, 0);  // disable and reset the timer
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <CAM_PER_reset+0x50>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if timer4 is enabled
 8004fee:	480c      	ldr	r0, [pc, #48]	; (8005020 <CAM_PER_reset+0x50>)
 8004ff0:	f7fe fcc4 	bl	800397c <HAL_TIM_Base_GetState>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d106      	bne.n	8005008 <CAM_PER_reset+0x38>
    {
        HAL_TIM_Base_Stop_IT(&htim4);
 8004ffa:	480a      	ldr	r0, [pc, #40]	; (8005024 <CAM_PER_reset+0x54>)
 8004ffc:	f7fe faa0 	bl	8003540 <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_SET_COUNTER(&htim4, 0);  // disable and reset the timer
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <CAM_PER_reset+0x54>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2200      	movs	r2, #0
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    }

	MX_TIM3_Init();
 8005008:	f7fc ffbc 	bl	8001f84 <MX_TIM3_Init>
	MX_TIM4_Init();
 800500c:	f7fd f808 	bl	8002020 <MX_TIM4_Init>
    counter_CAM_PER[0] = 0;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <CAM_PER_reset+0x58>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    counter_CAM_PER[1] = 0;
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <CAM_PER_reset+0x58>)
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000934 	.word	0x20000934
 8005024:	2000097c 	.word	0x2000097c
 8005028:	20000690 	.word	0x20000690

0800502c <output_CRK_TOOTH_PER>:

//## Output CRK: CRK_TOOTH_PER
void output_CRK_TOOTH_PER(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
    if (CRK_signal == false) {
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <output_CRK_TOOTH_PER+0x1c>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f083 0301 	eor.w	r3, r3, #1
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <output_CRK_TOOTH_PER+0x18>
        HAL_TIM_Base_Start(&htim3); // Enable timer3 (formerly Timer6 on microchip)     
 800503e:	4803      	ldr	r0, [pc, #12]	; (800504c <output_CRK_TOOTH_PER+0x20>)
 8005040:	f7fe f9bc 	bl	80033bc <HAL_TIM_Base_Start>
    }
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200002ab 	.word	0x200002ab
 800504c:	20000934 	.word	0x20000934

08005050 <CRK_TOOTH_PER_reset>:

//## CRK_TOOTH_PER_reset
void CRK_TOOTH_PER_reset(void) {
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if timer3 is enabled
 8005054:	4810      	ldr	r0, [pc, #64]	; (8005098 <CRK_TOOTH_PER_reset+0x48>)
 8005056:	f7fe fc91 	bl	800397c <HAL_TIM_Base_GetState>
 800505a:	4603      	mov	r3, r0
 800505c:	2b02      	cmp	r3, #2
 800505e:	d106      	bne.n	800506e <CRK_TOOTH_PER_reset+0x1e>
    {
        HAL_TIM_Base_Stop(&htim3);
 8005060:	480d      	ldr	r0, [pc, #52]	; (8005098 <CRK_TOOTH_PER_reset+0x48>)
 8005062:	f7fe f9f5 	bl	8003450 <HAL_TIM_Base_Stop>
        __HAL_TIM_SET_COUNTER(&htim3,0);// disable and reset the timer
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <CRK_TOOTH_PER_reset+0x48>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

    }

    if (HAL_TIM_Base_GetState(&htim4) == HAL_TIM_STATE_BUSY)  // if timer4 is enabled
 800506e:	480b      	ldr	r0, [pc, #44]	; (800509c <CRK_TOOTH_PER_reset+0x4c>)
 8005070:	f7fe fc84 	bl	800397c <HAL_TIM_Base_GetState>
 8005074:	4603      	mov	r3, r0
 8005076:	2b02      	cmp	r3, #2
 8005078:	d106      	bne.n	8005088 <CRK_TOOTH_PER_reset+0x38>
    {
        HAL_TIM_Base_Stop(&htim4);
 800507a:	4808      	ldr	r0, [pc, #32]	; (800509c <CRK_TOOTH_PER_reset+0x4c>)
 800507c:	f7fe f9e8 	bl	8003450 <HAL_TIM_Base_Stop>
        __HAL_TIM_SET_COUNTER(&htim4,0);  // disable and reset the timer
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <CRK_TOOTH_PER_reset+0x4c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
    }

    failure_set = false;
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <CRK_TOOTH_PER_reset+0x50>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
    failure_active = false;
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <CRK_TOOTH_PER_reset+0x54>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000934 	.word	0x20000934
 800509c:	2000097c 	.word	0x2000097c
 80050a0:	20000676 	.word	0x20000676
 80050a4:	20000674 	.word	0x20000674

080050a8 <Output_CAM_delay>:

//## Output CAM_delay: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void Output_CAM_delay(int cam_id) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
    if (failure_identify == '9') {
 80050b0:	4b79      	ldr	r3, [pc, #484]	; (8005298 <Output_CAM_delay+0x1f0>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b39      	cmp	r3, #57	; 0x39
 80050b6:	f040 80e4 	bne.w	8005282 <Output_CAM_delay+0x1da>
        switch (active_CAM_edges[cam_id]) {
 80050ba:	4a78      	ldr	r2, [pc, #480]	; (800529c <Output_CAM_delay+0x1f4>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b72      	cmp	r3, #114	; 0x72
 80050c4:	d07a      	beq.n	80051bc <Output_CAM_delay+0x114>
 80050c6:	2b72      	cmp	r3, #114	; 0x72
 80050c8:	f300 80d7 	bgt.w	800527a <Output_CAM_delay+0x1d2>
 80050cc:	2b62      	cmp	r3, #98	; 0x62
 80050ce:	d002      	beq.n	80050d6 <Output_CAM_delay+0x2e>
 80050d0:	2b66      	cmp	r3, #102	; 0x66
 80050d2:	d011      	beq.n	80050f8 <Output_CAM_delay+0x50>
 80050d4:	e0d1      	b.n	800527a <Output_CAM_delay+0x1d2>
            case ('b'): {
                if (engine_start == true) {
 80050d6:	4b72      	ldr	r3, [pc, #456]	; (80052a0 <Output_CAM_delay+0x1f8>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <Output_CAM_delay+0x48>
                    HAL_TIM_Base_Start(&htim1); // Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 80050de:	4871      	ldr	r0, [pc, #452]	; (80052a4 <Output_CAM_delay+0x1fc>)
 80050e0:	f7fe f96c 	bl	80033bc <HAL_TIM_Base_Start>
                    timer_active_CAM_delay[cam_id] = true;
 80050e4:	4a70      	ldr	r2, [pc, #448]	; (80052a8 <Output_CAM_delay+0x200>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
                } else {
                    output_CAM_no_failure(cam_id);
                }

                break;
 80050ee:	e0cf      	b.n	8005290 <Output_CAM_delay+0x1e8>
                    output_CAM_no_failure(cam_id);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fc21 	bl	8004938 <output_CAM_no_failure>
                break;
 80050f6:	e0cb      	b.n	8005290 <Output_CAM_delay+0x1e8>
            }
            case ('f'): {
                if (CAM_signal[cam_id] == false) {
 80050f8:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <Output_CAM_delay+0x204>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01b      	beq.n	8005142 <Output_CAM_delay+0x9a>
                    if (engine_start == true) {
 800510a:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <Output_CAM_delay+0x1f8>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <Output_CAM_delay+0x92>
                        HAL_TIM_Base_Start(&htim1);// Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 8005112:	4864      	ldr	r0, [pc, #400]	; (80052a4 <Output_CAM_delay+0x1fc>)
 8005114:	f7fe f952 	bl	80033bc <HAL_TIM_Base_Start>
                        timer_active_CAM_delay[cam_id] = true;
 8005118:	4a63      	ldr	r2, [pc, #396]	; (80052a8 <Output_CAM_delay+0x200>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]

                        if (failure_active == false) {
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <Output_CAM_delay+0x208>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f083 0301 	eor.w	r3, r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80ac 	beq.w	800528a <Output_CAM_delay+0x1e2>
                            failure_active = true;
 8005132:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <Output_CAM_delay+0x208>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
                        }
                    }
                }
                break;
 8005138:	e0a7      	b.n	800528a <Output_CAM_delay+0x1e2>
                        output_CAM_no_failure(cam_id);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fbfc 	bl	8004938 <output_CAM_no_failure>
                break;
 8005140:	e0a3      	b.n	800528a <Output_CAM_delay+0x1e2>
                } else if (CAM_signal[cam_id] == true && failure_active == false) {
 8005142:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <Output_CAM_delay+0x204>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 809d 	beq.w	800528a <Output_CAM_delay+0x1e2>
 8005150:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <Output_CAM_delay+0x208>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8095 	beq.w	800528a <Output_CAM_delay+0x1e2>
                    if (cam_id == 0) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d114      	bne.n	8005190 <Output_CAM_delay+0xe8>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8005166:	210b      	movs	r1, #11
 8005168:	4852      	ldr	r0, [pc, #328]	; (80052b4 <Output_CAM_delay+0x20c>)
 800516a:	f7fd fc75 	bl	8002a58 <HAL_GPIO_ReadPin>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <Output_CAM_delay+0xda>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800517a:	484e      	ldr	r0, [pc, #312]	; (80052b4 <Output_CAM_delay+0x20c>)
 800517c:	f7fd fc83 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 8005180:	e083      	b.n	800528a <Output_CAM_delay+0x1e2>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005182:	2200      	movs	r2, #0
 8005184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005188:	484a      	ldr	r0, [pc, #296]	; (80052b4 <Output_CAM_delay+0x20c>)
 800518a:	f7fd fc7c 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 800518e:	e07c      	b.n	800528a <Output_CAM_delay+0x1e2>
                    } else if (cam_id == 1) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d179      	bne.n	800528a <Output_CAM_delay+0x1e2>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8005196:	2106      	movs	r1, #6
 8005198:	4846      	ldr	r0, [pc, #280]	; (80052b4 <Output_CAM_delay+0x20c>)
 800519a:	f7fd fc5d 	bl	8002a58 <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <Output_CAM_delay+0x108>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2140      	movs	r1, #64	; 0x40
 80051a8:	4842      	ldr	r0, [pc, #264]	; (80052b4 <Output_CAM_delay+0x20c>)
 80051aa:	f7fd fc6c 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 80051ae:	e06c      	b.n	800528a <Output_CAM_delay+0x1e2>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	483f      	ldr	r0, [pc, #252]	; (80052b4 <Output_CAM_delay+0x20c>)
 80051b6:	f7fd fc66 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 80051ba:	e066      	b.n	800528a <Output_CAM_delay+0x1e2>
            }
            case ('r'): {
                if (CAM_signal[cam_id] == true) {
 80051bc:	4a3b      	ldr	r2, [pc, #236]	; (80052ac <Output_CAM_delay+0x204>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4413      	add	r3, r2
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <Output_CAM_delay+0x156>
                    if (engine_start == true) {
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <Output_CAM_delay+0x1f8>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <Output_CAM_delay+0x14e>
                        HAL_TIM_Base_Start(&htim1);  // Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 80051d0:	4834      	ldr	r0, [pc, #208]	; (80052a4 <Output_CAM_delay+0x1fc>)
 80051d2:	f7fe f8f3 	bl	80033bc <HAL_TIM_Base_Start>
                        timer_active_CAM_delay[cam_id] = true;
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <Output_CAM_delay+0x200>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4413      	add	r3, r2
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]

                        if (failure_active == false) {
 80051e0:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <Output_CAM_delay+0x208>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f083 0301 	eor.w	r3, r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04f      	beq.n	800528e <Output_CAM_delay+0x1e6>
                            failure_active = true;
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <Output_CAM_delay+0x208>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
                        }
                    }
                }
                break;
 80051f4:	e04b      	b.n	800528e <Output_CAM_delay+0x1e6>
                        output_CAM_no_failure(cam_id);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fb9e 	bl	8004938 <output_CAM_no_failure>
                break;
 80051fc:	e047      	b.n	800528e <Output_CAM_delay+0x1e6>
                } else if (CAM_signal[cam_id] == false && failure_active == false) {
 80051fe:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <Output_CAM_delay+0x204>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d03e      	beq.n	800528e <Output_CAM_delay+0x1e6>
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <Output_CAM_delay+0x208>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d037      	beq.n	800528e <Output_CAM_delay+0x1e6>
                    if (cam_id == 0) {
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <Output_CAM_delay+0x1a6>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8005224:	210b      	movs	r1, #11
 8005226:	4823      	ldr	r0, [pc, #140]	; (80052b4 <Output_CAM_delay+0x20c>)
 8005228:	f7fd fc16 	bl	8002a58 <HAL_GPIO_ReadPin>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <Output_CAM_delay+0x198>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005232:	2201      	movs	r2, #1
 8005234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005238:	481e      	ldr	r0, [pc, #120]	; (80052b4 <Output_CAM_delay+0x20c>)
 800523a:	f7fd fc24 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 800523e:	e026      	b.n	800528e <Output_CAM_delay+0x1e6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005246:	481b      	ldr	r0, [pc, #108]	; (80052b4 <Output_CAM_delay+0x20c>)
 8005248:	f7fd fc1d 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 800524c:	e01f      	b.n	800528e <Output_CAM_delay+0x1e6>
                    } else if (cam_id == 1) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11c      	bne.n	800528e <Output_CAM_delay+0x1e6>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8005254:	2106      	movs	r1, #6
 8005256:	4817      	ldr	r0, [pc, #92]	; (80052b4 <Output_CAM_delay+0x20c>)
 8005258:	f7fd fbfe 	bl	8002a58 <HAL_GPIO_ReadPin>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <Output_CAM_delay+0x1c6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005262:	2201      	movs	r2, #1
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4813      	ldr	r0, [pc, #76]	; (80052b4 <Output_CAM_delay+0x20c>)
 8005268:	f7fd fc0d 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 800526c:	e00f      	b.n	800528e <Output_CAM_delay+0x1e6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4810      	ldr	r0, [pc, #64]	; (80052b4 <Output_CAM_delay+0x20c>)
 8005274:	f7fd fc07 	bl	8002a86 <HAL_GPIO_WritePin>
                break;
 8005278:	e009      	b.n	800528e <Output_CAM_delay+0x1e6>
            }
            default: {
                output_CAM_no_failure(cam_id);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fb5c 	bl	8004938 <output_CAM_no_failure>
                break;
 8005280:	e006      	b.n	8005290 <Output_CAM_delay+0x1e8>
            }
        }
    } else {
        output_CAM_no_failure(cam_id);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fb58 	bl	8004938 <output_CAM_no_failure>
    }
}
 8005288:	e002      	b.n	8005290 <Output_CAM_delay+0x1e8>
                break;
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <Output_CAM_delay+0x1e8>
                break;
 800528e:	bf00      	nop
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	2000000c 	.word	0x2000000c
 800529c:	200005e0 	.word	0x200005e0
 80052a0:	200002ad 	.word	0x200002ad
 80052a4:	200008a4 	.word	0x200008a4
 80052a8:	20000740 	.word	0x20000740
 80052ac:	20000660 	.word	0x20000660
 80052b0:	20000674 	.word	0x20000674
 80052b4:	40010800 	.word	0x40010800

080052b8 <CAM_delay>:

//## CAM_delay: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void CAM_delay(int cam_id) {
 80052b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
    if (TIM_Soft_Counting) {
 80052c2:	4b90      	ldr	r3, [pc, #576]	; (8005504 <CAM_delay+0x24c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d066      	beq.n	8005398 <CAM_delay+0xe0>
        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 80052ca:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <CAM_delay+0x250>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	4b8e      	ldr	r3, [pc, #568]	; (800550c <CAM_delay+0x254>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a8e      	ldr	r2, [pc, #568]	; (8005510 <CAM_delay+0x258>)
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	f001 f93c 	bl	8006556 <former_teeth_time_calculation>
 80052de:	e9c7 0106 	strd	r0, r1, [r7, #24]
                                                          teeth_count_CRK, number_miss_teeth);
        if (((double)TIM_Soft_GetCounter() / former_teeth_time) * revolution_CRK >= (revolution_CRK / 2.0)) {
 80052e2:	f002 ffab 	bl	800823c <TIM_Soft_GetCounter>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb f88b 	bl	8000404 <__aeabi_i2d>
 80052ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f2:	f7fb fa1b 	bl	800072c <__aeabi_ddiv>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4610      	mov	r0, r2
 80052fc:	4619      	mov	r1, r3
 80052fe:	4b85      	ldr	r3, [pc, #532]	; (8005514 <CAM_delay+0x25c>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f7fb f8e8 	bl	80004d8 <__aeabi_dmul>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	4b80      	ldr	r3, [pc, #512]	; (8005514 <CAM_delay+0x25c>)
 8005312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800531e:	f7fb fa05 	bl	800072c <__aeabi_ddiv>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fb fb5b 	bl	80009e4 <__aeabi_dcmpge>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d031      	beq.n	8005398 <CAM_delay+0xe0>
            if (cam_id == 0) {
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d115      	bne.n	8005366 <CAM_delay+0xae>
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 800533a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800533e:	4876      	ldr	r0, [pc, #472]	; (8005518 <CAM_delay+0x260>)
 8005340:	f7fd fb8a 	bl	8002a58 <HAL_GPIO_ReadPin>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <CAM_delay+0xa0>
                {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800534a:	2200      	movs	r2, #0
 800534c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005350:	4871      	ldr	r0, [pc, #452]	; (8005518 <CAM_delay+0x260>)
 8005352:	f7fd fb98 	bl	8002a86 <HAL_GPIO_WritePin>
 8005356:	e01b      	b.n	8005390 <CAM_delay+0xd8>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005358:	2201      	movs	r2, #1
 800535a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800535e:	486e      	ldr	r0, [pc, #440]	; (8005518 <CAM_delay+0x260>)
 8005360:	f7fd fb91 	bl	8002a86 <HAL_GPIO_WritePin>
 8005364:	e014      	b.n	8005390 <CAM_delay+0xd8>
                }
            } else if (cam_id == 1) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d111      	bne.n	8005390 <CAM_delay+0xd8>
                if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_SET) {
 800536c:	2106      	movs	r1, #6
 800536e:	486a      	ldr	r0, [pc, #424]	; (8005518 <CAM_delay+0x260>)
 8005370:	f7fd fb72 	bl	8002a58 <HAL_GPIO_ReadPin>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <CAM_delay+0xce>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800537a:	2200      	movs	r2, #0
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	4866      	ldr	r0, [pc, #408]	; (8005518 <CAM_delay+0x260>)
 8005380:	f7fd fb81 	bl	8002a86 <HAL_GPIO_WritePin>
 8005384:	e004      	b.n	8005390 <CAM_delay+0xd8>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005386:	2201      	movs	r2, #1
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	4863      	ldr	r0, [pc, #396]	; (8005518 <CAM_delay+0x260>)
 800538c:	f7fd fb7b 	bl	8002a86 <HAL_GPIO_WritePin>
                }
            }
            TIM_Soft_Stop();
 8005390:	f002 fefc 	bl	800818c <TIM_Soft_Stop>
            TIM_Soft_Reset();
 8005394:	f002 ff38 	bl	8008208 <TIM_Soft_Reset>
        }
    }

    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8005398:	4a60      	ldr	r2, [pc, #384]	; (800551c <CAM_delay+0x264>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8095 	beq.w	80054d0 <CAM_delay+0x218>
 80053a6:	4a5e      	ldr	r2, [pc, #376]	; (8005520 <CAM_delay+0x268>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 808e 	bne.w	80054d0 <CAM_delay+0x218>
        interrupt_check_CAM_delay[cam_id] = false;
 80053b4:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <CAM_delay+0x26c>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]

        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 80053be:	4b52      	ldr	r3, [pc, #328]	; (8005508 <CAM_delay+0x250>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	4b51      	ldr	r3, [pc, #324]	; (800550c <CAM_delay+0x254>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a51      	ldr	r2, [pc, #324]	; (8005510 <CAM_delay+0x258>)
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f001 f8c2 	bl	8006556 <former_teeth_time_calculation>
 80053d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
                                                          teeth_count_CRK, number_miss_teeth);

        if (((double)__HAL_TIM_GetCounter(&htim1) / former_teeth_time) * revolution_CRK >= (delay_angle_CAM_delay * delay_factor_CAM_delay)) {
 80053d6:	4b54      	ldr	r3, [pc, #336]	; (8005528 <CAM_delay+0x270>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fb f801 	bl	80003e4 <__aeabi_ui2d>
 80053e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053e6:	f7fb f9a1 	bl	800072c <__aeabi_ddiv>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	4b48      	ldr	r3, [pc, #288]	; (8005514 <CAM_delay+0x25c>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fb f86e 	bl	80004d8 <__aeabi_dmul>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4b49      	ldr	r3, [pc, #292]	; (800552c <CAM_delay+0x274>)
 8005406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <CAM_delay+0x278>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f862 	bl	80004d8 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4620      	mov	r0, r4
 800541a:	4629      	mov	r1, r5
 800541c:	f7fb fae2 	bl	80009e4 <__aeabi_dcmpge>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d100      	bne.n	8005428 <CAM_delay+0x170>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8005426:	e162      	b.n	80056ee <CAM_delay+0x436>
            HAL_TIM_Base_Start(&htim1);
 8005428:	483f      	ldr	r0, [pc, #252]	; (8005528 <CAM_delay+0x270>)
 800542a:	f7fd ffc7 	bl	80033bc <HAL_TIM_Base_Start>
            __HAL_TIM_SET_COUNTER(&htim1, 0); 
 800542e:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <CAM_delay+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
            timer_active_CAM_delay[cam_id] = false;
 8005436:	4a39      	ldr	r2, [pc, #228]	; (800551c <CAM_delay+0x264>)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]

            if (interrupt_check_CAM_delay[cam_id] == false) {
 8005440:	4a38      	ldr	r2, [pc, #224]	; (8005524 <CAM_delay+0x26c>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f083 0301 	eor.w	r3, r3, #1
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 814d 	beq.w	80056ee <CAM_delay+0x436>
                if (cam_id == 0) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d114      	bne.n	8005484 <CAM_delay+0x1cc>
                    if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 800545a:	210b      	movs	r1, #11
 800545c:	482e      	ldr	r0, [pc, #184]	; (8005518 <CAM_delay+0x260>)
 800545e:	f7fd fafb 	bl	8002a58 <HAL_GPIO_ReadPin>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <CAM_delay+0x1be>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005468:	2200      	movs	r2, #0
 800546a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800546e:	482a      	ldr	r0, [pc, #168]	; (8005518 <CAM_delay+0x260>)
 8005470:	f7fd fb09 	bl	8002a86 <HAL_GPIO_WritePin>
 8005474:	e01b      	b.n	80054ae <CAM_delay+0x1f6>
                    } else {
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005476:	2201      	movs	r2, #1
 8005478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800547c:	4826      	ldr	r0, [pc, #152]	; (8005518 <CAM_delay+0x260>)
 800547e:	f7fd fb02 	bl	8002a86 <HAL_GPIO_WritePin>
 8005482:	e014      	b.n	80054ae <CAM_delay+0x1f6>
                    };
                } else if (cam_id == 1) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d111      	bne.n	80054ae <CAM_delay+0x1f6>
                    if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 800548a:	2106      	movs	r1, #6
 800548c:	4822      	ldr	r0, [pc, #136]	; (8005518 <CAM_delay+0x260>)
 800548e:	f7fd fae3 	bl	8002a58 <HAL_GPIO_ReadPin>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <CAM_delay+0x1ec>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8005498:	2200      	movs	r2, #0
 800549a:	2140      	movs	r1, #64	; 0x40
 800549c:	481e      	ldr	r0, [pc, #120]	; (8005518 <CAM_delay+0x260>)
 800549e:	f7fd faf2 	bl	8002a86 <HAL_GPIO_WritePin>
 80054a2:	e004      	b.n	80054ae <CAM_delay+0x1f6>
                    } else {
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80054a4:	2201      	movs	r2, #1
 80054a6:	2140      	movs	r1, #64	; 0x40
 80054a8:	481b      	ldr	r0, [pc, #108]	; (8005518 <CAM_delay+0x260>)
 80054aa:	f7fd faec 	bl	8002a86 <HAL_GPIO_WritePin>
                    };
                }

                if (active_CAM_edges[cam_id] == 'r' || active_CAM_edges[cam_id] == 'f') {
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <CAM_delay+0x27c>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b72      	cmp	r3, #114	; 0x72
 80054b8:	d006      	beq.n	80054c8 <CAM_delay+0x210>
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <CAM_delay+0x27c>)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b66      	cmp	r3, #102	; 0x66
 80054c4:	f040 8113 	bne.w	80056ee <CAM_delay+0x436>
                    HAL_TIM_Base_Start(&htim1);
 80054c8:	4817      	ldr	r0, [pc, #92]	; (8005528 <CAM_delay+0x270>)
 80054ca:	f7fd ff77 	bl	80033bc <HAL_TIM_Base_Start>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 80054ce:	e10e      	b.n	80056ee <CAM_delay+0x436>
                }
            }
        }
    } else if (number_processing_edges_CAM_delay[cam_id] > 0) {
 80054d0:	4a13      	ldr	r2, [pc, #76]	; (8005520 <CAM_delay+0x268>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 810d 	beq.w	80056f8 <CAM_delay+0x440>
        int i = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
        int count = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	623b      	str	r3, [r7, #32]

        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <CAM_delay+0x250>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <CAM_delay+0x254>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a07      	ldr	r2, [pc, #28]	; (8005510 <CAM_delay+0x258>)
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	f001 f82e 	bl	8006556 <former_teeth_time_calculation>
 80054fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
                                                          teeth_count_CRK, number_miss_teeth);

        for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
 8005502:	e0ed      	b.n	80056e0 <CAM_delay+0x428>
 8005504:	20000a28 	.word	0x20000a28
 8005508:	2000026c 	.word	0x2000026c
 800550c:	20000278 	.word	0x20000278
 8005510:	20000238 	.word	0x20000238
 8005514:	200002a0 	.word	0x200002a0
 8005518:	40010800 	.word	0x40010800
 800551c:	20000740 	.word	0x20000740
 8005520:	200006a0 	.word	0x200006a0
 8005524:	20000744 	.word	0x20000744
 8005528:	200008a4 	.word	0x200008a4
 800552c:	20000738 	.word	0x20000738
 8005530:	20000018 	.word	0x20000018
 8005534:	200005e0 	.word	0x200005e0
            if (count == number_processing_edges_CAM_delay[cam_id]) {
 8005538:	4a72      	ldr	r2, [pc, #456]	; (8005704 <CAM_delay+0x44c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	429a      	cmp	r2, r3
 8005544:	f000 80d5 	beq.w	80056f2 <CAM_delay+0x43a>
                break;
            }

            if (shift_counter_CAM_delay[cam_id][i] != 0) {
 8005548:	496f      	ldr	r1, [pc, #444]	; (8005708 <CAM_delay+0x450>)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4413      	add	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	4413      	add	r3, r2
 8005558:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80bc 	beq.w	80056da <CAM_delay+0x422>
                if (angle_to_edge_CAM_delay[cam_id][i] + ((double)(shift_counter_CAM_delay[cam_id][i] - 1) + ((double)(TIM_Soft_GetCounter() + timer_overflow_CRK * (unsigned long)(TIM2->ARR))) / former_teeth_time) * revolution_CRK >= (delay_angle_CAM_delay * delay_factor_CAM_delay))  // Aurait été plus propre avec un getAutoreload
 8005562:	496a      	ldr	r1, [pc, #424]	; (800570c <CAM_delay+0x454>)
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005570:	4413      	add	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	440b      	add	r3, r1
 8005576:	e9d3 4500 	ldrd	r4, r5, [r3]
 800557a:	4963      	ldr	r1, [pc, #396]	; (8005708 <CAM_delay+0x450>)
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	4413      	add	r3, r2
 800558a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800558e:	3b01      	subs	r3, #1
 8005590:	4618      	mov	r0, r3
 8005592:	f7fa ff27 	bl	80003e4 <__aeabi_ui2d>
 8005596:	4680      	mov	r8, r0
 8005598:	4689      	mov	r9, r1
 800559a:	f002 fe4f 	bl	800823c <TIM_Soft_GetCounter>
 800559e:	4603      	mov	r3, r0
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a59      	ldr	r2, [pc, #356]	; (8005710 <CAM_delay+0x458>)
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	440b      	add	r3, r1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fa ff16 	bl	80003e4 <__aeabi_ui2d>
 80055b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055bc:	f7fb f8b6 	bl	800072c <__aeabi_ddiv>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4640      	mov	r0, r8
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fa fdd0 	bl	800016c <__adddf3>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <CAM_delay+0x45c>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4620      	mov	r0, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	f7fa fdc1 	bl	800016c <__adddf3>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	461d      	mov	r5, r3
 80055f2:	4b49      	ldr	r3, [pc, #292]	; (8005718 <CAM_delay+0x460>)
 80055f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055f8:	4b48      	ldr	r3, [pc, #288]	; (800571c <CAM_delay+0x464>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa ff6b 	bl	80004d8 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fb f9eb 	bl	80009e4 <__aeabi_dcmpge>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05f      	beq.n	80056d4 <CAM_delay+0x41c>
                {
                    shift_counter_CAM_delay[cam_id][i] = 0;
 8005614:	493c      	ldr	r1, [pc, #240]	; (8005708 <CAM_delay+0x450>)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4413      	add	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	4413      	add	r3, r2
 8005624:	2200      	movs	r2, #0
 8005626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    angle_to_edge_CAM_delay[cam_id][i] = 0;
 800562a:	4938      	ldr	r1, [pc, #224]	; (800570c <CAM_delay+0x454>)
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4419      	add	r1, r3
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9c1 2300 	strd	r2, r3, [r1]
                    number_processing_edges_CAM_delay[cam_id]--;
 800564a:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <CAM_delay+0x44c>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	492b      	ldr	r1, [pc, #172]	; (8005704 <CAM_delay+0x44c>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (cam_id == 0) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d114      	bne.n	800568c <CAM_delay+0x3d4>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8005662:	210b      	movs	r1, #11
 8005664:	482e      	ldr	r0, [pc, #184]	; (8005720 <CAM_delay+0x468>)
 8005666:	f7fd f9f7 	bl	8002a58 <HAL_GPIO_ReadPin>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <CAM_delay+0x3c6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005676:	482a      	ldr	r0, [pc, #168]	; (8005720 <CAM_delay+0x468>)
 8005678:	f7fd fa05 	bl	8002a86 <HAL_GPIO_WritePin>
 800567c:	e01b      	b.n	80056b6 <CAM_delay+0x3fe>
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005684:	4826      	ldr	r0, [pc, #152]	; (8005720 <CAM_delay+0x468>)
 8005686:	f7fd f9fe 	bl	8002a86 <HAL_GPIO_WritePin>
 800568a:	e014      	b.n	80056b6 <CAM_delay+0x3fe>
                        };
                    } else if (cam_id == 1) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d111      	bne.n	80056b6 <CAM_delay+0x3fe>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8005692:	2106      	movs	r1, #6
 8005694:	4822      	ldr	r0, [pc, #136]	; (8005720 <CAM_delay+0x468>)
 8005696:	f7fd f9df 	bl	8002a58 <HAL_GPIO_ReadPin>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <CAM_delay+0x3f4>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80056a0:	2200      	movs	r2, #0
 80056a2:	2140      	movs	r1, #64	; 0x40
 80056a4:	481e      	ldr	r0, [pc, #120]	; (8005720 <CAM_delay+0x468>)
 80056a6:	f7fd f9ee 	bl	8002a86 <HAL_GPIO_WritePin>
 80056aa:	e004      	b.n	80056b6 <CAM_delay+0x3fe>
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80056ac:	2201      	movs	r2, #1
 80056ae:	2140      	movs	r1, #64	; 0x40
 80056b0:	481b      	ldr	r0, [pc, #108]	; (8005720 <CAM_delay+0x468>)
 80056b2:	f7fd f9e8 	bl	8002a86 <HAL_GPIO_WritePin>
                        };
                    }

                    if (active_CAM_edges[cam_id] == 'r' || active_CAM_edges[cam_id] == 'f') {
 80056b6:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <CAM_delay+0x46c>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b72      	cmp	r3, #114	; 0x72
 80056c0:	d005      	beq.n	80056ce <CAM_delay+0x416>
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <CAM_delay+0x46c>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b66      	cmp	r3, #102	; 0x66
 80056cc:	d113      	bne.n	80056f6 <CAM_delay+0x43e>
                        TIM_Soft_Start();
 80056ce:	f002 fd47 	bl	8008160 <TIM_Soft_Start>
                    }

                    break;
 80056d2:	e010      	b.n	80056f6 <CAM_delay+0x43e>
                }

                count++;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	3301      	adds	r3, #1
 80056d8:	623b      	str	r3, [r7, #32]
        for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	3301      	adds	r3, #1
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <CAM_delay+0x470>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e6:	429a      	cmp	r2, r3
 80056e8:	f6ff af26 	blt.w	8005538 <CAM_delay+0x280>
            }
        }
    }
}
 80056ec:	e004      	b.n	80056f8 <CAM_delay+0x440>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <CAM_delay+0x440>
                break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <CAM_delay+0x440>
                    break;
 80056f6:	bf00      	nop
}
 80056f8:	bf00      	nop
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005702:	bf00      	nop
 8005704:	200006a0 	.word	0x200006a0
 8005708:	200006a8 	.word	0x200006a8
 800570c:	200006d8 	.word	0x200006d8
 8005710:	20000274 	.word	0x20000274
 8005714:	200002a0 	.word	0x200002a0
 8005718:	20000738 	.word	0x20000738
 800571c:	20000018 	.word	0x20000018
 8005720:	40010800 	.word	0x40010800
 8005724:	200005e0 	.word	0x200005e0
 8005728:	0800c0b8 	.word	0x0800c0b8

0800572c <CAM_delay_counter>:

//## CAM_delay_counter: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void CAM_delay_counter(int cam_id) {
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
    if ((failure_identify == '9') && CRK_signal == false) {
 8005734:	4ba4      	ldr	r3, [pc, #656]	; (80059c8 <CAM_delay_counter+0x29c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b39      	cmp	r3, #57	; 0x39
 800573a:	f040 8140 	bne.w	80059be <CAM_delay_counter+0x292>
 800573e:	4ba3      	ldr	r3, [pc, #652]	; (80059cc <CAM_delay_counter+0x2a0>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f083 0301 	eor.w	r3, r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8138 	beq.w	80059be <CAM_delay_counter+0x292>
        interrupt_check_CAM_delay[cam_id] = true;
 800574e:	4aa0      	ldr	r2, [pc, #640]	; (80059d0 <CAM_delay_counter+0x2a4>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]

        if (timer_active_CAM_delay[cam_id] == true) {
 8005758:	4a9e      	ldr	r2, [pc, #632]	; (80059d4 <CAM_delay_counter+0x2a8>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80cb 	beq.w	80058fc <CAM_delay_counter+0x1d0>
            int i = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
            int count = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]

            if (number_processing_edges_CAM_delay[cam_id] != 0) {
 800576e:	4a9a      	ldr	r2, [pc, #616]	; (80059d8 <CAM_delay_counter+0x2ac>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d056      	beq.n	8005828 <CAM_delay_counter+0xfc>
                for (i = 0; i < edges_beetween_shift_CAM_delay; i++)  // edges_beetween_shift_CAM_delay = 6
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e04c      	b.n	800581a <CAM_delay_counter+0xee>
                {
                    if (count == number_processing_edges_CAM_delay[cam_id]) {
 8005780:	4a95      	ldr	r2, [pc, #596]	; (80059d8 <CAM_delay_counter+0x2ac>)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	429a      	cmp	r2, r3
 800578c:	d04b      	beq.n	8005826 <CAM_delay_counter+0xfa>
                        break;
                    }

                    if (shift_counter_CAM_delay[cam_id][i] != 0) {
 800578e:	4993      	ldr	r1, [pc, #588]	; (80059dc <CAM_delay_counter+0x2b0>)
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d036      	beq.n	8005814 <CAM_delay_counter+0xe8>
                        if (teeth_count_CRK == number_teeth_between_gaps) {
 80057a6:	4b8e      	ldr	r3, [pc, #568]	; (80059e0 <CAM_delay_counter+0x2b4>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b8e      	ldr	r3, [pc, #568]	; (80059e4 <CAM_delay_counter+0x2b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d118      	bne.n	80057e4 <CAM_delay_counter+0xb8>
                            shift_counter_CAM_delay[cam_id][i] =
                                shift_counter_CAM_delay[cam_id][i] + number_miss_teeth + 1;
 80057b2:	498a      	ldr	r1, [pc, #552]	; (80059dc <CAM_delay_counter+0x2b0>)
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057c6:	4a88      	ldr	r2, [pc, #544]	; (80059e8 <CAM_delay_counter+0x2bc>)
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	1c59      	adds	r1, r3, #1
                            shift_counter_CAM_delay[cam_id][i] =
 80057ce:	4883      	ldr	r0, [pc, #524]	; (80059dc <CAM_delay_counter+0x2b0>)
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80057e2:	e014      	b.n	800580e <CAM_delay_counter+0xe2>
                        } else {
                            shift_counter_CAM_delay[cam_id][i]++;
 80057e4:	497d      	ldr	r1, [pc, #500]	; (80059dc <CAM_delay_counter+0x2b0>)
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4413      	add	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	4878      	ldr	r0, [pc, #480]	; (80059dc <CAM_delay_counter+0x2b0>)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        }

                        count++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
                for (i = 0; i < edges_beetween_shift_CAM_delay; i++)  // edges_beetween_shift_CAM_delay = 6
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	4b74      	ldr	r3, [pc, #464]	; (80059ec <CAM_delay_counter+0x2c0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	dbad      	blt.n	8005780 <CAM_delay_counter+0x54>
 8005824:	e000      	b.n	8005828 <CAM_delay_counter+0xfc>
                        break;
 8005826:	bf00      	nop
                    }
                }
            }

            i = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]

            double former_teeth_time;
            former_teeth_time = former_teeth_time_calculation_output(
 800582c:	4b70      	ldr	r3, [pc, #448]	; (80059f0 <CAM_delay_counter+0x2c4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	4b6b      	ldr	r3, [pc, #428]	; (80059e0 <CAM_delay_counter+0x2b4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6c      	ldr	r2, [pc, #432]	; (80059e8 <CAM_delay_counter+0x2bc>)
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	f000 feb2 	bl	80065a4 <former_teeth_time_calculation_output>
 8005840:	e9c7 0102 	strd	r0, r1, [r7, #8]
                T_TOOTH_RAW, teeth_count_CRK, number_miss_teeth);

            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e052      	b.n	80058f0 <CAM_delay_counter+0x1c4>
                if (shift_counter_CAM_delay[cam_id][i] == 0) {
 800584a:	4964      	ldr	r1, [pc, #400]	; (80059dc <CAM_delay_counter+0x2b0>)
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4413      	add	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d143      	bne.n	80058ea <CAM_delay_counter+0x1be>
                    shift_counter_CAM_delay[cam_id][i] = 1;
 8005862:	495e      	ldr	r1, [pc, #376]	; (80059dc <CAM_delay_counter+0x2b0>)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	2201      	movs	r2, #1
 8005874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    angle_to_edge_CAM_delay[cam_id][i] =
                        ((double)(__HAL_TIM_GET_COUNTER(&htim1)) / former_teeth_time) * revolution_CRK;
 8005878:	4b5e      	ldr	r3, [pc, #376]	; (80059f4 <CAM_delay_counter+0x2c8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	4618      	mov	r0, r3
 8005880:	f7fa fdb0 	bl	80003e4 <__aeabi_ui2d>
 8005884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005888:	f7fa ff50 	bl	800072c <__aeabi_ddiv>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <CAM_delay_counter+0x2cc>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fe1d 	bl	80004d8 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
                    angle_to_edge_CAM_delay[cam_id][i] =
 80058a6:	4c55      	ldr	r4, [pc, #340]	; (80059fc <CAM_delay_counter+0x2d0>)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4423      	add	r3, r4
 80058ba:	e9c3 0100 	strd	r0, r1, [r3]
                    HAL_TIM_Base_Stop(&htim1);
 80058be:	484d      	ldr	r0, [pc, #308]	; (80059f4 <CAM_delay_counter+0x2c8>)
 80058c0:	f7fd fdc6 	bl	8003450 <HAL_TIM_Base_Stop>
                    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <CAM_delay_counter+0x2c8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
                    timer_active_CAM_delay[cam_id] = false;
 80058cc:	4a41      	ldr	r2, [pc, #260]	; (80059d4 <CAM_delay_counter+0x2a8>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4413      	add	r3, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
                    number_processing_edges_CAM_delay[cam_id]++;
 80058d6:	4a40      	ldr	r2, [pc, #256]	; (80059d8 <CAM_delay_counter+0x2ac>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	493d      	ldr	r1, [pc, #244]	; (80059d8 <CAM_delay_counter+0x2ac>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    break;
 80058e8:	e069      	b.n	80059be <CAM_delay_counter+0x292>
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <CAM_delay_counter+0x2c0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	dba7      	blt.n	800584a <CAM_delay_counter+0x11e>
                    count++;
                }
            }
        }
    }
}
 80058fa:	e060      	b.n	80059be <CAM_delay_counter+0x292>
        } else if (number_processing_edges_CAM_delay[cam_id] != 0) {
 80058fc:	4a36      	ldr	r2, [pc, #216]	; (80059d8 <CAM_delay_counter+0x2ac>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05a      	beq.n	80059be <CAM_delay_counter+0x292>
            int count = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
            int i = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e04c      	b.n	80059b0 <CAM_delay_counter+0x284>
                if (count == number_processing_edges_CAM_delay[cam_id]) {
 8005916:	4a30      	ldr	r2, [pc, #192]	; (80059d8 <CAM_delay_counter+0x2ac>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	429a      	cmp	r2, r3
 8005922:	d04b      	beq.n	80059bc <CAM_delay_counter+0x290>
                if (shift_counter_CAM_delay[cam_id][i] != 0) {
 8005924:	492d      	ldr	r1, [pc, #180]	; (80059dc <CAM_delay_counter+0x2b0>)
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d036      	beq.n	80059aa <CAM_delay_counter+0x27e>
                    if (teeth_count_CRK == number_teeth_between_gaps) {
 800593c:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <CAM_delay_counter+0x2b4>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <CAM_delay_counter+0x2b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d118      	bne.n	800597a <CAM_delay_counter+0x24e>
                            shift_counter_CAM_delay[cam_id][i] + number_miss_teeth + 1;
 8005948:	4924      	ldr	r1, [pc, #144]	; (80059dc <CAM_delay_counter+0x2b0>)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800595c:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <CAM_delay_counter+0x2bc>)
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	4413      	add	r3, r2
 8005962:	1c59      	adds	r1, r3, #1
                        shift_counter_CAM_delay[cam_id][i] =
 8005964:	481d      	ldr	r0, [pc, #116]	; (80059dc <CAM_delay_counter+0x2b0>)
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005978:	e014      	b.n	80059a4 <CAM_delay_counter+0x278>
                        shift_counter_CAM_delay[cam_id][i]++;
 800597a:	4918      	ldr	r1, [pc, #96]	; (80059dc <CAM_delay_counter+0x2b0>)
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4413      	add	r3, r2
 800598a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	4812      	ldr	r0, [pc, #72]	; (80059dc <CAM_delay_counter+0x2b0>)
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    count++;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	3301      	adds	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3301      	adds	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <CAM_delay_counter+0x2c0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	dbad      	blt.n	8005916 <CAM_delay_counter+0x1ea>
}
 80059ba:	e000      	b.n	80059be <CAM_delay_counter+0x292>
                    break;
 80059bc:	bf00      	nop
}
 80059be:	bf00      	nop
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c
 80059cc:	200002ab 	.word	0x200002ab
 80059d0:	20000744 	.word	0x20000744
 80059d4:	20000740 	.word	0x20000740
 80059d8:	200006a0 	.word	0x200006a0
 80059dc:	200006a8 	.word	0x200006a8
 80059e0:	20000278 	.word	0x20000278
 80059e4:	20000288 	.word	0x20000288
 80059e8:	20000238 	.word	0x20000238
 80059ec:	0800c0b8 	.word	0x0800c0b8
 80059f0:	2000026c 	.word	0x2000026c
 80059f4:	200008a4 	.word	0x200008a4
 80059f8:	200002a0 	.word	0x200002a0
 80059fc:	200006d8 	.word	0x200006d8

08005a00 <CAM_delay_reset>:

//## CAM_delay reset
void CAM_delay_reset(void) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
    failure_active = false;
 8005a06:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <CAM_delay_reset+0xc0>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
    failure_set = false;
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <CAM_delay_reset+0xc4>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop(&htim1);  // disable tim1
 8005a12:	482d      	ldr	r0, [pc, #180]	; (8005ac8 <CAM_delay_reset+0xc8>)
 8005a14:	f7fd fd1c 	bl	8003450 <HAL_TIM_Base_Stop>
    __HAL_TIM_SET_COUNTER(&htim1, 0);          // clear tim1 counter
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <CAM_delay_reset+0xc8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
    TIM_Soft_Stop();
 8005a20:	f002 fbb4 	bl	800818c <TIM_Soft_Stop>
    TIM_Soft_Reset();
 8005a24:	f002 fbf0 	bl	8008208 <TIM_Soft_Reset>

    number_processing_edges_CAM_delay[0] = 0;
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <CAM_delay_reset+0xcc>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    number_processing_edges_CAM_delay[1] = 0;
 8005a2e:	4b27      	ldr	r3, [pc, #156]	; (8005acc <CAM_delay_reset+0xcc>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	605a      	str	r2, [r3, #4]
    timer_active_CAM_delay[0] = false;
 8005a34:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <CAM_delay_reset+0xd0>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
    timer_active_CAM_delay[1] = false;
 8005a3a:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <CAM_delay_reset+0xd0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	705a      	strb	r2, [r3, #1]
    delay_counter_CAM_REF_CRK = 0;
 8005a40:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <CAM_delay_reset+0xd4>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

    int i;

    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	e00d      	b.n	8005a68 <CAM_delay_reset+0x68>
        shift_counter_CAM_delay[0][i] = 0;
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <CAM_delay_reset+0xd8>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2100      	movs	r1, #0
 8005a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        shift_counter_CAM_delay[1][i] = 0;
 8005a56:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <CAM_delay_reset+0xd8>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3306      	adds	r3, #6
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3301      	adds	r3, #1
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	4b1c      	ldr	r3, [pc, #112]	; (8005adc <CAM_delay_reset+0xdc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	dbec      	blt.n	8005a4c <CAM_delay_reset+0x4c>
    }

    i = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]

    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	e017      	b.n	8005aac <CAM_delay_reset+0xac>
        angle_to_edge_CAM_delay[0][i] = 0;
 8005a7c:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <CAM_delay_reset+0xe0>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	18d1      	adds	r1, r2, r3
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9c1 2300 	strd	r2, r3, [r1]
        angle_to_edge_CAM_delay[1][i] = 0;
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <CAM_delay_reset+0xe0>)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3306      	adds	r3, #6
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	18d1      	adds	r1, r2, r3
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <CAM_delay_reset+0xdc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	dbe2      	blt.n	8005a7c <CAM_delay_reset+0x7c>
    }
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000674 	.word	0x20000674
 8005ac4:	20000676 	.word	0x20000676
 8005ac8:	200008a4 	.word	0x200008a4
 8005acc:	200006a0 	.word	0x200006a0
 8005ad0:	20000740 	.word	0x20000740
 8005ad4:	20000748 	.word	0x20000748
 8005ad8:	200006a8 	.word	0x200006a8
 8005adc:	0800c0b8 	.word	0x0800c0b8
 8005ae0:	200006d8 	.word	0x200006d8

08005ae4 <output_CRK_TOOTH_OFF>:

//##Output_CRK_TOOTH_OFF
void output_CRK_TOOTH_OFF(void) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
    number_teeth_between_tooth_off = number_teeth_between_gaps / number_tooth_off;
 8005ae8:	4b4b      	ldr	r3, [pc, #300]	; (8005c18 <output_CRK_TOOTH_OFF+0x134>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	4b4b      	ldr	r3, [pc, #300]	; (8005c1c <output_CRK_TOOTH_OFF+0x138>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	4a4a      	ldr	r2, [pc, #296]	; (8005c20 <output_CRK_TOOTH_OFF+0x13c>)
 8005af6:	6013      	str	r3, [r2, #0]

    // only count a tooth when CRK rising edge
    if (CRK_signal == true) {
 8005af8:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <output_CRK_TOOTH_OFF+0x140>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d025      	beq.n	8005b4c <output_CRK_TOOTH_OFF+0x68>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <output_CRK_TOOTH_OFF+0x144>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <output_CRK_TOOTH_OFF+0x134>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d005      	beq.n	8005b18 <output_CRK_TOOTH_OFF+0x34>
            teeth_counter_CRK_TOOTH_OFF = teeth_count_CRK + 1;
 8005b0c:	4b46      	ldr	r3, [pc, #280]	; (8005c28 <output_CRK_TOOTH_OFF+0x144>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a46      	ldr	r2, [pc, #280]	; (8005c2c <output_CRK_TOOTH_OFF+0x148>)
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e019      	b.n	8005b4c <output_CRK_TOOTH_OFF+0x68>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 8005b18:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <output_CRK_TOOTH_OFF+0x144>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <output_CRK_TOOTH_OFF+0x134>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d113      	bne.n	8005b4c <output_CRK_TOOTH_OFF+0x68>
            teeth_counter_CRK_TOOTH_OFF = 1;
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <output_CRK_TOOTH_OFF+0x148>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
            counter_gap_left_CRK_TOOTH_OFF++;
 8005b2a:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <output_CRK_TOOTH_OFF+0x14c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	4a3f      	ldr	r2, [pc, #252]	; (8005c30 <output_CRK_TOOTH_OFF+0x14c>)
 8005b32:	6013      	str	r3, [r2, #0]
            counter_tooth_off = 0;  // reset at every gap
 8005b34:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <output_CRK_TOOTH_OFF+0x150>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

            if (counter_gap_left_CRK_TOOTH_OFF == number_gap) {  // if we made a full rotation
 8005b3a:	4b3d      	ldr	r3, [pc, #244]	; (8005c30 <output_CRK_TOOTH_OFF+0x14c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a3e      	ldr	r2, [pc, #248]	; (8005c38 <output_CRK_TOOTH_OFF+0x154>)
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d102      	bne.n	8005b4c <output_CRK_TOOTH_OFF+0x68>
                counter_gap_left_CRK_TOOTH_OFF = 0;
 8005b46:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <output_CRK_TOOTH_OFF+0x14c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
            }
        }
    }

    if (failure_active == true) {
 8005b4c:	4b3b      	ldr	r3, [pc, #236]	; (8005c3c <output_CRK_TOOTH_OFF+0x158>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01f      	beq.n	8005b94 <output_CRK_TOOTH_OFF+0xb0>
        if (CRK_signal == false) {  // if failure active and the Crk is set to 0 set Crk output at 1 to miss a tooth
 8005b54:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <output_CRK_TOOTH_OFF+0x140>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f083 0301 	eor.w	r3, r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <output_CRK_TOOTH_OFF+0x90>
            failure_passed = true;
 8005b62:	4b37      	ldr	r3, [pc, #220]	; (8005c40 <output_CRK_TOOTH_OFF+0x15c>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2110      	movs	r1, #16
 8005b6c:	4835      	ldr	r0, [pc, #212]	; (8005c44 <output_CRK_TOOTH_OFF+0x160>)
 8005b6e:	f7fc ff8a 	bl	8002a86 <HAL_GPIO_WritePin>
            }

        } else {
        }
    }
}
 8005b72:	e04e      	b.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
        } else if (failure_passed == true) {  // a tooth has been skiped
 8005b74:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <output_CRK_TOOTH_OFF+0x15c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d04a      	beq.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
            failure_passed = false;
 8005b7c:	4b30      	ldr	r3, [pc, #192]	; (8005c40 <output_CRK_TOOTH_OFF+0x15c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
            failure_active = false;
 8005b82:	4b2e      	ldr	r3, [pc, #184]	; (8005c3c <output_CRK_TOOTH_OFF+0x158>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
            counter_tooth_off++;
 8005b88:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <output_CRK_TOOTH_OFF+0x150>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <output_CRK_TOOTH_OFF+0x150>)
 8005b90:	6013      	str	r3, [r2, #0]
}
 8005b92:	e03e      	b.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
        if (((teeth_counter_CRK_TOOTH_OFF % number_teeth_between_tooth_off) == ((number_teeth_between_tooth_off / 2) + 1)) && (CRK_signal == true)) {  // if we passed a tooth and this tooth is separated by the number_teeth_between_tooth_off
 8005b94:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <output_CRK_TOOTH_OFF+0x148>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <output_CRK_TOOTH_OFF+0x13c>)
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba0:	fb01 f202 	mul.w	r2, r1, r2
 8005ba4:	1a9a      	subs	r2, r3, r2
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <output_CRK_TOOTH_OFF+0x13c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	3301      	adds	r3, #1
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d12f      	bne.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <output_CRK_TOOTH_OFF+0x140>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d02b      	beq.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
            if ((counter_gap_left_CRK_TOOTH_OFF == 0) && (counter_tooth_off < ((number_tooth_off / number_gap) + (number_tooth_off % number_gap)))) {
 8005bba:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <output_CRK_TOOTH_OFF+0x14c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d117      	bne.n	8005bf2 <output_CRK_TOOTH_OFF+0x10e>
 8005bc2:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <output_CRK_TOOTH_OFF+0x138>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <output_CRK_TOOTH_OFF+0x154>)
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <output_CRK_TOOTH_OFF+0x138>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <output_CRK_TOOTH_OFF+0x154>)
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bda:	fb00 f202 	mul.w	r2, r0, r2
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	18ca      	adds	r2, r1, r3
 8005be2:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <output_CRK_TOOTH_OFF+0x150>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <output_CRK_TOOTH_OFF+0x10e>
                failure_active = true;
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <output_CRK_TOOTH_OFF+0x158>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
}
 8005bf0:	e00f      	b.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
            } else if (counter_tooth_off < (number_tooth_off / number_gap)) {
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <output_CRK_TOOTH_OFF+0x138>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <output_CRK_TOOTH_OFF+0x154>)
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <output_CRK_TOOTH_OFF+0x150>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d903      	bls.n	8005c0e <output_CRK_TOOTH_OFF+0x12a>
                failure_active = true;
 8005c06:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <output_CRK_TOOTH_OFF+0x158>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	701a      	strb	r2, [r3, #0]
}
 8005c0c:	e001      	b.n	8005c12 <output_CRK_TOOTH_OFF+0x12e>
                output_CRK_no_failure();
 8005c0e:	f7fe fe7b 	bl	8004908 <output_CRK_no_failure>
}
 8005c12:	bf00      	nop
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000288 	.word	0x20000288
 8005c1c:	2000074c 	.word	0x2000074c
 8005c20:	20000750 	.word	0x20000750
 8005c24:	200002ab 	.word	0x200002ab
 8005c28:	20000278 	.word	0x20000278
 8005c2c:	20000758 	.word	0x20000758
 8005c30:	2000075c 	.word	0x2000075c
 8005c34:	20000754 	.word	0x20000754
 8005c38:	2000023c 	.word	0x2000023c
 8005c3c:	20000674 	.word	0x20000674
 8005c40:	20000677 	.word	0x20000677
 8005c44:	40010800 	.word	0x40010800

08005c48 <CRK_TOOTH_OFF_reset>:

//##CRK_TOOTH_OFF_reset
void CRK_TOOTH_OFF_reset(void) {
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
    failure_active = false;
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <CRK_TOOTH_OFF_reset+0x18>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
    number_teeth_between_tooth_off = 0;
 8005c52:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <CRK_TOOTH_OFF_reset+0x1c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	20000674 	.word	0x20000674
 8005c64:	20000750 	.word	0x20000750

08005c68 <output_CRK_GAP_NOT_DET>:

//##Output_CRK_GAP_NOT_DET
void output_CRK_GAP_NOT_DET(void) {
 8005c68:	b598      	push	{r3, r4, r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 8005c6c:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <output_CRK_GAP_NOT_DET+0xe8>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d014      	beq.n	8005c9e <output_CRK_GAP_NOT_DET+0x36>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 8005c74:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <output_CRK_GAP_NOT_DET+0xec>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <output_CRK_GAP_NOT_DET+0xf0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d005      	beq.n	8005c8c <output_CRK_GAP_NOT_DET+0x24>
            teeth_counter_CRK_GAP_NOT_DET = teeth_count_CRK + 1;
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <output_CRK_GAP_NOT_DET+0xec>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a35      	ldr	r2, [pc, #212]	; (8005d5c <output_CRK_GAP_NOT_DET+0xf4>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e008      	b.n	8005c9e <output_CRK_GAP_NOT_DET+0x36>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 8005c8c:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <output_CRK_GAP_NOT_DET+0xec>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b31      	ldr	r3, [pc, #196]	; (8005d58 <output_CRK_GAP_NOT_DET+0xf0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d102      	bne.n	8005c9e <output_CRK_GAP_NOT_DET+0x36>
            teeth_counter_CRK_GAP_NOT_DET = 1;
 8005c98:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <output_CRK_GAP_NOT_DET+0xf4>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
        }
    }

    if (CRK_synch == false) {
 8005c9e:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <output_CRK_GAP_NOT_DET+0xf8>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f083 0301 	eor.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <output_CRK_GAP_NOT_DET+0x50>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2110      	movs	r1, #16
 8005cb0:	482c      	ldr	r0, [pc, #176]	; (8005d64 <output_CRK_GAP_NOT_DET+0xfc>)
 8005cb2:	f7fc fee8 	bl	8002a86 <HAL_GPIO_WritePin>

        } else if ((failure_active == true) && (CRK_signal == true)) {
            HAL_TIM_Base_Start(&htim1);
        }
    }
}
 8005cb6:	e048      	b.n	8005d4a <output_CRK_GAP_NOT_DET+0xe2>
    } else if (CRK_synch == true) {
 8005cb8:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <output_CRK_GAP_NOT_DET+0xf8>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d044      	beq.n	8005d4a <output_CRK_GAP_NOT_DET+0xe2>
        output_CRK_no_failure();
 8005cc0:	f7fe fe22 	bl	8004908 <output_CRK_no_failure>
        if ((teeth_counter_CRK_GAP_NOT_DET == number_teeth_between_gaps) && failure_active == false) {
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <output_CRK_GAP_NOT_DET+0xf4>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b23      	ldr	r3, [pc, #140]	; (8005d58 <output_CRK_GAP_NOT_DET+0xf0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d131      	bne.n	8005d34 <output_CRK_GAP_NOT_DET+0xcc>
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <output_CRK_GAP_NOT_DET+0x100>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <output_CRK_GAP_NOT_DET+0xcc>
            failure_active = true;
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <output_CRK_GAP_NOT_DET+0x100>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&htim1, T_TOOTH_RAW * 1.5); // to be in the midle of the gap
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <output_CRK_GAP_NOT_DET+0x104>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fa fb7b 	bl	80003e4 <__aeabi_ui2d>
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <output_CRK_GAP_NOT_DET+0x108>)
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	491d      	ldr	r1, [pc, #116]	; (8005d74 <output_CRK_GAP_NOT_DET+0x10c>)
 8005cfe:	680c      	ldr	r4, [r1, #0]
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	f7fa feaa 	bl	8000a5c <__aeabi_d2uiz>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d0c:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <output_CRK_GAP_NOT_DET+0x104>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fb67 	bl	80003e4 <__aeabi_ui2d>
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <output_CRK_GAP_NOT_DET+0x108>)
 8005d1c:	f7fa fbdc 	bl	80004d8 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	f7fa fe98 	bl	8000a5c <__aeabi_d2uiz>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <output_CRK_GAP_NOT_DET+0x10c>)
 8005d30:	60d3      	str	r3, [r2, #12]
}
 8005d32:	e00a      	b.n	8005d4a <output_CRK_GAP_NOT_DET+0xe2>
        } else if ((failure_active == true) && (CRK_signal == true)) {
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <output_CRK_GAP_NOT_DET+0x100>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <output_CRK_GAP_NOT_DET+0xe2>
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <output_CRK_GAP_NOT_DET+0xe8>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <output_CRK_GAP_NOT_DET+0xe2>
            HAL_TIM_Base_Start(&htim1);
 8005d44:	480b      	ldr	r0, [pc, #44]	; (8005d74 <output_CRK_GAP_NOT_DET+0x10c>)
 8005d46:	f7fd fb39 	bl	80033bc <HAL_TIM_Base_Start>
}
 8005d4a:	bf00      	nop
 8005d4c:	bd98      	pop	{r3, r4, r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200002ab 	.word	0x200002ab
 8005d54:	20000278 	.word	0x20000278
 8005d58:	20000288 	.word	0x20000288
 8005d5c:	20000760 	.word	0x20000760
 8005d60:	200002a8 	.word	0x200002a8
 8005d64:	40010800 	.word	0x40010800
 8005d68:	20000674 	.word	0x20000674
 8005d6c:	2000026c 	.word	0x2000026c
 8005d70:	3ff80000 	.word	0x3ff80000
 8005d74:	200008a4 	.word	0x200008a4

08005d78 <CRK_GAP_NOT_DET_reset>:

//## CRK_GAP_NOT_DET_reset
void CRK_GAP_NOT_DET_reset(void) {
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
    failure_active_CAM_blank_out = false;
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <CRK_GAP_NOT_DET_reset+0x18>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
    failure_active = false;
 8005d82:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <CRK_GAP_NOT_DET_reset+0x1c>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr
 8005d90:	20000675 	.word	0x20000675
 8005d94:	20000674 	.word	0x20000674

08005d98 <output_SEG_ADP_ER_LIM>:

//## Output_SEG_ADP_ER_LIM
void output_SEG_ADP_ER_LIM(void) {
 8005d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 8005da0:	4b8b      	ldr	r3, [pc, #556]	; (8005fd0 <output_SEG_ADP_ER_LIM+0x238>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d014      	beq.n	8005dd2 <output_SEG_ADP_ER_LIM+0x3a>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 8005da8:	4b8a      	ldr	r3, [pc, #552]	; (8005fd4 <output_SEG_ADP_ER_LIM+0x23c>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b8a      	ldr	r3, [pc, #552]	; (8005fd8 <output_SEG_ADP_ER_LIM+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d005      	beq.n	8005dc0 <output_SEG_ADP_ER_LIM+0x28>
            teeth_counter_SEG_ADP_ER_LIM = teeth_count_CRK + 1;
 8005db4:	4b87      	ldr	r3, [pc, #540]	; (8005fd4 <output_SEG_ADP_ER_LIM+0x23c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a88      	ldr	r2, [pc, #544]	; (8005fdc <output_SEG_ADP_ER_LIM+0x244>)
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e008      	b.n	8005dd2 <output_SEG_ADP_ER_LIM+0x3a>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 8005dc0:	4b84      	ldr	r3, [pc, #528]	; (8005fd4 <output_SEG_ADP_ER_LIM+0x23c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b84      	ldr	r3, [pc, #528]	; (8005fd8 <output_SEG_ADP_ER_LIM+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d102      	bne.n	8005dd2 <output_SEG_ADP_ER_LIM+0x3a>
            teeth_counter_SEG_ADP_ER_LIM = 1;
 8005dcc:	4b83      	ldr	r3, [pc, #524]	; (8005fdc <output_SEG_ADP_ER_LIM+0x244>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
        }
    }

    if ((failure_active == true) && (CRK_signal == false)) {  // on the falling edge of the CRK start the delay timer
 8005dd2:	4b83      	ldr	r3, [pc, #524]	; (8005fe0 <output_SEG_ADP_ER_LIM+0x248>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00f      	beq.n	8005dfa <output_SEG_ADP_ER_LIM+0x62>
 8005dda:	4b7d      	ldr	r3, [pc, #500]	; (8005fd0 <output_SEG_ADP_ER_LIM+0x238>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f083 0301 	eor.w	r3, r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <output_SEG_ADP_ER_LIM+0x62>
        HAL_TIM_Base_Start(&htim4);
 8005de8:	487e      	ldr	r0, [pc, #504]	; (8005fe4 <output_SEG_ADP_ER_LIM+0x24c>)
 8005dea:	f7fd fae7 	bl	80033bc <HAL_TIM_Base_Start>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005dee:	2201      	movs	r2, #1
 8005df0:	2110      	movs	r1, #16
 8005df2:	487d      	ldr	r0, [pc, #500]	; (8005fe8 <output_SEG_ADP_ER_LIM+0x250>)
 8005df4:	f7fc fe47 	bl	8002a86 <HAL_GPIO_WritePin>
 8005df8:	e01b      	b.n	8005e32 <output_SEG_ADP_ER_LIM+0x9a>
    } else if ((failure_active == true) && (CRK_signal == true)) {
 8005dfa:	4b79      	ldr	r3, [pc, #484]	; (8005fe0 <output_SEG_ADP_ER_LIM+0x248>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d015      	beq.n	8005e2e <output_SEG_ADP_ER_LIM+0x96>
 8005e02:	4b73      	ldr	r3, [pc, #460]	; (8005fd0 <output_SEG_ADP_ER_LIM+0x238>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <output_SEG_ADP_ER_LIM+0x96>
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 8005e0a:	4b78      	ldr	r3, [pc, #480]	; (8005fec <output_SEG_ADP_ER_LIM+0x254>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <output_SEG_ADP_ER_LIM+0x8e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005e12:	2200      	movs	r2, #0
 8005e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e18:	4873      	ldr	r0, [pc, #460]	; (8005fe8 <output_SEG_ADP_ER_LIM+0x250>)
 8005e1a:	f7fc fe34 	bl	8002a86 <HAL_GPIO_WritePin>
            HAL_TIM_Base_Start(&htim4);
 8005e1e:	4871      	ldr	r0, [pc, #452]	; (8005fe4 <output_SEG_ADP_ER_LIM+0x24c>)
 8005e20:	f7fd facc 	bl	80033bc <HAL_TIM_Base_Start>
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 8005e24:	e005      	b.n	8005e32 <output_SEG_ADP_ER_LIM+0x9a>
        } else {  // if failure on the falling edge of the CRK is still not set, this happens a lot on lower frquency
            failure_waiting = true;
 8005e26:	4b72      	ldr	r3, [pc, #456]	; (8005ff0 <output_SEG_ADP_ER_LIM+0x258>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 8005e2c:	e001      	b.n	8005e32 <output_SEG_ADP_ER_LIM+0x9a>
        }
    } else {
        output_CRK_no_failure();
 8005e2e:	f7fe fd6b 	bl	8004908 <output_CRK_no_failure>
    }

    if (teeth_counter_SEG_ADP_ER_LIM == (((720 / (number_segments_CRK * revolution_CRK)) + (first_seg_angle / revolution_CRK) + (int)(tdc_to_gap / revolution_CRK) + 1))) {  // if we are one tooth befor the end of the first segment
 8005e32:	4b6a      	ldr	r3, [pc, #424]	; (8005fdc <output_SEG_ADP_ER_LIM+0x244>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fad4 	bl	80003e4 <__aeabi_ui2d>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	460d      	mov	r5, r1
 8005e40:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <output_SEG_ADP_ER_LIM+0x25c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa facd 	bl	80003e4 <__aeabi_ui2d>
 8005e4a:	4b6b      	ldr	r3, [pc, #428]	; (8005ff8 <output_SEG_ADP_ER_LIM+0x260>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	f04f 0000 	mov.w	r0, #0
 8005e5c:	4967      	ldr	r1, [pc, #412]	; (8005ffc <output_SEG_ADP_ER_LIM+0x264>)
 8005e5e:	f7fa fc65 	bl	800072c <__aeabi_ddiv>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4690      	mov	r8, r2
 8005e68:	4699      	mov	r9, r3
 8005e6a:	4b65      	ldr	r3, [pc, #404]	; (8006000 <output_SEG_ADP_ER_LIM+0x268>)
 8005e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e70:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <output_SEG_ADP_ER_LIM+0x260>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fc59 	bl	800072c <__aeabi_ddiv>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa f973 	bl	800016c <__adddf3>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4690      	mov	r8, r2
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <output_SEG_ADP_ER_LIM+0x26c>)
 8005e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e94:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <output_SEG_ADP_ER_LIM+0x260>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa fc47 	bl	800072c <__aeabi_ddiv>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f7fa fdb1 	bl	8000a0c <__aeabi_d2iz>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa faa9 	bl	8000404 <__aeabi_i2d>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa f957 	bl	800016c <__adddf3>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <output_SEG_ADP_ER_LIM+0x270>)
 8005ecc:	f7fa f94e 	bl	800016c <__adddf3>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d100      	bne.n	8005ee4 <output_SEG_ADP_ER_LIM+0x14c>
        double delayTimer = crk_delay_SEG_ADP_ER_LIM * (T_TOOTH_RAW / revolution_CRK);
        __HAL_TIM_SET_AUTORELOAD(&htim4, 18 * ((delayTimer * 8) + 1) - 1); // PR7 =  delayTimer * 8
        // set de delay for the timer, times 8 because the timer 7 has a prescale of 1:8 and T_TOOTH_RAW has 1:64
        failure_active = true;
    }
}
 8005ee2:	e070      	b.n	8005fc6 <output_SEG_ADP_ER_LIM+0x22e>
        double delayTimer = crk_delay_SEG_ADP_ER_LIM * (T_TOOTH_RAW / revolution_CRK);
 8005ee4:	4b49      	ldr	r3, [pc, #292]	; (800600c <output_SEG_ADP_ER_LIM+0x274>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fa fa7b 	bl	80003e4 <__aeabi_ui2d>
 8005eee:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <output_SEG_ADP_ER_LIM+0x260>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fc1a 	bl	800072c <__aeabi_ddiv>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	4b43      	ldr	r3, [pc, #268]	; (8006010 <output_SEG_ADP_ER_LIM+0x278>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa fae7 	bl	80004d8 <__aeabi_dmul>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	e9c7 2300 	strd	r2, r3, [r7]
        __HAL_TIM_SET_AUTORELOAD(&htim4, 18 * ((delayTimer * 8) + 1) - 1); // PR7 =  delayTimer * 8
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <output_SEG_ADP_ER_LIM+0x27c>)
 8005f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f1c:	f7fa fadc 	bl	80004d8 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <output_SEG_ADP_ER_LIM+0x270>)
 8005f2e:	f7fa f91d 	bl	800016c <__adddf3>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	4b36      	ldr	r3, [pc, #216]	; (8006018 <output_SEG_ADP_ER_LIM+0x280>)
 8005f40:	f7fa faca 	bl	80004d8 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <output_SEG_ADP_ER_LIM+0x270>)
 8005f52:	f7fa f909 	bl	8000168 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4922      	ldr	r1, [pc, #136]	; (8005fe4 <output_SEG_ADP_ER_LIM+0x24c>)
 8005f5c:	680c      	ldr	r4, [r1, #0]
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	f7fa fd7b 	bl	8000a5c <__aeabi_d2uiz>
 8005f66:	4603      	mov	r3, r0
 8005f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <output_SEG_ADP_ER_LIM+0x27c>)
 8005f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f74:	f7fa fab0 	bl	80004d8 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	4b20      	ldr	r3, [pc, #128]	; (8006008 <output_SEG_ADP_ER_LIM+0x270>)
 8005f86:	f7fa f8f1 	bl	800016c <__adddf3>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	4b20      	ldr	r3, [pc, #128]	; (8006018 <output_SEG_ADP_ER_LIM+0x280>)
 8005f98:	f7fa fa9e 	bl	80004d8 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	4b17      	ldr	r3, [pc, #92]	; (8006008 <output_SEG_ADP_ER_LIM+0x270>)
 8005faa:	f7fa f8dd 	bl	8000168 <__aeabi_dsub>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f7fa fd51 	bl	8000a5c <__aeabi_d2uiz>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <output_SEG_ADP_ER_LIM+0x24c>)
 8005fbe:	60d3      	str	r3, [r2, #12]
        failure_active = true;
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <output_SEG_ADP_ER_LIM+0x248>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fd0:	200002ab 	.word	0x200002ab
 8005fd4:	20000278 	.word	0x20000278
 8005fd8:	20000288 	.word	0x20000288
 8005fdc:	20000764 	.word	0x20000764
 8005fe0:	20000674 	.word	0x20000674
 8005fe4:	2000097c 	.word	0x2000097c
 8005fe8:	40010800 	.word	0x40010800
 8005fec:	20000677 	.word	0x20000677
 8005ff0:	20000678 	.word	0x20000678
 8005ff4:	20000294 	.word	0x20000294
 8005ff8:	200002a0 	.word	0x200002a0
 8005ffc:	40868000 	.word	0x40868000
 8006000:	20000248 	.word	0x20000248
 8006004:	20000240 	.word	0x20000240
 8006008:	3ff00000 	.word	0x3ff00000
 800600c:	2000026c 	.word	0x2000026c
 8006010:	20000770 	.word	0x20000770
 8006014:	40200000 	.word	0x40200000
 8006018:	40320000 	.word	0x40320000

0800601c <SEG_ADP_ER_LIM_reset>:

//## SEG_ADP_ER_LIM_reset
void SEG_ADP_ER_LIM_reset(void) {
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
    failure_active = false;
 8006020:	4b08      	ldr	r3, [pc, #32]	; (8006044 <SEG_ADP_ER_LIM_reset+0x28>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
    failure_passed = false;
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <SEG_ADP_ER_LIM_reset+0x2c>)
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
    failure_waiting = false;
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <SEG_ADP_ER_LIM_reset+0x30>)
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
    MX_TIM4_Init();
 8006032:	f7fb fff5 	bl	8002020 <MX_TIM4_Init>
    MX_TIM1_Init();
 8006036:	f7fb ff07 	bl	8001e48 <MX_TIM1_Init>
    timer_Counter_SEG_ADP_ER_LIM = 0;
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <SEG_ADP_ER_LIM_reset+0x34>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
}
 8006040:	bf00      	nop
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000674 	.word	0x20000674
 8006048:	20000677 	.word	0x20000677
 800604c:	20000678 	.word	0x20000678
 8006050:	20000768 	.word	0x20000768

08006054 <output_CRK_pulse_duration>:

//## Output_CRK_pulse_duration
void output_CRK_pulse_duration(void) {
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
    if (CRK_signal == false) {
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <output_CRK_pulse_duration+0x28>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f083 0301 	eor.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <output_CRK_pulse_duration+0x22>
        HAL_TIM_Base_Start(&htim4); // start the timer4 (formerly TIM7 on microchip)
 8006066:	4806      	ldr	r0, [pc, #24]	; (8006080 <output_CRK_pulse_duration+0x2c>)
 8006068:	f7fd f9a8 	bl	80033bc <HAL_TIM_Base_Start>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800606c:	2200      	movs	r2, #0
 800606e:	2110      	movs	r1, #16
 8006070:	4804      	ldr	r0, [pc, #16]	; (8006084 <output_CRK_pulse_duration+0x30>)
 8006072:	f7fc fd08 	bl	8002a86 <HAL_GPIO_WritePin>
    }
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200002ab 	.word	0x200002ab
 8006080:	2000097c 	.word	0x2000097c
 8006084:	40010800 	.word	0x40010800

08006088 <CRK_pulse_duration_reset>:

//## CRK_PLS_ORNG_reset
void CRK_pulse_duration_reset(void) {
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
    MX_TIM3_Init();
 800608c:	f7fb ff7a 	bl	8001f84 <MX_TIM3_Init>
    failure_active = false;
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <CRK_pulse_duration_reset+0x14>)
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000674 	.word	0x20000674

080060a0 <output_POSN_ENG_STST>:

//## Output_POSN_ENG_STST
void output_POSN_ENG_STST(void) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
    if ((CRK_signal == false) && (failure_active == true)) {
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <output_POSN_ENG_STST+0x60>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f083 0301 	eor.w	r3, r3, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01a      	beq.n	80060e8 <output_POSN_ENG_STST+0x48>
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <output_POSN_ENG_STST+0x64>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <output_POSN_ENG_STST+0x48>
        counter_POSN_ENG_STST++;  // counte the teeth'
 80060ba:	4b13      	ldr	r3, [pc, #76]	; (8006108 <output_POSN_ENG_STST+0x68>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	4a11      	ldr	r2, [pc, #68]	; (8006108 <output_POSN_ENG_STST+0x68>)
 80060c2:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // skip the tooth
 80060c4:	2201      	movs	r2, #1
 80060c6:	2110      	movs	r1, #16
 80060c8:	4810      	ldr	r0, [pc, #64]	; (800610c <output_POSN_ENG_STST+0x6c>)
 80060ca:	f7fc fcdc 	bl	8002a86 <HAL_GPIO_WritePin>

        if (counter_POSN_ENG_STST >= crk_teeth_off_POSN_ENG_STST) {  // if number of teeth skip is done stop failure
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <output_POSN_ENG_STST+0x68>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <output_POSN_ENG_STST+0x70>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d310      	bcc.n	80060fc <output_POSN_ENG_STST+0x5c>
            failure_active = false;
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <output_POSN_ENG_STST+0x64>)
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
            counter_POSN_ENG_STST = 0;
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <output_POSN_ENG_STST+0x68>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
        if (counter_POSN_ENG_STST >= crk_teeth_off_POSN_ENG_STST) {  // if number of teeth skip is done stop failure
 80060e6:	e009      	b.n	80060fc <output_POSN_ENG_STST+0x5c>
        }
    } else if (failure_active == false) {
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <output_POSN_ENG_STST+0x64>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f083 0301 	eor.w	r3, r3, #1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <output_POSN_ENG_STST+0x5c>
        output_CRK_no_failure();
 80060f6:	f7fe fc07 	bl	8004908 <output_CRK_no_failure>
    }
}
 80060fa:	e7ff      	b.n	80060fc <output_POSN_ENG_STST+0x5c>
 80060fc:	bf00      	nop
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	200002ab 	.word	0x200002ab
 8006104:	20000674 	.word	0x20000674
 8006108:	20000784 	.word	0x20000784
 800610c:	40010800 	.word	0x40010800
 8006110:	20000780 	.word	0x20000780

08006114 <POSN_ENG_STST_reset>:

//## POSN_ENG_STST_LOSS_reset
void POSN_ENG_STST_reset(void) {
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
    failure_active = false;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <POSN_ENG_STST_reset+0x14>)
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000674 	.word	0x20000674

0800612c <output_CAM_PAT_ERR>:

//## Output_CAM_PAT_ERR

void output_CAM_PAT_ERR(int cam_id) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
    switch (active_CAM_edges[cam_id]) {
 8006134:	4a5d      	ldr	r2, [pc, #372]	; (80062ac <output_CAM_PAT_ERR+0x180>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b72      	cmp	r3, #114	; 0x72
 800613e:	d07f      	beq.n	8006240 <output_CAM_PAT_ERR+0x114>
 8006140:	2b72      	cmp	r3, #114	; 0x72
 8006142:	f300 80ae 	bgt.w	80062a2 <output_CAM_PAT_ERR+0x176>
 8006146:	2b62      	cmp	r3, #98	; 0x62
 8006148:	d002      	beq.n	8006150 <output_CAM_PAT_ERR+0x24>
 800614a:	2b66      	cmp	r3, #102	; 0x66
 800614c:	d047      	beq.n	80061de <output_CAM_PAT_ERR+0xb2>
                }
            }
            break;
        }
    }
}
 800614e:	e0a8      	b.n	80062a2 <output_CAM_PAT_ERR+0x176>
            active_CAM_edges_counter[cam_id]++;
 8006150:	4a57      	ldr	r2, [pc, #348]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	4955      	ldr	r1, [pc, #340]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip the next falling edge to generate the failure
 8006162:	4a53      	ldr	r2, [pc, #332]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d933      	bls.n	80061d6 <output_CAM_PAT_ERR+0xaa>
                if (CAM_signal[cam_id] == false) {
 800616e:	4a51      	ldr	r2, [pc, #324]	; (80062b4 <output_CAM_PAT_ERR+0x188>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f083 0301 	eor.w	r3, r3, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00f      	beq.n	80061a0 <output_CAM_PAT_ERR+0x74>
                    if (cam_id == 0) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <output_CAM_PAT_ERR+0x68>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8006186:	2201      	movs	r2, #1
 8006188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800618c:	484a      	ldr	r0, [pc, #296]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 800618e:	f7fc fc7a 	bl	8002a86 <HAL_GPIO_WritePin>
 8006192:	e01a      	b.n	80061ca <output_CAM_PAT_ERR+0x9e>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8006194:	2201      	movs	r2, #1
 8006196:	2140      	movs	r1, #64	; 0x40
 8006198:	4847      	ldr	r0, [pc, #284]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 800619a:	f7fc fc74 	bl	8002a86 <HAL_GPIO_WritePin>
 800619e:	e014      	b.n	80061ca <output_CAM_PAT_ERR+0x9e>
                } else if (CAM_signal[cam_id] == true) {
 80061a0:	4a44      	ldr	r2, [pc, #272]	; (80062b4 <output_CAM_PAT_ERR+0x188>)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <output_CAM_PAT_ERR+0x9e>
                    if (cam_id == 0) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <output_CAM_PAT_ERR+0x94>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80061b2:	2200      	movs	r2, #0
 80061b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061b8:	483f      	ldr	r0, [pc, #252]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 80061ba:	f7fc fc64 	bl	8002a86 <HAL_GPIO_WritePin>
 80061be:	e004      	b.n	80061ca <output_CAM_PAT_ERR+0x9e>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2140      	movs	r1, #64	; 0x40
 80061c4:	483c      	ldr	r0, [pc, #240]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 80061c6:	f7fc fc5e 	bl	8002a86 <HAL_GPIO_WritePin>
                active_CAM_edges_counter[cam_id] = 0;
 80061ca:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2100      	movs	r1, #0
 80061d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80061d4:	e065      	b.n	80062a2 <output_CAM_PAT_ERR+0x176>
                output_CAM_no_failure(cam_id);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fe fbae 	bl	8004938 <output_CAM_no_failure>
            break;
 80061dc:	e061      	b.n	80062a2 <output_CAM_PAT_ERR+0x176>
            if (CAM_signal[cam_id] == false) {
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <output_CAM_PAT_ERR+0x188>)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f083 0301 	eor.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d055      	beq.n	800629c <output_CAM_PAT_ERR+0x170>
                active_CAM_edges_counter[cam_id]++;
 80061f0:	4a2f      	ldr	r2, [pc, #188]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	492d      	ldr	r1, [pc, #180]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip this edge in output to generate the failure
 8006202:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	2b06      	cmp	r3, #6
 800620c:	d914      	bls.n	8006238 <output_CAM_PAT_ERR+0x10c>
                    active_CAM_edges_counter[cam_id] = 0;
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2100      	movs	r1, #0
 8006214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (cam_id == 0) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <output_CAM_PAT_ERR+0x100>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800621e:	2201      	movs	r2, #1
 8006220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006224:	4824      	ldr	r0, [pc, #144]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 8006226:	f7fc fc2e 	bl	8002a86 <HAL_GPIO_WritePin>
            break;
 800622a:	e037      	b.n	800629c <output_CAM_PAT_ERR+0x170>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800622c:	2201      	movs	r2, #1
 800622e:	2140      	movs	r1, #64	; 0x40
 8006230:	4821      	ldr	r0, [pc, #132]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 8006232:	f7fc fc28 	bl	8002a86 <HAL_GPIO_WritePin>
            break;
 8006236:	e031      	b.n	800629c <output_CAM_PAT_ERR+0x170>
                    output_CAM_no_failure(cam_id);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fe fb7d 	bl	8004938 <output_CAM_no_failure>
            break;
 800623e:	e02d      	b.n	800629c <output_CAM_PAT_ERR+0x170>
            if (CAM_signal[cam_id] == true) {
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <output_CAM_PAT_ERR+0x188>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d029      	beq.n	80062a0 <output_CAM_PAT_ERR+0x174>
                active_CAM_edges_counter[cam_id]++;
 800624c:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	4916      	ldr	r1, [pc, #88]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip this edge in output to generate the failure
 800625e:	4a14      	ldr	r2, [pc, #80]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006266:	2b06      	cmp	r3, #6
 8006268:	d914      	bls.n	8006294 <output_CAM_PAT_ERR+0x168>
                    active_CAM_edges_counter[cam_id] = 0;
 800626a:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <output_CAM_PAT_ERR+0x184>)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2100      	movs	r1, #0
 8006270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (cam_id == 0) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <output_CAM_PAT_ERR+0x15c>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006280:	480d      	ldr	r0, [pc, #52]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 8006282:	f7fc fc00 	bl	8002a86 <HAL_GPIO_WritePin>
            break;
 8006286:	e00b      	b.n	80062a0 <output_CAM_PAT_ERR+0x174>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8006288:	2200      	movs	r2, #0
 800628a:	2140      	movs	r1, #64	; 0x40
 800628c:	480a      	ldr	r0, [pc, #40]	; (80062b8 <output_CAM_PAT_ERR+0x18c>)
 800628e:	f7fc fbfa 	bl	8002a86 <HAL_GPIO_WritePin>
            break;
 8006292:	e005      	b.n	80062a0 <output_CAM_PAT_ERR+0x174>
                    output_CAM_no_failure(cam_id);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fe fb4f 	bl	8004938 <output_CAM_no_failure>
            break;
 800629a:	e001      	b.n	80062a0 <output_CAM_PAT_ERR+0x174>
            break;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <output_CAM_PAT_ERR+0x176>
            break;
 80062a0:	bf00      	nop
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	200005e0 	.word	0x200005e0
 80062b0:	20000788 	.word	0x20000788
 80062b4:	20000660 	.word	0x20000660
 80062b8:	40010800 	.word	0x40010800

080062bc <CAM_PAT_ERR_reset>:

//## CAM_PAT_ERR_reset

void CAM_PAT_ERR_reset() {
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
    active_CAM_edges_counter[0] = 0;  // reset counter for CAM1
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <CAM_PAT_ERR_reset+0x20>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
    active_CAM_edges_counter[1] = 0;  // reset counter for CAM2
 80062c6:	4b05      	ldr	r3, [pc, #20]	; (80062dc <CAM_PAT_ERR_reset+0x20>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	605a      	str	r2, [r3, #4]
    output_CAM_no_failure(0);         // reset CAM1
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7fe fb33 	bl	8004938 <output_CAM_no_failure>
    output_CAM_no_failure(1);         // reset CAM2
 80062d2:	2001      	movs	r0, #1
 80062d4:	f7fe fb30 	bl	8004938 <output_CAM_no_failure>
}
 80062d8:	bf00      	nop
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000788 	.word	0x20000788

080062e0 <output_SC_CAM_CRK>:

//## Output_SC_CAM_CRK
void output_SC_CAM_CRK(int cam_id) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
    if (failure_active == true) {
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <output_SC_CAM_CRK+0xc0>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d046      	beq.n	800637e <output_SC_CAM_CRK+0x9e>
        switch (sc_type_SC_CAM_CRK) {
 80062f0:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <output_SC_CAM_CRK+0xc4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d84e      	bhi.n	8006398 <output_SC_CAM_CRK+0xb8>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <output_SC_CAM_CRK+0x20>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006311 	.word	0x08006311
 8006304:	08006325 	.word	0x08006325
 8006308:	08006337 	.word	0x08006337
 800630c:	0800635b 	.word	0x0800635b
            case (1):  // CrkScg
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006316:	4824      	ldr	r0, [pc, #144]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 8006318:	f7fc fbb5 	bl	8002a86 <HAL_GPIO_WritePin>
                output_CAM_no_failure(cam_id);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fe fb0b 	bl	8004938 <output_CAM_no_failure>
                break;
 8006322:	e039      	b.n	8006398 <output_SC_CAM_CRK+0xb8>
            }
            case (2):  // CrkScb
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8006324:	2201      	movs	r2, #1
 8006326:	2110      	movs	r1, #16
 8006328:	481f      	ldr	r0, [pc, #124]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 800632a:	f7fc fbac 	bl	8002a86 <HAL_GPIO_WritePin>
                output_CAM_no_failure(cam_id);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fe fb02 	bl	8004938 <output_CAM_no_failure>
                break;
 8006334:	e030      	b.n	8006398 <output_SC_CAM_CRK+0xb8>
            }
            case (3):  // CamScg
            {
                if (cam_id == 0) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <output_SC_CAM_CRK+0x6a>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800633c:	2200      	movs	r2, #0
 800633e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006342:	4819      	ldr	r0, [pc, #100]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 8006344:	f7fc fb9f 	bl	8002a86 <HAL_GPIO_WritePin>
 8006348:	e004      	b.n	8006354 <output_SC_CAM_CRK+0x74>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800634a:	2200      	movs	r2, #0
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	4816      	ldr	r0, [pc, #88]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 8006350:	f7fc fb99 	bl	8002a86 <HAL_GPIO_WritePin>
                }
                output_CRK_no_failure();
 8006354:	f7fe fad8 	bl	8004908 <output_CRK_no_failure>
                break;
 8006358:	e01e      	b.n	8006398 <output_SC_CAM_CRK+0xb8>
            }
            case (4):  // CamScb
            {
                if (cam_id == 0) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <output_SC_CAM_CRK+0x8e>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8006360:	2201      	movs	r2, #1
 8006362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006366:	4810      	ldr	r0, [pc, #64]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 8006368:	f7fc fb8d 	bl	8002a86 <HAL_GPIO_WritePin>
 800636c:	e004      	b.n	8006378 <output_SC_CAM_CRK+0x98>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800636e:	2201      	movs	r2, #1
 8006370:	2140      	movs	r1, #64	; 0x40
 8006372:	480d      	ldr	r0, [pc, #52]	; (80063a8 <output_SC_CAM_CRK+0xc8>)
 8006374:	f7fc fb87 	bl	8002a86 <HAL_GPIO_WritePin>
                }
                output_CRK_no_failure();
 8006378:	f7fe fac6 	bl	8004908 <output_CRK_no_failure>
                break;
 800637c:	e00c      	b.n	8006398 <output_SC_CAM_CRK+0xb8>
            }
        }
    } else if (failure_active == false) {
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <output_SC_CAM_CRK+0xc0>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <output_SC_CAM_CRK+0xb8>
        output_CRK_no_failure();
 800638c:	f7fe fabc 	bl	8004908 <output_CRK_no_failure>
        output_CAM_no_failure(cam_id);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fe fad1 	bl	8004938 <output_CAM_no_failure>
    }
}
 8006396:	e7ff      	b.n	8006398 <output_SC_CAM_CRK+0xb8>
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000674 	.word	0x20000674
 80063a4:	20000790 	.word	0x20000790
 80063a8:	40010800 	.word	0x40010800

080063ac <SC_CAM_CRK_reset>:

//## POSN_ENG_STST_LOSS_reset
void SC_CAM_CRK_reset(void) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
    failure_active = false;
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <SC_CAM_CRK_reset+0x20>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
    output_CRK_no_failure();
 80063b6:	f7fe faa7 	bl	8004908 <output_CRK_no_failure>
    output_CAM_no_failure(0);  // reset CAM1
 80063ba:	2000      	movs	r0, #0
 80063bc:	f7fe fabc 	bl	8004938 <output_CAM_no_failure>
    output_CAM_no_failure(1);  // reset CAM2
 80063c0:	2001      	movs	r0, #1
 80063c2:	f7fe fab9 	bl	8004938 <output_CAM_no_failure>
}
 80063c6:	bf00      	nop
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000674 	.word	0x20000674

080063d0 <failure_processing>:

//### Failure Processing ###
void failure_processing(char failure_ident) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	3b31      	subs	r3, #49	; 0x31
 80063de:	2b3c      	cmp	r3, #60	; 0x3c
 80063e0:	f200 8095 	bhi.w	800650e <failure_processing+0x13e>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <failure_processing+0x1c>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	0800650f 	.word	0x0800650f
 80063f0:	0800650f 	.word	0x0800650f
 80063f4:	0800650f 	.word	0x0800650f
 80063f8:	0800650f 	.word	0x0800650f
 80063fc:	0800650f 	.word	0x0800650f
 8006400:	0800650f 	.word	0x0800650f
 8006404:	0800650f 	.word	0x0800650f
 8006408:	0800650f 	.word	0x0800650f
 800640c:	080064e1 	.word	0x080064e1
 8006410:	0800650f 	.word	0x0800650f
 8006414:	0800650f 	.word	0x0800650f
 8006418:	0800650f 	.word	0x0800650f
 800641c:	0800650f 	.word	0x0800650f
 8006420:	0800650f 	.word	0x0800650f
 8006424:	0800650f 	.word	0x0800650f
 8006428:	0800650f 	.word	0x0800650f
 800642c:	0800650f 	.word	0x0800650f
 8006430:	0800650f 	.word	0x0800650f
 8006434:	0800650f 	.word	0x0800650f
 8006438:	0800650f 	.word	0x0800650f
 800643c:	0800650f 	.word	0x0800650f
 8006440:	0800650f 	.word	0x0800650f
 8006444:	0800650f 	.word	0x0800650f
 8006448:	0800650f 	.word	0x0800650f
 800644c:	0800650f 	.word	0x0800650f
 8006450:	0800650f 	.word	0x0800650f
 8006454:	0800650f 	.word	0x0800650f
 8006458:	0800650f 	.word	0x0800650f
 800645c:	0800650f 	.word	0x0800650f
 8006460:	0800650f 	.word	0x0800650f
 8006464:	0800650f 	.word	0x0800650f
 8006468:	0800650f 	.word	0x0800650f
 800646c:	0800650f 	.word	0x0800650f
 8006470:	0800650f 	.word	0x0800650f
 8006474:	0800650f 	.word	0x0800650f
 8006478:	0800650f 	.word	0x0800650f
 800647c:	0800650f 	.word	0x0800650f
 8006480:	0800650f 	.word	0x0800650f
 8006484:	0800650f 	.word	0x0800650f
 8006488:	0800650f 	.word	0x0800650f
 800648c:	0800650f 	.word	0x0800650f
 8006490:	0800650f 	.word	0x0800650f
 8006494:	0800650f 	.word	0x0800650f
 8006498:	0800650f 	.word	0x0800650f
 800649c:	0800650f 	.word	0x0800650f
 80064a0:	0800650f 	.word	0x0800650f
 80064a4:	0800650f 	.word	0x0800650f
 80064a8:	0800650f 	.word	0x0800650f
 80064ac:	0800650f 	.word	0x0800650f
 80064b0:	0800650f 	.word	0x0800650f
 80064b4:	0800650f 	.word	0x0800650f
 80064b8:	0800650f 	.word	0x0800650f
 80064bc:	0800650f 	.word	0x0800650f
 80064c0:	0800650f 	.word	0x0800650f
 80064c4:	0800650f 	.word	0x0800650f
 80064c8:	0800650f 	.word	0x0800650f
 80064cc:	0800650f 	.word	0x0800650f
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	0800650f 	.word	0x0800650f
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
        case '8': {
            break;
        }
        case '9':  // Cam delay
        {
            if (active_cam_failure == 2) {
 80064e0:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <failure_processing+0x148>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d106      	bne.n	80064f6 <failure_processing+0x126>
                CAM_delay(0);  // for CAM1
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7fe fee5 	bl	80052b8 <CAM_delay>
                CAM_delay(1);  // for CAM2
 80064ee:	2001      	movs	r0, #1
 80064f0:	f7fe fee2 	bl	80052b8 <CAM_delay>
            } else if (active_cam_failure == 1) {
                CAM_delay(1);  // for CAM2
            } else {
                CAM_delay(0);  // for CAM1
            }
            break;
 80064f4:	e00c      	b.n	8006510 <failure_processing+0x140>
            } else if (active_cam_failure == 1) {
 80064f6:	4b08      	ldr	r3, [pc, #32]	; (8006518 <failure_processing+0x148>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d103      	bne.n	8006506 <failure_processing+0x136>
                CAM_delay(1);  // for CAM2
 80064fe:	2001      	movs	r0, #1
 8006500:	f7fe feda 	bl	80052b8 <CAM_delay>
            break;
 8006504:	e004      	b.n	8006510 <failure_processing+0x140>
                CAM_delay(0);  // for CAM1
 8006506:	2000      	movs	r0, #0
 8006508:	f7fe fed6 	bl	80052b8 <CAM_delay>
            break;
 800650c:	e000      	b.n	8006510 <failure_processing+0x140>
        }
        case 'm': {
            break;
        }
        default: {
            break;
 800650e:	bf00      	nop
        }
    }
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000670 	.word	0x20000670

0800651c <failure_synch_reset>:

//### Failure Synchronization Reset ###
void failure_synch_reset(char failure_ident) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b37      	cmp	r3, #55	; 0x37
 800652a:	d00c      	beq.n	8006546 <failure_synch_reset+0x2a>
 800652c:	2b37      	cmp	r3, #55	; 0x37
 800652e:	dc0d      	bgt.n	800654c <failure_synch_reset+0x30>
 8006530:	2b34      	cmp	r3, #52	; 0x34
 8006532:	d002      	beq.n	800653a <failure_synch_reset+0x1e>
 8006534:	2b36      	cmp	r3, #54	; 0x36
 8006536:	d003      	beq.n	8006540 <failure_synch_reset+0x24>
            // CAM_DELAY(CAM_TOOTH_OFF)
            CAM_delay_reset();
            break;
        }
        default:
            break;
 8006538:	e008      	b.n	800654c <failure_synch_reset+0x30>
            CRK_RUN_OUT_reset();
 800653a:	f7fe faf3 	bl	8004b24 <CRK_RUN_OUT_reset>
            break;
 800653e:	e006      	b.n	800654e <failure_synch_reset+0x32>
            CRK_TOOTH_PER_reset();
 8006540:	f7fe fd86 	bl	8005050 <CRK_TOOTH_PER_reset>
            break;
 8006544:	e003      	b.n	800654e <failure_synch_reset+0x32>
            CAM_delay_reset();
 8006546:	f7ff fa5b 	bl	8005a00 <CAM_delay_reset>
            break;
 800654a:	e000      	b.n	800654e <failure_synch_reset+0x32>
            break;
 800654c:	bf00      	nop
    }
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <former_teeth_time_calculation>:

//### Former teeth time calculation ###
double former_teeth_time_calculation(long t_tooth, unsigned int teeth_count,
                                     int numb_miss_teeth) {
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
    double form_teeth_time;

    form_teeth_time = (double)t_tooth;
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7f9 ff4e 	bl	8000404 <__aeabi_i2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (teeth_count == 1) {
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10e      	bne.n	8006594 <former_teeth_time_calculation+0x3e>
        form_teeth_time = form_teeth_time / (double)(numb_miss_teeth + 1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3301      	adds	r3, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f7f9 ff42 	bl	8000404 <__aeabi_i2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006588:	f7fa f8d0 	bl	800072c <__aeabi_ddiv>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return (form_teeth_time);
 8006594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <former_teeth_time_calculation_output>:

//### Former teeth time calculation output ###
double former_teeth_time_calculation_output(long t_tooth,
                                            unsigned int teeth_count, int numb_miss_teeth) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
    double form_teeth_time;

    form_teeth_time = (double)t_tooth;
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7f9 ff27 	bl	8000404 <__aeabi_i2d>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (teeth_count == number_teeth_between_gaps) {
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <former_teeth_time_calculation_output+0x50>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d10e      	bne.n	80065e6 <former_teeth_time_calculation_output+0x42>
        form_teeth_time = form_teeth_time / (double)(numb_miss_teeth + 1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3301      	adds	r3, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7f9 ff19 	bl	8000404 <__aeabi_i2d>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065da:	f7fa f8a7 	bl	800072c <__aeabi_ddiv>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return (form_teeth_time);
 80065e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000288 	.word	0x20000288

080065f8 <timestamp_to_digit_array>:
    print_signal(crk_array, crk_index);
    printf("\n---CAM---\n");
    print_signal(cam_array, cam_index);
}

void timestamp_to_digit_array(uint32_t timestamp, uint8_t *array) {
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
    array[3] = timestamp & 0xffU;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	3303      	adds	r3, #3
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
    array[2] = (timestamp & 0xff00U) >> 8;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	0a1a      	lsrs	r2, r3, #8
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	3302      	adds	r3, #2
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
    array[1] = (timestamp & 0xff0000U) >> 16;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0c1a      	lsrs	r2, r3, #16
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
    array[0] = (timestamp & 0xff000000U) >> 24;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0e1b      	lsrs	r3, r3, #24
 8006628:	b2da      	uxtb	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	701a      	strb	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <CRK_save>:

uint8_t CRK_save(uint32_t timestamp, uint8_t value) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
    if (crk_array == NULL) {
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <CRK_save+0x7c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <CRK_save+0x26>
        crk_array = malloc(sizeof(uint8_t) * CRK_MAX_SIZE); // 60 KB array for CRK signal
 800664c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8006650:	f002 fdfc 	bl	800924c <malloc>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <CRK_save+0x7c>)
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e007      	b.n	800666e <CRK_save+0x36>
    } else if (crk_index >= CRK_MAX_SIZE) {
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <CRK_save+0x80>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8006666:	4293      	cmp	r3, r2
 8006668:	dd01      	ble.n	800666e <CRK_save+0x36>
        return 1;
 800666a:	2301      	movs	r3, #1
 800666c:	e01e      	b.n	80066ac <CRK_save+0x74>
    }

    crk_array[crk_index] = value;
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <CRK_save+0x7c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <CRK_save+0x80>)
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	4413      	add	r3, r2
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	701a      	strb	r2, [r3, #0]
    timestamp_to_digit_array(timestamp, crk_array + crk_index + 1);
 800667c:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <CRK_save+0x7c>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <CRK_save+0x80>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4413      	add	r3, r2
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ffb4 	bl	80065f8 <timestamp_to_digit_array>

    crk_index += 5;
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <CRK_save+0x80>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3305      	adds	r3, #5
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <CRK_save+0x80>)
 8006698:	6013      	str	r3, [r2, #0]
    if (crk_index >= CRK_MAX_SIZE) {
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <CRK_save+0x80>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80066a2:	4293      	cmp	r3, r2
 80066a4:	dd01      	ble.n	80066aa <CRK_save+0x72>
        return 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <CRK_save+0x74>
    } else {
        return 0;
 80066aa:	2300      	movs	r3, #0
    }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000a0c 	.word	0x20000a0c
 80066b8:	20000a10 	.word	0x20000a10

080066bc <CAM_save>:

uint8_t CAM_save(uint32_t timestamp, uint8_t value) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
    if (cam_array == NULL) {
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <CAM_save+0x7c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <CAM_save+0x26>
        cam_array = malloc(sizeof(uint8_t) * CAM_MAX_SIZE); // 40 KB array for CAM signal
 80066d0:	f649 4040 	movw	r0, #40000	; 0x9c40
 80066d4:	f002 fdba 	bl	800924c <malloc>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <CAM_save+0x7c>)
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e007      	b.n	80066f2 <CAM_save+0x36>
    } else if (cam_index >= CAM_MAX_SIZE) {
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <CAM_save+0x80>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80066ea:	4293      	cmp	r3, r2
 80066ec:	dd01      	ble.n	80066f2 <CAM_save+0x36>
        return 1;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e01e      	b.n	8006730 <CAM_save+0x74>
    }

    cam_array[cam_index] = value;
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <CAM_save+0x7c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a11      	ldr	r2, [pc, #68]	; (800673c <CAM_save+0x80>)
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	4413      	add	r3, r2
 80066fc:	78fa      	ldrb	r2, [r7, #3]
 80066fe:	701a      	strb	r2, [r3, #0]
    timestamp_to_digit_array(timestamp, cam_array + cam_index + 1);
 8006700:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <CAM_save+0x7c>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <CAM_save+0x80>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff ff72 	bl	80065f8 <timestamp_to_digit_array>

    cam_index += 5;
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <CAM_save+0x80>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3305      	adds	r3, #5
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <CAM_save+0x80>)
 800671c:	6013      	str	r3, [r2, #0]
    if (cam_index >= CAM_MAX_SIZE) {
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <CAM_save+0x80>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8006726:	4293      	cmp	r3, r2
 8006728:	dd01      	ble.n	800672e <CAM_save+0x72>
        return 1;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <CAM_save+0x74>
    } else {
        return 0;
 800672e:	2300      	movs	r3, #0
    }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000a14 	.word	0x20000a14
 800673c:	20000a18 	.word	0x20000a18

08006740 <sync_CRK>:

//### Functions ###

// ## CRK Synchronisation
void sync_CRK(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
    // Set label that indicates engine start
    if (engine_start_counter < engine_start_counter_limit && engine_start == false)
 8006746:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <sync_CRK+0x234>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b8b      	ldr	r3, [pc, #556]	; (8006978 <sync_CRK+0x238>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d20c      	bcs.n	800676c <sync_CRK+0x2c>
 8006752:	4b8a      	ldr	r3, [pc, #552]	; (800697c <sync_CRK+0x23c>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f083 0301 	eor.w	r3, r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <sync_CRK+0x2c>
    {
        engine_start_counter++;
 8006760:	4b84      	ldr	r3, [pc, #528]	; (8006974 <sync_CRK+0x234>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a83      	ldr	r2, [pc, #524]	; (8006974 <sync_CRK+0x234>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e00c      	b.n	8006786 <sync_CRK+0x46>
    }
    else if (engine_start == false)
 800676c:	4b83      	ldr	r3, [pc, #524]	; (800697c <sync_CRK+0x23c>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f083 0301 	eor.w	r3, r3, #1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <sync_CRK+0x46>
    {
        engine_start_counter = 0;
 800677a:	4b7e      	ldr	r3, [pc, #504]	; (8006974 <sync_CRK+0x234>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
        engine_start = true;
 8006780:	4b7e      	ldr	r3, [pc, #504]	; (800697c <sync_CRK+0x23c>)
 8006782:	2201      	movs	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
    }
    teeth_count_overall++;
 8006786:	4b7e      	ldr	r3, [pc, #504]	; (8006980 <sync_CRK+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a7c      	ldr	r2, [pc, #496]	; (8006980 <sync_CRK+0x240>)
 800678e:	6013      	str	r3, [r2, #0]

    // Wait for completed start delay
    if ((delay_counter_CRK < start_delay) && delay_off == false)
 8006790:	4b7c      	ldr	r3, [pc, #496]	; (8006984 <sync_CRK+0x244>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b7c      	ldr	r3, [pc, #496]	; (8006988 <sync_CRK+0x248>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d20c      	bcs.n	80067b6 <sync_CRK+0x76>
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <sync_CRK+0x24c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <sync_CRK+0x76>
    {
        delay_counter_CRK++;
 80067aa:	4b76      	ldr	r3, [pc, #472]	; (8006984 <sync_CRK+0x244>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3301      	adds	r3, #1
 80067b0:	4a74      	ldr	r2, [pc, #464]	; (8006984 <sync_CRK+0x244>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e00c      	b.n	80067d0 <sync_CRK+0x90>
    }
    else if (delay_off == false)
 80067b6:	4b75      	ldr	r3, [pc, #468]	; (800698c <sync_CRK+0x24c>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f083 0301 	eor.w	r3, r3, #1
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <sync_CRK+0x90>
    {
        delay_off = true;
 80067c4:	4b71      	ldr	r3, [pc, #452]	; (800698c <sync_CRK+0x24c>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
        delay_counter_CRK = 0;
 80067ca:	4b6e      	ldr	r3, [pc, #440]	; (8006984 <sync_CRK+0x244>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
    }

    if (delay_off == true)
 80067d0:	4b6e      	ldr	r3, [pc, #440]	; (800698c <sync_CRK+0x24c>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 81b4 	beq.w	8006b42 <sync_CRK+0x402>
    {
        if (CRK_synch == true)
 80067da:	4b6d      	ldr	r3, [pc, #436]	; (8006990 <sync_CRK+0x250>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8162 	beq.w	8006aa8 <sync_CRK+0x368>
        {
            // Teeth Counter CRK
            if ((teeth_count_CRK < number_teeth_between_gaps))
 80067e4:	4b6b      	ldr	r3, [pc, #428]	; (8006994 <sync_CRK+0x254>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b6b      	ldr	r3, [pc, #428]	; (8006998 <sync_CRK+0x258>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d20a      	bcs.n	8006806 <sync_CRK+0xc6>
                // 360�CRK for one gap; 180� for two gaps; 120� for three gaps
                // test
                // teeth_count_CRK++;

                // 720�CRK for CAM CRK synchronization
                teeth_count_CAM_CRK_synch++;
 80067f0:	4b6a      	ldr	r3, [pc, #424]	; (800699c <sync_CRK+0x25c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	4a69      	ldr	r2, [pc, #420]	; (800699c <sync_CRK+0x25c>)
 80067f8:	6013      	str	r3, [r2, #0]
                teeth_count_CAM_CRK_synch_ahead++;
 80067fa:	4b69      	ldr	r3, [pc, #420]	; (80069a0 <sync_CRK+0x260>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	4a67      	ldr	r2, [pc, #412]	; (80069a0 <sync_CRK+0x260>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e0e3      	b.n	80069ce <sync_CRK+0x28e>
            else
            {
                // test
                // teeth_count_CRK = 1;

                if (segment_counter_CRK == number_segments_CRK && (CAM_CRK_synch_status == true && CAM_CRK_synch_status_ahead == true))
 8006806:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <sync_CRK+0x264>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b67      	ldr	r3, [pc, #412]	; (80069a8 <sync_CRK+0x268>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d163      	bne.n	80068da <sync_CRK+0x19a>
 8006812:	4b66      	ldr	r3, [pc, #408]	; (80069ac <sync_CRK+0x26c>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d05f      	beq.n	80068da <sync_CRK+0x19a>
 800681a:	4b65      	ldr	r3, [pc, #404]	; (80069b0 <sync_CRK+0x270>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d05b      	beq.n	80068da <sync_CRK+0x19a>
                {

                    if (shift_counter_CRK == number_gap - 1)
 8006822:	4b64      	ldr	r3, [pc, #400]	; (80069b4 <sync_CRK+0x274>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3b01      	subs	r3, #1
 8006828:	461a      	mov	r2, r3
 800682a:	4b63      	ldr	r3, [pc, #396]	; (80069b8 <sync_CRK+0x278>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d10e      	bne.n	8006850 <sync_CRK+0x110>
                    {
                        shift_counter_CRK = 0;
 8006832:	4b61      	ldr	r3, [pc, #388]	; (80069b8 <sync_CRK+0x278>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

                        teeth_count_CAM_CRK_synch = 1;
 8006838:	4b58      	ldr	r3, [pc, #352]	; (800699c <sync_CRK+0x25c>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
                        teeth_count_CAM_CRK_synch_ahead = 1 + number_teeth_between_gaps + number_miss_teeth;
 800683e:	4b56      	ldr	r3, [pc, #344]	; (8006998 <sync_CRK+0x258>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5e      	ldr	r2, [pc, #376]	; (80069bc <sync_CRK+0x27c>)
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	4413      	add	r3, r2
 8006848:	3301      	adds	r3, #1
 800684a:	4a55      	ldr	r2, [pc, #340]	; (80069a0 <sync_CRK+0x260>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e004      	b.n	800685a <sync_CRK+0x11a>
                    }
                    else
                    {
                        shift_counter_CRK++;
 8006850:	4b59      	ldr	r3, [pc, #356]	; (80069b8 <sync_CRK+0x278>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a58      	ldr	r2, [pc, #352]	; (80069b8 <sync_CRK+0x278>)
 8006858:	6013      	str	r3, [r2, #0]
                    }

                    if (shift_counter_CRK == 1)
 800685a:	4b57      	ldr	r3, [pc, #348]	; (80069b8 <sync_CRK+0x278>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d118      	bne.n	8006894 <sync_CRK+0x154>
                    {
                        teeth_count_CAM_CRK_synch = 2 * number_teeth_between_gaps + 2 * number_miss_teeth + 1;
 8006862:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <sync_CRK+0x258>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4a54      	ldr	r2, [pc, #336]	; (80069bc <sync_CRK+0x27c>)
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	0052      	lsls	r2, r2, #1
 800686e:	4413      	add	r3, r2
 8006870:	3301      	adds	r3, #1
 8006872:	4a4a      	ldr	r2, [pc, #296]	; (800699c <sync_CRK+0x25c>)
 8006874:	6013      	str	r3, [r2, #0]
                        teeth_count_CAM_CRK_synch_ahead = 3 * number_teeth_between_gaps + 3 * number_miss_teeth + 1;
 8006876:	4b48      	ldr	r3, [pc, #288]	; (8006998 <sync_CRK+0x258>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	1899      	adds	r1, r3, r2
 8006880:	4b4e      	ldr	r3, [pc, #312]	; (80069bc <sync_CRK+0x27c>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4413      	add	r3, r2
 800688a:	440b      	add	r3, r1
 800688c:	3301      	adds	r3, #1
 800688e:	4a44      	ldr	r2, [pc, #272]	; (80069a0 <sync_CRK+0x260>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e01b      	b.n	80068cc <sync_CRK+0x18c>
                    }
                    else if (shift_counter_CRK == 2)
 8006894:	4b48      	ldr	r3, [pc, #288]	; (80069b8 <sync_CRK+0x278>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d117      	bne.n	80068cc <sync_CRK+0x18c>
                    {
                        teeth_count_CAM_CRK_synch = 4 * number_teeth_between_gaps + 4 * number_miss_teeth + 1;
 800689c:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <sync_CRK+0x258>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4a46      	ldr	r2, [pc, #280]	; (80069bc <sync_CRK+0x27c>)
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	0092      	lsls	r2, r2, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a3b      	ldr	r2, [pc, #236]	; (800699c <sync_CRK+0x25c>)
 80068ae:	6013      	str	r3, [r2, #0]
                        teeth_count_CAM_CRK_synch_ahead = 5 * number_teeth_between_gaps + 5 * number_miss_teeth + 1;
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <sync_CRK+0x258>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	1899      	adds	r1, r3, r2
 80068ba:	4b40      	ldr	r3, [pc, #256]	; (80069bc <sync_CRK+0x27c>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	440b      	add	r3, r1
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a35      	ldr	r2, [pc, #212]	; (80069a0 <sync_CRK+0x260>)
 80068ca:	6013      	str	r3, [r2, #0]
                    }

                    CAM_CRK_synch_status = false;
 80068cc:	4b37      	ldr	r3, [pc, #220]	; (80069ac <sync_CRK+0x26c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_status_ahead = false;
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <sync_CRK+0x270>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e03f      	b.n	800695a <sync_CRK+0x21a>
                }
                else
                {
                    // counter 1
                    if (teeth_count_CAM_CRK_synch == (number_teeth_CRK + number_real_teeth))
 80068da:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <sync_CRK+0x280>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <sync_CRK+0x284>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	441a      	add	r2, r3
 80068e6:	4b2d      	ldr	r3, [pc, #180]	; (800699c <sync_CRK+0x25c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d103      	bne.n	80068f6 <sync_CRK+0x1b6>
                    {
                        teeth_count_CAM_CRK_synch = 1;
 80068ee:	4b2b      	ldr	r3, [pc, #172]	; (800699c <sync_CRK+0x25c>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e011      	b.n	800691a <sync_CRK+0x1da>
                    }
                    else if (teeth_count_CAM_CRK_synch < (number_teeth_CRK + number_real_teeth))
 80068f6:	4b32      	ldr	r3, [pc, #200]	; (80069c0 <sync_CRK+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <sync_CRK+0x284>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	441a      	add	r2, r3
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <sync_CRK+0x25c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d907      	bls.n	800691a <sync_CRK+0x1da>
                    {
                        teeth_count_CAM_CRK_synch = teeth_count_CAM_CRK_synch + number_miss_teeth + 1;
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <sync_CRK+0x25c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2b      	ldr	r2, [pc, #172]	; (80069bc <sync_CRK+0x27c>)
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	4413      	add	r3, r2
 8006914:	3301      	adds	r3, #1
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <sync_CRK+0x25c>)
 8006918:	6013      	str	r3, [r2, #0]
                    }

                    // counter 2
                    if (teeth_count_CAM_CRK_synch_ahead == (number_teeth_CRK + number_real_teeth))
 800691a:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <sync_CRK+0x280>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <sync_CRK+0x284>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	441a      	add	r2, r3
 8006926:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <sync_CRK+0x260>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d103      	bne.n	8006936 <sync_CRK+0x1f6>
                    {
                        teeth_count_CAM_CRK_synch_ahead = 1;
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <sync_CRK+0x260>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e011      	b.n	800695a <sync_CRK+0x21a>
                    }
                    else if (teeth_count_CAM_CRK_synch_ahead < (number_teeth_CRK + number_real_teeth))
 8006936:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <sync_CRK+0x280>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <sync_CRK+0x284>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	441a      	add	r2, r3
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <sync_CRK+0x260>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d907      	bls.n	800695a <sync_CRK+0x21a>
                    {
                        teeth_count_CAM_CRK_synch_ahead = teeth_count_CAM_CRK_synch_ahead + number_miss_teeth + 1;
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <sync_CRK+0x260>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <sync_CRK+0x27c>)
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	4413      	add	r3, r2
 8006954:	3301      	adds	r3, #1
 8006956:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <sync_CRK+0x260>)
 8006958:	6013      	str	r3, [r2, #0]
                    }
                }

                if (segment_counter_CRK < number_segments_CRK)
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <sync_CRK+0x264>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <sync_CRK+0x268>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d230      	bcs.n	80069c8 <sync_CRK+0x288>
                {
                    segment_counter_CRK++;
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <sync_CRK+0x264>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	4a0d      	ldr	r2, [pc, #52]	; (80069a4 <sync_CRK+0x264>)
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	e02d      	b.n	80069ce <sync_CRK+0x28e>
 8006972:	bf00      	nop
 8006974:	2000029c 	.word	0x2000029c
 8006978:	20000004 	.word	0x20000004
 800697c:	200002ad 	.word	0x200002ad
 8006980:	20000668 	.word	0x20000668
 8006984:	2000028c 	.word	0x2000028c
 8006988:	20000000 	.word	0x20000000
 800698c:	200002aa 	.word	0x200002aa
 8006990:	200002a8 	.word	0x200002a8
 8006994:	20000278 	.word	0x20000278
 8006998:	20000288 	.word	0x20000288
 800699c:	2000027c 	.word	0x2000027c
 80069a0:	20000280 	.word	0x20000280
 80069a4:	20000290 	.word	0x20000290
 80069a8:	20000294 	.word	0x20000294
 80069ac:	2000065a 	.word	0x2000065a
 80069b0:	2000065b 	.word	0x2000065b
 80069b4:	2000023c 	.word	0x2000023c
 80069b8:	20000298 	.word	0x20000298
 80069bc:	20000238 	.word	0x20000238
 80069c0:	20000234 	.word	0x20000234
 80069c4:	20000284 	.word	0x20000284
                }
                else
                {
                    segment_counter_CRK = 1;
 80069c8:	4b60      	ldr	r3, [pc, #384]	; (8006b4c <sync_CRK+0x40c>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
                }
            }

            // Check reference gap in specified range
            if (teeth_count_CRK == 2)
 80069ce:	4b60      	ldr	r3, [pc, #384]	; (8006b50 <sync_CRK+0x410>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	f040 80a3 	bne.w	8006b1e <sync_CRK+0x3de>
            {
                // if(!(gap_ratio_CRK_VLD < ((double)(T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(double)(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                // if(!(3 < ((T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                if (T_TOOTH_RAW_1 < T_TOOTH_RAW * 2)
 80069d8:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <sync_CRK+0x414>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	005a      	lsls	r2, r3, #1
 80069de:	4b5e      	ldr	r3, [pc, #376]	; (8006b58 <sync_CRK+0x418>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f240 809b 	bls.w	8006b1e <sync_CRK+0x3de>
                // if(!(3 < ((pow(T_TOOTH_RAW_1))/(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                {
                    CRK_synch = false;
 80069e8:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <sync_CRK+0x41c>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]

                    CRK_synch_temp = false;
 80069ee:	4b5c      	ldr	r3, [pc, #368]	; (8006b60 <sync_CRK+0x420>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]

                    // Send CRK-sycnhronization status
                    uint8_t msg_CRK_synchronisation_lost = message[4];
 80069f4:	4b5b      	ldr	r3, [pc, #364]	; (8006b64 <sync_CRK+0x424>)
 80069f6:	791b      	ldrb	r3, [r3, #4]
 80069f8:	71fb      	strb	r3, [r7, #7]
                    HAL_UART_Transmit_IT(&huart1, &msg_CRK_synchronisation_lost, 1);
 80069fa:	1dfb      	adds	r3, r7, #7
 80069fc:	2201      	movs	r2, #1
 80069fe:	4619      	mov	r1, r3
 8006a00:	4859      	ldr	r0, [pc, #356]	; (8006b68 <sync_CRK+0x428>)
 8006a02:	f7fd f97e 	bl	8003d02 <HAL_UART_Transmit_IT>

                    CRK_CAM_synch[0] = false;
 8006a06:	4b59      	ldr	r3, [pc, #356]	; (8006b6c <sync_CRK+0x42c>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
                    CRK_CAM_synch[1] = false;
 8006a0c:	4b57      	ldr	r3, [pc, #348]	; (8006b6c <sync_CRK+0x42c>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	705a      	strb	r2, [r3, #1]

                    // Send CRK_CAM-sycnhronization status
                    uint8_t msg_CAM_CRK_synchronisation_lost = message[6];
 8006a12:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <sync_CRK+0x424>)
 8006a14:	799b      	ldrb	r3, [r3, #6]
 8006a16:	71bb      	strb	r3, [r7, #6]
                    HAL_UART_Transmit_IT(&huart1, &msg_CAM_CRK_synchronisation_lost , 1);
 8006a18:	1dbb      	adds	r3, r7, #6
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4852      	ldr	r0, [pc, #328]	; (8006b68 <sync_CRK+0x428>)
 8006a20:	f7fd f96f 	bl	8003d02 <HAL_UART_Transmit_IT>

                    // Reset actual failure scenarios
                    failure_synch_reset(failure_identify);
 8006a24:	4b52      	ldr	r3, [pc, #328]	; (8006b70 <sync_CRK+0x430>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fd77 	bl	800651c <failure_synch_reset>

                    edge_position_counter_CAM[0] = 0;
 8006a2e:	4b51      	ldr	r3, [pc, #324]	; (8006b74 <sync_CRK+0x434>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
                    edge_validation_counter_CAM[0] = 0;
 8006a34:	4b50      	ldr	r3, [pc, #320]	; (8006b78 <sync_CRK+0x438>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
                    former_edge_position_CAM[0] = 0;
 8006a3a:	4b50      	ldr	r3, [pc, #320]	; (8006b7c <sync_CRK+0x43c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
                    edge_position_counter_CAM_ahead[0] = 0;
 8006a40:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <sync_CRK+0x440>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
                    edge_validation_counter_CAM_ahead[0] = 0;
 8006a46:	4b4f      	ldr	r3, [pc, #316]	; (8006b84 <sync_CRK+0x444>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
                    former_edge_position_CAM_ahead[0] = 0;
 8006a4c:	4b4e      	ldr	r3, [pc, #312]	; (8006b88 <sync_CRK+0x448>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

                    edge_position_counter_CAM[1] = 0;
 8006a52:	4b48      	ldr	r3, [pc, #288]	; (8006b74 <sync_CRK+0x434>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]
                    edge_validation_counter_CAM[1] = 0;
 8006a58:	4b47      	ldr	r3, [pc, #284]	; (8006b78 <sync_CRK+0x438>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
                    former_edge_position_CAM[1] = 0;
 8006a5e:	4b47      	ldr	r3, [pc, #284]	; (8006b7c <sync_CRK+0x43c>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]
                    edge_position_counter_CAM_ahead[1] = 0;
 8006a64:	4b46      	ldr	r3, [pc, #280]	; (8006b80 <sync_CRK+0x440>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
                    edge_validation_counter_CAM_ahead[1] = 0;
 8006a6a:	4b46      	ldr	r3, [pc, #280]	; (8006b84 <sync_CRK+0x444>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
                    former_edge_position_CAM_ahead[1] = 0;
 8006a70:	4b45      	ldr	r3, [pc, #276]	; (8006b88 <sync_CRK+0x448>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	605a      	str	r2, [r3, #4]

                    CAM_CRK_synch_status = false;
 8006a76:	4b45      	ldr	r3, [pc, #276]	; (8006b8c <sync_CRK+0x44c>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_status_ahead = false;
 8006a7c:	4b44      	ldr	r3, [pc, #272]	; (8006b90 <sync_CRK+0x450>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_ahead[0] = false;
 8006a82:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <sync_CRK+0x454>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_ahead[1] = false;
 8006a88:	4b42      	ldr	r3, [pc, #264]	; (8006b94 <sync_CRK+0x454>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	705a      	strb	r2, [r3, #1]
                    shift_counter_CRK = 0;
 8006a8e:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <sync_CRK+0x458>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
                    teeth_count_CRK = 0;
 8006a94:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <sync_CRK+0x410>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch = 0;
 8006a9a:	4b40      	ldr	r3, [pc, #256]	; (8006b9c <sync_CRK+0x45c>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch_ahead = 0;
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <sync_CRK+0x460>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e03a      	b.n	8006b1e <sync_CRK+0x3de>
            }
        } // CRK_synch == true - END
        else
        {
            // Check reference gap for the first time
            if (synch_times_valid)
 8006aa8:	4b3e      	ldr	r3, [pc, #248]	; (8006ba4 <sync_CRK+0x464>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d036      	beq.n	8006b1e <sync_CRK+0x3de>
            {
                // if(CRK_synch_temp == true && gap_ratio_CRK_VLD < ((double)(T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(double)(T_TOOTH_RAW_2 * T_TOOTH_RAW)))
                // if(CRK_synch_temp == true && 3 < ((T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(T_TOOTH_RAW_2 * T_TOOTH_RAW)))
                if (CRK_synch_temp == true && (T_TOOTH_RAW_2 < T_TOOTH_RAW_1 * 2))
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <sync_CRK+0x420>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d024      	beq.n	8006b02 <sync_CRK+0x3c2>
 8006ab8:	4b27      	ldr	r3, [pc, #156]	; (8006b58 <sync_CRK+0x418>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	005a      	lsls	r2, r3, #1
 8006abe:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <sync_CRK+0x468>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d91d      	bls.n	8006b02 <sync_CRK+0x3c2>
                {
                    teeth_count_CRK = 2;
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <sync_CRK+0x410>)
 8006ac8:	2202      	movs	r2, #2
 8006aca:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch = 2;
 8006acc:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <sync_CRK+0x45c>)
 8006ace:	2202      	movs	r2, #2
 8006ad0:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch_ahead = 2 + number_teeth_between_gaps + number_miss_teeth;
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <sync_CRK+0x46c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <sync_CRK+0x470>)
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	4413      	add	r3, r2
 8006adc:	3302      	adds	r3, #2
 8006ade:	4a30      	ldr	r2, [pc, #192]	; (8006ba0 <sync_CRK+0x460>)
 8006ae0:	6013      	str	r3, [r2, #0]
                    segment_counter_CRK = 1;
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <sync_CRK+0x40c>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
                    CRK_synch = true;
 8006ae8:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <sync_CRK+0x41c>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]

                    // Send CRK-sycnhronization status
                    uint8_t msg_CRK_synchronisation_ready = message[3];
 8006aee:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <sync_CRK+0x424>)
 8006af0:	78db      	ldrb	r3, [r3, #3]
 8006af2:	717b      	strb	r3, [r7, #5]
                    HAL_UART_Transmit_IT(&huart1, &msg_CRK_synchronisation_ready, 1);
 8006af4:	1d7b      	adds	r3, r7, #5
 8006af6:	2201      	movs	r2, #1
 8006af8:	4619      	mov	r1, r3
 8006afa:	481b      	ldr	r0, [pc, #108]	; (8006b68 <sync_CRK+0x428>)
 8006afc:	f7fd f901 	bl	8003d02 <HAL_UART_Transmit_IT>
                {
 8006b00:	e002      	b.n	8006b08 <sync_CRK+0x3c8>
                }
                else
                {
                    CRK_synch_temp = false;
 8006b02:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <sync_CRK+0x420>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
                }

                // if(gap_ratio_CRK_DET < ((double)(T_TOOTH_RAW/T_TOOTH_RAW_1)))
                if (2 < ((T_TOOTH_RAW / T_TOOTH_RAW_1)))
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <sync_CRK+0x414>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <sync_CRK+0x418>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d902      	bls.n	8006b1e <sync_CRK+0x3de>
                {
                    CRK_synch_temp = true;
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <sync_CRK+0x420>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        // set former tooth times
        T_TOOTH_RAW_2 = T_TOOTH_RAW_1;
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <sync_CRK+0x418>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <sync_CRK+0x468>)
 8006b24:	6013      	str	r3, [r2, #0]
        T_TOOTH_RAW_1 = T_TOOTH_RAW;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <sync_CRK+0x414>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a0b      	ldr	r2, [pc, #44]	; (8006b58 <sync_CRK+0x418>)
 8006b2c:	6013      	str	r3, [r2, #0]

        if (synch_times_valid == false)
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <sync_CRK+0x464>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <sync_CRK+0x402>
        {
            synch_times_valid = true;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <sync_CRK+0x464>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
        }

    } // delay_off == true - END
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000290 	.word	0x20000290
 8006b50:	20000278 	.word	0x20000278
 8006b54:	2000026c 	.word	0x2000026c
 8006b58:	20000268 	.word	0x20000268
 8006b5c:	200002a8 	.word	0x200002a8
 8006b60:	200002a9 	.word	0x200002a9
 8006b64:	20000024 	.word	0x20000024
 8006b68:	200009c4 	.word	0x200009c4
 8006b6c:	20000664 	.word	0x20000664
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	20000600 	.word	0x20000600
 8006b78:	200005f8 	.word	0x200005f8
 8006b7c:	20000608 	.word	0x20000608
 8006b80:	20000618 	.word	0x20000618
 8006b84:	20000610 	.word	0x20000610
 8006b88:	20000620 	.word	0x20000620
 8006b8c:	2000065a 	.word	0x2000065a
 8006b90:	2000065b 	.word	0x2000065b
 8006b94:	2000065c 	.word	0x2000065c
 8006b98:	20000298 	.word	0x20000298
 8006b9c:	2000027c 	.word	0x2000027c
 8006ba0:	20000280 	.word	0x20000280
 8006ba4:	200002ae 	.word	0x200002ae
 8006ba8:	20000264 	.word	0x20000264
 8006bac:	20000288 	.word	0x20000288
 8006bb0:	20000238 	.word	0x20000238

08006bb4 <sync_CAM_CRK>:

// ## CAM_CRK Synchronisation
void sync_CAM_CRK(int camId)
{
 8006bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb8:	b096      	sub	sp, #88	; 0x58
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6178      	str	r0, [r7, #20]
    // increase CAM edges counter
    if (CAM_tolerance_switch[camId] == false)
 8006bbe:	4a89      	ldr	r2, [pc, #548]	; (8006de4 <sync_CAM_CRK+0x230>)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f083 0301 	eor.w	r3, r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <sync_CAM_CRK+0x2e>
    {
        edge_count_CAM[camId]++;
 8006bd0:	4a85      	ldr	r2, [pc, #532]	; (8006de8 <sync_CAM_CRK+0x234>)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	4983      	ldr	r1, [pc, #524]	; (8006de8 <sync_CAM_CRK+0x234>)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // change tolerance window for CAM/CRK synchronization when the edge counter has achieved the defined maximum(10)
    if (edge_count_CAM[camId] > 10)
 8006be2:	4a81      	ldr	r2, [pc, #516]	; (8006de8 <sync_CAM_CRK+0x234>)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bea:	2b0a      	cmp	r3, #10
 8006bec:	d91a      	bls.n	8006c24 <sync_CAM_CRK+0x70>
    {
        CAM_tolerance_switch[camId] = true;
 8006bee:	4a7d      	ldr	r2, [pc, #500]	; (8006de4 <sync_CAM_CRK+0x230>)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
        edge_count_CAM[camId] = 0;
 8006bf8:	4a7b      	ldr	r2, [pc, #492]	; (8006de8 <sync_CAM_CRK+0x234>)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        tolerance_window_CAM[camId] = 2.0 * revolution_CRK; // was 1
 8006c02:	4b7a      	ldr	r3, [pc, #488]	; (8006dec <sync_CAM_CRK+0x238>)
 8006c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	f7f9 faae 	bl	800016c <__adddf3>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4610      	mov	r0, r2
 8006c16:	4619      	mov	r1, r3
 8006c18:	4a75      	ldr	r2, [pc, #468]	; (8006df0 <sync_CAM_CRK+0x23c>)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // execute CAM_CRK synchronization if CRK synchronization is done
    if (CRK_synch == true)
 8006c24:	4b73      	ldr	r3, [pc, #460]	; (8006df4 <sync_CAM_CRK+0x240>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 838a 	beq.w	8007342 <sync_CAM_CRK+0x78e>
    {
        if (CRK_CAM_synch[camId] == false) // CAM_CRK synchronization
 8006c2e:	4a72      	ldr	r2, [pc, #456]	; (8006df8 <sync_CAM_CRK+0x244>)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f083 0301 	eor.w	r3, r3, #1
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8380 	beq.w	8007342 <sync_CAM_CRK+0x78e>
        {
            // CAM_CRK_synch_ahead[camId] = true;
            // CAM_CRK_synch_set(camId);

            // CAM_CRK synchronization for both active edges(falling edge)
            if (CAM_signal[camId] == false && active_CAM_edges[camId] == 'b')
 8006c42:	4a6e      	ldr	r2, [pc, #440]	; (8006dfc <sync_CAM_CRK+0x248>)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	4413      	add	r3, r2
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f083 0301 	eor.w	r3, r3, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8193 	beq.w	8006f7c <sync_CAM_CRK+0x3c8>
 8006c56:	4a6a      	ldr	r2, [pc, #424]	; (8006e00 <sync_CAM_CRK+0x24c>)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b62      	cmp	r3, #98	; 0x62
 8006c60:	f040 818c 	bne.w	8006f7c <sync_CAM_CRK+0x3c8>
            {
                gap_to_edge_calculation();
 8006c64:	f000 fe10 	bl	8007888 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 0; j < number_teeth_CAM[camId] * 2; j += 2)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c6c:	e0a3      	b.n	8006db6 <sync_CAM_CRK+0x202>
                {

                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 8006c6e:	4965      	ldr	r1, [pc, #404]	; (8006e04 <sync_CAM_CRK+0x250>)
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4613      	mov	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c7c:	4413      	add	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	440b      	add	r3, r1
 8006c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c86:	4b60      	ldr	r3, [pc, #384]	; (8006e08 <sync_CAM_CRK+0x254>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fa6c 	bl	8000168 <__aeabi_dsub>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 8006c98:	4a55      	ldr	r2, [pc, #340]	; (8006df0 <sync_CAM_CRK+0x23c>)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ca8:	f7f9 fe88 	bl	80009bc <__aeabi_dcmplt>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d072      	beq.n	8006d98 <sync_CAM_CRK+0x1e4>
 8006cb2:	4a4f      	ldr	r2, [pc, #316]	; (8006df0 <sync_CAM_CRK+0x23c>)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006ccc:	f7f9 fe94 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d060      	beq.n	8006d98 <sync_CAM_CRK+0x1e4>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	3301      	adds	r3, #1
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4a4b      	ldr	r2, [pc, #300]	; (8006e0c <sync_CAM_CRK+0x258>)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if ((edge_validation_counter_CAM_ahead[camId] == number_teeth_CAM[camId] * 2) && (edge_position_counter_CAM_ahead[camId] == 1) && (former_edge_position_CAM_ahead[camId] == (number_teeth_CAM[camId] * 2)))
 8006ce4:	4a4a      	ldr	r2, [pc, #296]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cec:	4949      	ldr	r1, [pc, #292]	; (8006e14 <sync_CAM_CRK+0x260>)
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cf4:	0052      	lsls	r2, r2, #1
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d119      	bne.n	8006d2e <sync_CAM_CRK+0x17a>
 8006cfa:	4a44      	ldr	r2, [pc, #272]	; (8006e0c <sync_CAM_CRK+0x258>)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d113      	bne.n	8006d2e <sync_CAM_CRK+0x17a>
 8006d06:	4a44      	ldr	r2, [pc, #272]	; (8006e18 <sync_CAM_CRK+0x264>)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0e:	4941      	ldr	r1, [pc, #260]	; (8006e14 <sync_CAM_CRK+0x260>)
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006d16:	0052      	lsls	r2, r2, #1
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d108      	bne.n	8006d2e <sync_CAM_CRK+0x17a>
                        {
                            CAM_CRK_synch_ahead[camId] = true;
 8006d1c:	4a3f      	ldr	r2, [pc, #252]	; (8006e1c <sync_CAM_CRK+0x268>)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	4413      	add	r3, r2
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]

                            CAM_CRK_synch_set(camId);
 8006d26:	6978      	ldr	r0, [r7, #20]
 8006d28:	f000 fe74 	bl	8007a14 <CAM_CRK_synch_set>

                            break;
 8006d2c:	e04c      	b.n	8006dc8 <sync_CAM_CRK+0x214>
                        }

                        if (edge_position_counter_CAM_ahead[camId] == 1)
 8006d2e:	4a37      	ldr	r2, [pc, #220]	; (8006e0c <sync_CAM_CRK+0x258>)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <sync_CAM_CRK+0x192>
                        {
                            edge_validation_counter_CAM_ahead[camId] = 1;
 8006d3a:	4a35      	ldr	r2, [pc, #212]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2101      	movs	r1, #1
 8006d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006d44:	e01f      	b.n	8006d86 <sync_CAM_CRK+0x1d2>
                        }
                        else if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1) && (edge_validation_counter_CAM_ahead[camId] != 1))
 8006d46:	4a32      	ldr	r2, [pc, #200]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d019      	beq.n	8006d86 <sync_CAM_CRK+0x1d2>
 8006d52:	4a31      	ldr	r2, [pc, #196]	; (8006e18 <sync_CAM_CRK+0x264>)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d5a:	492c      	ldr	r1, [pc, #176]	; (8006e0c <sync_CAM_CRK+0x258>)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d10e      	bne.n	8006d86 <sync_CAM_CRK+0x1d2>
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d008      	beq.n	8006d86 <sync_CAM_CRK+0x1d2>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 8006d74:	4a26      	ldr	r2, [pc, #152]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	4924      	ldr	r1, [pc, #144]	; (8006e10 <sync_CAM_CRK+0x25c>)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 8006d86:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <sync_CAM_CRK+0x258>)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d8e:	4922      	ldr	r1, [pc, #136]	; (8006e18 <sync_CAM_CRK+0x264>)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 8006d96:	e017      	b.n	8006dc8 <sync_CAM_CRK+0x214>
                    }

                    else if (j == (number_teeth_CAM[camId] * 2 - 2))
 8006d98:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <sync_CAM_CRK+0x260>)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d102      	bne.n	8006db0 <sync_CAM_CRK+0x1fc>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 8006daa:	6978      	ldr	r0, [r7, #20]
 8006dac:	f000 fe0e 	bl	80079cc <CAM_CRK_synch_ahead_reset>
                for (j = 0; j < number_teeth_CAM[camId] * 2; j += 2)
 8006db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db2:	3302      	adds	r3, #2
 8006db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db6:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <sync_CAM_CRK+0x260>)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	f6ff af53 	blt.w	8006c6e <sync_CAM_CRK+0xba>
                    }
                }

                // counter 1
                if (CRK_CAM_synch[camId] == false)
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <sync_CAM_CRK+0x244>)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f083 0301 	eor.w	r3, r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80d0 	beq.w	8006f7c <sync_CAM_CRK+0x3c8>
                {

                    for (i = 0; i < number_teeth_CAM[camId] * 2; i += 2)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	647b      	str	r3, [r7, #68]	; 0x44
 8006de0:	e0c3      	b.n	8006f6a <sync_CAM_CRK+0x3b6>
 8006de2:	bf00      	nop
 8006de4:	20000658 	.word	0x20000658
 8006de8:	200005f0 	.word	0x200005f0
 8006dec:	200002a0 	.word	0x200002a0
 8006df0:	20000648 	.word	0x20000648
 8006df4:	200002a8 	.word	0x200002a8
 8006df8:	20000664 	.word	0x20000664
 8006dfc:	20000660 	.word	0x20000660
 8006e00:	200005e0 	.word	0x200005e0
 8006e04:	20000450 	.word	0x20000450
 8006e08:	20000630 	.word	0x20000630
 8006e0c:	20000618 	.word	0x20000618
 8006e10:	20000610 	.word	0x20000610
 8006e14:	200002b8 	.word	0x200002b8
 8006e18:	20000620 	.word	0x20000620
 8006e1c:	2000065c 	.word	0x2000065c
                    {
                        difference = distance_gap_to_CAM_edge[camId][i] - gap_to_edge;
 8006e20:	499c      	ldr	r1, [pc, #624]	; (8007094 <sync_CAM_CRK+0x4e0>)
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4613      	mov	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e38:	4b97      	ldr	r3, [pc, #604]	; (8007098 <sync_CAM_CRK+0x4e4>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 f993 	bl	8000168 <__aeabi_dsub>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

                        if ((difference < tolerance_window_CAM[camId]) && (difference > -tolerance_window_CAM[camId]))
 8006e4a:	4a94      	ldr	r2, [pc, #592]	; (800709c <sync_CAM_CRK+0x4e8>)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4413      	add	r3, r2
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006e5a:	f7f9 fdaf 	bl	80009bc <__aeabi_dcmplt>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d073      	beq.n	8006f4c <sync_CAM_CRK+0x398>
 8006e64:	4a8d      	ldr	r2, [pc, #564]	; (800709c <sync_CAM_CRK+0x4e8>)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	60ba      	str	r2, [r7, #8]
 8006e72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006e80:	f7f9 fdba 	bl	80009f8 <__aeabi_dcmpgt>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d060      	beq.n	8006f4c <sync_CAM_CRK+0x398>
                        {
                            edge_position_counter_CAM[camId] = i + 1;
 8006e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4a83      	ldr	r2, [pc, #524]	; (80070a0 <sync_CAM_CRK+0x4ec>)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                            if ((edge_validation_counter_CAM[camId] == number_teeth_CAM[camId] * 2) && (edge_position_counter_CAM[camId] == 1) && (former_edge_position_CAM[camId] == (number_teeth_CAM[camId] * 2)))
 8006e98:	4a82      	ldr	r2, [pc, #520]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea0:	4981      	ldr	r1, [pc, #516]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ea8:	0052      	lsls	r2, r2, #1
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d119      	bne.n	8006ee2 <sync_CAM_CRK+0x32e>
 8006eae:	4a7c      	ldr	r2, [pc, #496]	; (80070a0 <sync_CAM_CRK+0x4ec>)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d113      	bne.n	8006ee2 <sync_CAM_CRK+0x32e>
 8006eba:	4a7c      	ldr	r2, [pc, #496]	; (80070ac <sync_CAM_CRK+0x4f8>)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec2:	4979      	ldr	r1, [pc, #484]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006eca:	0052      	lsls	r2, r2, #1
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d108      	bne.n	8006ee2 <sync_CAM_CRK+0x32e>
                            {
                                CAM_CRK_synch_ahead[camId] = false;
 8006ed0:	4a77      	ldr	r2, [pc, #476]	; (80070b0 <sync_CAM_CRK+0x4fc>)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]

                                CAM_CRK_synch_set(camId);
 8006eda:	6978      	ldr	r0, [r7, #20]
 8006edc:	f000 fd9a 	bl	8007a14 <CAM_CRK_synch_set>

                                break;
 8006ee0:	e04c      	b.n	8006f7c <sync_CAM_CRK+0x3c8>
                            }

                            if (edge_position_counter_CAM[camId] == 1)
 8006ee2:	4a6f      	ldr	r2, [pc, #444]	; (80070a0 <sync_CAM_CRK+0x4ec>)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d105      	bne.n	8006efa <sync_CAM_CRK+0x346>
                            {
                                edge_validation_counter_CAM[camId] = 1;
 8006eee:	4a6d      	ldr	r2, [pc, #436]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006ef8:	e01f      	b.n	8006f3a <sync_CAM_CRK+0x386>
                            }
                            else if (edge_validation_counter_CAM[camId] > 0 && (former_edge_position_CAM[camId] == edge_position_counter_CAM[camId] - 1) && (edge_validation_counter_CAM[camId] != 1))
 8006efa:	4a6a      	ldr	r2, [pc, #424]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d019      	beq.n	8006f3a <sync_CAM_CRK+0x386>
 8006f06:	4a69      	ldr	r2, [pc, #420]	; (80070ac <sync_CAM_CRK+0x4f8>)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f0e:	4964      	ldr	r1, [pc, #400]	; (80070a0 <sync_CAM_CRK+0x4ec>)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d10e      	bne.n	8006f3a <sync_CAM_CRK+0x386>
 8006f1c:	4a61      	ldr	r2, [pc, #388]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d008      	beq.n	8006f3a <sync_CAM_CRK+0x386>
                            {
                                edge_validation_counter_CAM[camId]++;
 8006f28:	4a5e      	ldr	r2, [pc, #376]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	495c      	ldr	r1, [pc, #368]	; (80070a4 <sync_CAM_CRK+0x4f0>)
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                            }

                            former_edge_position_CAM[camId] = edge_position_counter_CAM[camId];
 8006f3a:	4a59      	ldr	r2, [pc, #356]	; (80070a0 <sync_CAM_CRK+0x4ec>)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f42:	495a      	ldr	r1, [pc, #360]	; (80070ac <sync_CAM_CRK+0x4f8>)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                            break;
 8006f4a:	e017      	b.n	8006f7c <sync_CAM_CRK+0x3c8>
                        }

                        else if (i == (number_teeth_CAM[camId] * 2 - 2))
 8006f4c:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d102      	bne.n	8006f64 <sync_CAM_CRK+0x3b0>
                        {
                            CAM_CRK_synch_reset(camId);
 8006f5e:	6978      	ldr	r0, [r7, #20]
 8006f60:	f000 fd10 	bl	8007984 <CAM_CRK_synch_reset>
                    for (i = 0; i < number_teeth_CAM[camId] * 2; i += 2)
 8006f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f66:	3302      	adds	r3, #2
 8006f68:	647b      	str	r3, [r7, #68]	; 0x44
 8006f6a:	4a4f      	ldr	r2, [pc, #316]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f76:	429a      	cmp	r2, r3
 8006f78:	f6ff af52 	blt.w	8006e20 <sync_CAM_CRK+0x26c>
                    }
                }
            }

            // CAM CRK synchronization for both active edges(rising edge)
            if (CAM_signal[camId] == true && active_CAM_edges[camId] == 'b')
 8006f7c:	4a4d      	ldr	r2, [pc, #308]	; (80070b4 <sync_CAM_CRK+0x500>)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8116 	beq.w	80071b6 <sync_CAM_CRK+0x602>
 8006f8a:	4a4b      	ldr	r2, [pc, #300]	; (80070b8 <sync_CAM_CRK+0x504>)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b62      	cmp	r3, #98	; 0x62
 8006f94:	f040 810f 	bne.w	80071b6 <sync_CAM_CRK+0x602>
            {
                gap_to_edge_calculation();
 8006f98:	f000 fc76 	bl	8007888 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 1; j < number_teeth_CAM[camId] * 2; j += 2)
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa0:	e06d      	b.n	800707e <sync_CAM_CRK+0x4ca>
                {
                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 8006fa2:	493c      	ldr	r1, [pc, #240]	; (8007094 <sync_CAM_CRK+0x4e0>)
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb0:	4413      	add	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	440b      	add	r3, r1
 8006fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fba:	4b40      	ldr	r3, [pc, #256]	; (80070bc <sync_CAM_CRK+0x508>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f7f9 f8d2 	bl	8000168 <__aeabi_dsub>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 8006fcc:	4a33      	ldr	r2, [pc, #204]	; (800709c <sync_CAM_CRK+0x4e8>)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fdc:	f7f9 fcee 	bl	80009bc <__aeabi_dcmplt>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d03c      	beq.n	8007060 <sync_CAM_CRK+0x4ac>
 8006fe6:	4a2d      	ldr	r2, [pc, #180]	; (800709c <sync_CAM_CRK+0x4e8>)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	603a      	str	r2, [r7, #0]
 8006ff4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	607b      	str	r3, [r7, #4]
 8006ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007002:	f7f9 fcf9 	bl	80009f8 <__aeabi_dcmpgt>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d029      	beq.n	8007060 <sync_CAM_CRK+0x4ac>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 800700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700e:	3301      	adds	r3, #1
 8007010:	4619      	mov	r1, r3
 8007012:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <sync_CAM_CRK+0x50c>)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1))
 800701a:	4a2a      	ldr	r2, [pc, #168]	; (80070c4 <sync_CAM_CRK+0x510>)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d013      	beq.n	800704e <sync_CAM_CRK+0x49a>
 8007026:	4a28      	ldr	r2, [pc, #160]	; (80070c8 <sync_CAM_CRK+0x514>)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800702e:	4924      	ldr	r1, [pc, #144]	; (80070c0 <sync_CAM_CRK+0x50c>)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007036:	3b01      	subs	r3, #1
 8007038:	429a      	cmp	r2, r3
 800703a:	d108      	bne.n	800704e <sync_CAM_CRK+0x49a>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 800703c:	4a21      	ldr	r2, [pc, #132]	; (80070c4 <sync_CAM_CRK+0x510>)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	491f      	ldr	r1, [pc, #124]	; (80070c4 <sync_CAM_CRK+0x510>)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 800704e:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <sync_CAM_CRK+0x50c>)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007056:	491c      	ldr	r1, [pc, #112]	; (80070c8 <sync_CAM_CRK+0x514>)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 800705e:	e016      	b.n	800708e <sync_CAM_CRK+0x4da>
                    }
                    else if (j > (number_teeth_CAM[camId] * 2 - 2))
 8007060:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007068:	3b01      	subs	r3, #1
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800706e:	429a      	cmp	r2, r3
 8007070:	dd02      	ble.n	8007078 <sync_CAM_CRK+0x4c4>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 8007072:	6978      	ldr	r0, [r7, #20]
 8007074:	f000 fcaa 	bl	80079cc <CAM_CRK_synch_ahead_reset>
                for (j = 1; j < number_teeth_CAM[camId] * 2; j += 2)
 8007078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800707a:	3302      	adds	r3, #2
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
 800707e:	4a0a      	ldr	r2, [pc, #40]	; (80070a8 <sync_CAM_CRK+0x4f4>)
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800708a:	429a      	cmp	r2, r3
 800708c:	db89      	blt.n	8006fa2 <sync_CAM_CRK+0x3ee>
                    }
                }

                // counter 1
                for (i = 1; i < number_teeth_CAM[camId] * 2; i += 2)
 800708e:	2301      	movs	r3, #1
 8007090:	64bb      	str	r3, [r7, #72]	; 0x48
 8007092:	e088      	b.n	80071a6 <sync_CAM_CRK+0x5f2>
 8007094:	20000450 	.word	0x20000450
 8007098:	20000628 	.word	0x20000628
 800709c:	20000648 	.word	0x20000648
 80070a0:	20000600 	.word	0x20000600
 80070a4:	200005f8 	.word	0x200005f8
 80070a8:	200002b8 	.word	0x200002b8
 80070ac:	20000608 	.word	0x20000608
 80070b0:	2000065c 	.word	0x2000065c
 80070b4:	20000660 	.word	0x20000660
 80070b8:	200005e0 	.word	0x200005e0
 80070bc:	20000630 	.word	0x20000630
 80070c0:	20000618 	.word	0x20000618
 80070c4:	20000610 	.word	0x20000610
 80070c8:	20000620 	.word	0x20000620
                {
                    difference = distance_gap_to_CAM_edge[camId][i] - gap_to_edge;
 80070cc:	499f      	ldr	r1, [pc, #636]	; (800734c <sync_CAM_CRK+0x798>)
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070da:	4413      	add	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	440b      	add	r3, r1
 80070e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070e4:	4b9a      	ldr	r3, [pc, #616]	; (8007350 <sync_CAM_CRK+0x79c>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f83d 	bl	8000168 <__aeabi_dsub>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	e9c7 2308 	strd	r2, r3, [r7, #32]

                    if ((difference < tolerance_window_CAM[camId]) && (difference > -tolerance_window_CAM[camId]))
 80070f6:	4a97      	ldr	r2, [pc, #604]	; (8007354 <sync_CAM_CRK+0x7a0>)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007106:	f7f9 fc59 	bl	80009bc <__aeabi_dcmplt>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d03b      	beq.n	8007188 <sync_CAM_CRK+0x5d4>
 8007110:	4a90      	ldr	r2, [pc, #576]	; (8007354 <sync_CAM_CRK+0x7a0>)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4692      	mov	sl, r2
 800711e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800712a:	f7f9 fc65 	bl	80009f8 <__aeabi_dcmpgt>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d029      	beq.n	8007188 <sync_CAM_CRK+0x5d4>
                    {
                        edge_position_counter_CAM[camId] = i + 1;
 8007134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007136:	3301      	adds	r3, #1
 8007138:	4619      	mov	r1, r3
 800713a:	4a87      	ldr	r2, [pc, #540]	; (8007358 <sync_CAM_CRK+0x7a4>)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if (edge_validation_counter_CAM[camId] > 0 && (former_edge_position_CAM[camId] == edge_position_counter_CAM[camId] - 1))
 8007142:	4a86      	ldr	r2, [pc, #536]	; (800735c <sync_CAM_CRK+0x7a8>)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d013      	beq.n	8007176 <sync_CAM_CRK+0x5c2>
 800714e:	4a84      	ldr	r2, [pc, #528]	; (8007360 <sync_CAM_CRK+0x7ac>)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007156:	4980      	ldr	r1, [pc, #512]	; (8007358 <sync_CAM_CRK+0x7a4>)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800715e:	3b01      	subs	r3, #1
 8007160:	429a      	cmp	r2, r3
 8007162:	d108      	bne.n	8007176 <sync_CAM_CRK+0x5c2>
                        {
                            edge_validation_counter_CAM[camId]++;
 8007164:	4a7d      	ldr	r2, [pc, #500]	; (800735c <sync_CAM_CRK+0x7a8>)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	497b      	ldr	r1, [pc, #492]	; (800735c <sync_CAM_CRK+0x7a8>)
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM[camId] = edge_position_counter_CAM[camId];
 8007176:	4a78      	ldr	r2, [pc, #480]	; (8007358 <sync_CAM_CRK+0x7a4>)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800717e:	4978      	ldr	r1, [pc, #480]	; (8007360 <sync_CAM_CRK+0x7ac>)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 8007186:	e016      	b.n	80071b6 <sync_CAM_CRK+0x602>
                    }

                    else if (i > (number_teeth_CAM[camId] * 2 - 2))
 8007188:	4a76      	ldr	r2, [pc, #472]	; (8007364 <sync_CAM_CRK+0x7b0>)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	3b01      	subs	r3, #1
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007196:	429a      	cmp	r2, r3
 8007198:	dd02      	ble.n	80071a0 <sync_CAM_CRK+0x5ec>
                    {
                        CAM_CRK_synch_reset(camId);
 800719a:	6978      	ldr	r0, [r7, #20]
 800719c:	f000 fbf2 	bl	8007984 <CAM_CRK_synch_reset>
                for (i = 1; i < number_teeth_CAM[camId] * 2; i += 2)
 80071a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a2:	3302      	adds	r3, #2
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a6:	4a6f      	ldr	r2, [pc, #444]	; (8007364 <sync_CAM_CRK+0x7b0>)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b2:	429a      	cmp	r2, r3
 80071b4:	db8a      	blt.n	80070cc <sync_CAM_CRK+0x518>
                    }
                }
            }

            // CAM CRK synchronization for either falling or rising active edges
            if ((CAM_signal[camId] == true && active_CAM_edges[camId] == 'r') || (CAM_signal[camId] == false && active_CAM_edges[camId] == 'f'))
 80071b6:	4a6c      	ldr	r2, [pc, #432]	; (8007368 <sync_CAM_CRK+0x7b4>)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <sync_CAM_CRK+0x61a>
 80071c2:	4a6a      	ldr	r2, [pc, #424]	; (800736c <sync_CAM_CRK+0x7b8>)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b72      	cmp	r3, #114	; 0x72
 80071cc:	d010      	beq.n	80071f0 <sync_CAM_CRK+0x63c>
 80071ce:	4a66      	ldr	r2, [pc, #408]	; (8007368 <sync_CAM_CRK+0x7b4>)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f083 0301 	eor.w	r3, r3, #1
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80b0 	beq.w	8007342 <sync_CAM_CRK+0x78e>
 80071e2:	4a62      	ldr	r2, [pc, #392]	; (800736c <sync_CAM_CRK+0x7b8>)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b66      	cmp	r3, #102	; 0x66
 80071ec:	f040 80a9 	bne.w	8007342 <sync_CAM_CRK+0x78e>
            {
                gap_to_edge_calculation();
 80071f0:	f000 fb4a 	bl	8007888 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 0; j < number_teeth_CAM[camId]; j++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	657b      	str	r3, [r7, #84]	; 0x54
 80071f8:	e09a      	b.n	8007330 <sync_CAM_CRK+0x77c>
                {
                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 80071fa:	4954      	ldr	r1, [pc, #336]	; (800734c <sync_CAM_CRK+0x798>)
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007208:	4413      	add	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	440b      	add	r3, r1
 800720e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007212:	4b57      	ldr	r3, [pc, #348]	; (8007370 <sync_CAM_CRK+0x7bc>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f8 ffa6 	bl	8000168 <__aeabi_dsub>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9c7 2306 	strd	r2, r3, [r7, #24]

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 8007224:	4a4b      	ldr	r2, [pc, #300]	; (8007354 <sync_CAM_CRK+0x7a0>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	4413      	add	r3, r2
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007234:	f7f9 fbc2 	bl	80009bc <__aeabi_dcmplt>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d06a      	beq.n	8007314 <sync_CAM_CRK+0x760>
 800723e:	4a45      	ldr	r2, [pc, #276]	; (8007354 <sync_CAM_CRK+0x7a0>)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	4690      	mov	r8, r2
 800724c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007258:	f7f9 fbce 	bl	80009f8 <__aeabi_dcmpgt>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d058      	beq.n	8007314 <sync_CAM_CRK+0x760>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 8007262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007264:	3301      	adds	r3, #1
 8007266:	4619      	mov	r1, r3
 8007268:	4a42      	ldr	r2, [pc, #264]	; (8007374 <sync_CAM_CRK+0x7c0>)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if ((edge_validation_counter_CAM_ahead[camId] == number_teeth_CAM[camId]) && (edge_position_counter_CAM_ahead[camId] == 1) && (former_edge_position_CAM_ahead[camId] == number_teeth_CAM[camId]))
 8007270:	4a41      	ldr	r2, [pc, #260]	; (8007378 <sync_CAM_CRK+0x7c4>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007278:	493a      	ldr	r1, [pc, #232]	; (8007364 <sync_CAM_CRK+0x7b0>)
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007280:	4293      	cmp	r3, r2
 8007282:	d118      	bne.n	80072b6 <sync_CAM_CRK+0x702>
 8007284:	4a3b      	ldr	r2, [pc, #236]	; (8007374 <sync_CAM_CRK+0x7c0>)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d112      	bne.n	80072b6 <sync_CAM_CRK+0x702>
 8007290:	4a3a      	ldr	r2, [pc, #232]	; (800737c <sync_CAM_CRK+0x7c8>)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007298:	4932      	ldr	r1, [pc, #200]	; (8007364 <sync_CAM_CRK+0x7b0>)
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d108      	bne.n	80072b6 <sync_CAM_CRK+0x702>
                        {
                            CAM_CRK_synch_ahead[camId] = true;
 80072a4:	4a36      	ldr	r2, [pc, #216]	; (8007380 <sync_CAM_CRK+0x7cc>)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]

                            CAM_CRK_synch_set(camId);
 80072ae:	6978      	ldr	r0, [r7, #20]
 80072b0:	f000 fbb0 	bl	8007a14 <CAM_CRK_synch_set>

                            break;
 80072b4:	e045      	b.n	8007342 <sync_CAM_CRK+0x78e>
                        }

                        if (edge_position_counter_CAM_ahead[camId] == 1)
 80072b6:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <sync_CAM_CRK+0x7c0>)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d105      	bne.n	80072ce <sync_CAM_CRK+0x71a>
                        {
                            edge_validation_counter_CAM_ahead[camId] = 1;
 80072c2:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <sync_CAM_CRK+0x7c4>)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2101      	movs	r1, #1
 80072c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80072cc:	e019      	b.n	8007302 <sync_CAM_CRK+0x74e>
                        }
                        else if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1))
 80072ce:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <sync_CAM_CRK+0x7c4>)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <sync_CAM_CRK+0x74e>
 80072da:	4a28      	ldr	r2, [pc, #160]	; (800737c <sync_CAM_CRK+0x7c8>)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072e2:	4924      	ldr	r1, [pc, #144]	; (8007374 <sync_CAM_CRK+0x7c0>)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d108      	bne.n	8007302 <sync_CAM_CRK+0x74e>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 80072f0:	4a21      	ldr	r2, [pc, #132]	; (8007378 <sync_CAM_CRK+0x7c4>)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	491f      	ldr	r1, [pc, #124]	; (8007378 <sync_CAM_CRK+0x7c4>)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 8007302:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <sync_CAM_CRK+0x7c0>)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800730a:	491c      	ldr	r1, [pc, #112]	; (800737c <sync_CAM_CRK+0x7c8>)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 8007312:	e016      	b.n	8007342 <sync_CAM_CRK+0x78e>
                    }

                    else if (j == (number_teeth_CAM[camId] - 1))
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <sync_CAM_CRK+0x7b0>)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800731c:	3b01      	subs	r3, #1
 800731e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007320:	429a      	cmp	r2, r3
 8007322:	d102      	bne.n	800732a <sync_CAM_CRK+0x776>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 8007324:	6978      	ldr	r0, [r7, #20]
 8007326:	f000 fb51 	bl	80079cc <CAM_CRK_synch_ahead_reset>
                for (j = 0; j < number_teeth_CAM[camId]; j++)
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	3301      	adds	r3, #1
 800732e:	657b      	str	r3, [r7, #84]	; 0x54
 8007330:	4a0c      	ldr	r2, [pc, #48]	; (8007364 <sync_CAM_CRK+0x7b0>)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800733a:	429a      	cmp	r2, r3
 800733c:	f6ff af5d 	blt.w	80071fa <sync_CAM_CRK+0x646>
                }
            }

        } // CRK_CAM_synch[camId] == false - END
    }     // CRK_synch == true - END
}
 8007340:	e7ff      	b.n	8007342 <sync_CAM_CRK+0x78e>
 8007342:	bf00      	nop
 8007344:	3758      	adds	r7, #88	; 0x58
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734c:	20000450 	.word	0x20000450
 8007350:	20000628 	.word	0x20000628
 8007354:	20000648 	.word	0x20000648
 8007358:	20000600 	.word	0x20000600
 800735c:	200005f8 	.word	0x200005f8
 8007360:	20000608 	.word	0x20000608
 8007364:	200002b8 	.word	0x200002b8
 8007368:	20000660 	.word	0x20000660
 800736c:	200005e0 	.word	0x200005e0
 8007370:	20000630 	.word	0x20000630
 8007374:	20000618 	.word	0x20000618
 8007378:	20000610 	.word	0x20000610
 800737c:	20000620 	.word	0x20000620
 8007380:	2000065c 	.word	0x2000065c

08007384 <Stalling_detection>:

// ## Stalling Detection Function
void Stalling_detection(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
    SysTick->VAL = (2 ^ 24) - 1;
 800738a:	4b63      	ldr	r3, [pc, #396]	; (8007518 <Stalling_detection+0x194>)
 800738c:	2219      	movs	r2, #25
 800738e:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 8007390:	4b62      	ldr	r3, [pc, #392]	; (800751c <Stalling_detection+0x198>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    TIM2_Reset();
 8007396:	f000 fecd 	bl	8008134 <TIM2_Reset>
    TIM_Soft_Reset();
 800739a:	f000 ff35 	bl	8008208 <TIM_Soft_Reset>

    // check all IC-buffers for overflow
    IC_overflow_check();
 800739e:	f000 fb65 	bl	8007a6c <IC_overflow_check>

    T_TOOTH_RAW_2 = 0;
 80073a2:	4b5f      	ldr	r3, [pc, #380]	; (8007520 <Stalling_detection+0x19c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW_1 = 0;
 80073a8:	4b5e      	ldr	r3, [pc, #376]	; (8007524 <Stalling_detection+0x1a0>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW = 0;
 80073ae:	4b5e      	ldr	r3, [pc, #376]	; (8007528 <Stalling_detection+0x1a4>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
    synch_times_valid = false;
 80073b4:	4b5d      	ldr	r3, [pc, #372]	; (800752c <Stalling_detection+0x1a8>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]

    low_time_CRK = 0;
 80073ba:	4b5d      	ldr	r3, [pc, #372]	; (8007530 <Stalling_detection+0x1ac>)
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]

    delay_off = false;
 80073c0:	4b5c      	ldr	r3, [pc, #368]	; (8007534 <Stalling_detection+0x1b0>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
    delay_counter_CRK = 0;
 80073c6:	4b5c      	ldr	r3, [pc, #368]	; (8007538 <Stalling_detection+0x1b4>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
    teeth_count_CRK = 0;
 80073cc:	4b5b      	ldr	r3, [pc, #364]	; (800753c <Stalling_detection+0x1b8>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch = 0;
 80073d2:	4b5b      	ldr	r3, [pc, #364]	; (8007540 <Stalling_detection+0x1bc>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch_ahead = 0;
 80073d8:	4b5a      	ldr	r3, [pc, #360]	; (8007544 <Stalling_detection+0x1c0>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
    edge_count_CAM[0] = 0;
 80073de:	4b5a      	ldr	r3, [pc, #360]	; (8007548 <Stalling_detection+0x1c4>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
    edge_count_CAM[1] = 0;
 80073e4:	4b58      	ldr	r3, [pc, #352]	; (8007548 <Stalling_detection+0x1c4>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	605a      	str	r2, [r3, #4]
    edge_validation_counter_CAM[0] = 0;
 80073ea:	4b58      	ldr	r3, [pc, #352]	; (800754c <Stalling_detection+0x1c8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
    edge_validation_counter_CAM[1] = 0;
 80073f0:	4b56      	ldr	r3, [pc, #344]	; (800754c <Stalling_detection+0x1c8>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	605a      	str	r2, [r3, #4]
    edge_position_counter_CAM[0] = 0;
 80073f6:	4b56      	ldr	r3, [pc, #344]	; (8007550 <Stalling_detection+0x1cc>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
    edge_position_counter_CAM[1] = 0;
 80073fc:	4b54      	ldr	r3, [pc, #336]	; (8007550 <Stalling_detection+0x1cc>)
 80073fe:	2200      	movs	r2, #0
 8007400:	605a      	str	r2, [r3, #4]
    former_edge_position_CAM[0] = 0;
 8007402:	4b54      	ldr	r3, [pc, #336]	; (8007554 <Stalling_detection+0x1d0>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
    former_edge_position_CAM[1] = 0;
 8007408:	4b52      	ldr	r3, [pc, #328]	; (8007554 <Stalling_detection+0x1d0>)
 800740a:	2200      	movs	r2, #0
 800740c:	605a      	str	r2, [r3, #4]
    edge_validation_counter_CAM_ahead[0] = 0;
 800740e:	4b52      	ldr	r3, [pc, #328]	; (8007558 <Stalling_detection+0x1d4>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
    edge_validation_counter_CAM_ahead[1] = 0;
 8007414:	4b50      	ldr	r3, [pc, #320]	; (8007558 <Stalling_detection+0x1d4>)
 8007416:	2200      	movs	r2, #0
 8007418:	605a      	str	r2, [r3, #4]
    edge_position_counter_CAM_ahead[0] = 0;
 800741a:	4b50      	ldr	r3, [pc, #320]	; (800755c <Stalling_detection+0x1d8>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
    edge_position_counter_CAM_ahead[1] = 0;
 8007420:	4b4e      	ldr	r3, [pc, #312]	; (800755c <Stalling_detection+0x1d8>)
 8007422:	2200      	movs	r2, #0
 8007424:	605a      	str	r2, [r3, #4]
    former_edge_position_CAM_ahead[0] = 0;
 8007426:	4b4e      	ldr	r3, [pc, #312]	; (8007560 <Stalling_detection+0x1dc>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
    former_edge_position_CAM_ahead[1] = 0;
 800742c:	4b4c      	ldr	r3, [pc, #304]	; (8007560 <Stalling_detection+0x1dc>)
 800742e:	2200      	movs	r2, #0
 8007430:	605a      	str	r2, [r3, #4]
    segment_counter_CRK = 0;
 8007432:	4b4c      	ldr	r3, [pc, #304]	; (8007564 <Stalling_detection+0x1e0>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
    shift_counter_CRK = 0;
 8007438:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <Stalling_detection+0x1e4>)
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
    CAM_tolerance_switch[0] = false;
 800743e:	4b4b      	ldr	r3, [pc, #300]	; (800756c <Stalling_detection+0x1e8>)
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]
    CAM_tolerance_switch[1] = false;
 8007444:	4b49      	ldr	r3, [pc, #292]	; (800756c <Stalling_detection+0x1e8>)
 8007446:	2200      	movs	r2, #0
 8007448:	705a      	strb	r2, [r3, #1]
    CAM_CRK_synch_status = false;
 800744a:	4b49      	ldr	r3, [pc, #292]	; (8007570 <Stalling_detection+0x1ec>)
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 8007450:	4b48      	ldr	r3, [pc, #288]	; (8007574 <Stalling_detection+0x1f0>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[0] = false;
 8007456:	4b48      	ldr	r3, [pc, #288]	; (8007578 <Stalling_detection+0x1f4>)
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[1] = false;
 800745c:	4b46      	ldr	r3, [pc, #280]	; (8007578 <Stalling_detection+0x1f4>)
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
    tolerance_window_CAM[0] = 2.0 * revolution_CRK;
 8007462:	4b46      	ldr	r3, [pc, #280]	; (800757c <Stalling_detection+0x1f8>)
 8007464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	f7f8 fe7e 	bl	800016c <__adddf3>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4942      	ldr	r1, [pc, #264]	; (8007580 <Stalling_detection+0x1fc>)
 8007476:	e9c1 2300 	strd	r2, r3, [r1]
    tolerance_window_CAM[1] = 2.0 * revolution_CRK;
 800747a:	4b40      	ldr	r3, [pc, #256]	; (800757c <Stalling_detection+0x1f8>)
 800747c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	f7f8 fe72 	bl	800016c <__adddf3>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	493c      	ldr	r1, [pc, #240]	; (8007580 <Stalling_detection+0x1fc>)
 800748e:	e9c1 2302 	strd	r2, r3, [r1, #8]

    // Reset CRK and CAM_CRK synchronization
    if (CRK_synch == true)
 8007492:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <Stalling_detection+0x200>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <Stalling_detection+0x128>
    {
        uint8_t CRK_synchronisation_lost = message[4];
 800749a:	4b3b      	ldr	r3, [pc, #236]	; (8007588 <Stalling_detection+0x204>)
 800749c:	791b      	ldrb	r3, [r3, #4]
 800749e:	71fb      	strb	r3, [r7, #7]
        HAL_UART_Transmit_IT(&huart1, &CRK_synchronisation_lost, 1);  // CRK synchronization lost
 80074a0:	1dfb      	adds	r3, r7, #7
 80074a2:	2201      	movs	r2, #1
 80074a4:	4619      	mov	r1, r3
 80074a6:	4839      	ldr	r0, [pc, #228]	; (800758c <Stalling_detection+0x208>)
 80074a8:	f7fc fc2b 	bl	8003d02 <HAL_UART_Transmit_IT>

    }

    if (CRK_CAM_synch[0] == true)
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <Stalling_detection+0x20c>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <Stalling_detection+0x142>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 80074b4:	4b34      	ldr	r3, [pc, #208]	; (8007588 <Stalling_detection+0x204>)
 80074b6:	799b      	ldrb	r3, [r3, #6]
 80074b8:	71bb      	strb	r3, [r7, #6]
         HAL_UART_Transmit_IT(&huart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 80074ba:	1dbb      	adds	r3, r7, #6
 80074bc:	2201      	movs	r2, #1
 80074be:	4619      	mov	r1, r3
 80074c0:	4832      	ldr	r0, [pc, #200]	; (800758c <Stalling_detection+0x208>)
 80074c2:	f7fc fc1e 	bl	8003d02 <HAL_UART_Transmit_IT>
    }
    if (CRK_CAM_synch[1] == true)
 80074c6:	4b32      	ldr	r3, [pc, #200]	; (8007590 <Stalling_detection+0x20c>)
 80074c8:	785b      	ldrb	r3, [r3, #1]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d008      	beq.n	80074e0 <Stalling_detection+0x15c>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <Stalling_detection+0x204>)
 80074d0:	799b      	ldrb	r3, [r3, #6]
 80074d2:	717b      	strb	r3, [r7, #5]
         HAL_UART_Transmit_IT(&huart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 80074d4:	1d7b      	adds	r3, r7, #5
 80074d6:	2201      	movs	r2, #1
 80074d8:	4619      	mov	r1, r3
 80074da:	482c      	ldr	r0, [pc, #176]	; (800758c <Stalling_detection+0x208>)
 80074dc:	f7fc fc11 	bl	8003d02 <HAL_UART_Transmit_IT>
    }

    CRK_synch = false;
 80074e0:	4b28      	ldr	r3, [pc, #160]	; (8007584 <Stalling_detection+0x200>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
    CRK_synch_temp = false;
 80074e6:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <Stalling_detection+0x210>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
    CRK_CAM_synch[0] = false;
 80074ec:	4b28      	ldr	r3, [pc, #160]	; (8007590 <Stalling_detection+0x20c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
    CRK_CAM_synch[1] = false;
 80074f2:	4b27      	ldr	r3, [pc, #156]	; (8007590 <Stalling_detection+0x20c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	705a      	strb	r2, [r3, #1]
    teeth_count_overall = 0;
 80074f8:	4b27      	ldr	r3, [pc, #156]	; (8007598 <Stalling_detection+0x214>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 80074fe:	4b27      	ldr	r3, [pc, #156]	; (800759c <Stalling_detection+0x218>)
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 8007504:	4b26      	ldr	r3, [pc, #152]	; (80075a0 <Stalling_detection+0x21c>)
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 800750a:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <Stalling_detection+0x220>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000e010 	.word	0xe000e010
 800751c:	20000274 	.word	0x20000274
 8007520:	20000264 	.word	0x20000264
 8007524:	20000268 	.word	0x20000268
 8007528:	2000026c 	.word	0x2000026c
 800752c:	200002ae 	.word	0x200002ae
 8007530:	20000270 	.word	0x20000270
 8007534:	200002aa 	.word	0x200002aa
 8007538:	2000028c 	.word	0x2000028c
 800753c:	20000278 	.word	0x20000278
 8007540:	2000027c 	.word	0x2000027c
 8007544:	20000280 	.word	0x20000280
 8007548:	200005f0 	.word	0x200005f0
 800754c:	200005f8 	.word	0x200005f8
 8007550:	20000600 	.word	0x20000600
 8007554:	20000608 	.word	0x20000608
 8007558:	20000610 	.word	0x20000610
 800755c:	20000618 	.word	0x20000618
 8007560:	20000620 	.word	0x20000620
 8007564:	20000290 	.word	0x20000290
 8007568:	20000298 	.word	0x20000298
 800756c:	20000658 	.word	0x20000658
 8007570:	2000065a 	.word	0x2000065a
 8007574:	2000065b 	.word	0x2000065b
 8007578:	2000065c 	.word	0x2000065c
 800757c:	200002a0 	.word	0x200002a0
 8007580:	20000648 	.word	0x20000648
 8007584:	200002a8 	.word	0x200002a8
 8007588:	20000024 	.word	0x20000024
 800758c:	200009c4 	.word	0x200009c4
 8007590:	20000664 	.word	0x20000664
 8007594:	200002a9 	.word	0x200002a9
 8007598:	20000668 	.word	0x20000668
 800759c:	200005e9 	.word	0x200005e9
 80075a0:	200002ad 	.word	0x200002ad
 80075a4:	2000029c 	.word	0x2000029c

080075a8 <Stalling_detection_CRK>:

// ## Stalling Detection Function
void Stalling_detection_CRK(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
    SysTick->VAL = (2 ^ 24) - 1;
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <Stalling_detection_CRK+0xc8>)
 80075b0:	2219      	movs	r2, #25
 80075b2:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 80075b4:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <Stalling_detection_CRK+0xcc>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    //		Timer4Reset();	// Is this necessary as well?

    // check all IC-buffers for overflow
    IC_overflow_check();
 80075ba:	f000 fa57 	bl	8007a6c <IC_overflow_check>

    T_TOOTH_RAW_2 = 0;
 80075be:	4b2e      	ldr	r3, [pc, #184]	; (8007678 <Stalling_detection_CRK+0xd0>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW_1 = 0;
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <Stalling_detection_CRK+0xd4>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW = 0;
 80075ca:	4b2d      	ldr	r3, [pc, #180]	; (8007680 <Stalling_detection_CRK+0xd8>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
    synch_times_valid = false;
 80075d0:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <Stalling_detection_CRK+0xdc>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]

    low_time_CRK = 0;
 80075d6:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <Stalling_detection_CRK+0xe0>)
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

    delay_off = false;
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <Stalling_detection_CRK+0xe4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
    delay_counter_CRK = 0;
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <Stalling_detection_CRK+0xe8>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
    teeth_count_CRK = 0;
 80075e8:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <Stalling_detection_CRK+0xec>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
    segment_counter_CRK = 0;
 80075ee:	4b2a      	ldr	r3, [pc, #168]	; (8007698 <Stalling_detection_CRK+0xf0>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
    shift_counter_CRK = 0;
 80075f4:	4b29      	ldr	r3, [pc, #164]	; (800769c <Stalling_detection_CRK+0xf4>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
    tolerance_window_CAM[0] = 2.0 * revolution_CRK;
 80075fa:	4b29      	ldr	r3, [pc, #164]	; (80076a0 <Stalling_detection_CRK+0xf8>)
 80075fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	f7f8 fdb2 	bl	800016c <__adddf3>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4925      	ldr	r1, [pc, #148]	; (80076a4 <Stalling_detection_CRK+0xfc>)
 800760e:	e9c1 2300 	strd	r2, r3, [r1]
    tolerance_window_CAM[1] = 2.0 * revolution_CRK;
 8007612:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <Stalling_detection_CRK+0xf8>)
 8007614:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	f7f8 fda6 	bl	800016c <__adddf3>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	491f      	ldr	r1, [pc, #124]	; (80076a4 <Stalling_detection_CRK+0xfc>)
 8007626:	e9c1 2302 	strd	r2, r3, [r1, #8]

    // Reset CRK and CAM_CRK synchronization
    if (CRK_synch == true)
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <Stalling_detection_CRK+0x100>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <Stalling_detection_CRK+0x9c>
    {
        uint8_t CRK_synchronisation_lost = message[4];
 8007632:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <Stalling_detection_CRK+0x104>)
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	71fb      	strb	r3, [r7, #7]
         HAL_UART_Transmit_IT(&huart1, &CRK_synchronisation_lost, 1); // CRK synchronization lost
 8007638:	1dfb      	adds	r3, r7, #7
 800763a:	2201      	movs	r2, #1
 800763c:	4619      	mov	r1, r3
 800763e:	481c      	ldr	r0, [pc, #112]	; (80076b0 <Stalling_detection_CRK+0x108>)
 8007640:	f7fc fb5f 	bl	8003d02 <HAL_UART_Transmit_IT>
    }

    CRK_synch = false;
 8007644:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <Stalling_detection_CRK+0x100>)
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
    CRK_synch_temp = false;
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <Stalling_detection_CRK+0x10c>)
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
    teeth_count_overall = 0;
 8007650:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <Stalling_detection_CRK+0x110>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 8007656:	4b19      	ldr	r3, [pc, #100]	; (80076bc <Stalling_detection_CRK+0x114>)
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 800765c:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <Stalling_detection_CRK+0x118>)
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <Stalling_detection_CRK+0x11c>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	e000e010 	.word	0xe000e010
 8007674:	20000274 	.word	0x20000274
 8007678:	20000264 	.word	0x20000264
 800767c:	20000268 	.word	0x20000268
 8007680:	2000026c 	.word	0x2000026c
 8007684:	200002ae 	.word	0x200002ae
 8007688:	20000270 	.word	0x20000270
 800768c:	200002aa 	.word	0x200002aa
 8007690:	2000028c 	.word	0x2000028c
 8007694:	20000278 	.word	0x20000278
 8007698:	20000290 	.word	0x20000290
 800769c:	20000298 	.word	0x20000298
 80076a0:	200002a0 	.word	0x200002a0
 80076a4:	20000648 	.word	0x20000648
 80076a8:	200002a8 	.word	0x200002a8
 80076ac:	20000024 	.word	0x20000024
 80076b0:	200009c4 	.word	0x200009c4
 80076b4:	200002a9 	.word	0x200002a9
 80076b8:	20000668 	.word	0x20000668
 80076bc:	200005e9 	.word	0x200005e9
 80076c0:	200002ad 	.word	0x200002ad
 80076c4:	2000029c 	.word	0x2000029c

080076c8 <Stalling_detection_CAM>:

// ## Stalling Detection Function
void Stalling_detection_CAM(int camId)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
    TIM2_Reset();
 80076d0:	f000 fd30 	bl	8008134 <TIM2_Reset>
    // Timer5Reset(); // TODO: Is this reset warranted?
    // check all IC-buffers for overflow
    IC_overflow_check();
 80076d4:	f000 f9ca 	bl	8007a6c <IC_overflow_check>

    teeth_count_CAM_CRK_synch = 0;
 80076d8:	4b34      	ldr	r3, [pc, #208]	; (80077ac <Stalling_detection_CAM+0xe4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch_ahead = 0;
 80076de:	4b34      	ldr	r3, [pc, #208]	; (80077b0 <Stalling_detection_CAM+0xe8>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
    edge_count_CAM[camId] = 0;
 80076e4:	4a33      	ldr	r2, [pc, #204]	; (80077b4 <Stalling_detection_CAM+0xec>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM[camId] = 0;
 80076ee:	4a32      	ldr	r2, [pc, #200]	; (80077b8 <Stalling_detection_CAM+0xf0>)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2100      	movs	r1, #0
 80076f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_position_counter_CAM[camId] = 0;
 80076f8:	4a30      	ldr	r2, [pc, #192]	; (80077bc <Stalling_detection_CAM+0xf4>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2100      	movs	r1, #0
 80076fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM[camId] = 0;
 8007702:	4a2f      	ldr	r2, [pc, #188]	; (80077c0 <Stalling_detection_CAM+0xf8>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2100      	movs	r1, #0
 8007708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM_ahead[camId] = 0;
 800770c:	4a2d      	ldr	r2, [pc, #180]	; (80077c4 <Stalling_detection_CAM+0xfc>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2100      	movs	r1, #0
 8007712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_position_counter_CAM_ahead[camId] = 0;
 8007716:	4a2c      	ldr	r2, [pc, #176]	; (80077c8 <Stalling_detection_CAM+0x100>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2100      	movs	r1, #0
 800771c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM_ahead[camId] = 0;
 8007720:	4a2a      	ldr	r2, [pc, #168]	; (80077cc <Stalling_detection_CAM+0x104>)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2100      	movs	r1, #0
 8007726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CAM_tolerance_switch[camId] = false;
 800772a:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <Stalling_detection_CAM+0x108>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status = false;
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <Stalling_detection_CAM+0x10c>)
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 800773a:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <Stalling_detection_CAM+0x110>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[camId] = false;
 8007740:	4a26      	ldr	r2, [pc, #152]	; (80077dc <Stalling_detection_CAM+0x114>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
    tolerance_window_CAM[camId] = 2.0 * revolution_CRK;
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <Stalling_detection_CAM+0x118>)
 800774c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	f7f8 fd0a 	bl	800016c <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4821      	ldr	r0, [pc, #132]	; (80077e4 <Stalling_detection_CAM+0x11c>)
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	00c9      	lsls	r1, r1, #3
 8007762:	4401      	add	r1, r0
 8007764:	e9c1 2300 	strd	r2, r3, [r1]

    if (CRK_CAM_synch[camId] == true)
 8007768:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <Stalling_detection_CAM+0x120>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <Stalling_detection_CAM+0xc0>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <Stalling_detection_CAM+0x124>)
 8007776:	799b      	ldrb	r3, [r3, #6]
 8007778:	73fb      	strb	r3, [r7, #15]
         HAL_UART_Transmit_IT(&huart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 800777a:	f107 030f 	add.w	r3, r7, #15
 800777e:	2201      	movs	r2, #1
 8007780:	4619      	mov	r1, r3
 8007782:	481b      	ldr	r0, [pc, #108]	; (80077f0 <Stalling_detection_CAM+0x128>)
 8007784:	f7fc fabd 	bl	8003d02 <HAL_UART_Transmit_IT>
    }

    CRK_CAM_synch[camId] = false;
 8007788:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <Stalling_detection_CAM+0x120>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <Stalling_detection_CAM+0x12c>)
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 8007798:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <Stalling_detection_CAM+0x130>)
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 800779e:	4b17      	ldr	r3, [pc, #92]	; (80077fc <Stalling_detection_CAM+0x134>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000027c 	.word	0x2000027c
 80077b0:	20000280 	.word	0x20000280
 80077b4:	200005f0 	.word	0x200005f0
 80077b8:	200005f8 	.word	0x200005f8
 80077bc:	20000600 	.word	0x20000600
 80077c0:	20000608 	.word	0x20000608
 80077c4:	20000610 	.word	0x20000610
 80077c8:	20000618 	.word	0x20000618
 80077cc:	20000620 	.word	0x20000620
 80077d0:	20000658 	.word	0x20000658
 80077d4:	2000065a 	.word	0x2000065a
 80077d8:	2000065b 	.word	0x2000065b
 80077dc:	2000065c 	.word	0x2000065c
 80077e0:	200002a0 	.word	0x200002a0
 80077e4:	20000648 	.word	0x20000648
 80077e8:	20000664 	.word	0x20000664
 80077ec:	20000024 	.word	0x20000024
 80077f0:	200009c4 	.word	0x200009c4
 80077f4:	200005e9 	.word	0x200005e9
 80077f8:	200002ad 	.word	0x200002ad
 80077fc:	2000029c 	.word	0x2000029c

08007800 <sync_CRK_preparation>:

// ## CRK synchronisation preparation
void sync_CRK_preparation(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
    // Read Timer value from IC3-buffer
    T_TOOTH_RAW = IC2BUF;
 8007804:	4b17      	ldr	r3, [pc, #92]	; (8007864 <sync_CRK_preparation+0x64>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a17      	ldr	r2, [pc, #92]	; (8007868 <sync_CRK_preparation+0x68>)
 800780a:	6013      	str	r3, [r2, #0]

    // Calculate tooth time
    T_TOOTH_RAW = T_TOOTH_RAW + timer_overflow_CRK * htim2.Init.Period;
 800780c:	4b17      	ldr	r3, [pc, #92]	; (800786c <sync_CRK_preparation+0x6c>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a17      	ldr	r2, [pc, #92]	; (8007870 <sync_CRK_preparation+0x70>)
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	fb03 f202 	mul.w	r2, r3, r2
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <sync_CRK_preparation+0x68>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4413      	add	r3, r2
 800781e:	4a12      	ldr	r2, [pc, #72]	; (8007868 <sync_CRK_preparation+0x68>)
 8007820:	6013      	str	r3, [r2, #0]

    // test
    if (delay_off == true)
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <sync_CRK_preparation+0x74>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d012      	beq.n	8007850 <sync_CRK_preparation+0x50>
    {
        if (CRK_synch == true)
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <sync_CRK_preparation+0x78>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00e      	beq.n	8007850 <sync_CRK_preparation+0x50>
        {
            // Teeth Counter CRK
            if ((teeth_count_CRK < number_teeth_between_gaps))
 8007832:	4b12      	ldr	r3, [pc, #72]	; (800787c <sync_CRK_preparation+0x7c>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <sync_CRK_preparation+0x80>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d205      	bcs.n	800784a <sync_CRK_preparation+0x4a>
            {
                // 360�CRK for one gap; 180� for two gaps; 120� for three gaps
                teeth_count_CRK++;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <sync_CRK_preparation+0x7c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a0d      	ldr	r2, [pc, #52]	; (800787c <sync_CRK_preparation+0x7c>)
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	e002      	b.n	8007850 <sync_CRK_preparation+0x50>
            }
            else
            {
                teeth_count_CRK = 1;
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <sync_CRK_preparation+0x7c>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // reset timer 
    SysTick->VAL = (2 ^ 24) - 1;
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <sync_CRK_preparation+0x84>)
 8007852:	2219      	movs	r2, #25
 8007854:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <sync_CRK_preparation+0x70>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	20000260 	.word	0x20000260
 8007868:	2000026c 	.word	0x2000026c
 800786c:	200008ec 	.word	0x200008ec
 8007870:	20000274 	.word	0x20000274
 8007874:	200002aa 	.word	0x200002aa
 8007878:	200002a8 	.word	0x200002a8
 800787c:	20000278 	.word	0x20000278
 8007880:	20000288 	.word	0x20000288
 8007884:	e000e010 	.word	0xe000e010

08007888 <gap_to_edge_calculation>:
    TIM2_Reset();
}

// ## Gap to edge calculation
void gap_to_edge_calculation(void)
{
 8007888:	b5b0      	push	{r4, r5, r7, lr}
 800788a:	af00      	add	r7, sp, #0
    // calculate angles between reference gap and CAM-edges when synchronization is not yet done PR2: Timer periode value, TMR2 TMR counter at that moment
    gap_to_edge = (((double)teeth_count_CAM_CRK_synch - 1.0) + (double)(((unsigned long)(__HAL_TIM_GET_COUNTER(&htim2)) + timer_overflow_CRK * __HAL_TIM_GET_AUTORELOAD(&htim2)) / T_TOOTH_RAW)) * revolution_CRK;
 800788c:	4b34      	ldr	r3, [pc, #208]	; (8007960 <gap_to_edge_calculation+0xd8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f7f8 fda7 	bl	80003e4 <__aeabi_ui2d>
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	4b32      	ldr	r3, [pc, #200]	; (8007964 <gap_to_edge_calculation+0xdc>)
 800789c:	f7f8 fc64 	bl	8000168 <__aeabi_dsub>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	461d      	mov	r5, r3
 80078a8:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <gap_to_edge_calculation+0xe0>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ae:	4b2e      	ldr	r3, [pc, #184]	; (8007968 <gap_to_edge_calculation+0xe0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	492d      	ldr	r1, [pc, #180]	; (800796c <gap_to_edge_calculation+0xe4>)
 80078b6:	6809      	ldr	r1, [r1, #0]
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	441a      	add	r2, r3
 80078be:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <gap_to_edge_calculation+0xe8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7f8 fd8c 	bl	80003e4 <__aeabi_ui2d>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4620      	mov	r0, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	f7f8 fc4a 	bl	800016c <__adddf3>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4610      	mov	r0, r2
 80078de:	4619      	mov	r1, r3
 80078e0:	4b24      	ldr	r3, [pc, #144]	; (8007974 <gap_to_edge_calculation+0xec>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fdf7 	bl	80004d8 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4922      	ldr	r1, [pc, #136]	; (8007978 <gap_to_edge_calculation+0xf0>)
 80078f0:	e9c1 2300 	strd	r2, r3, [r1]

    gap_to_edge_ahead = (((double)teeth_count_CAM_CRK_synch_ahead - 1.0) + (double)(((unsigned long)(__HAL_TIM_GET_COUNTER(&htim2)) + timer_overflow_CRK * __HAL_TIM_GET_AUTORELOAD(&htim2)) / T_TOOTH_RAW)) * revolution_CRK;
 80078f4:	4b21      	ldr	r3, [pc, #132]	; (800797c <gap_to_edge_calculation+0xf4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7f8 fd73 	bl	80003e4 <__aeabi_ui2d>
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	4b18      	ldr	r3, [pc, #96]	; (8007964 <gap_to_edge_calculation+0xdc>)
 8007904:	f7f8 fc30 	bl	8000168 <__aeabi_dsub>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4614      	mov	r4, r2
 800790e:	461d      	mov	r5, r3
 8007910:	4b15      	ldr	r3, [pc, #84]	; (8007968 <gap_to_edge_calculation+0xe0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <gap_to_edge_calculation+0xe0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4913      	ldr	r1, [pc, #76]	; (800796c <gap_to_edge_calculation+0xe4>)
 800791e:	6809      	ldr	r1, [r1, #0]
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	441a      	add	r2, r3
 8007926:	4b12      	ldr	r3, [pc, #72]	; (8007970 <gap_to_edge_calculation+0xe8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	4618      	mov	r0, r3
 8007930:	f7f8 fd58 	bl	80003e4 <__aeabi_ui2d>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4620      	mov	r0, r4
 800793a:	4629      	mov	r1, r5
 800793c:	f7f8 fc16 	bl	800016c <__adddf3>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4610      	mov	r0, r2
 8007946:	4619      	mov	r1, r3
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <gap_to_edge_calculation+0xec>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f7f8 fdc3 	bl	80004d8 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	490a      	ldr	r1, [pc, #40]	; (8007980 <gap_to_edge_calculation+0xf8>)
 8007958:	e9c1 2300 	strd	r2, r3, [r1]
}
 800795c:	bf00      	nop
 800795e:	bdb0      	pop	{r4, r5, r7, pc}
 8007960:	2000027c 	.word	0x2000027c
 8007964:	3ff00000 	.word	0x3ff00000
 8007968:	200008ec 	.word	0x200008ec
 800796c:	20000274 	.word	0x20000274
 8007970:	2000026c 	.word	0x2000026c
 8007974:	200002a0 	.word	0x200002a0
 8007978:	20000628 	.word	0x20000628
 800797c:	20000280 	.word	0x20000280
 8007980:	20000630 	.word	0x20000630

08007984 <CAM_CRK_synch_reset>:

// ## Reset CAM_CRK_synch
void CAM_CRK_synch_reset(int camId)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    edge_position_counter_CAM[camId] = 0;
 800798c:	4a0b      	ldr	r2, [pc, #44]	; (80079bc <CAM_CRK_synch_reset+0x38>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2100      	movs	r1, #0
 8007992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM[camId] = 0;
 8007996:	4a0a      	ldr	r2, [pc, #40]	; (80079c0 <CAM_CRK_synch_reset+0x3c>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2100      	movs	r1, #0
 800799c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM[camId] = 0;
 80079a0:	4a08      	ldr	r2, [pc, #32]	; (80079c4 <CAM_CRK_synch_reset+0x40>)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2100      	movs	r1, #0
 80079a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // set teeth_count_CAM_CRK_synch to one after the next reference gap
    CAM_CRK_synch_status = true;
 80079aa:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <CAM_CRK_synch_reset+0x44>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	20000600 	.word	0x20000600
 80079c0:	200005f8 	.word	0x200005f8
 80079c4:	20000608 	.word	0x20000608
 80079c8:	2000065a 	.word	0x2000065a

080079cc <CAM_CRK_synch_ahead_reset>:

// ## Reset CAM_CRK_synch_ahead
void CAM_CRK_synch_ahead_reset(int camId)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
    edge_position_counter_CAM_ahead[camId] = 0;
 80079d4:	4a0b      	ldr	r2, [pc, #44]	; (8007a04 <CAM_CRK_synch_ahead_reset+0x38>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM_ahead[camId] = 0;
 80079de:	4a0a      	ldr	r2, [pc, #40]	; (8007a08 <CAM_CRK_synch_ahead_reset+0x3c>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2100      	movs	r1, #0
 80079e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM_ahead[camId] = 0;
 80079e8:	4a08      	ldr	r2, [pc, #32]	; (8007a0c <CAM_CRK_synch_ahead_reset+0x40>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2100      	movs	r1, #0
 80079ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // set teeth_count_CAM_CRK_synch to one after the next reference gap
    CAM_CRK_synch_status_ahead = true;
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <CAM_CRK_synch_ahead_reset+0x44>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000618 	.word	0x20000618
 8007a08:	20000610 	.word	0x20000610
 8007a0c:	20000620 	.word	0x20000620
 8007a10:	2000065b 	.word	0x2000065b

08007a14 <CAM_CRK_synch_set>:

// ## Set CAM_CRK_synch
void CAM_CRK_synch_set(int camId)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
    CRK_CAM_synch[camId] = true;
 8007a1c:	4a0d      	ldr	r2, [pc, #52]	; (8007a54 <CAM_CRK_synch_set+0x40>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]

    // Send CRK_CAM-sycnhronization status
    uint8_t CRK_CAM_synchronisation_lost = message[6];
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <CAM_CRK_synch_set+0x44>)
 8007a28:	799b      	ldrb	r3, [r3, #6]
 8007a2a:	73fb      	strb	r3, [r7, #15]
     HAL_UART_Transmit_IT(&huart1, &CRK_CAM_synchronisation_lost, 1); // CRK_CAM synchronization lost
 8007a2c:	f107 030f 	add.w	r3, r7, #15
 8007a30:	2201      	movs	r2, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	4809      	ldr	r0, [pc, #36]	; (8007a5c <CAM_CRK_synch_set+0x48>)
 8007a36:	f7fc f964 	bl	8003d02 <HAL_UART_Transmit_IT>
    CAM_CRK_synch_status = false;
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <CAM_CRK_synch_set+0x4c>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 8007a40:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <CAM_CRK_synch_set+0x50>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
    shift_counter_CRK = 0;
 8007a46:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <CAM_CRK_synch_set+0x54>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000664 	.word	0x20000664
 8007a58:	20000024 	.word	0x20000024
 8007a5c:	200009c4 	.word	0x200009c4
 8007a60:	2000065a 	.word	0x2000065a
 8007a64:	2000065b 	.word	0x2000065b
 8007a68:	20000298 	.word	0x20000298

08007a6c <IC_overflow_check>:

// ## IC overflow check
void IC_overflow_check()
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
    IC1BUF = 0;
 8007a70:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <IC_overflow_check+0x18>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
    IC2BUF = 0;
 8007a76:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <IC_overflow_check+0x1c>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	2000025c 	.word	0x2000025c
 8007a88:	20000260 	.word	0x20000260

08007a8c <CRK_configuration>:

//### Functions ###

// ## CRK Configuration
void CRK_configuration(void)
{
 8007a8c:	b5b0      	push	{r4, r5, r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
	// Number of teeth between two gaps
	number_teeth_between_gaps = (number_teeth_CRK / number_gap)
 8007a92:	4b51      	ldr	r3, [pc, #324]	; (8007bd8 <CRK_configuration+0x14c>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <CRK_configuration+0x150>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	fbb2 f2f3 	udiv	r2, r2, r3
			- number_miss_teeth;
 8007a9e:	4b50      	ldr	r3, [pc, #320]	; (8007be0 <CRK_configuration+0x154>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	1ad3      	subs	r3, r2, r3
	number_teeth_between_gaps = (number_teeth_CRK / number_gap)
 8007aa4:	4a4f      	ldr	r2, [pc, #316]	; (8007be4 <CRK_configuration+0x158>)
 8007aa6:	6013      	str	r3, [r2, #0]

	// Number of remaining teeth
	number_real_teeth = number_teeth_CRK - number_miss_teeth;
 8007aa8:	4b4b      	ldr	r3, [pc, #300]	; (8007bd8 <CRK_configuration+0x14c>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4b4c      	ldr	r3, [pc, #304]	; (8007be0 <CRK_configuration+0x154>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	4a4d      	ldr	r2, [pc, #308]	; (8007be8 <CRK_configuration+0x15c>)
 8007ab4:	6013      	str	r3, [r2, #0]

	// Revolution of one tooth time
	revolution_CRK = (double) (360.0 / number_teeth_CRK);
 8007ab6:	4b48      	ldr	r3, [pc, #288]	; (8007bd8 <CRK_configuration+0x14c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7f8 fc92 	bl	80003e4 <__aeabi_ui2d>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	4948      	ldr	r1, [pc, #288]	; (8007bec <CRK_configuration+0x160>)
 8007aca:	f7f8 fe2f 	bl	800072c <__aeabi_ddiv>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4947      	ldr	r1, [pc, #284]	; (8007bf0 <CRK_configuration+0x164>)
 8007ad4:	e9c1 2300 	strd	r2, r3, [r1]

	// Set number of segments
	number_segments_CRK = number_cylinder;
 8007ad8:	4b46      	ldr	r3, [pc, #280]	; (8007bf4 <CRK_configuration+0x168>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a46      	ldr	r2, [pc, #280]	; (8007bf8 <CRK_configuration+0x16c>)
 8007ade:	6013      	str	r3, [r2, #0]

	int first_tooth_angle = 720 - tdc_to_gap;
 8007ae0:	4b46      	ldr	r3, [pc, #280]	; (8007bfc <CRK_configuration+0x170>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f04f 0000 	mov.w	r0, #0
 8007aea:	4945      	ldr	r1, [pc, #276]	; (8007c00 <CRK_configuration+0x174>)
 8007aec:	f7f8 fb3c 	bl	8000168 <__aeabi_dsub>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	f7f8 ff88 	bl	8000a0c <__aeabi_d2iz>
 8007afc:	4603      	mov	r3, r0
 8007afe:	607b      	str	r3, [r7, #4]

	if (first_seg_angle >= first_tooth_angle)
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f8 fc7f 	bl	8000404 <__aeabi_i2d>
 8007b06:	4b3f      	ldr	r3, [pc, #252]	; (8007c04 <CRK_configuration+0x178>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 ff60 	bl	80009d0 <__aeabi_dcmple>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01e      	beq.n	8007b54 <CRK_configuration+0xc8>
	{
		first_seg_start_tooth = (first_seg_angle - first_tooth_angle)
 8007b16:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <CRK_configuration+0x178>)
 8007b18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7f8 fc71 	bl	8000404 <__aeabi_i2d>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fb1d 	bl	8000168 <__aeabi_dsub>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4610      	mov	r0, r2
 8007b34:	4619      	mov	r1, r3
				/ revolution_CRK;
 8007b36:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <CRK_configuration+0x164>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fdf6 	bl	800072c <__aeabi_ddiv>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
		first_seg_start_tooth = (first_seg_angle - first_tooth_angle)
 8007b44:	4610      	mov	r0, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	f7f8 ff88 	bl	8000a5c <__aeabi_d2uiz>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4a2e      	ldr	r2, [pc, #184]	; (8007c08 <CRK_configuration+0x17c>)
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e026      	b.n	8007ba2 <CRK_configuration+0x116>
	}
	else
	{
		first_seg_start_tooth = number_teeth_CRK
				- ((first_tooth_angle - first_seg_angle) / revolution_CRK);
 8007b54:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <CRK_configuration+0x14c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7f8 fc43 	bl	80003e4 <__aeabi_ui2d>
 8007b5e:	4604      	mov	r4, r0
 8007b60:	460d      	mov	r5, r1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7f8 fc4e 	bl	8000404 <__aeabi_i2d>
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <CRK_configuration+0x178>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fafb 	bl	8000168 <__aeabi_dsub>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <CRK_configuration+0x164>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fdd4 	bl	800072c <__aeabi_ddiv>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 faec 	bl	8000168 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
		first_seg_start_tooth = number_teeth_CRK
 8007b94:	4610      	mov	r0, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	f7f8 ff60 	bl	8000a5c <__aeabi_d2uiz>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4a1a      	ldr	r2, [pc, #104]	; (8007c08 <CRK_configuration+0x17c>)
 8007ba0:	6013      	str	r3, [r2, #0]
	}

	// Set configuration status
	CRK_config = true;
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <CRK_configuration+0x180>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]

	// Complete configuration
	if ((CRK_config == true) && (CAM_config == true))
 8007ba8:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <CRK_configuration+0x180>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <CRK_configuration+0x130>
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <CRK_configuration+0x184>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <CRK_configuration+0x130>
	{
		CAM_CRK_configuration();
 8007bb8:	f000 f8ee 	bl	8007d98 <CAM_CRK_configuration>
	}

	// Send configuration status
	uint8_t msg_CRK_configuration_ready = message[1];
 8007bbc:	4b15      	ldr	r3, [pc, #84]	; (8007c14 <CRK_configuration+0x188>)
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	70fb      	strb	r3, [r7, #3]
	 HAL_UART_Transmit_IT(&huart1, &msg_CRK_configuration_ready, 1);
 8007bc2:	1cfb      	adds	r3, r7, #3
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4813      	ldr	r0, [pc, #76]	; (8007c18 <CRK_configuration+0x18c>)
 8007bca:	f7fc f89a 	bl	8003d02 <HAL_UART_Transmit_IT>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000234 	.word	0x20000234
 8007bdc:	2000023c 	.word	0x2000023c
 8007be0:	20000238 	.word	0x20000238
 8007be4:	20000288 	.word	0x20000288
 8007be8:	20000284 	.word	0x20000284
 8007bec:	40768000 	.word	0x40768000
 8007bf0:	200002a0 	.word	0x200002a0
 8007bf4:	20000250 	.word	0x20000250
 8007bf8:	20000294 	.word	0x20000294
 8007bfc:	20000240 	.word	0x20000240
 8007c00:	40868000 	.word	0x40868000
 8007c04:	20000248 	.word	0x20000248
 8007c08:	20000254 	.word	0x20000254
 8007c0c:	200002ac 	.word	0x200002ac
 8007c10:	20000666 	.word	0x20000666
 8007c14:	20000024 	.word	0x20000024
 8007c18:	200009c4 	.word	0x200009c4

08007c1c <CAM_configuration>:

// ## CAM Configuration
void CAM_configuration(void)
{
 8007c1c:	b590      	push	{r4, r7, lr}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
	int camId = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]

	for (camId = 0; camId < number_of_CAM; camId++)
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	e07d      	b.n	8007d28 <CAM_configuration+0x10c>
	{
		// Set counter to calculate the distances of the CAM edges to the gap in the for-loop
		int i;

		// Set number of CAM edges
		if (active_CAM_edges[camId] == 'b')
 8007c2c:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <CAM_configuration+0x14c>)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b62      	cmp	r3, #98	; 0x62
 8007c36:	d109      	bne.n	8007c4c <CAM_configuration+0x30>
		{
			number_teeth_CAM[camId] = number_active_edges_CAM[camId] / 2;
 8007c38:	4a4c      	ldr	r2, [pc, #304]	; (8007d6c <CAM_configuration+0x150>)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c40:	085a      	lsrs	r2, r3, #1
 8007c42:	494b      	ldr	r1, [pc, #300]	; (8007d70 <CAM_configuration+0x154>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c4a:	e007      	b.n	8007c5c <CAM_configuration+0x40>
		}
		else
		{
			number_teeth_CAM[camId] = number_active_edges_CAM[camId];
 8007c4c:	4a47      	ldr	r2, [pc, #284]	; (8007d6c <CAM_configuration+0x150>)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c54:	4946      	ldr	r1, [pc, #280]	; (8007d70 <CAM_configuration+0x154>)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		// Calculate distance from gap to CAM edges
		for (i = 0; i < number_active_edges_CAM[camId]; i++)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	e058      	b.n	8007d14 <CAM_configuration+0xf8>
		{
			distance_gap_to_CAM_edge[camId][i] = CAM_edges[camId][i]
 8007c62:	4944      	ldr	r1, [pc, #272]	; (8007d74 <CAM_configuration+0x158>)
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4613      	mov	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	440b      	add	r3, r1
 8007c76:	e9d3 0100 	ldrd	r0, r1, [r3]
					+ tdc_to_gap;
 8007c7a:	4b3f      	ldr	r3, [pc, #252]	; (8007d78 <CAM_configuration+0x15c>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fa74 	bl	800016c <__adddf3>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4619      	mov	r1, r3
			distance_gap_to_CAM_edge[camId][i] = CAM_edges[camId][i]
 8007c8c:	4c3b      	ldr	r4, [pc, #236]	; (8007d7c <CAM_configuration+0x160>)
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4613      	mov	r3, r2
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	4413      	add	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4423      	add	r3, r4
 8007ca0:	e9c3 0100 	strd	r0, r1, [r3]

			if (distance_gap_to_CAM_edge[camId][i] >= 720.0)
 8007ca4:	4935      	ldr	r1, [pc, #212]	; (8007d7c <CAM_configuration+0x160>)
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	4413      	add	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	440b      	add	r3, r1
 8007cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	4b2f      	ldr	r3, [pc, #188]	; (8007d80 <CAM_configuration+0x164>)
 8007cc2:	f7f8 fe8f 	bl	80009e4 <__aeabi_dcmpge>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d020      	beq.n	8007d0e <CAM_configuration+0xf2>
			{
				distance_gap_to_CAM_edge[camId][i] =
						distance_gap_to_CAM_edge[camId][i] - 720.0;
 8007ccc:	492b      	ldr	r1, [pc, #172]	; (8007d7c <CAM_configuration+0x160>)
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	4413      	add	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	4413      	add	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	440b      	add	r3, r1
 8007ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <CAM_configuration+0x164>)
 8007cea:	f7f8 fa3d 	bl	8000168 <__aeabi_dsub>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
				distance_gap_to_CAM_edge[camId][i] =
 8007cf6:	4c21      	ldr	r4, [pc, #132]	; (8007d7c <CAM_configuration+0x160>)
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	4413      	add	r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4423      	add	r3, r4
 8007d0a:	e9c3 0100 	strd	r0, r1, [r3]
		for (i = 0; i < number_active_edges_CAM[camId]; i++)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3301      	adds	r3, #1
 8007d12:	60bb      	str	r3, [r7, #8]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <CAM_configuration+0x150>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d89f      	bhi.n	8007c62 <CAM_configuration+0x46>
	for (camId = 0; camId < number_of_CAM; camId++)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <CAM_configuration+0x168>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	f6ff af7c 	blt.w	8007c2c <CAM_configuration+0x10>
			}
		}
	}

	// Set configuration status
	CAM_config = true;
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <CAM_configuration+0x16c>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]

	// Complete configuration
	if (CRK_config == true && CAM_config == true)
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <CAM_configuration+0x170>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <CAM_configuration+0x132>
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <CAM_configuration+0x16c>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <CAM_configuration+0x132>
	{
		CAM_CRK_configuration();
 8007d4a:	f000 f825 	bl	8007d98 <CAM_CRK_configuration>
	}

	// Send configuration status
	uint8_t msg_CAM_configuration_ready = message[2];
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <CAM_configuration+0x174>)
 8007d50:	789b      	ldrb	r3, [r3, #2]
 8007d52:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit_IT(&huart1, &msg_CAM_configuration_ready, 1);
 8007d54:	1dfb      	adds	r3, r7, #7
 8007d56:	2201      	movs	r2, #1
 8007d58:	4619      	mov	r1, r3
 8007d5a:	480e      	ldr	r0, [pc, #56]	; (8007d94 <CAM_configuration+0x178>)
 8007d5c:	f7fb ffd1 	bl	8003d02 <HAL_UART_Transmit_IT>
}
 8007d60:	bf00      	nop
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd90      	pop	{r4, r7, pc}
 8007d68:	200005e0 	.word	0x200005e0
 8007d6c:	200002b0 	.word	0x200002b0
 8007d70:	200002b8 	.word	0x200002b8
 8007d74:	200002d0 	.word	0x200002d0
 8007d78:	20000240 	.word	0x20000240
 8007d7c:	20000450 	.word	0x20000450
 8007d80:	40868000 	.word	0x40868000
 8007d84:	20000008 	.word	0x20000008
 8007d88:	20000666 	.word	0x20000666
 8007d8c:	200002ac 	.word	0x200002ac
 8007d90:	20000024 	.word	0x20000024
 8007d94:	200009c4 	.word	0x200009c4

08007d98 <CAM_CRK_configuration>:

// ## CAM_CRK Configuration
void CAM_CRK_configuration(void)
{
 8007d98:	b590      	push	{r4, r7, lr}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
	int camId = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	607b      	str	r3, [r7, #4]

	for (camId = 0; camId < number_of_CAM; camId++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	e055      	b.n	8007e54 <CAM_CRK_configuration+0xbc>
	{
		// Set first falling(rising, when active_edges = 'r') CAM edge after TDC0
		first_edge_to_tdc0[camId] = CAM_edges[camId][0];
 8007da8:	4931      	ldr	r1, [pc, #196]	; (8007e70 <CAM_CRK_configuration+0xd8>)
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	019b      	lsls	r3, r3, #6
 8007db4:	440b      	add	r3, r1
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	482e      	ldr	r0, [pc, #184]	; (8007e74 <CAM_CRK_configuration+0xdc>)
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	00c9      	lsls	r1, r1, #3
 8007dc0:	4401      	add	r1, r0
 8007dc2:	e9c1 2300 	strd	r2, r3, [r1]

		// Distance from gap to first falling CAM-edge
		gap_to_first_edge[camId] = first_edge_to_tdc0[camId] + tdc_to_gap;
 8007dc6:	4a2b      	ldr	r2, [pc, #172]	; (8007e74 <CAM_CRK_configuration+0xdc>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4413      	add	r3, r2
 8007dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dd2:	4b29      	ldr	r3, [pc, #164]	; (8007e78 <CAM_CRK_configuration+0xe0>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 f9c8 	bl	800016c <__adddf3>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4826      	ldr	r0, [pc, #152]	; (8007e7c <CAM_CRK_configuration+0xe4>)
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	00c9      	lsls	r1, r1, #3
 8007de6:	4401      	add	r1, r0
 8007de8:	e9c1 2300 	strd	r2, r3, [r1]

		if ((long) tdc_to_gap % (long) revolution_CRK == 0)
 8007dec:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <CAM_CRK_configuration+0xe0>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	4610      	mov	r0, r2
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7f8 fe09 	bl	8000a0c <__aeabi_d2iz>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <CAM_CRK_configuration+0xe8>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	4610      	mov	r0, r2
 8007e04:	4619      	mov	r1, r3
 8007e06:	f7f8 fe01 	bl	8000a0c <__aeabi_d2iz>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	fb94 f2f3 	sdiv	r2, r4, r3
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	1ae3      	subs	r3, r4, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <CAM_CRK_configuration+0x8e>
		{
			TDC_on_edge[camId] = true;
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <CAM_CRK_configuration+0xec>)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4413      	add	r3, r2
 8007e20:	2201      	movs	r2, #1
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	e004      	b.n	8007e30 <CAM_CRK_configuration+0x98>
		}
		else
		{
			TDC_on_edge[camId] = false;
 8007e26:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <CAM_CRK_configuration+0xec>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
		}

		// Set tolerance window for CAM_CRK synchronization in case of start
		tolerance_window_CAM[camId] = 2.0 * revolution_CRK;
 8007e30:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <CAM_CRK_configuration+0xe8>)
 8007e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	f7f8 f997 	bl	800016c <__adddf3>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4811      	ldr	r0, [pc, #68]	; (8007e88 <CAM_CRK_configuration+0xf0>)
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	00c9      	lsls	r1, r1, #3
 8007e48:	4401      	add	r1, r0
 8007e4a:	e9c1 2300 	strd	r2, r3, [r1]
	for (camId = 0; camId < number_of_CAM; camId++)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3301      	adds	r3, #1
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <CAM_CRK_configuration+0xf4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	dba4      	blt.n	8007da8 <CAM_CRK_configuration+0x10>
	}
	Stalling_detection();
 8007e5e:	f7ff fa91 	bl	8007384 <Stalling_detection>

	configuration_complete = true;
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <CAM_CRK_configuration+0xf8>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	701a      	strb	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}
 8007e70:	200002d0 	.word	0x200002d0
 8007e74:	200005d0 	.word	0x200005d0
 8007e78:	20000240 	.word	0x20000240
 8007e7c:	20000638 	.word	0x20000638
 8007e80:	200002a0 	.word	0x200002a0
 8007e84:	2000068c 	.word	0x2000068c
 8007e88:	20000648 	.word	0x20000648
 8007e8c:	20000008 	.word	0x20000008
 8007e90:	200005e8 	.word	0x200005e8

08007e94 <Input_signal_observe>:

//### Input Signal Observation ###
void Input_signal_observe(bool output_set)
{
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
	if (!output_set)
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	f083 0301 	eor.w	r3, r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d077      	beq.n	8007f9a <Input_signal_observe+0x106>
	{
		// Check CRK input signal level
		if (HAL_GPIO_ReadPin(GPIOB, 8) != HAL_GPIO_ReadPin(GPIOA, 4))
 8007eaa:	2108      	movs	r1, #8
 8007eac:	483d      	ldr	r0, [pc, #244]	; (8007fa4 <Input_signal_observe+0x110>)
 8007eae:	f7fa fdd3 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461c      	mov	r4, r3
 8007eb6:	2104      	movs	r1, #4
 8007eb8:	483b      	ldr	r0, [pc, #236]	; (8007fa8 <Input_signal_observe+0x114>)
 8007eba:	f7fa fdcd 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d01d      	beq.n	8007f00 <Input_signal_observe+0x6c>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 4) == GPIO_PIN_SET)
 8007ec4:	2104      	movs	r1, #4
 8007ec6:	4838      	ldr	r0, [pc, #224]	; (8007fa8 <Input_signal_observe+0x114>)
 8007ec8:	f7fa fdc6 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d104      	bne.n	8007edc <Input_signal_observe+0x48>
			{
				HAL_GPIO_WritePin(GPIOA, 4, GPIO_PIN_RESET);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2104      	movs	r1, #4
 8007ed6:	4834      	ldr	r0, [pc, #208]	; (8007fa8 <Input_signal_observe+0x114>)
 8007ed8:	f7fa fdd5 	bl	8002a86 <HAL_GPIO_WritePin>
			}
	
			// Check CAM input signal level
			if(HAL_GPIO_ReadPin(GPIOB,14) != HAL_GPIO_ReadPin(GPIOA,11))
 8007edc:	210e      	movs	r1, #14
 8007ede:	4831      	ldr	r0, [pc, #196]	; (8007fa4 <Input_signal_observe+0x110>)
 8007ee0:	f7fa fdba 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	210b      	movs	r1, #11
 8007eea:	482f      	ldr	r0, [pc, #188]	; (8007fa8 <Input_signal_observe+0x114>)
 8007eec:	f7fa fdb4 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d004      	beq.n	8007f00 <Input_signal_observe+0x6c>
			{
				HAL_GPIO_WritePin(GPIOA, 4, GPIO_PIN_SET);
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	2104      	movs	r1, #4
 8007efa:	482b      	ldr	r0, [pc, #172]	; (8007fa8 <Input_signal_observe+0x114>)
 8007efc:	f7fa fdc3 	bl	8002a86 <HAL_GPIO_WritePin>
			};
		}

		// Check CAM input signal level
		if (HAL_GPIO_ReadPin(GPIOB, 14) != HAL_GPIO_ReadPin(GPIOA, 11))
 8007f00:	210e      	movs	r1, #14
 8007f02:	4828      	ldr	r0, [pc, #160]	; (8007fa4 <Input_signal_observe+0x110>)
 8007f04:	f7fa fda8 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	461c      	mov	r4, r3
 8007f0c:	210b      	movs	r1, #11
 8007f0e:	4826      	ldr	r0, [pc, #152]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f10:	f7fa fda2 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f14:	4603      	mov	r3, r0
 8007f16:	429c      	cmp	r4, r3
 8007f18:	d01d      	beq.n	8007f56 <Input_signal_observe+0xc2>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_SET)
 8007f1a:	210b      	movs	r1, #11
 8007f1c:	4822      	ldr	r0, [pc, #136]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f1e:	f7fa fd9b 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d104      	bne.n	8007f32 <Input_signal_observe+0x9e>
			{
				HAL_GPIO_WritePin(GPIOA, 11, GPIO_PIN_RESET);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	210b      	movs	r1, #11
 8007f2c:	481e      	ldr	r0, [pc, #120]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f2e:	f7fa fdaa 	bl	8002a86 <HAL_GPIO_WritePin>
			}
            
            if(HAL_GPIO_ReadPin(GPIOB,12) != HAL_GPIO_ReadPin(GPIOA,6))
 8007f32:	210c      	movs	r1, #12
 8007f34:	481b      	ldr	r0, [pc, #108]	; (8007fa4 <Input_signal_observe+0x110>)
 8007f36:	f7fa fd8f 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	461c      	mov	r4, r3
 8007f3e:	2106      	movs	r1, #6
 8007f40:	4819      	ldr	r0, [pc, #100]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f42:	f7fa fd89 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f46:	4603      	mov	r3, r0
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	d004      	beq.n	8007f56 <Input_signal_observe+0xc2>
			{
				HAL_GPIO_WritePin(GPIOA, 11, GPIO_PIN_SET);
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	210b      	movs	r1, #11
 8007f50:	4815      	ldr	r0, [pc, #84]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f52:	f7fa fd98 	bl	8002a86 <HAL_GPIO_WritePin>
			};
		}

		if (HAL_GPIO_ReadPin(GPIOB, 12) != HAL_GPIO_ReadPin(GPIOA, 6))
 8007f56:	210c      	movs	r1, #12
 8007f58:	4812      	ldr	r0, [pc, #72]	; (8007fa4 <Input_signal_observe+0x110>)
 8007f5a:	f7fa fd7d 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	461c      	mov	r4, r3
 8007f62:	2106      	movs	r1, #6
 8007f64:	4810      	ldr	r0, [pc, #64]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f66:	f7fa fd77 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	d011      	beq.n	8007f94 <Input_signal_observe+0x100>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_SET)
 8007f70:	2106      	movs	r1, #6
 8007f72:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f74:	f7fa fd70 	bl	8002a58 <HAL_GPIO_ReadPin>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d105      	bne.n	8007f8a <Input_signal_observe+0xf6>
			{
				HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_RESET);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2106      	movs	r1, #6
 8007f82:	4809      	ldr	r0, [pc, #36]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f84:	f7fa fd7f 	bl	8002a86 <HAL_GPIO_WritePin>
 8007f88:	e004      	b.n	8007f94 <Input_signal_observe+0x100>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_SET);
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	2106      	movs	r1, #6
 8007f8e:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <Input_signal_observe+0x114>)
 8007f90:	f7fa fd79 	bl	8002a86 <HAL_GPIO_WritePin>
			};
		}

		output_level_setting = true;
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <Input_signal_observe+0x118>)
 8007f96:	2201      	movs	r2, #1
 8007f98:	701a      	strb	r2, [r3, #0]
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd90      	pop	{r4, r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40010c00 	.word	0x40010c00
 8007fa8:	40010800 	.word	0x40010800
 8007fac:	200005e9 	.word	0x200005e9

08007fb0 <__NVIC_SetPriority>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	db0a      	blt.n	8007fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	490c      	ldr	r1, [pc, #48]	; (8007ffc <__NVIC_SetPriority+0x4c>)
 8007fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fce:	0112      	lsls	r2, r2, #4
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fd8:	e00a      	b.n	8007ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	4908      	ldr	r1, [pc, #32]	; (8008000 <__NVIC_SetPriority+0x50>)
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	3b04      	subs	r3, #4
 8007fe8:	0112      	lsls	r2, r2, #4
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	440b      	add	r3, r1
 8007fee:	761a      	strb	r2, [r3, #24]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	e000e100 	.word	0xe000e100
 8008000:	e000ed00 	.word	0xe000ed00

08008004 <Systick_SetPeriod>:
/* Private functions --------------------------------------------------------*/

// Returns the computed value, 0 if impossible
// TODO: #129 Check if operations on SysTick indeed is allowed
void Systick_SetPeriod(float Duration_us)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	uint32_t Nb_Reload;
	float Nb_Reload_Float;
	float Real_Duration_us;
	float In_Freq;

	In_Freq = SystemCoreClock;
 800800c:	4b34      	ldr	r3, [pc, #208]	; (80080e0 <Systick_SetPeriod+0xdc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f7f8 fdf9 	bl	8000c08 <__aeabi_ui2f>
 8008016:	4603      	mov	r3, r0
 8008018:	60fb      	str	r3, [r7, #12]

	Nb_Reload_Float = Duration_us * In_Freq / 1000000.0;
 800801a:	68f9      	ldr	r1, [r7, #12]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7f8 fe4b 	bl	8000cb8 <__aeabi_fmul>
 8008022:	4603      	mov	r3, r0
 8008024:	492f      	ldr	r1, [pc, #188]	; (80080e4 <Systick_SetPeriod+0xe0>)
 8008026:	4618      	mov	r0, r3
 8008028:	f7f8 fefa 	bl	8000e20 <__aeabi_fdiv>
 800802c:	4603      	mov	r3, r0
 800802e:	613b      	str	r3, [r7, #16]
	Nb_Reload = (float) Nb_Reload_Float;
 8008030:	6938      	ldr	r0, [r7, #16]
 8008032:	f7f9 f807 	bl	8001044 <__aeabi_f2uiz>
 8008036:	4603      	mov	r3, r0
 8008038:	617b      	str	r3, [r7, #20]
	Real_Duration_us = ((float) Nb_Reload) / In_Freq * 1000000.0;
 800803a:	6978      	ldr	r0, [r7, #20]
 800803c:	f7f8 fde4 	bl	8000c08 <__aeabi_ui2f>
 8008040:	4603      	mov	r3, r0
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4618      	mov	r0, r3
 8008046:	f7f8 feeb 	bl	8000e20 <__aeabi_fdiv>
 800804a:	4603      	mov	r3, r0
 800804c:	4925      	ldr	r1, [pc, #148]	; (80080e4 <Systick_SetPeriod+0xe0>)
 800804e:	4618      	mov	r0, r3
 8008050:	f7f8 fe32 	bl	8000cb8 <__aeabi_fmul>
 8008054:	4603      	mov	r3, r0
 8008056:	60bb      	str	r3, [r7, #8]

	// Limit testing
	// No prescaler
	SysTick->CTRL = (SysTick->CTRL) | 1 << 2;
 8008058:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <Systick_SetPeriod+0xe4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a22      	ldr	r2, [pc, #136]	; (80080e8 <Systick_SetPeriod+0xe4>)
 800805e:	f043 0304 	orr.w	r3, r3, #4
 8008062:	6013      	str	r3, [r2, #0]
	if (Nb_Reload_Float >= 16777215.0)  // 2^24-1 max
 8008064:	4921      	ldr	r1, [pc, #132]	; (80080ec <Systick_SetPeriod+0xe8>)
 8008066:	6938      	ldr	r0, [r7, #16]
 8008068:	f7f8 ffd8 	bl	800101c <__aeabi_fcmpge>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d024      	beq.n	80080bc <Systick_SetPeriod+0xb8>
	{
		// Fix the prescaler to 8
		SysTick->CTRL = (SysTick->CTRL) & ~(1 << 2);
 8008072:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <Systick_SetPeriod+0xe4>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1c      	ldr	r2, [pc, #112]	; (80080e8 <Systick_SetPeriod+0xe4>)
 8008078:	f023 0304 	bic.w	r3, r3, #4
 800807c:	6013      	str	r3, [r2, #0]
		Nb_Reload_Float = Duration_us * In_Freq / 8000000.0;
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7f8 fe19 	bl	8000cb8 <__aeabi_fmul>
 8008086:	4603      	mov	r3, r0
 8008088:	4919      	ldr	r1, [pc, #100]	; (80080f0 <Systick_SetPeriod+0xec>)
 800808a:	4618      	mov	r0, r3
 800808c:	f7f8 fec8 	bl	8000e20 <__aeabi_fdiv>
 8008090:	4603      	mov	r3, r0
 8008092:	613b      	str	r3, [r7, #16]
		Nb_Reload = (float) Nb_Reload_Float;
 8008094:	6938      	ldr	r0, [r7, #16]
 8008096:	f7f8 ffd5 	bl	8001044 <__aeabi_f2uiz>
 800809a:	4603      	mov	r3, r0
 800809c:	617b      	str	r3, [r7, #20]
		Real_Duration_us = ((float) Nb_Reload) / In_Freq * 8000000.0;
 800809e:	6978      	ldr	r0, [r7, #20]
 80080a0:	f7f8 fdb2 	bl	8000c08 <__aeabi_ui2f>
 80080a4:	4603      	mov	r3, r0
 80080a6:	68f9      	ldr	r1, [r7, #12]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 feb9 	bl	8000e20 <__aeabi_fdiv>
 80080ae:	4603      	mov	r3, r0
 80080b0:	490f      	ldr	r1, [pc, #60]	; (80080f0 <Systick_SetPeriod+0xec>)
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f8 fe00 	bl	8000cb8 <__aeabi_fmul>
 80080b8:	4603      	mov	r3, r0
 80080ba:	60bb      	str	r3, [r7, #8]
	}

	if (Nb_Reload_Float >= 16777215.0)  // 2^24-1 max
 80080bc:	490b      	ldr	r1, [pc, #44]	; (80080ec <Systick_SetPeriod+0xe8>)
 80080be:	6938      	ldr	r0, [r7, #16]
 80080c0:	f7f8 ffac 	bl	800101c <__aeabi_fcmpge>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <Systick_SetPeriod+0xcc>
	{
		Real_Duration_us = 0.0;
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	60bb      	str	r3, [r7, #8]
	}

	SysTick->LOAD = Nb_Reload;
 80080d0:	4a05      	ldr	r2, [pc, #20]	; (80080e8 <Systick_SetPeriod+0xe4>)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	6053      	str	r3, [r2, #4]
}
 80080d6:	bf00      	nop
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000034 	.word	0x20000034
 80080e4:	49742400 	.word	0x49742400
 80080e8:	e000e010 	.word	0xe000e010
 80080ec:	4b7fffff 	.word	0x4b7fffff
 80080f0:	4af42400 	.word	0x4af42400

080080f4 <SysTickInit>:

// ## SysTick Timer Init **Prescaler: 64; CRK_RUN_OUT/CAM_delay**
void SysTickInit(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
	// FCPU with PLL = 73,7 MHz
	// Fcy: 36,85 MHz
	// 36,85 Mhz/ 64 = 575,78 kHz = 1.73 µs

	// Disable timer
	SysTick->CTRL &= ~1;
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <SysTickInit+0x38>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <SysTickInit+0x38>)
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	6013      	str	r3, [r2, #0]
	// Systick is not subject to any idle mode
	SysTick->VAL = (2 ^ 24) - 1; // Clear Systick count (Systick is count down and on 24 bits)
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <SysTickInit+0x38>)
 8008106:	2219      	movs	r2, #25
 8008108:	609a      	str	r2, [r3, #8]
	// Set to a 105ms period
	Systick_SetPeriod(105000.0);
 800810a:	4809      	ldr	r0, [pc, #36]	; (8008130 <SysTickInit+0x3c>)
 800810c:	f7ff ff7a 	bl	8008004 <Systick_SetPeriod>
	NVIC_SetPriority(SysTick_IRQn, 2);  // Set Systick interrupt priority
 8008110:	2102      	movs	r1, #2
 8008112:	f04f 30ff 	mov.w	r0, #4294967295
 8008116:	f7ff ff4b 	bl	8007fb0 <__NVIC_SetPriority>
	// No need to reset flag in systick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;  // Enable Systick interrupt
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <SysTickInit+0x38>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a03      	ldr	r2, [pc, #12]	; (800812c <SysTickInit+0x38>)
 8008120:	f043 0302 	orr.w	r3, r3, #2
 8008124:	6013      	str	r3, [r2, #0]
}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	e000e010 	.word	0xe000e010
 8008130:	47cd1400 	.word	0x47cd1400

08008134 <TIM2_Reset>:
	
}

//## TIM2_Reset **Prescaler: 256; CAM Synchronization; segment time**
void TIM2_Reset(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8008138:	4807      	ldr	r0, [pc, #28]	; (8008158 <TIM2_Reset+0x24>)
 800813a:	f7fb fa01 	bl	8003540 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2 counter value
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <TIM2_Reset+0x24>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8008146:	4804      	ldr	r0, [pc, #16]	; (8008158 <TIM2_Reset+0x24>)
 8008148:	f7fb f9a8 	bl	800349c <HAL_TIM_Base_Start_IT>
	timer_overflow_CAM = 0;
 800814c:	4b03      	ldr	r3, [pc, #12]	; (800815c <TIM2_Reset+0x28>)
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
}
 8008152:	bf00      	nop
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	200008ec 	.word	0x200008ec
 800815c:	200005ec 	.word	0x200005ec

08008160 <TIM_Soft_Start>:

void TIM_Soft_Start(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting == false)
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <TIM_Soft_Start+0x24>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d108      	bne.n	800817e <TIM_Soft_Start+0x1e>
	{
		TIM_Soft_StartTick = HAL_GetTick(); // Systick is used as based
 800816c:	f7fa f91a 	bl	80023a4 <HAL_GetTick>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <TIM_Soft_Start+0x28>)
 8008176:	601a      	str	r2, [r3, #0]
		// for the software-encoded timer
		TIM_Soft_Counting = 1;
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <TIM_Soft_Start+0x24>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
	}
}
 800817e:	bf00      	nop
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000a28 	.word	0x20000a28
 8008188:	20000a1c 	.word	0x20000a1c

0800818c <TIM_Soft_Stop>:

void TIM_Soft_Stop(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting)
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <TIM_Soft_Stop+0x64>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d028      	beq.n	80081ea <TIM_Soft_Stop+0x5e>
	{
		TIM_Soft_Counting = 0;
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <TIM_Soft_Stop+0x64>)
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
		TIM_Soft_StopTick =  HAL_GetTick();
 800819e:	f7fa f901 	bl	80023a4 <HAL_GetTick>
 80081a2:	4603      	mov	r3, r0
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <TIM_Soft_Stop+0x68>)
 80081a8:	601a      	str	r2, [r3, #0]
		TIM_Soft_TicksCounted += ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <TIM_Soft_Stop+0x68>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <TIM_Soft_Stop+0x6c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	1ad2      	subs	r2, r2, r3
				+ TIM_Soft_CounterOverflow * 62999)
 80081b4:	4b11      	ldr	r3, [pc, #68]	; (80081fc <TIM_Soft_Stop+0x70>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f24f 6117 	movw	r1, #62999	; 0xf617
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
				% 62999;
 80081c2:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <TIM_Soft_Stop+0x74>)
 80081c4:	fb82 1203 	smull	r1, r2, r2, r3
 80081c8:	441a      	add	r2, r3
 80081ca:	13d1      	asrs	r1, r2, #15
 80081cc:	17da      	asrs	r2, r3, #31
 80081ce:	1a8a      	subs	r2, r1, r2
 80081d0:	f24f 6117 	movw	r1, #62999	; 0xf617
 80081d4:	fb01 f202 	mul.w	r2, r1, r2
 80081d8:	1a9a      	subs	r2, r3, r2
		TIM_Soft_TicksCounted += ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <TIM_Soft_Stop+0x78>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4413      	add	r3, r2
 80081e0:	4a08      	ldr	r2, [pc, #32]	; (8008204 <TIM_Soft_Stop+0x78>)
 80081e2:	6013      	str	r3, [r2, #0]
		TIM_Soft_CounterOverflow = 0;
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <TIM_Soft_Stop+0x70>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
	}
}
 80081ea:	bf00      	nop
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000a28 	.word	0x20000a28
 80081f4:	20000a20 	.word	0x20000a20
 80081f8:	20000a1c 	.word	0x20000a1c
 80081fc:	20000a24 	.word	0x20000a24
 8008200:	85279547 	.word	0x85279547
 8008204:	20000a2c 	.word	0x20000a2c

08008208 <TIM_Soft_Reset>:

void TIM_Soft_Reset(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
	TIM_Soft_StartTick = 0;
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <TIM_Soft_Reset+0x24>)
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
	TIM_Soft_StopTick = 0;
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <TIM_Soft_Reset+0x28>)
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
	TIM_Soft_TicksCounted = 0;
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <TIM_Soft_Reset+0x2c>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
	TIM_Soft_CounterOverflow = 0;
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <TIM_Soft_Reset+0x30>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr
 800822c:	20000a1c 	.word	0x20000a1c
 8008230:	20000a20 	.word	0x20000a20
 8008234:	20000a2c 	.word	0x20000a2c
 8008238:	20000a24 	.word	0x20000a24

0800823c <TIM_Soft_GetCounter>:

int TIM_Soft_GetCounter(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting)
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <TIM_Soft_GetCounter+0x4c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d018      	beq.n	800827a <TIM_Soft_GetCounter+0x3e>
	{
		return ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 8008248:	4b10      	ldr	r3, [pc, #64]	; (800828c <TIM_Soft_GetCounter+0x50>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b10      	ldr	r3, [pc, #64]	; (8008290 <TIM_Soft_GetCounter+0x54>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1ad2      	subs	r2, r2, r3
				+ TIM_Soft_CounterOverflow * 62999)
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <TIM_Soft_GetCounter+0x58>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f24f 6117 	movw	r1, #62999	; 0xf617
 800825a:	fb01 f303 	mul.w	r3, r1, r3
 800825e:	4413      	add	r3, r2
				% 62999;
 8008260:	4a0d      	ldr	r2, [pc, #52]	; (8008298 <TIM_Soft_GetCounter+0x5c>)
 8008262:	fb82 1203 	smull	r1, r2, r2, r3
 8008266:	441a      	add	r2, r3
 8008268:	13d1      	asrs	r1, r2, #15
 800826a:	17da      	asrs	r2, r3, #31
 800826c:	1a8a      	subs	r2, r1, r2
 800826e:	f24f 6117 	movw	r1, #62999	; 0xf617
 8008272:	fb01 f202 	mul.w	r2, r1, r2
 8008276:	1a9a      	subs	r2, r3, r2
 8008278:	e001      	b.n	800827e <TIM_Soft_GetCounter+0x42>
	}
	else
	{
		return TIM_Soft_TicksCounted;
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <TIM_Soft_GetCounter+0x60>)
 800827c:	681a      	ldr	r2, [r3, #0]
	}
}
 800827e:	4613      	mov	r3, r2
 8008280:	4618      	mov	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr
 8008288:	20000a28 	.word	0x20000a28
 800828c:	20000a20 	.word	0x20000a20
 8008290:	20000a1c 	.word	0x20000a1c
 8008294:	20000a24 	.word	0x20000a24
 8008298:	85279547 	.word	0x85279547
 800829c:	20000a2c 	.word	0x20000a2c

080082a0 <GetTimestamp>:

// Returns a timestamp in microseconds
int GetTimestamp(void) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
    uint32_t nb_of_periods;
    uint32_t val;
    uint32_t load;

	nb_of_periods = HAL_GetTick();
 80082a6:	f7fa f87d 	bl	80023a4 <HAL_GetTick>
 80082aa:	60f8      	str	r0, [r7, #12]
	val = SysTick->VAL;
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <GetTimestamp+0x40>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60bb      	str	r3, [r7, #8]
	load = SysTick->LOAD;
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <GetTimestamp+0x40>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	607b      	str	r3, [r7, #4]

    // Do not factorize for precision purposes
    return nb_of_periods * SYSTICK_US_PERIOD + (load + 1 - val) * SYSTICK_US_PERIOD / (load + 1);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a0a      	ldr	r2, [pc, #40]	; (80082e4 <GetTimestamp+0x44>)
 80082bc:	fb03 f202 	mul.w	r2, r3, r2
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	1acb      	subs	r3, r1, r3
 80082c6:	3301      	adds	r3, #1
 80082c8:	4906      	ldr	r1, [pc, #24]	; (80082e4 <GetTimestamp+0x44>)
 80082ca:	fb03 f101 	mul.w	r1, r3, r1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3301      	adds	r3, #1
 80082d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80082d6:	4413      	add	r3, r2
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	e000e010 	.word	0xe000e010
 80082e4:	0001d4c0 	.word	0x0001d4c0

080082e8 <USART_ProcessMessage>:
extern volatile bool should_record;

/* Public functions ----------------------------------------------------------*/

void USART_ProcessMessage(void)
{
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0

	data_counter = 0; //Set data counter to 0
 80082ee:	4b9f      	ldr	r3, [pc, #636]	; (800856c <USART_ProcessMessage+0x284>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]

	input_char_counter = 0; //Set input char counter to 0
 80082f4:	4b9e      	ldr	r3, [pc, #632]	; (8008570 <USART_ProcessMessage+0x288>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

	message_identify = input_chars[1]; //Read message identifier
 80082fa:	4b9e      	ldr	r3, [pc, #632]	; (8008574 <USART_ProcessMessage+0x28c>)
 80082fc:	785a      	ldrb	r2, [r3, #1]
 80082fe:	4b9e      	ldr	r3, [pc, #632]	; (8008578 <USART_ProcessMessage+0x290>)
 8008300:	701a      	strb	r2, [r3, #0]

	int i; //Set counter variable to read received message in for-loop

	if (message_identify == '2' && CAM_config == false)
 8008302:	4b9d      	ldr	r3, [pc, #628]	; (8008578 <USART_ProcessMessage+0x290>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b32      	cmp	r3, #50	; 0x32
 8008308:	f040 80ca 	bne.w	80084a0 <USART_ProcessMessage+0x1b8>
 800830c:	4b9b      	ldr	r3, [pc, #620]	; (800857c <USART_ProcessMessage+0x294>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f083 0301 	eor.w	r3, r3, #1
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80c2 	beq.w	80084a0 <USART_ProcessMessage+0x1b8>
	{
		for (i = 1; i < strlen(input_chars); i++)
 800831c:	2301      	movs	r3, #1
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	e0ab      	b.n	800847a <USART_ProcessMessage+0x192>
		{
			char temp = input_chars[i];
 8008322:	4a94      	ldr	r2, [pc, #592]	; (8008574 <USART_ProcessMessage+0x28c>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	70fb      	strb	r3, [r7, #3]

			if (temp == '/')
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	2b2f      	cmp	r3, #47	; 0x2f
 8008330:	d121      	bne.n	8008376 <USART_ProcessMessage+0x8e>
			{
				if (data_counter > 4)
 8008332:	4b8e      	ldr	r3, [pc, #568]	; (800856c <USART_ProcessMessage+0x284>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b04      	cmp	r3, #4
 8008338:	dd14      	ble.n	8008364 <USART_ProcessMessage+0x7c>
				{
					CAM_edges[cam_setup_counter][data_counter - 5] = atof(
 800833a:	4b91      	ldr	r3, [pc, #580]	; (8008580 <USART_ProcessMessage+0x298>)
 800833c:	681c      	ldr	r4, [r3, #0]
 800833e:	4b8b      	ldr	r3, [pc, #556]	; (800856c <USART_ProcessMessage+0x284>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	1f5d      	subs	r5, r3, #5
 8008344:	488f      	ldr	r0, [pc, #572]	; (8008584 <USART_ProcessMessage+0x29c>)
 8008346:	f000 ff4f 	bl	80091e8 <atof>
 800834a:	4a8f      	ldr	r2, [pc, #572]	; (8008588 <USART_ProcessMessage+0x2a0>)
 800834c:	4623      	mov	r3, r4
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	4423      	add	r3, r4
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	442b      	add	r3, r5
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4413      	add	r3, r2
 800835a:	e9c3 0100 	strd	r0, r1, [r3]
							temp_chars_5);
					temp_chars_5[0] = '\0';
 800835e:	4b89      	ldr	r3, [pc, #548]	; (8008584 <USART_ProcessMessage+0x29c>)
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
				}

				data_counter++;
 8008364:	4b81      	ldr	r3, [pc, #516]	; (800856c <USART_ProcessMessage+0x284>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	4a80      	ldr	r2, [pc, #512]	; (800856c <USART_ProcessMessage+0x284>)
 800836c:	6013      	str	r3, [r2, #0]
				input_char_counter = 0;
 800836e:	4b80      	ldr	r3, [pc, #512]	; (8008570 <USART_ProcessMessage+0x288>)
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e05e      	b.n	8008434 <USART_ProcessMessage+0x14c>
			}
			else if (data_counter > 0 && data_counter < 5)
 8008376:	4b7d      	ldr	r3, [pc, #500]	; (800856c <USART_ProcessMessage+0x284>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd4a      	ble.n	8008414 <USART_ProcessMessage+0x12c>
 800837e:	4b7b      	ldr	r3, [pc, #492]	; (800856c <USART_ProcessMessage+0x284>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b04      	cmp	r3, #4
 8008384:	dc46      	bgt.n	8008414 <USART_ProcessMessage+0x12c>
			{
				switch (data_counter)
 8008386:	4b79      	ldr	r3, [pc, #484]	; (800856c <USART_ProcessMessage+0x284>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3b01      	subs	r3, #1
 800838c:	2b03      	cmp	r3, #3
 800838e:	d83b      	bhi.n	8008408 <USART_ProcessMessage+0x120>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <USART_ProcessMessage+0xb0>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083a9 	.word	0x080083a9
 800839c:	080083c1 	.word	0x080083c1
 80083a0:	080083d9 	.word	0x080083d9
 80083a4:	080083f1 	.word	0x080083f1
				{

				case 1:
				{
					temp_chars_1[input_char_counter] = temp;
 80083a8:	4b71      	ldr	r3, [pc, #452]	; (8008570 <USART_ProcessMessage+0x288>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4977      	ldr	r1, [pc, #476]	; (800858c <USART_ProcessMessage+0x2a4>)
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	54ca      	strb	r2, [r1, r3]

					temp_chars_1[input_char_counter + 1] = '\0';
 80083b2:	4b6f      	ldr	r3, [pc, #444]	; (8008570 <USART_ProcessMessage+0x288>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	4a74      	ldr	r2, [pc, #464]	; (800858c <USART_ProcessMessage+0x2a4>)
 80083ba:	2100      	movs	r1, #0
 80083bc:	54d1      	strb	r1, [r2, r3]

					break;
 80083be:	e023      	b.n	8008408 <USART_ProcessMessage+0x120>
				}
				case 2:
				{
					temp_chars_2[input_char_counter] = temp;
 80083c0:	4b6b      	ldr	r3, [pc, #428]	; (8008570 <USART_ProcessMessage+0x288>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4972      	ldr	r1, [pc, #456]	; (8008590 <USART_ProcessMessage+0x2a8>)
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	54ca      	strb	r2, [r1, r3]

					temp_chars_2[input_char_counter + 1] = '\0';
 80083ca:	4b69      	ldr	r3, [pc, #420]	; (8008570 <USART_ProcessMessage+0x288>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a6f      	ldr	r2, [pc, #444]	; (8008590 <USART_ProcessMessage+0x2a8>)
 80083d2:	2100      	movs	r1, #0
 80083d4:	54d1      	strb	r1, [r2, r3]

					break;
 80083d6:	e017      	b.n	8008408 <USART_ProcessMessage+0x120>
				}
				case 3:
				{
					temp_chars_3[input_char_counter] = temp;
 80083d8:	4b65      	ldr	r3, [pc, #404]	; (8008570 <USART_ProcessMessage+0x288>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	496d      	ldr	r1, [pc, #436]	; (8008594 <USART_ProcessMessage+0x2ac>)
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	54ca      	strb	r2, [r1, r3]

					temp_chars_3[input_char_counter + 1] = '\0';
 80083e2:	4b63      	ldr	r3, [pc, #396]	; (8008570 <USART_ProcessMessage+0x288>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	4a6a      	ldr	r2, [pc, #424]	; (8008594 <USART_ProcessMessage+0x2ac>)
 80083ea:	2100      	movs	r1, #0
 80083ec:	54d1      	strb	r1, [r2, r3]

					break;
 80083ee:	e00b      	b.n	8008408 <USART_ProcessMessage+0x120>
				}
				case 4:
				{
					temp_chars_4[input_char_counter] = temp;
 80083f0:	4b5f      	ldr	r3, [pc, #380]	; (8008570 <USART_ProcessMessage+0x288>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4968      	ldr	r1, [pc, #416]	; (8008598 <USART_ProcessMessage+0x2b0>)
 80083f6:	78fa      	ldrb	r2, [r7, #3]
 80083f8:	54ca      	strb	r2, [r1, r3]

					temp_chars_4[input_char_counter + 1] = '\0';
 80083fa:	4b5d      	ldr	r3, [pc, #372]	; (8008570 <USART_ProcessMessage+0x288>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	4a65      	ldr	r2, [pc, #404]	; (8008598 <USART_ProcessMessage+0x2b0>)
 8008402:	2100      	movs	r1, #0
 8008404:	54d1      	strb	r1, [r2, r3]

					break;
 8008406:	bf00      	nop
				}

				}

				input_char_counter++;
 8008408:	4b59      	ldr	r3, [pc, #356]	; (8008570 <USART_ProcessMessage+0x288>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	4a58      	ldr	r2, [pc, #352]	; (8008570 <USART_ProcessMessage+0x288>)
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e00f      	b.n	8008434 <USART_ProcessMessage+0x14c>
			}
			else
			{
				temp_chars_5[input_char_counter] = temp;
 8008414:	4b56      	ldr	r3, [pc, #344]	; (8008570 <USART_ProcessMessage+0x288>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	495a      	ldr	r1, [pc, #360]	; (8008584 <USART_ProcessMessage+0x29c>)
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	54ca      	strb	r2, [r1, r3]

				temp_chars_5[input_char_counter + 1] = '\0';
 800841e:	4b54      	ldr	r3, [pc, #336]	; (8008570 <USART_ProcessMessage+0x288>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	4a57      	ldr	r2, [pc, #348]	; (8008584 <USART_ProcessMessage+0x29c>)
 8008426:	2100      	movs	r1, #0
 8008428:	54d1      	strb	r1, [r2, r3]

				input_char_counter++;
 800842a:	4b51      	ldr	r3, [pc, #324]	; (8008570 <USART_ProcessMessage+0x288>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	4a4f      	ldr	r2, [pc, #316]	; (8008570 <USART_ProcessMessage+0x288>)
 8008432:	6013      	str	r3, [r2, #0]

			}

			if (i == strlen(input_chars) - 1)
 8008434:	484f      	ldr	r0, [pc, #316]	; (8008574 <USART_ProcessMessage+0x28c>)
 8008436:	f7f7 fe8b 	bl	8000150 <strlen>
 800843a:	4603      	mov	r3, r0
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d117      	bne.n	8008474 <USART_ProcessMessage+0x18c>
			{
				CAM_edges[cam_setup_counter][data_counter - 5] = atof(
 8008444:	4b4e      	ldr	r3, [pc, #312]	; (8008580 <USART_ProcessMessage+0x298>)
 8008446:	681c      	ldr	r4, [r3, #0]
 8008448:	4b48      	ldr	r3, [pc, #288]	; (800856c <USART_ProcessMessage+0x284>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	1f5d      	subs	r5, r3, #5
 800844e:	484d      	ldr	r0, [pc, #308]	; (8008584 <USART_ProcessMessage+0x29c>)
 8008450:	f000 feca 	bl	80091e8 <atof>
 8008454:	4a4c      	ldr	r2, [pc, #304]	; (8008588 <USART_ProcessMessage+0x2a0>)
 8008456:	4623      	mov	r3, r4
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4423      	add	r3, r4
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	442b      	add	r3, r5
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4413      	add	r3, r2
 8008464:	e9c3 0100 	strd	r0, r1, [r3]
						temp_chars_5);
				temp_chars_5[0] = '\0';
 8008468:	4b46      	ldr	r3, [pc, #280]	; (8008584 <USART_ProcessMessage+0x29c>)
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]

				input_char_counter = 0;
 800846e:	4b40      	ldr	r3, [pc, #256]	; (8008570 <USART_ProcessMessage+0x288>)
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
		for (i = 1; i < strlen(input_chars); i++)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3301      	adds	r3, #1
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	483e      	ldr	r0, [pc, #248]	; (8008574 <USART_ProcessMessage+0x28c>)
 800847c:	f7f7 fe68 	bl	8000150 <strlen>
 8008480:	4602      	mov	r2, r0
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	f63f af4c 	bhi.w	8008322 <USART_ProcessMessage+0x3a>
			}

		}

		number_active_edges_CAM[cam_setup_counter] = atoi(temp_chars_1);
 800848a:	4840      	ldr	r0, [pc, #256]	; (800858c <USART_ProcessMessage+0x2a4>)
 800848c:	f000 feaf 	bl	80091ee <atoi>
 8008490:	4602      	mov	r2, r0
 8008492:	4b3b      	ldr	r3, [pc, #236]	; (8008580 <USART_ProcessMessage+0x298>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4611      	mov	r1, r2
 8008498:	4a40      	ldr	r2, [pc, #256]	; (800859c <USART_ProcessMessage+0x2b4>)
 800849a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800849e:	e0d7      	b.n	8008650 <USART_ProcessMessage+0x368>

	}
	else
	{
		for (i = 1; i < strlen(input_chars); i++)
 80084a0:	2301      	movs	r3, #1
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	e0cc      	b.n	8008640 <USART_ProcessMessage+0x358>
		{
			char temp = input_chars[i];
 80084a6:	4a33      	ldr	r2, [pc, #204]	; (8008574 <USART_ProcessMessage+0x28c>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	70bb      	strb	r3, [r7, #2]

			if (temp == '/')
 80084b0:	78bb      	ldrb	r3, [r7, #2]
 80084b2:	2b2f      	cmp	r3, #47	; 0x2f
 80084b4:	d108      	bne.n	80084c8 <USART_ProcessMessage+0x1e0>
			{
				data_counter++;
 80084b6:	4b2d      	ldr	r3, [pc, #180]	; (800856c <USART_ProcessMessage+0x284>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	4a2b      	ldr	r2, [pc, #172]	; (800856c <USART_ProcessMessage+0x284>)
 80084be:	6013      	str	r3, [r2, #0]
				input_char_counter = 0;
 80084c0:	4b2b      	ldr	r3, [pc, #172]	; (8008570 <USART_ProcessMessage+0x288>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	e0b8      	b.n	800863a <USART_ProcessMessage+0x352>
			}
			else if (data_counter > 0)
 80084c8:	4b28      	ldr	r3, [pc, #160]	; (800856c <USART_ProcessMessage+0x284>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f340 80b4 	ble.w	800863a <USART_ProcessMessage+0x352>
			{
				switch (data_counter)
 80084d2:	4b26      	ldr	r3, [pc, #152]	; (800856c <USART_ProcessMessage+0x284>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b09      	cmp	r3, #9
 80084da:	f200 80a9 	bhi.w	8008630 <USART_ProcessMessage+0x348>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USART_ProcessMessage+0x1fc>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008525 	.word	0x08008525
 80084ec:	0800853d 	.word	0x0800853d
 80084f0:	08008555 	.word	0x08008555
 80084f4:	080085a1 	.word	0x080085a1
 80084f8:	080085b9 	.word	0x080085b9
 80084fc:	080085d1 	.word	0x080085d1
 8008500:	080085e9 	.word	0x080085e9
 8008504:	08008601 	.word	0x08008601
 8008508:	08008619 	.word	0x08008619
				{

				case 1:
				{
					temp_chars_1[input_char_counter] = temp;
 800850c:	4b18      	ldr	r3, [pc, #96]	; (8008570 <USART_ProcessMessage+0x288>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	491e      	ldr	r1, [pc, #120]	; (800858c <USART_ProcessMessage+0x2a4>)
 8008512:	78ba      	ldrb	r2, [r7, #2]
 8008514:	54ca      	strb	r2, [r1, r3]

					temp_chars_1[input_char_counter + 1] = '\0';
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <USART_ProcessMessage+0x288>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a1b      	ldr	r2, [pc, #108]	; (800858c <USART_ProcessMessage+0x2a4>)
 800851e:	2100      	movs	r1, #0
 8008520:	54d1      	strb	r1, [r2, r3]

					break;
 8008522:	e085      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 2:
				{
					temp_chars_2[input_char_counter] = temp;
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <USART_ProcessMessage+0x288>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4919      	ldr	r1, [pc, #100]	; (8008590 <USART_ProcessMessage+0x2a8>)
 800852a:	78ba      	ldrb	r2, [r7, #2]
 800852c:	54ca      	strb	r2, [r1, r3]

					temp_chars_2[input_char_counter + 1] = '\0';
 800852e:	4b10      	ldr	r3, [pc, #64]	; (8008570 <USART_ProcessMessage+0x288>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a16      	ldr	r2, [pc, #88]	; (8008590 <USART_ProcessMessage+0x2a8>)
 8008536:	2100      	movs	r1, #0
 8008538:	54d1      	strb	r1, [r2, r3]

					break;
 800853a:	e079      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 3:
				{
					temp_chars_3[input_char_counter] = temp;
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <USART_ProcessMessage+0x288>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4914      	ldr	r1, [pc, #80]	; (8008594 <USART_ProcessMessage+0x2ac>)
 8008542:	78ba      	ldrb	r2, [r7, #2]
 8008544:	54ca      	strb	r2, [r1, r3]

					temp_chars_3[input_char_counter + 1] = '\0';
 8008546:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <USART_ProcessMessage+0x288>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	4a11      	ldr	r2, [pc, #68]	; (8008594 <USART_ProcessMessage+0x2ac>)
 800854e:	2100      	movs	r1, #0
 8008550:	54d1      	strb	r1, [r2, r3]

					break;
 8008552:	e06d      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 4:
				{
					temp_chars_4[input_char_counter] = temp;
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <USART_ProcessMessage+0x288>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	490f      	ldr	r1, [pc, #60]	; (8008598 <USART_ProcessMessage+0x2b0>)
 800855a:	78ba      	ldrb	r2, [r7, #2]
 800855c:	54ca      	strb	r2, [r1, r3]

					temp_chars_4[input_char_counter + 1] = '\0';
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <USART_ProcessMessage+0x288>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <USART_ProcessMessage+0x2b0>)
 8008566:	2100      	movs	r1, #0
 8008568:	54d1      	strb	r1, [r2, r3]

					break;
 800856a:	e061      	b.n	8008630 <USART_ProcessMessage+0x348>
 800856c:	2000079c 	.word	0x2000079c
 8008570:	200007a8 	.word	0x200007a8
 8008574:	200007a4 	.word	0x200007a4
 8008578:	2000089c 	.word	0x2000089c
 800857c:	20000666 	.word	0x20000666
 8008580:	200005e4 	.word	0x200005e4
 8008584:	2000080c 	.word	0x2000080c
 8008588:	200002d0 	.word	0x200002d0
 800858c:	200007ac 	.word	0x200007ac
 8008590:	200007c4 	.word	0x200007c4
 8008594:	200007dc 	.word	0x200007dc
 8008598:	200007f4 	.word	0x200007f4
 800859c:	200002b0 	.word	0x200002b0
				}
				case 5:
				{
					temp_chars_5[input_char_counter] = temp;
 80085a0:	4b7a      	ldr	r3, [pc, #488]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	497a      	ldr	r1, [pc, #488]	; (8008790 <USART_ProcessMessage+0x4a8>)
 80085a6:	78ba      	ldrb	r2, [r7, #2]
 80085a8:	54ca      	strb	r2, [r1, r3]

					temp_chars_5[input_char_counter + 1] = '\0';
 80085aa:	4b78      	ldr	r3, [pc, #480]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3301      	adds	r3, #1
 80085b0:	4a77      	ldr	r2, [pc, #476]	; (8008790 <USART_ProcessMessage+0x4a8>)
 80085b2:	2100      	movs	r1, #0
 80085b4:	54d1      	strb	r1, [r2, r3]

					break;
 80085b6:	e03b      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 6:
				{
					temp_chars_6[input_char_counter] = temp;
 80085b8:	4b74      	ldr	r3, [pc, #464]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4975      	ldr	r1, [pc, #468]	; (8008794 <USART_ProcessMessage+0x4ac>)
 80085be:	78ba      	ldrb	r2, [r7, #2]
 80085c0:	54ca      	strb	r2, [r1, r3]

					temp_chars_6[input_char_counter + 1] = '\0';
 80085c2:	4b72      	ldr	r3, [pc, #456]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	4a72      	ldr	r2, [pc, #456]	; (8008794 <USART_ProcessMessage+0x4ac>)
 80085ca:	2100      	movs	r1, #0
 80085cc:	54d1      	strb	r1, [r2, r3]
					break;
 80085ce:	e02f      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 7:
				{
					temp_chars_7[input_char_counter] = temp;
 80085d0:	4b6e      	ldr	r3, [pc, #440]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4970      	ldr	r1, [pc, #448]	; (8008798 <USART_ProcessMessage+0x4b0>)
 80085d6:	78ba      	ldrb	r2, [r7, #2]
 80085d8:	54ca      	strb	r2, [r1, r3]

					temp_chars_7[input_char_counter + 1] = '\0';
 80085da:	4b6c      	ldr	r3, [pc, #432]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	4a6d      	ldr	r2, [pc, #436]	; (8008798 <USART_ProcessMessage+0x4b0>)
 80085e2:	2100      	movs	r1, #0
 80085e4:	54d1      	strb	r1, [r2, r3]

					break;
 80085e6:	e023      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 8:
				{
					temp_chars_8[input_char_counter] = temp;
 80085e8:	4b68      	ldr	r3, [pc, #416]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	496b      	ldr	r1, [pc, #428]	; (800879c <USART_ProcessMessage+0x4b4>)
 80085ee:	78ba      	ldrb	r2, [r7, #2]
 80085f0:	54ca      	strb	r2, [r1, r3]

					temp_chars_8[input_char_counter + 1] = '\0';
 80085f2:	4b66      	ldr	r3, [pc, #408]	; (800878c <USART_ProcessMessage+0x4a4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a68      	ldr	r2, [pc, #416]	; (800879c <USART_ProcessMessage+0x4b4>)
 80085fa:	2100      	movs	r1, #0
 80085fc:	54d1      	strb	r1, [r2, r3]

					break;
 80085fe:	e017      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 9:
				{
					temp_chars_9[input_char_counter] = temp;
 8008600:	4b62      	ldr	r3, [pc, #392]	; (800878c <USART_ProcessMessage+0x4a4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4966      	ldr	r1, [pc, #408]	; (80087a0 <USART_ProcessMessage+0x4b8>)
 8008606:	78ba      	ldrb	r2, [r7, #2]
 8008608:	54ca      	strb	r2, [r1, r3]

					temp_chars_9[input_char_counter + 1] = '\0';
 800860a:	4b60      	ldr	r3, [pc, #384]	; (800878c <USART_ProcessMessage+0x4a4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4a63      	ldr	r2, [pc, #396]	; (80087a0 <USART_ProcessMessage+0x4b8>)
 8008612:	2100      	movs	r1, #0
 8008614:	54d1      	strb	r1, [r2, r3]

					break;
 8008616:	e00b      	b.n	8008630 <USART_ProcessMessage+0x348>
				}
				case 10:
				{
					temp_chars_10[input_char_counter] = temp;
 8008618:	4b5c      	ldr	r3, [pc, #368]	; (800878c <USART_ProcessMessage+0x4a4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4961      	ldr	r1, [pc, #388]	; (80087a4 <USART_ProcessMessage+0x4bc>)
 800861e:	78ba      	ldrb	r2, [r7, #2]
 8008620:	54ca      	strb	r2, [r1, r3]

					temp_chars_10[input_char_counter + 1] = '\0';
 8008622:	4b5a      	ldr	r3, [pc, #360]	; (800878c <USART_ProcessMessage+0x4a4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	4a5e      	ldr	r2, [pc, #376]	; (80087a4 <USART_ProcessMessage+0x4bc>)
 800862a:	2100      	movs	r1, #0
 800862c:	54d1      	strb	r1, [r2, r3]

					break;
 800862e:	bf00      	nop
				}

				}

				input_char_counter++;
 8008630:	4b56      	ldr	r3, [pc, #344]	; (800878c <USART_ProcessMessage+0x4a4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a55      	ldr	r2, [pc, #340]	; (800878c <USART_ProcessMessage+0x4a4>)
 8008638:	6013      	str	r3, [r2, #0]
		for (i = 1; i < strlen(input_chars); i++)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3301      	adds	r3, #1
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	4859      	ldr	r0, [pc, #356]	; (80087a8 <USART_ProcessMessage+0x4c0>)
 8008642:	f7f7 fd85 	bl	8000150 <strlen>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	f63f af2b 	bhi.w	80084a6 <USART_ProcessMessage+0x1be>
			}
		}
	}

	//set specific variables of actual message
	switch (message_identify)
 8008650:	4b56      	ldr	r3, [pc, #344]	; (80087ac <USART_ProcessMessage+0x4c4>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	3b31      	subs	r3, #49	; 0x31
 8008656:	2b49      	cmp	r3, #73	; 0x49
 8008658:	f200 8496 	bhi.w	8008f88 <USART_ProcessMessage+0xca0>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <USART_ProcessMessage+0x37c>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	080087b1 	.word	0x080087b1
 8008668:	080088d1 	.word	0x080088d1
 800866c:	080089b5 	.word	0x080089b5
 8008670:	080089ef 	.word	0x080089ef
 8008674:	08008aa5 	.word	0x08008aa5
 8008678:	08008f9d 	.word	0x08008f9d
 800867c:	08008acd 	.word	0x08008acd
 8008680:	08008b2f 	.word	0x08008b2f
 8008684:	08008b83 	.word	0x08008b83
 8008688:	08008f89 	.word	0x08008f89
 800868c:	08008f89 	.word	0x08008f89
 8008690:	08008f89 	.word	0x08008f89
 8008694:	08008f89 	.word	0x08008f89
 8008698:	08008f89 	.word	0x08008f89
 800869c:	08008f89 	.word	0x08008f89
 80086a0:	08008f89 	.word	0x08008f89
 80086a4:	08008f89 	.word	0x08008f89
 80086a8:	08008f89 	.word	0x08008f89
 80086ac:	08008f89 	.word	0x08008f89
 80086b0:	08008f89 	.word	0x08008f89
 80086b4:	08008f89 	.word	0x08008f89
 80086b8:	08008f89 	.word	0x08008f89
 80086bc:	08008f89 	.word	0x08008f89
 80086c0:	08008f89 	.word	0x08008f89
 80086c4:	08008f89 	.word	0x08008f89
 80086c8:	08008f89 	.word	0x08008f89
 80086cc:	08008f89 	.word	0x08008f89
 80086d0:	08008f89 	.word	0x08008f89
 80086d4:	08008f89 	.word	0x08008f89
 80086d8:	08008f89 	.word	0x08008f89
 80086dc:	08008f89 	.word	0x08008f89
 80086e0:	08008f89 	.word	0x08008f89
 80086e4:	08008f89 	.word	0x08008f89
 80086e8:	08008f89 	.word	0x08008f89
 80086ec:	08008f89 	.word	0x08008f89
 80086f0:	08008f89 	.word	0x08008f89
 80086f4:	08008f89 	.word	0x08008f89
 80086f8:	08008f89 	.word	0x08008f89
 80086fc:	08008f89 	.word	0x08008f89
 8008700:	08008f89 	.word	0x08008f89
 8008704:	08008f89 	.word	0x08008f89
 8008708:	08008f89 	.word	0x08008f89
 800870c:	08008f89 	.word	0x08008f89
 8008710:	08008f89 	.word	0x08008f89
 8008714:	08008f89 	.word	0x08008f89
 8008718:	08008f89 	.word	0x08008f89
 800871c:	08008f89 	.word	0x08008f89
 8008720:	08008f89 	.word	0x08008f89
 8008724:	08008f9d 	.word	0x08008f9d
 8008728:	08008bcf 	.word	0x08008bcf
 800872c:	08008c0d 	.word	0x08008c0d
 8008730:	08008f9d 	.word	0x08008f9d
 8008734:	08008f89 	.word	0x08008f89
 8008738:	08008f9d 	.word	0x08008f9d
 800873c:	08008f9d 	.word	0x08008f9d
 8008740:	08008c67 	.word	0x08008c67
 8008744:	08008cb3 	.word	0x08008cb3
 8008748:	08008d35 	.word	0x08008d35
 800874c:	08008d83 	.word	0x08008d83
 8008750:	08008e89 	.word	0x08008e89
 8008754:	08008edb 	.word	0x08008edb
 8008758:	08008f2d 	.word	0x08008f2d
 800875c:	08008f89 	.word	0x08008f89
 8008760:	08008f89 	.word	0x08008f89
 8008764:	08008f89 	.word	0x08008f89
 8008768:	08008f89 	.word	0x08008f89
 800876c:	08008f89 	.word	0x08008f89
 8008770:	08008f89 	.word	0x08008f89
 8008774:	08008f89 	.word	0x08008f89
 8008778:	08008f89 	.word	0x08008f89
 800877c:	08008f89 	.word	0x08008f89
 8008780:	08008f89 	.word	0x08008f89
 8008784:	08008f89 	.word	0x08008f89
 8008788:	08008f35 	.word	0x08008f35
 800878c:	200007a8 	.word	0x200007a8
 8008790:	2000080c 	.word	0x2000080c
 8008794:	20000824 	.word	0x20000824
 8008798:	2000083c 	.word	0x2000083c
 800879c:	20000854 	.word	0x20000854
 80087a0:	2000086c 	.word	0x2000086c
 80087a4:	20000884 	.word	0x20000884
 80087a8:	200007a4 	.word	0x200007a4
 80087ac:	2000089c 	.word	0x2000089c
	{
	case ('1'): // CRK configuration
	{
		if (CRK_config == false)
 80087b0:	4b9f      	ldr	r3, [pc, #636]	; (8008a30 <USART_ProcessMessage+0x748>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f083 0301 	eor.w	r3, r3, #1
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 8085 	beq.w	80088ca <USART_ProcessMessage+0x5e2>
		{
			if (data_counter == 7)
 80087c0:	4b9c      	ldr	r3, [pc, #624]	; (8008a34 <USART_ProcessMessage+0x74c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	d17e      	bne.n	80088c6 <USART_ProcessMessage+0x5de>
			{
				number_teeth_CRK = atoi(temp_chars_1);
 80087c8:	489b      	ldr	r0, [pc, #620]	; (8008a38 <USART_ProcessMessage+0x750>)
 80087ca:	f000 fd10 	bl	80091ee <atoi>
 80087ce:	4603      	mov	r3, r0
 80087d0:	4a9a      	ldr	r2, [pc, #616]	; (8008a3c <USART_ProcessMessage+0x754>)
 80087d2:	6013      	str	r3, [r2, #0]
				number_miss_teeth = atoi(temp_chars_2);
 80087d4:	489a      	ldr	r0, [pc, #616]	; (8008a40 <USART_ProcessMessage+0x758>)
 80087d6:	f000 fd0a 	bl	80091ee <atoi>
 80087da:	4603      	mov	r3, r0
 80087dc:	4a99      	ldr	r2, [pc, #612]	; (8008a44 <USART_ProcessMessage+0x75c>)
 80087de:	6013      	str	r3, [r2, #0]
				number_gap = atoi(temp_chars_3);
 80087e0:	4899      	ldr	r0, [pc, #612]	; (8008a48 <USART_ProcessMessage+0x760>)
 80087e2:	f000 fd04 	bl	80091ee <atoi>
 80087e6:	4603      	mov	r3, r0
 80087e8:	4a98      	ldr	r2, [pc, #608]	; (8008a4c <USART_ProcessMessage+0x764>)
 80087ea:	6013      	str	r3, [r2, #0]
				tdc_to_gap = atof(temp_chars_4);
 80087ec:	4898      	ldr	r0, [pc, #608]	; (8008a50 <USART_ProcessMessage+0x768>)
 80087ee:	f000 fcfb 	bl	80091e8 <atof>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4997      	ldr	r1, [pc, #604]	; (8008a54 <USART_ProcessMessage+0x76c>)
 80087f8:	e9c1 2300 	strd	r2, r3, [r1]
				first_seg_angle = atof(temp_chars_5);
 80087fc:	4896      	ldr	r0, [pc, #600]	; (8008a58 <USART_ProcessMessage+0x770>)
 80087fe:	f000 fcf3 	bl	80091e8 <atof>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4995      	ldr	r1, [pc, #596]	; (8008a5c <USART_ProcessMessage+0x774>)
 8008808:	e9c1 2300 	strd	r2, r3, [r1]
				number_cylinder = atoi(temp_chars_6);
 800880c:	4894      	ldr	r0, [pc, #592]	; (8008a60 <USART_ProcessMessage+0x778>)
 800880e:	f000 fcee 	bl	80091ee <atoi>
 8008812:	4603      	mov	r3, r0
 8008814:	4a93      	ldr	r2, [pc, #588]	; (8008a64 <USART_ProcessMessage+0x77c>)
 8008816:	6013      	str	r3, [r2, #0]
				sensortype_CRK = temp_chars_7[0];
 8008818:	4b93      	ldr	r3, [pc, #588]	; (8008a68 <USART_ProcessMessage+0x780>)
 800881a:	781a      	ldrb	r2, [r3, #0]
 800881c:	4b93      	ldr	r3, [pc, #588]	; (8008a6c <USART_ProcessMessage+0x784>)
 800881e:	701a      	strb	r2, [r3, #0]

				if (number_teeth_CRK > 255 || number_miss_teeth > 2
 8008820:	4b86      	ldr	r3, [pc, #536]	; (8008a3c <USART_ProcessMessage+0x754>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	dc42      	bgt.n	80088ae <USART_ProcessMessage+0x5c6>
 8008828:	4b86      	ldr	r3, [pc, #536]	; (8008a44 <USART_ProcessMessage+0x75c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	dc3e      	bgt.n	80088ae <USART_ProcessMessage+0x5c6>
						|| number_gap > 3 || tdc_to_gap > 360.0
 8008830:	4b86      	ldr	r3, [pc, #536]	; (8008a4c <USART_ProcessMessage+0x764>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b03      	cmp	r3, #3
 8008836:	dc3a      	bgt.n	80088ae <USART_ProcessMessage+0x5c6>
 8008838:	4b86      	ldr	r3, [pc, #536]	; (8008a54 <USART_ProcessMessage+0x76c>)
 800883a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	4b8b      	ldr	r3, [pc, #556]	; (8008a70 <USART_ProcessMessage+0x788>)
 8008844:	f7f8 f8d8 	bl	80009f8 <__aeabi_dcmpgt>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12f      	bne.n	80088ae <USART_ProcessMessage+0x5c6>
						|| number_teeth_CRK <= 0 || number_miss_teeth <= 0
 800884e:	4b7b      	ldr	r3, [pc, #492]	; (8008a3c <USART_ProcessMessage+0x754>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd2b      	ble.n	80088ae <USART_ProcessMessage+0x5c6>
 8008856:	4b7b      	ldr	r3, [pc, #492]	; (8008a44 <USART_ProcessMessage+0x75c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd27      	ble.n	80088ae <USART_ProcessMessage+0x5c6>
						|| number_gap <= 0 || tdc_to_gap <= 0
 800885e:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <USART_ProcessMessage+0x764>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	dd23      	ble.n	80088ae <USART_ProcessMessage+0x5c6>
 8008866:	4b7b      	ldr	r3, [pc, #492]	; (8008a54 <USART_ProcessMessage+0x76c>)
 8008868:	e9d3 0100 	ldrd	r0, r1, [r3]
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	f7f8 f8ac 	bl	80009d0 <__aeabi_dcmple>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d117      	bne.n	80088ae <USART_ProcessMessage+0x5c6>
						|| first_seg_angle <= 0 || number_cylinder <= 0
 800887e:	4b77      	ldr	r3, [pc, #476]	; (8008a5c <USART_ProcessMessage+0x774>)
 8008880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	f7f8 f8a0 	bl	80009d0 <__aeabi_dcmple>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <USART_ProcessMessage+0x5c6>
 8008896:	4b73      	ldr	r3, [pc, #460]	; (8008a64 <USART_ProcessMessage+0x77c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd07      	ble.n	80088ae <USART_ProcessMessage+0x5c6>
						|| (sensortype_CRK != 'c' && sensortype_CRK != 'h'))
 800889e:	4b73      	ldr	r3, [pc, #460]	; (8008a6c <USART_ProcessMessage+0x784>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b63      	cmp	r3, #99	; 0x63
 80088a4:	d005      	beq.n	80088b2 <USART_ProcessMessage+0x5ca>
 80088a6:	4b71      	ldr	r3, [pc, #452]	; (8008a6c <USART_ProcessMessage+0x784>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b68      	cmp	r3, #104	; 0x68
 80088ac:	d001      	beq.n	80088b2 <USART_ProcessMessage+0x5ca>
				{
					USART_COM_error();
 80088ae:	f000 fbb9 	bl	8009024 <USART_COM_error>
				}

				//configure CRK if no communication error is present
				if (com_error == false)
 80088b2:	4b70      	ldr	r3, [pc, #448]	; (8008a74 <USART_ProcessMessage+0x78c>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f083 0301 	eor.w	r3, r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USART_ProcessMessage+0x5e2>
				{
					CRK_configuration();
 80088c0:	f7ff f8e4 	bl	8007a8c <CRK_configuration>
 80088c4:	e001      	b.n	80088ca <USART_ProcessMessage+0x5e2>
				}

			}
			else
			{
				USART_COM_error();
 80088c6:	f000 fbad 	bl	8009024 <USART_COM_error>
			}
		}
		// Delete temporary character arrays
		Reset_temp_arrays();
 80088ca:	f000 fc55 	bl	8009178 <Reset_temp_arrays>

		break;
 80088ce:	e368      	b.n	8008fa2 <USART_ProcessMessage+0xcba>

	}

	case ('2'): // CAM configuration
	{
		if (CAM_config == false)
 80088d0:	4b69      	ldr	r3, [pc, #420]	; (8008a78 <USART_ProcessMessage+0x790>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f083 0301 	eor.w	r3, r3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d067      	beq.n	80089ae <USART_ProcessMessage+0x6c6>
		{
			if (data_counter
					== (4 + number_active_edges_CAM[cam_setup_counter]))
 80088de:	4b67      	ldr	r3, [pc, #412]	; (8008a7c <USART_ProcessMessage+0x794>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a67      	ldr	r2, [pc, #412]	; (8008a80 <USART_ProcessMessage+0x798>)
 80088e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4a52      	ldr	r2, [pc, #328]	; (8008a34 <USART_ProcessMessage+0x74c>)
 80088ec:	6812      	ldr	r2, [r2, #0]
			if (data_counter
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d15b      	bne.n	80089aa <USART_ProcessMessage+0x6c2>
			{
				number_of_CAM = atoi(temp_chars_2);
 80088f2:	4853      	ldr	r0, [pc, #332]	; (8008a40 <USART_ProcessMessage+0x758>)
 80088f4:	f000 fc7b 	bl	80091ee <atoi>
 80088f8:	4603      	mov	r3, r0
 80088fa:	4a62      	ldr	r2, [pc, #392]	; (8008a84 <USART_ProcessMessage+0x79c>)
 80088fc:	6013      	str	r3, [r2, #0]
				active_CAM_edges[cam_setup_counter] = temp_chars_3[0];
 80088fe:	4b5f      	ldr	r3, [pc, #380]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a51      	ldr	r2, [pc, #324]	; (8008a48 <USART_ProcessMessage+0x760>)
 8008904:	7811      	ldrb	r1, [r2, #0]
 8008906:	4a60      	ldr	r2, [pc, #384]	; (8008a88 <USART_ProcessMessage+0x7a0>)
 8008908:	54d1      	strb	r1, [r2, r3]
				filter_time_CAM[cam_setup_counter] = atof(temp_chars_4);
 800890a:	4b5c      	ldr	r3, [pc, #368]	; (8008a7c <USART_ProcessMessage+0x794>)
 800890c:	681c      	ldr	r4, [r3, #0]
 800890e:	4850      	ldr	r0, [pc, #320]	; (8008a50 <USART_ProcessMessage+0x768>)
 8008910:	f000 fc6a 	bl	80091e8 <atof>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	485c      	ldr	r0, [pc, #368]	; (8008a8c <USART_ProcessMessage+0x7a4>)
 800891a:	00e1      	lsls	r1, r4, #3
 800891c:	4401      	add	r1, r0
 800891e:	e9c1 2300 	strd	r2, r3, [r1]

				if (filter_time_CAM[cam_setup_counter] <= 0
 8008922:	4b56      	ldr	r3, [pc, #344]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a59      	ldr	r2, [pc, #356]	; (8008a8c <USART_ProcessMessage+0x7a4>)
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	4413      	add	r3, r2
 800892c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f7f8 f84a 	bl	80009d0 <__aeabi_dcmple>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d119      	bne.n	8008976 <USART_ProcessMessage+0x68e>
						|| number_active_edges_CAM[cam_setup_counter] <= 0
 8008942:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a4e      	ldr	r2, [pc, #312]	; (8008a80 <USART_ProcessMessage+0x798>)
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d012      	beq.n	8008976 <USART_ProcessMessage+0x68e>
						|| CAM_edges[cam_setup_counter][0] <= 0)
 8008950:	4b4a      	ldr	r3, [pc, #296]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	494e      	ldr	r1, [pc, #312]	; (8008a90 <USART_ProcessMessage+0x7a8>)
 8008956:	4613      	mov	r3, r2
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	4413      	add	r3, r2
 800895c:	019b      	lsls	r3, r3, #6
 800895e:	440b      	add	r3, r1
 8008960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	f7f8 f830 	bl	80009d0 <__aeabi_dcmple>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <USART_ProcessMessage+0x692>
				{
					USART_COM_error();
 8008976:	f000 fb55 	bl	8009024 <USART_COM_error>
				}

				cam_setup_counter++;
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <USART_ProcessMessage+0x794>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	4a3e      	ldr	r2, [pc, #248]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008982:	6013      	str	r3, [r2, #0]
				//configure CAM if no communication error is present
				if (com_error == false && (cam_setup_counter == number_of_CAM))
 8008984:	4b3b      	ldr	r3, [pc, #236]	; (8008a74 <USART_ProcessMessage+0x78c>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f083 0301 	eor.w	r3, r3, #1
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00d      	beq.n	80089ae <USART_ProcessMessage+0x6c6>
 8008992:	4b3a      	ldr	r3, [pc, #232]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4b3b      	ldr	r3, [pc, #236]	; (8008a84 <USART_ProcessMessage+0x79c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	429a      	cmp	r2, r3
 800899c:	d107      	bne.n	80089ae <USART_ProcessMessage+0x6c6>
				{
					cam_setup_counter = 0;
 800899e:	4b37      	ldr	r3, [pc, #220]	; (8008a7c <USART_ProcessMessage+0x794>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
					CAM_configuration();
 80089a4:	f7ff f93a 	bl	8007c1c <CAM_configuration>
 80089a8:	e001      	b.n	80089ae <USART_ProcessMessage+0x6c6>
				}
			}
			else
			{
				USART_COM_error();
 80089aa:	f000 fb3b 	bl	8009024 <USART_COM_error>
			}
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80089ae:	f000 fbe3 	bl	8009178 <Reset_temp_arrays>

		break;
 80089b2:	e2f6      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('3'): // CRK configuration delete
	{
		if (data_counter == 1 && temp_chars_1[0] == 'S')
 80089b4:	4b1f      	ldr	r3, [pc, #124]	; (8008a34 <USART_ProcessMessage+0x74c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d113      	bne.n	80089e4 <USART_ProcessMessage+0x6fc>
 80089bc:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <USART_ProcessMessage+0x750>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b53      	cmp	r3, #83	; 0x53
 80089c2:	d10f      	bne.n	80089e4 <USART_ProcessMessage+0x6fc>
		{
			CRK_config = false;
 80089c4:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <USART_ProcessMessage+0x748>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	701a      	strb	r2, [r3, #0]

			configuration_complete = false;
 80089ca:	4b32      	ldr	r3, [pc, #200]	; (8008a94 <USART_ProcessMessage+0x7ac>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]
			CRK_synch = false;
 80089d0:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <USART_ProcessMessage+0x7b0>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	701a      	strb	r2, [r3, #0]
			CRK_CAM_synch = false;
 80089d6:	4b31      	ldr	r3, [pc, #196]	; (8008a9c <USART_ProcessMessage+0x7b4>)
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
			//CRK_CAM_synch[1] = false;
			CRK_synch_temp = false;
 80089dc:	4b30      	ldr	r3, [pc, #192]	; (8008aa0 <USART_ProcessMessage+0x7b8>)
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
 80089e2:	e001      	b.n	80089e8 <USART_ProcessMessage+0x700>
		}
		else
		{
			USART_COM_error();
 80089e4:	f000 fb1e 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80089e8:	f000 fbc6 	bl	8009178 <Reset_temp_arrays>

		break;
 80089ec:	e2d9      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('4'): // CAM configuration delete
	{
		if (data_counter == 1 && temp_chars_1[0] == 'S')
 80089ee:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <USART_ProcessMessage+0x74c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d116      	bne.n	8008a24 <USART_ProcessMessage+0x73c>
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <USART_ProcessMessage+0x750>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b53      	cmp	r3, #83	; 0x53
 80089fc:	d112      	bne.n	8008a24 <USART_ProcessMessage+0x73c>
		{
			CAM_config = false;
 80089fe:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <USART_ProcessMessage+0x790>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]

			cam_setup_counter = 0;
 8008a04:	4b1d      	ldr	r3, [pc, #116]	; (8008a7c <USART_ProcessMessage+0x794>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

			configuration_complete = false;
 8008a0a:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <USART_ProcessMessage+0x7ac>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
			CRK_synch = false;
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <USART_ProcessMessage+0x7b0>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
			CRK_CAM_synch = false;
 8008a16:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <USART_ProcessMessage+0x7b4>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
			//CRK_CAM_synch[1] = false;
			CRK_synch_temp = false;
 8008a1c:	4b20      	ldr	r3, [pc, #128]	; (8008aa0 <USART_ProcessMessage+0x7b8>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	e001      	b.n	8008a28 <USART_ProcessMessage+0x740>
		}
		else
		{
			USART_COM_error();
 8008a24:	f000 fafe 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008a28:	f000 fba6 	bl	8009178 <Reset_temp_arrays>

		break;
 8008a2c:	e2b9      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
 8008a2e:	bf00      	nop
 8008a30:	200002ac 	.word	0x200002ac
 8008a34:	2000079c 	.word	0x2000079c
 8008a38:	200007ac 	.word	0x200007ac
 8008a3c:	20000234 	.word	0x20000234
 8008a40:	200007c4 	.word	0x200007c4
 8008a44:	20000238 	.word	0x20000238
 8008a48:	200007dc 	.word	0x200007dc
 8008a4c:	2000023c 	.word	0x2000023c
 8008a50:	200007f4 	.word	0x200007f4
 8008a54:	20000240 	.word	0x20000240
 8008a58:	2000080c 	.word	0x2000080c
 8008a5c:	20000248 	.word	0x20000248
 8008a60:	20000824 	.word	0x20000824
 8008a64:	20000250 	.word	0x20000250
 8008a68:	2000083c 	.word	0x2000083c
 8008a6c:	20000258 	.word	0x20000258
 8008a70:	40768000 	.word	0x40768000
 8008a74:	2000089b 	.word	0x2000089b
 8008a78:	20000666 	.word	0x20000666
 8008a7c:	200005e4 	.word	0x200005e4
 8008a80:	200002b0 	.word	0x200002b0
 8008a84:	20000008 	.word	0x20000008
 8008a88:	200005e0 	.word	0x200005e0
 8008a8c:	200002c0 	.word	0x200002c0
 8008a90:	200002d0 	.word	0x200002d0
 8008a94:	200005e8 	.word	0x200005e8
 8008a98:	200002a8 	.word	0x200002a8
 8008a9c:	20000664 	.word	0x20000664
 8008aa0:	200002a9 	.word	0x200002a9
	}

	case ('5'): // active_cam_failure init
	{
		if (data_counter == 1 && (atoi(temp_chars_1) <= 2))
 8008aa4:	4b92      	ldr	r3, [pc, #584]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d10c      	bne.n	8008ac6 <USART_ProcessMessage+0x7de>
 8008aac:	4891      	ldr	r0, [pc, #580]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008aae:	f000 fb9e 	bl	80091ee <atoi>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	dc06      	bgt.n	8008ac6 <USART_ProcessMessage+0x7de>
		{
			active_cam_failure = atoi(temp_chars_1);
 8008ab8:	488e      	ldr	r0, [pc, #568]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008aba:	f000 fb98 	bl	80091ee <atoi>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a8d      	ldr	r2, [pc, #564]	; (8008cf8 <USART_ProcessMessage+0xa10>)
 8008ac2:	6013      	str	r3, [r2, #0]
		}
		else
		{
			USART_COM_error();
		}
		break;
 8008ac4:	e26d      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
			USART_COM_error();
 8008ac6:	f000 faad 	bl	8009024 <USART_COM_error>
		break;
 8008aca:	e26a      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('7'): // CRK_RUN_OUT(START or STOP)
	{
		if (data_counter == 4 && temp_chars_1[0] == 'B')
 8008acc:	4b88      	ldr	r3, [pc, #544]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d119      	bne.n	8008b08 <USART_ProcessMessage+0x820>
 8008ad4:	4b87      	ldr	r3, [pc, #540]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b42      	cmp	r3, #66	; 0x42
 8008ada:	d115      	bne.n	8008b08 <USART_ProcessMessage+0x820>
		{
			angle_to_start_failure_CRK_RUN_OUT = atoi(temp_chars_2);
 8008adc:	4887      	ldr	r0, [pc, #540]	; (8008cfc <USART_ProcessMessage+0xa14>)
 8008ade:	f000 fb86 	bl	80091ee <atoi>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b86      	ldr	r3, [pc, #536]	; (8008d00 <USART_ProcessMessage+0xa18>)
 8008ae8:	601a      	str	r2, [r3, #0]
			sc_type_CRK_RUN_OUT = temp_chars_3[0];
 8008aea:	4b86      	ldr	r3, [pc, #536]	; (8008d04 <USART_ProcessMessage+0xa1c>)
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	4b86      	ldr	r3, [pc, #536]	; (8008d08 <USART_ProcessMessage+0xa20>)
 8008af0:	701a      	strb	r2, [r3, #0]
			failure_period_CRK_RUN_OUT = atoi(temp_chars_4);
 8008af2:	4886      	ldr	r0, [pc, #536]	; (8008d0c <USART_ProcessMessage+0xa24>)
 8008af4:	f000 fb7b 	bl	80091ee <atoi>
 8008af8:	4603      	mov	r3, r0
 8008afa:	461a      	mov	r2, r3
 8008afc:	4b84      	ldr	r3, [pc, #528]	; (8008d10 <USART_ProcessMessage+0xa28>)
 8008afe:	601a      	str	r2, [r3, #0]

			failure_identify = '4';
 8008b00:	4b84      	ldr	r3, [pc, #528]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008b02:	2234      	movs	r2, #52	; 0x34
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	e00f      	b.n	8008b28 <USART_ProcessMessage+0x840>
		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008b08:	4b79      	ldr	r3, [pc, #484]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d109      	bne.n	8008b24 <USART_ProcessMessage+0x83c>
 8008b10:	4b78      	ldr	r3, [pc, #480]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b53      	cmp	r3, #83	; 0x53
 8008b16:	d105      	bne.n	8008b24 <USART_ProcessMessage+0x83c>
		{
			failure_identify = '0';
 8008b18:	4b7e      	ldr	r3, [pc, #504]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008b1a:	2230      	movs	r2, #48	; 0x30
 8008b1c:	701a      	strb	r2, [r3, #0]

			CRK_RUN_OUT_reset();
 8008b1e:	f7fc f801 	bl	8004b24 <CRK_RUN_OUT_reset>
 8008b22:	e001      	b.n	8008b28 <USART_ProcessMessage+0x840>
		}
		else
		{
			USART_COM_error();
 8008b24:	f000 fa7e 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008b28:	f000 fb26 	bl	8009178 <Reset_temp_arrays>

		break;
 8008b2c:	e239      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('8'): // CAM_PER(START or STOP)
	{
		if (data_counter == 3 && temp_chars_1[0] == 'B')
 8008b2e:	4b70      	ldr	r3, [pc, #448]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d112      	bne.n	8008b5c <USART_ProcessMessage+0x874>
 8008b36:	4b6f      	ldr	r3, [pc, #444]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b42      	cmp	r3, #66	; 0x42
 8008b3c:	d10e      	bne.n	8008b5c <USART_ProcessMessage+0x874>
		{
			active_edges_CAM_PER = temp_chars_2[0];
 8008b3e:	4b6f      	ldr	r3, [pc, #444]	; (8008cfc <USART_ProcessMessage+0xa14>)
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	4b75      	ldr	r3, [pc, #468]	; (8008d18 <USART_ProcessMessage+0xa30>)
 8008b44:	701a      	strb	r2, [r3, #0]
			number_edges_CAM_PER = atoi(temp_chars_3);
 8008b46:	486f      	ldr	r0, [pc, #444]	; (8008d04 <USART_ProcessMessage+0xa1c>)
 8008b48:	f000 fb51 	bl	80091ee <atoi>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b72      	ldr	r3, [pc, #456]	; (8008d1c <USART_ProcessMessage+0xa34>)
 8008b52:	601a      	str	r2, [r3, #0]

			failure_identify = '5';
 8008b54:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008b56:	2235      	movs	r2, #53	; 0x35
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	e00f      	b.n	8008b7c <USART_ProcessMessage+0x894>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008b5c:	4b64      	ldr	r3, [pc, #400]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d109      	bne.n	8008b78 <USART_ProcessMessage+0x890>
 8008b64:	4b63      	ldr	r3, [pc, #396]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b53      	cmp	r3, #83	; 0x53
 8008b6a:	d105      	bne.n	8008b78 <USART_ProcessMessage+0x890>
		{
			failure_identify = '0';
 8008b6c:	4b69      	ldr	r3, [pc, #420]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008b6e:	2230      	movs	r2, #48	; 0x30
 8008b70:	701a      	strb	r2, [r3, #0]
			CAM_PER_reset();
 8008b72:	f7fc fa2d 	bl	8004fd0 <CAM_PER_reset>
 8008b76:	e001      	b.n	8008b7c <USART_ProcessMessage+0x894>

		}
		else
		{
			USART_COM_error();
 8008b78:	f000 fa54 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008b7c:	f000 fafc 	bl	8009178 <Reset_temp_arrays>

		break;
 8008b80:	e20f      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('9'): // CRK_TOOTH_PER(START or STOP)
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 8008b82:	4b5b      	ldr	r3, [pc, #364]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d10e      	bne.n	8008ba8 <USART_ProcessMessage+0x8c0>
 8008b8a:	4b5a      	ldr	r3, [pc, #360]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b42      	cmp	r3, #66	; 0x42
 8008b90:	d10a      	bne.n	8008ba8 <USART_ProcessMessage+0x8c0>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim3, 17);
 8008b92:	4b63      	ldr	r3, [pc, #396]	; (8008d20 <USART_ProcessMessage+0xa38>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2211      	movs	r2, #17
 8008b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b9a:	4b61      	ldr	r3, [pc, #388]	; (8008d20 <USART_ProcessMessage+0xa38>)
 8008b9c:	2211      	movs	r2, #17
 8008b9e:	60da      	str	r2, [r3, #12]
			failure_identify = '6';
 8008ba0:	4b5c      	ldr	r3, [pc, #368]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008ba2:	2236      	movs	r2, #54	; 0x36
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e00f      	b.n	8008bc8 <USART_ProcessMessage+0x8e0>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008ba8:	4b51      	ldr	r3, [pc, #324]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d109      	bne.n	8008bc4 <USART_ProcessMessage+0x8dc>
 8008bb0:	4b50      	ldr	r3, [pc, #320]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b53      	cmp	r3, #83	; 0x53
 8008bb6:	d105      	bne.n	8008bc4 <USART_ProcessMessage+0x8dc>
		{
			failure_identify = '0';
 8008bb8:	4b56      	ldr	r3, [pc, #344]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008bba:	2230      	movs	r2, #48	; 0x30
 8008bbc:	701a      	strb	r2, [r3, #0]

			CRK_TOOTH_PER_reset();
 8008bbe:	f7fc fa47 	bl	8005050 <CRK_TOOTH_PER_reset>
 8008bc2:	e001      	b.n	8008bc8 <USART_ProcessMessage+0x8e0>
		}
		else
		{
			USART_COM_error();
 8008bc4:	f000 fa2e 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008bc8:	f000 fad6 	bl	8009178 <Reset_temp_arrays>

		break;
 8008bcc:	e1e9      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('b'): // CAM_Pat_Err(START or STOP)
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 8008bce:	4b48      	ldr	r3, [pc, #288]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d107      	bne.n	8008be6 <USART_ProcessMessage+0x8fe>
 8008bd6:	4b47      	ldr	r3, [pc, #284]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b42      	cmp	r3, #66	; 0x42
 8008bdc:	d103      	bne.n	8008be6 <USART_ProcessMessage+0x8fe>
		{
			failure_identify = '8';
 8008bde:	4b4d      	ldr	r3, [pc, #308]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008be0:	2238      	movs	r2, #56	; 0x38
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e00f      	b.n	8008c06 <USART_ProcessMessage+0x91e>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008be6:	4b42      	ldr	r3, [pc, #264]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d109      	bne.n	8008c02 <USART_ProcessMessage+0x91a>
 8008bee:	4b41      	ldr	r3, [pc, #260]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b53      	cmp	r3, #83	; 0x53
 8008bf4:	d105      	bne.n	8008c02 <USART_ProcessMessage+0x91a>
		{
			failure_identify = '0';
 8008bf6:	4b47      	ldr	r3, [pc, #284]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008bf8:	2230      	movs	r2, #48	; 0x30
 8008bfa:	701a      	strb	r2, [r3, #0]
			CAM_PAT_ERR_reset();
 8008bfc:	f7fd fb5e 	bl	80062bc <CAM_PAT_ERR_reset>
 8008c00:	e001      	b.n	8008c06 <USART_ProcessMessage+0x91e>
		}
		else
		{
			USART_COM_error();
 8008c02:	f000 fa0f 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008c06:	f000 fab7 	bl	8009178 <Reset_temp_arrays>

		break;
 8008c0a:	e1ca      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('c'): // CAM_SYN_CRK(START or STOP)
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008c0c:	4b38      	ldr	r3, [pc, #224]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d115      	bne.n	8008c40 <USART_ProcessMessage+0x958>
 8008c14:	4b37      	ldr	r3, [pc, #220]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b42      	cmp	r3, #66	; 0x42
 8008c1a:	d111      	bne.n	8008c40 <USART_ProcessMessage+0x958>
		{
			delay_angle_CAM_delay = atof(temp_chars_2);
 8008c1c:	4837      	ldr	r0, [pc, #220]	; (8008cfc <USART_ProcessMessage+0xa14>)
 8008c1e:	f000 fae3 	bl	80091e8 <atof>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	493f      	ldr	r1, [pc, #252]	; (8008d24 <USART_ProcessMessage+0xa3c>)
 8008c28:	e9c1 2300 	strd	r2, r3, [r1]

			delay_factor_CAM_delay = 1;
 8008c2c:	493e      	ldr	r1, [pc, #248]	; (8008d28 <USART_ProcessMessage+0xa40>)
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	4b3e      	ldr	r3, [pc, #248]	; (8008d2c <USART_ProcessMessage+0xa44>)
 8008c34:	e9c1 2300 	strd	r2, r3, [r1]

			failure_identify = '9';
 8008c38:	4b36      	ldr	r3, [pc, #216]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008c3a:	2239      	movs	r2, #57	; 0x39
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e00f      	b.n	8008c60 <USART_ProcessMessage+0x978>
		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008c40:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d109      	bne.n	8008c5c <USART_ProcessMessage+0x974>
 8008c48:	4b2a      	ldr	r3, [pc, #168]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b53      	cmp	r3, #83	; 0x53
 8008c4e:	d105      	bne.n	8008c5c <USART_ProcessMessage+0x974>
		{
			failure_identify = '0';
 8008c50:	4b30      	ldr	r3, [pc, #192]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008c52:	2230      	movs	r2, #48	; 0x30
 8008c54:	701a      	strb	r2, [r3, #0]
			CAM_delay_reset();
 8008c56:	f7fc fed3 	bl	8005a00 <CAM_delay_reset>
 8008c5a:	e001      	b.n	8008c60 <USART_ProcessMessage+0x978>
		}
		else
		{
			USART_COM_error();
 8008c5c:	f000 f9e2 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008c60:	f000 fa8a 	bl	8009178 <Reset_temp_arrays>

		break;
 8008c64:	e19d      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('h'): // CRK_TOOTH_OFF
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d10e      	bne.n	8008c8c <USART_ProcessMessage+0x9a4>
 8008c6e:	4b21      	ldr	r3, [pc, #132]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b42      	cmp	r3, #66	; 0x42
 8008c74:	d10a      	bne.n	8008c8c <USART_ProcessMessage+0x9a4>
		{

			number_tooth_off = atoi(temp_chars_2);
 8008c76:	4821      	ldr	r0, [pc, #132]	; (8008cfc <USART_ProcessMessage+0xa14>)
 8008c78:	f000 fab9 	bl	80091ee <atoi>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <USART_ProcessMessage+0xa48>)
 8008c82:	601a      	str	r2, [r3, #0]
			failure_identify = 'h';
 8008c84:	4b23      	ldr	r3, [pc, #140]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008c86:	2268      	movs	r2, #104	; 0x68
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e00f      	b.n	8008cac <USART_ProcessMessage+0x9c4>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008c8c:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d109      	bne.n	8008ca8 <USART_ProcessMessage+0x9c0>
 8008c94:	4b17      	ldr	r3, [pc, #92]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b53      	cmp	r3, #83	; 0x53
 8008c9a:	d105      	bne.n	8008ca8 <USART_ProcessMessage+0x9c0>
		{
			failure_identify = '0';
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008c9e:	2230      	movs	r2, #48	; 0x30
 8008ca0:	701a      	strb	r2, [r3, #0]
			CRK_TOOTH_OFF_reset();
 8008ca2:	f7fc ffd1 	bl	8005c48 <CRK_TOOTH_OFF_reset>
 8008ca6:	e001      	b.n	8008cac <USART_ProcessMessage+0x9c4>
		}
		else
		{
			USART_COM_error();
 8008ca8:	f000 f9bc 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008cac:	f000 fa64 	bl	8009178 <Reset_temp_arrays>

		break;
 8008cb0:	e177      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('i'): // CRK_GAP_NOT_DET
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d107      	bne.n	8008cca <USART_ProcessMessage+0x9e2>
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b42      	cmp	r3, #66	; 0x42
 8008cc0:	d103      	bne.n	8008cca <USART_ProcessMessage+0x9e2>
		{

			failure_identify = 'i';
 8008cc2:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008cc4:	2269      	movs	r2, #105	; 0x69
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e00f      	b.n	8008cea <USART_ProcessMessage+0xa02>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <USART_ProcessMessage+0xa08>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d109      	bne.n	8008ce6 <USART_ProcessMessage+0x9fe>
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <USART_ProcessMessage+0xa0c>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b53      	cmp	r3, #83	; 0x53
 8008cd8:	d105      	bne.n	8008ce6 <USART_ProcessMessage+0x9fe>
		{
			failure_identify = '0';
 8008cda:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <USART_ProcessMessage+0xa2c>)
 8008cdc:	2230      	movs	r2, #48	; 0x30
 8008cde:	701a      	strb	r2, [r3, #0]
			CRK_GAP_NOT_DET_reset();
 8008ce0:	f7fd f84a 	bl	8005d78 <CRK_GAP_NOT_DET_reset>
 8008ce4:	e001      	b.n	8008cea <USART_ProcessMessage+0xa02>
		}
		else
		{
			USART_COM_error();
 8008ce6:	f000 f99d 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008cea:	f000 fa45 	bl	8009178 <Reset_temp_arrays>

		break;
 8008cee:	e158      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
 8008cf0:	2000079c 	.word	0x2000079c
 8008cf4:	200007ac 	.word	0x200007ac
 8008cf8:	20000670 	.word	0x20000670
 8008cfc:	200007c4 	.word	0x200007c4
 8008d00:	20000680 	.word	0x20000680
 8008d04:	200007dc 	.word	0x200007dc
 8008d08:	2000067b 	.word	0x2000067b
 8008d0c:	200007f4 	.word	0x200007f4
 8008d10:	20000684 	.word	0x20000684
 8008d14:	2000000c 	.word	0x2000000c
 8008d18:	2000069c 	.word	0x2000069c
 8008d1c:	20000698 	.word	0x20000698
 8008d20:	20000934 	.word	0x20000934
 8008d24:	20000738 	.word	0x20000738
 8008d28:	20000018 	.word	0x20000018
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	2000074c 	.word	0x2000074c
	}

	case ('j'): // SEG_ADP_ER_LIM
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008d34:	4ba6      	ldr	r3, [pc, #664]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d10f      	bne.n	8008d5c <USART_ProcessMessage+0xa74>
 8008d3c:	4ba5      	ldr	r3, [pc, #660]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b42      	cmp	r3, #66	; 0x42
 8008d42:	d10b      	bne.n	8008d5c <USART_ProcessMessage+0xa74>
		{
			crk_delay_SEG_ADP_ER_LIM = atof(temp_chars_2);
 8008d44:	48a4      	ldr	r0, [pc, #656]	; (8008fd8 <USART_ProcessMessage+0xcf0>)
 8008d46:	f000 fa4f 	bl	80091e8 <atof>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	49a3      	ldr	r1, [pc, #652]	; (8008fdc <USART_ProcessMessage+0xcf4>)
 8008d50:	e9c1 2300 	strd	r2, r3, [r1]
			failure_identify = 'j';
 8008d54:	4ba2      	ldr	r3, [pc, #648]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008d56:	226a      	movs	r2, #106	; 0x6a
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e00f      	b.n	8008d7c <USART_ProcessMessage+0xa94>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008d5c:	4b9c      	ldr	r3, [pc, #624]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d109      	bne.n	8008d78 <USART_ProcessMessage+0xa90>
 8008d64:	4b9b      	ldr	r3, [pc, #620]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b53      	cmp	r3, #83	; 0x53
 8008d6a:	d105      	bne.n	8008d78 <USART_ProcessMessage+0xa90>
		{
			failure_identify = '0';
 8008d6c:	4b9c      	ldr	r3, [pc, #624]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008d6e:	2230      	movs	r2, #48	; 0x30
 8008d70:	701a      	strb	r2, [r3, #0]
			SEG_ADP_ER_LIM_reset();
 8008d72:	f7fd f953 	bl	800601c <SEG_ADP_ER_LIM_reset>
 8008d76:	e001      	b.n	8008d7c <USART_ProcessMessage+0xa94>
		}
		else
		{
			USART_COM_error();
 8008d78:	f000 f954 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008d7c:	f000 f9fc 	bl	8009178 <Reset_temp_arrays>

		break;
 8008d80:	e10f      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('k'): // CrkPlsOrng wrong pulse duration
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008d82:	4b93      	ldr	r3, [pc, #588]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d16b      	bne.n	8008e62 <USART_ProcessMessage+0xb7a>
 8008d8a:	4b92      	ldr	r3, [pc, #584]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b42      	cmp	r3, #66	; 0x42
 8008d90:	d167      	bne.n	8008e62 <USART_ProcessMessage+0xb7a>
		{
			crk_pulse_duration_CRK_PLS_ORNG = atof(temp_chars_2);
 8008d92:	4891      	ldr	r0, [pc, #580]	; (8008fd8 <USART_ProcessMessage+0xcf0>)
 8008d94:	f000 fa28 	bl	80091e8 <atof>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4991      	ldr	r1, [pc, #580]	; (8008fe4 <USART_ProcessMessage+0xcfc>)
 8008d9e:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_AUTORELOAD(&htim4,
 8008da2:	4b90      	ldr	r3, [pc, #576]	; (8008fe4 <USART_ProcessMessage+0xcfc>)
 8008da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008da8:	a387      	add	r3, pc, #540	; (adr r3, 8008fc8 <USART_ProcessMessage+0xce0>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fcbd 	bl	800072c <__aeabi_ddiv>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	4b8a      	ldr	r3, [pc, #552]	; (8008fe8 <USART_ProcessMessage+0xd00>)
 8008dc0:	f7f7 f9d4 	bl	800016c <__adddf3>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	4b86      	ldr	r3, [pc, #536]	; (8008fec <USART_ProcessMessage+0xd04>)
 8008dd2:	f7f7 fb81 	bl	80004d8 <__aeabi_dmul>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	4b81      	ldr	r3, [pc, #516]	; (8008fe8 <USART_ProcessMessage+0xd00>)
 8008de4:	f7f7 f9c0 	bl	8000168 <__aeabi_dsub>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4980      	ldr	r1, [pc, #512]	; (8008ff0 <USART_ProcessMessage+0xd08>)
 8008dee:	680c      	ldr	r4, [r1, #0]
 8008df0:	4610      	mov	r0, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	f7f7 fe32 	bl	8000a5c <__aeabi_d2uiz>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dfc:	4b79      	ldr	r3, [pc, #484]	; (8008fe4 <USART_ProcessMessage+0xcfc>)
 8008dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e02:	a371      	add	r3, pc, #452	; (adr r3, 8008fc8 <USART_ProcessMessage+0xce0>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fc90 	bl	800072c <__aeabi_ddiv>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4610      	mov	r0, r2
 8008e12:	4619      	mov	r1, r3
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	4b73      	ldr	r3, [pc, #460]	; (8008fe8 <USART_ProcessMessage+0xd00>)
 8008e1a:	f7f7 f9a7 	bl	800016c <__adddf3>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4610      	mov	r0, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	4b70      	ldr	r3, [pc, #448]	; (8008fec <USART_ProcessMessage+0xd04>)
 8008e2c:	f7f7 fb54 	bl	80004d8 <__aeabi_dmul>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4610      	mov	r0, r2
 8008e36:	4619      	mov	r1, r3
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	4b6a      	ldr	r3, [pc, #424]	; (8008fe8 <USART_ProcessMessage+0xd00>)
 8008e3e:	f7f7 f993 	bl	8000168 <__aeabi_dsub>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4610      	mov	r0, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f7f7 fe07 	bl	8000a5c <__aeabi_d2uiz>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4a67      	ldr	r2, [pc, #412]	; (8008ff0 <USART_ProcessMessage+0xd08>)
 8008e52:	60d3      	str	r3, [r2, #12]
					18 * ((crk_pulse_duration_CRK_PLS_ORNG / 0.217) + 1) - 1);
			failure_identify = 'k';
 8008e54:	4b62      	ldr	r3, [pc, #392]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008e56:	226b      	movs	r2, #107	; 0x6b
 8008e58:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 8008e5a:	4b66      	ldr	r3, [pc, #408]	; (8008ff4 <USART_ProcessMessage+0xd0c>)
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e00f      	b.n	8008e82 <USART_ProcessMessage+0xb9a>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008e62:	4b5b      	ldr	r3, [pc, #364]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d109      	bne.n	8008e7e <USART_ProcessMessage+0xb96>
 8008e6a:	4b5a      	ldr	r3, [pc, #360]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b53      	cmp	r3, #83	; 0x53
 8008e70:	d105      	bne.n	8008e7e <USART_ProcessMessage+0xb96>
		{
			failure_identify = '0';
 8008e72:	4b5b      	ldr	r3, [pc, #364]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008e74:	2230      	movs	r2, #48	; 0x30
 8008e76:	701a      	strb	r2, [r3, #0]
			CRK_pulse_duration_reset();
 8008e78:	f7fd f906 	bl	8006088 <CRK_pulse_duration_reset>
 8008e7c:	e001      	b.n	8008e82 <USART_ProcessMessage+0xb9a>
		}
		else
		{
			USART_COM_error();
 8008e7e:	f000 f8d1 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008e82:	f000 f979 	bl	8009178 <Reset_temp_arrays>

		break;
 8008e86:	e08c      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	case ('l'): // PosnEngStst Wrong engine position at synchronized start
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008e88:	4b51      	ldr	r3, [pc, #324]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d111      	bne.n	8008eb4 <USART_ProcessMessage+0xbcc>
 8008e90:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b42      	cmp	r3, #66	; 0x42
 8008e96:	d10d      	bne.n	8008eb4 <USART_ProcessMessage+0xbcc>
		{
			crk_teeth_off_POSN_ENG_STST = atoi(temp_chars_2);
 8008e98:	484f      	ldr	r0, [pc, #316]	; (8008fd8 <USART_ProcessMessage+0xcf0>)
 8008e9a:	f000 f9a8 	bl	80091ee <atoi>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b55      	ldr	r3, [pc, #340]	; (8008ff8 <USART_ProcessMessage+0xd10>)
 8008ea4:	601a      	str	r2, [r3, #0]
			failure_identify = 'l';
 8008ea6:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008ea8:	226c      	movs	r2, #108	; 0x6c
 8008eaa:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 8008eac:	4b51      	ldr	r3, [pc, #324]	; (8008ff4 <USART_ProcessMessage+0xd0c>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e00f      	b.n	8008ed4 <USART_ProcessMessage+0xbec>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008eb4:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d109      	bne.n	8008ed0 <USART_ProcessMessage+0xbe8>
 8008ebc:	4b45      	ldr	r3, [pc, #276]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b53      	cmp	r3, #83	; 0x53
 8008ec2:	d105      	bne.n	8008ed0 <USART_ProcessMessage+0xbe8>
		{
			failure_identify = '0';
 8008ec4:	4b46      	ldr	r3, [pc, #280]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008ec6:	2230      	movs	r2, #48	; 0x30
 8008ec8:	701a      	strb	r2, [r3, #0]
			POSN_ENG_STST_reset();
 8008eca:	f7fd f923 	bl	8006114 <POSN_ENG_STST_reset>
 8008ece:	e001      	b.n	8008ed4 <USART_ProcessMessage+0xbec>
		}
		else
		{
			USART_COM_error();
 8008ed0:	f000 f8a8 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008ed4:	f000 f950 	bl	8009178 <Reset_temp_arrays>

		break;
 8008ed8:	e063      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}
	case ('m'): // SC_CAM_CRK set a short circuit to ground or battery, to CAM or CRK
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008eda:	4b3d      	ldr	r3, [pc, #244]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d111      	bne.n	8008f06 <USART_ProcessMessage+0xc1e>
 8008ee2:	4b3c      	ldr	r3, [pc, #240]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b42      	cmp	r3, #66	; 0x42
 8008ee8:	d10d      	bne.n	8008f06 <USART_ProcessMessage+0xc1e>
		{
			sc_type_SC_CAM_CRK = atoi(temp_chars_2);
 8008eea:	483b      	ldr	r0, [pc, #236]	; (8008fd8 <USART_ProcessMessage+0xcf0>)
 8008eec:	f000 f97f 	bl	80091ee <atoi>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4b41      	ldr	r3, [pc, #260]	; (8008ffc <USART_ProcessMessage+0xd14>)
 8008ef6:	601a      	str	r2, [r3, #0]
			failure_identify = 'm';
 8008ef8:	4b39      	ldr	r3, [pc, #228]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008efa:	226d      	movs	r2, #109	; 0x6d
 8008efc:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 8008efe:	4b3d      	ldr	r3, [pc, #244]	; (8008ff4 <USART_ProcessMessage+0xd0c>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e00f      	b.n	8008f26 <USART_ProcessMessage+0xc3e>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008f06:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d109      	bne.n	8008f22 <USART_ProcessMessage+0xc3a>
 8008f0e:	4b31      	ldr	r3, [pc, #196]	; (8008fd4 <USART_ProcessMessage+0xcec>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b53      	cmp	r3, #83	; 0x53
 8008f14:	d105      	bne.n	8008f22 <USART_ProcessMessage+0xc3a>
		{
			failure_identify = '0';
 8008f16:	4b32      	ldr	r3, [pc, #200]	; (8008fe0 <USART_ProcessMessage+0xcf8>)
 8008f18:	2230      	movs	r2, #48	; 0x30
 8008f1a:	701a      	strb	r2, [r3, #0]
			SC_CAM_CRK_reset();
 8008f1c:	f7fd fa46 	bl	80063ac <SC_CAM_CRK_reset>
 8008f20:	e001      	b.n	8008f26 <USART_ProcessMessage+0xc3e>
		}
		else
		{
			USART_COM_error();
 8008f22:	f000 f87f 	bl	8009024 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008f26:	f000 f927 	bl	8009178 <Reset_temp_arrays>

		break;
 8008f2a:	e03a      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}
	case ('n'):
	{
		should_record = true;
 8008f2c:	4b34      	ldr	r3, [pc, #208]	; (8009000 <USART_ProcessMessage+0xd18>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
		break;
 8008f32:	e036      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}
	case ('z'): // communication validation
	{
		if (data_counter == 0)
 8008f34:	4b26      	ldr	r3, [pc, #152]	; (8008fd0 <USART_ProcessMessage+0xce8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d120      	bne.n	8008f7e <USART_ProcessMessage+0xc96>
		{
			if (communication_active == false)
 8008f3c:	4b31      	ldr	r3, [pc, #196]	; (8009004 <USART_ProcessMessage+0xd1c>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f083 0301 	eor.w	r3, r3, #1
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d015      	beq.n	8008f76 <USART_ProcessMessage+0xc8e>
			{
				communication_active = true;
 8008f4a:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <USART_ProcessMessage+0xd1c>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
				communication_ready = true;
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <USART_ProcessMessage+0xd20>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	701a      	strb	r2, [r3, #0]

				SysTick->CTRL &= ~(1); //disable systick
 8008f56:	4b2d      	ldr	r3, [pc, #180]	; (800900c <USART_ProcessMessage+0xd24>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a2c      	ldr	r2, [pc, #176]	; (800900c <USART_ProcessMessage+0xd24>)
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	6013      	str	r3, [r2, #0]
				uint8_t msg11 = message[11];
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <USART_ProcessMessage+0xd28>)
 8008f64:	7adb      	ldrb	r3, [r3, #11]
 8008f66:	703b      	strb	r3, [r7, #0]
				HAL_UART_Transmit_IT(&huart1, &msg11, 1);
 8008f68:	463b      	mov	r3, r7
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4829      	ldr	r0, [pc, #164]	; (8009014 <USART_ProcessMessage+0xd2c>)
 8008f70:	f7fa fec7 	bl	8003d02 <HAL_UART_Transmit_IT>
 8008f74:	e005      	b.n	8008f82 <USART_ProcessMessage+0xc9a>
			}
			else
			{
				communication_ready = true;
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <USART_ProcessMessage+0xd20>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e001      	b.n	8008f82 <USART_ProcessMessage+0xc9a>
			}
		}
		else
		{
			USART_COM_error();
 8008f7e:	f000 f851 	bl	8009024 <USART_COM_error>
		}

		Reset_temp_arrays();
 8008f82:	f000 f8f9 	bl	8009178 <Reset_temp_arrays>

		break;
 8008f86:	e00c      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
	}

	default:
	{
		if (com_error == false)
 8008f88:	4b23      	ldr	r3, [pc, #140]	; (8009018 <USART_ProcessMessage+0xd30>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f083 0301 	eor.w	r3, r3, #1
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <USART_ProcessMessage+0xcb8>
		{
			USART_COM_error();
 8008f96:	f000 f845 	bl	8009024 <USART_COM_error>
		}

		break;
 8008f9a:	e001      	b.n	8008fa0 <USART_ProcessMessage+0xcb8>
		break;
 8008f9c:	bf00      	nop
 8008f9e:	e000      	b.n	8008fa2 <USART_ProcessMessage+0xcba>
		break;
 8008fa0:	bf00      	nop
	}

	}

	input_chars[0] = '\0';
 8008fa2:	4b1e      	ldr	r3, [pc, #120]	; (800901c <USART_ProcessMessage+0xd34>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]

	message_received = false;
 8008fa8:	4b1d      	ldr	r3, [pc, #116]	; (8009020 <USART_ProcessMessage+0xd38>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]

	//communication receive status
	uint8_t msg_communication_receive_ready = message[12];
 8008fae:	4b18      	ldr	r3, [pc, #96]	; (8009010 <USART_ProcessMessage+0xd28>)
 8008fb0:	7b1b      	ldrb	r3, [r3, #12]
 8008fb2:	707b      	strb	r3, [r7, #1]
	HAL_UART_Transmit_IT(&huart1, &msg_communication_receive_ready, 1);
 8008fb4:	1c7b      	adds	r3, r7, #1
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4816      	ldr	r0, [pc, #88]	; (8009014 <USART_ProcessMessage+0xd2c>)
 8008fbc:	f7fa fea1 	bl	8003d02 <HAL_UART_Transmit_IT>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc8:	ef9db22d 	.word	0xef9db22d
 8008fcc:	3fcbc6a7 	.word	0x3fcbc6a7
 8008fd0:	2000079c 	.word	0x2000079c
 8008fd4:	200007ac 	.word	0x200007ac
 8008fd8:	200007c4 	.word	0x200007c4
 8008fdc:	20000770 	.word	0x20000770
 8008fe0:	2000000c 	.word	0x2000000c
 8008fe4:	20000778 	.word	0x20000778
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	40320000 	.word	0x40320000
 8008ff0:	2000097c 	.word	0x2000097c
 8008ff4:	20000674 	.word	0x20000674
 8008ff8:	20000780 	.word	0x20000780
 8008ffc:	20000790 	.word	0x20000790
 8009000:	20000794 	.word	0x20000794
 8009004:	2000066c 	.word	0x2000066c
 8009008:	2000066d 	.word	0x2000066d
 800900c:	e000e010 	.word	0xe000e010
 8009010:	20000024 	.word	0x20000024
 8009014:	200009c4 	.word	0x200009c4
 8009018:	2000089b 	.word	0x2000089b
 800901c:	200007a4 	.word	0x200007a4
 8009020:	2000089a 	.word	0x2000089a

08009024 <USART_COM_error>:

//## USART COM Error Function

void USART_COM_error(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
	if (com_error == false)
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <USART_COM_error+0x4c>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	f083 0301 	eor.w	r3, r3, #1
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d017      	beq.n	8009068 <USART_COM_error+0x44>
	{
		com_error = true;
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <USART_COM_error+0x4c>)
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]

		input_chars[0] = '\0';
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <USART_COM_error+0x50>)
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]

		char_counter = 0;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <USART_COM_error+0x54>)
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]

		receiving = false;
 800904a:	4b0c      	ldr	r3, [pc, #48]	; (800907c <USART_COM_error+0x58>)
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]

		message_received = false;
 8009050:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <USART_COM_error+0x5c>)
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]

		//communication error treatment
		uint8_t msg_COM_error = message[0];
 8009056:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <USART_COM_error+0x60>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit_IT(&huart1, &msg_COM_error, 1);
 800905c:	1dfb      	adds	r3, r7, #7
 800905e:	2201      	movs	r2, #1
 8009060:	4619      	mov	r1, r3
 8009062:	4809      	ldr	r0, [pc, #36]	; (8009088 <USART_COM_error+0x64>)
 8009064:	f7fa fe4d 	bl	8003d02 <HAL_UART_Transmit_IT>
	}
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	2000089b 	.word	0x2000089b
 8009074:	200007a4 	.word	0x200007a4
 8009078:	20000798 	.word	0x20000798
 800907c:	20000899 	.word	0x20000899
 8009080:	2000089a 	.word	0x2000089a
 8009084:	20000024 	.word	0x20000024
 8009088:	200009c4 	.word	0x200009c4

0800908c <USART_send_failure_configuration_status>:

//## USART Send Failure Configuration Status Function

void USART_send_failure_configuration_status(char failure_ident,
		bool failure_conf, bool failure_conf_CAM_blank_out)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	71fb      	strb	r3, [r7, #7]
 8009096:	460b      	mov	r3, r1
 8009098:	71bb      	strb	r3, [r7, #6]
 800909a:	4613      	mov	r3, r2
 800909c:	717b      	strb	r3, [r7, #5]
	if ((failure_ident == '0' || failure_ident == '2') && failure_conf == true)
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	2b30      	cmp	r3, #48	; 0x30
 80090a2:	d002      	beq.n	80090aa <USART_send_failure_configuration_status+0x1e>
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b32      	cmp	r3, #50	; 0x32
 80090a8:	d110      	bne.n	80090cc <USART_send_failure_configuration_status+0x40>
 80090aa:	79bb      	ldrb	r3, [r7, #6]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <USART_send_failure_configuration_status+0x40>
	{
		uint8_t msg_failure_passive = message[8];
 80090b0:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <USART_send_failure_configuration_status+0xdc>)
 80090b2:	7a1b      	ldrb	r3, [r3, #8]
 80090b4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart1, &msg_failure_passive, 1);
 80090b6:	f107 030f 	add.w	r3, r7, #15
 80090ba:	2201      	movs	r2, #1
 80090bc:	4619      	mov	r1, r3
 80090be:	482b      	ldr	r0, [pc, #172]	; (800916c <USART_send_failure_configuration_status+0xe0>)
 80090c0:	f7fa fe1f 	bl	8003d02 <HAL_UART_Transmit_IT>
		failure_configured = false;
 80090c4:	4b2a      	ldr	r3, [pc, #168]	; (8009170 <USART_send_failure_configuration_status+0xe4>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
	{
 80090ca:	e018      	b.n	80090fe <USART_send_failure_configuration_status+0x72>
	}
	else if ((failure_ident != '0' && failure_ident != '2')
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b30      	cmp	r3, #48	; 0x30
 80090d0:	d015      	beq.n	80090fe <USART_send_failure_configuration_status+0x72>
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	2b32      	cmp	r3, #50	; 0x32
 80090d6:	d012      	beq.n	80090fe <USART_send_failure_configuration_status+0x72>
			&& failure_conf == false)
 80090d8:	79bb      	ldrb	r3, [r7, #6]
 80090da:	f083 0301 	eor.w	r3, r3, #1
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00c      	beq.n	80090fe <USART_send_failure_configuration_status+0x72>
	{
		uint8_t msg_failure_active = message[7];
 80090e4:	4b20      	ldr	r3, [pc, #128]	; (8009168 <USART_send_failure_configuration_status+0xdc>)
 80090e6:	79db      	ldrb	r3, [r3, #7]
 80090e8:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit_IT(&huart1, &msg_failure_active, 1);
 80090ea:	f107 030e 	add.w	r3, r7, #14
 80090ee:	2201      	movs	r2, #1
 80090f0:	4619      	mov	r1, r3
 80090f2:	481e      	ldr	r0, [pc, #120]	; (800916c <USART_send_failure_configuration_status+0xe0>)
 80090f4:	f7fa fe05 	bl	8003d02 <HAL_UART_Transmit_IT>
		failure_configured = true;
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <USART_send_failure_configuration_status+0xe4>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
	}

	if ((failure_ident != '2' && failure_ident != '3')
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	2b32      	cmp	r3, #50	; 0x32
 8009102:	d014      	beq.n	800912e <USART_send_failure_configuration_status+0xa2>
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b33      	cmp	r3, #51	; 0x33
 8009108:	d011      	beq.n	800912e <USART_send_failure_configuration_status+0xa2>
			&& failure_conf_CAM_blank_out == true)
 800910a:	797b      	ldrb	r3, [r7, #5]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00e      	beq.n	800912e <USART_send_failure_configuration_status+0xa2>
	{
		uint8_t msg_failure_cam_blank_out_passive = message[10];
 8009110:	4b15      	ldr	r3, [pc, #84]	; (8009168 <USART_send_failure_configuration_status+0xdc>)
 8009112:	7a9b      	ldrb	r3, [r3, #10]
 8009114:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit_IT(&huart1, &msg_failure_cam_blank_out_passive, 1);
 8009116:	f107 030d 	add.w	r3, r7, #13
 800911a:	2201      	movs	r2, #1
 800911c:	4619      	mov	r1, r3
 800911e:	4813      	ldr	r0, [pc, #76]	; (800916c <USART_send_failure_configuration_status+0xe0>)
 8009120:	f7fa fdef 	bl	8003d02 <HAL_UART_Transmit_IT>
		failure_configured_CAM_blank_out = false;
 8009124:	4b13      	ldr	r3, [pc, #76]	; (8009174 <USART_send_failure_configuration_status+0xe8>)
 8009126:	2200      	movs	r2, #0
 8009128:	701a      	strb	r2, [r3, #0]
	{
 800912a:	bf00      	nop
	{
		uint8_t msg_failure_cam_blank_out_active = message[9];
		HAL_UART_Transmit_IT(&huart1, &msg_failure_cam_blank_out_active, 1);
		failure_configured_CAM_blank_out = true;
	}
}
 800912c:	e018      	b.n	8009160 <USART_send_failure_configuration_status+0xd4>
	else if ((failure_ident == '2' || failure_ident == '3')
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	2b32      	cmp	r3, #50	; 0x32
 8009132:	d002      	beq.n	800913a <USART_send_failure_configuration_status+0xae>
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b33      	cmp	r3, #51	; 0x33
 8009138:	d112      	bne.n	8009160 <USART_send_failure_configuration_status+0xd4>
			&& failure_conf_CAM_blank_out == false)
 800913a:	797b      	ldrb	r3, [r7, #5]
 800913c:	f083 0301 	eor.w	r3, r3, #1
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00c      	beq.n	8009160 <USART_send_failure_configuration_status+0xd4>
		uint8_t msg_failure_cam_blank_out_active = message[9];
 8009146:	4b08      	ldr	r3, [pc, #32]	; (8009168 <USART_send_failure_configuration_status+0xdc>)
 8009148:	7a5b      	ldrb	r3, [r3, #9]
 800914a:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit_IT(&huart1, &msg_failure_cam_blank_out_active, 1);
 800914c:	f107 030c 	add.w	r3, r7, #12
 8009150:	2201      	movs	r2, #1
 8009152:	4619      	mov	r1, r3
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <USART_send_failure_configuration_status+0xe0>)
 8009156:	f7fa fdd4 	bl	8003d02 <HAL_UART_Transmit_IT>
		failure_configured_CAM_blank_out = true;
 800915a:	4b06      	ldr	r3, [pc, #24]	; (8009174 <USART_send_failure_configuration_status+0xe8>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000024 	.word	0x20000024
 800916c:	200009c4 	.word	0x200009c4
 8009170:	20000679 	.word	0x20000679
 8009174:	2000067a 	.word	0x2000067a

08009178 <Reset_temp_arrays>:

//## USART Reset temporary char-arrays

void Reset_temp_arrays(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
	temp_chars_1[0] = '\0';
 800917c:	4b10      	ldr	r3, [pc, #64]	; (80091c0 <Reset_temp_arrays+0x48>)
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
	temp_chars_2[0] = '\0';
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <Reset_temp_arrays+0x4c>)
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
	temp_chars_3[0] = '\0';
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <Reset_temp_arrays+0x50>)
 800918a:	2200      	movs	r2, #0
 800918c:	701a      	strb	r2, [r3, #0]
	temp_chars_4[0] = '\0';
 800918e:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <Reset_temp_arrays+0x54>)
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
	temp_chars_5[0] = '\0';
 8009194:	4b0e      	ldr	r3, [pc, #56]	; (80091d0 <Reset_temp_arrays+0x58>)
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
	temp_chars_6[0] = '\0';
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <Reset_temp_arrays+0x5c>)
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
	temp_chars_7[0] = '\0';
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <Reset_temp_arrays+0x60>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
	temp_chars_8[0] = '\0';
 80091a6:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <Reset_temp_arrays+0x64>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
	temp_chars_9[0] = '\0';
 80091ac:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <Reset_temp_arrays+0x68>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
	temp_chars_10[0] = '\0';
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <Reset_temp_arrays+0x6c>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	701a      	strb	r2, [r3, #0]
}
 80091b8:	bf00      	nop
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr
 80091c0:	200007ac 	.word	0x200007ac
 80091c4:	200007c4 	.word	0x200007c4
 80091c8:	200007dc 	.word	0x200007dc
 80091cc:	200007f4 	.word	0x200007f4
 80091d0:	2000080c 	.word	0x2000080c
 80091d4:	20000824 	.word	0x20000824
 80091d8:	2000083c 	.word	0x2000083c
 80091dc:	20000854 	.word	0x20000854
 80091e0:	2000086c 	.word	0x2000086c
 80091e4:	20000884 	.word	0x20000884

080091e8 <atof>:
 80091e8:	2100      	movs	r1, #0
 80091ea:	f000 bf35 	b.w	800a058 <strtod>

080091ee <atoi>:
 80091ee:	220a      	movs	r2, #10
 80091f0:	2100      	movs	r1, #0
 80091f2:	f000 bfb9 	b.w	800a168 <strtol>
	...

080091f8 <__errno>:
 80091f8:	4b01      	ldr	r3, [pc, #4]	; (8009200 <__errno+0x8>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20000040 	.word	0x20000040

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	2600      	movs	r6, #0
 8009208:	4d0c      	ldr	r5, [pc, #48]	; (800923c <__libc_init_array+0x38>)
 800920a:	4c0d      	ldr	r4, [pc, #52]	; (8009240 <__libc_init_array+0x3c>)
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	f002 ff36 	bl	800c084 <_init>
 8009218:	2600      	movs	r6, #0
 800921a:	4d0a      	ldr	r5, [pc, #40]	; (8009244 <__libc_init_array+0x40>)
 800921c:	4c0a      	ldr	r4, [pc, #40]	; (8009248 <__libc_init_array+0x44>)
 800921e:	1b64      	subs	r4, r4, r5
 8009220:	10a4      	asrs	r4, r4, #2
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	0800c50c 	.word	0x0800c50c
 8009240:	0800c50c 	.word	0x0800c50c
 8009244:	0800c50c 	.word	0x0800c50c
 8009248:	0800c510 	.word	0x0800c510

0800924c <malloc>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <malloc+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f000 b873 	b.w	800933c <_malloc_r>
 8009256:	bf00      	nop
 8009258:	20000040 	.word	0x20000040

0800925c <memset>:
 800925c:	4603      	mov	r3, r0
 800925e:	4402      	add	r2, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	d100      	bne.n	8009266 <memset+0xa>
 8009264:	4770      	bx	lr
 8009266:	f803 1b01 	strb.w	r1, [r3], #1
 800926a:	e7f9      	b.n	8009260 <memset+0x4>

0800926c <_free_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4605      	mov	r5, r0
 8009270:	2900      	cmp	r1, #0
 8009272:	d040      	beq.n	80092f6 <_free_r+0x8a>
 8009274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009278:	1f0c      	subs	r4, r1, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	bfb8      	it	lt
 800927e:	18e4      	addlt	r4, r4, r3
 8009280:	f001 fdde 	bl	800ae40 <__malloc_lock>
 8009284:	4a1c      	ldr	r2, [pc, #112]	; (80092f8 <_free_r+0x8c>)
 8009286:	6813      	ldr	r3, [r2, #0]
 8009288:	b933      	cbnz	r3, 8009298 <_free_r+0x2c>
 800928a:	6063      	str	r3, [r4, #4]
 800928c:	6014      	str	r4, [r2, #0]
 800928e:	4628      	mov	r0, r5
 8009290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009294:	f001 bdda 	b.w	800ae4c <__malloc_unlock>
 8009298:	42a3      	cmp	r3, r4
 800929a:	d908      	bls.n	80092ae <_free_r+0x42>
 800929c:	6820      	ldr	r0, [r4, #0]
 800929e:	1821      	adds	r1, r4, r0
 80092a0:	428b      	cmp	r3, r1
 80092a2:	bf01      	itttt	eq
 80092a4:	6819      	ldreq	r1, [r3, #0]
 80092a6:	685b      	ldreq	r3, [r3, #4]
 80092a8:	1809      	addeq	r1, r1, r0
 80092aa:	6021      	streq	r1, [r4, #0]
 80092ac:	e7ed      	b.n	800928a <_free_r+0x1e>
 80092ae:	461a      	mov	r2, r3
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	b10b      	cbz	r3, 80092b8 <_free_r+0x4c>
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d9fa      	bls.n	80092ae <_free_r+0x42>
 80092b8:	6811      	ldr	r1, [r2, #0]
 80092ba:	1850      	adds	r0, r2, r1
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d10b      	bne.n	80092d8 <_free_r+0x6c>
 80092c0:	6820      	ldr	r0, [r4, #0]
 80092c2:	4401      	add	r1, r0
 80092c4:	1850      	adds	r0, r2, r1
 80092c6:	4283      	cmp	r3, r0
 80092c8:	6011      	str	r1, [r2, #0]
 80092ca:	d1e0      	bne.n	800928e <_free_r+0x22>
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4401      	add	r1, r0
 80092d2:	6011      	str	r1, [r2, #0]
 80092d4:	6053      	str	r3, [r2, #4]
 80092d6:	e7da      	b.n	800928e <_free_r+0x22>
 80092d8:	d902      	bls.n	80092e0 <_free_r+0x74>
 80092da:	230c      	movs	r3, #12
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	e7d6      	b.n	800928e <_free_r+0x22>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	1821      	adds	r1, r4, r0
 80092e4:	428b      	cmp	r3, r1
 80092e6:	bf01      	itttt	eq
 80092e8:	6819      	ldreq	r1, [r3, #0]
 80092ea:	685b      	ldreq	r3, [r3, #4]
 80092ec:	1809      	addeq	r1, r1, r0
 80092ee:	6021      	streq	r1, [r4, #0]
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	6054      	str	r4, [r2, #4]
 80092f4:	e7cb      	b.n	800928e <_free_r+0x22>
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000a30 	.word	0x20000a30

080092fc <sbrk_aligned>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	4e0e      	ldr	r6, [pc, #56]	; (8009338 <sbrk_aligned+0x3c>)
 8009300:	460c      	mov	r4, r1
 8009302:	6831      	ldr	r1, [r6, #0]
 8009304:	4605      	mov	r5, r0
 8009306:	b911      	cbnz	r1, 800930e <sbrk_aligned+0x12>
 8009308:	f000 f88c 	bl	8009424 <_sbrk_r>
 800930c:	6030      	str	r0, [r6, #0]
 800930e:	4621      	mov	r1, r4
 8009310:	4628      	mov	r0, r5
 8009312:	f000 f887 	bl	8009424 <_sbrk_r>
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	d00a      	beq.n	8009330 <sbrk_aligned+0x34>
 800931a:	1cc4      	adds	r4, r0, #3
 800931c:	f024 0403 	bic.w	r4, r4, #3
 8009320:	42a0      	cmp	r0, r4
 8009322:	d007      	beq.n	8009334 <sbrk_aligned+0x38>
 8009324:	1a21      	subs	r1, r4, r0
 8009326:	4628      	mov	r0, r5
 8009328:	f000 f87c 	bl	8009424 <_sbrk_r>
 800932c:	3001      	adds	r0, #1
 800932e:	d101      	bne.n	8009334 <sbrk_aligned+0x38>
 8009330:	f04f 34ff 	mov.w	r4, #4294967295
 8009334:	4620      	mov	r0, r4
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	20000a34 	.word	0x20000a34

0800933c <_malloc_r>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	1ccd      	adds	r5, r1, #3
 8009342:	f025 0503 	bic.w	r5, r5, #3
 8009346:	3508      	adds	r5, #8
 8009348:	2d0c      	cmp	r5, #12
 800934a:	bf38      	it	cc
 800934c:	250c      	movcc	r5, #12
 800934e:	2d00      	cmp	r5, #0
 8009350:	4607      	mov	r7, r0
 8009352:	db01      	blt.n	8009358 <_malloc_r+0x1c>
 8009354:	42a9      	cmp	r1, r5
 8009356:	d905      	bls.n	8009364 <_malloc_r+0x28>
 8009358:	230c      	movs	r3, #12
 800935a:	2600      	movs	r6, #0
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	4630      	mov	r0, r6
 8009360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009364:	4e2e      	ldr	r6, [pc, #184]	; (8009420 <_malloc_r+0xe4>)
 8009366:	f001 fd6b 	bl	800ae40 <__malloc_lock>
 800936a:	6833      	ldr	r3, [r6, #0]
 800936c:	461c      	mov	r4, r3
 800936e:	bb34      	cbnz	r4, 80093be <_malloc_r+0x82>
 8009370:	4629      	mov	r1, r5
 8009372:	4638      	mov	r0, r7
 8009374:	f7ff ffc2 	bl	80092fc <sbrk_aligned>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	4604      	mov	r4, r0
 800937c:	d14d      	bne.n	800941a <_malloc_r+0xde>
 800937e:	6834      	ldr	r4, [r6, #0]
 8009380:	4626      	mov	r6, r4
 8009382:	2e00      	cmp	r6, #0
 8009384:	d140      	bne.n	8009408 <_malloc_r+0xcc>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	4631      	mov	r1, r6
 800938a:	4638      	mov	r0, r7
 800938c:	eb04 0803 	add.w	r8, r4, r3
 8009390:	f000 f848 	bl	8009424 <_sbrk_r>
 8009394:	4580      	cmp	r8, r0
 8009396:	d13a      	bne.n	800940e <_malloc_r+0xd2>
 8009398:	6821      	ldr	r1, [r4, #0]
 800939a:	3503      	adds	r5, #3
 800939c:	1a6d      	subs	r5, r5, r1
 800939e:	f025 0503 	bic.w	r5, r5, #3
 80093a2:	3508      	adds	r5, #8
 80093a4:	2d0c      	cmp	r5, #12
 80093a6:	bf38      	it	cc
 80093a8:	250c      	movcc	r5, #12
 80093aa:	4638      	mov	r0, r7
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7ff ffa5 	bl	80092fc <sbrk_aligned>
 80093b2:	3001      	adds	r0, #1
 80093b4:	d02b      	beq.n	800940e <_malloc_r+0xd2>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	442b      	add	r3, r5
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	e00e      	b.n	80093dc <_malloc_r+0xa0>
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	1b52      	subs	r2, r2, r5
 80093c2:	d41e      	bmi.n	8009402 <_malloc_r+0xc6>
 80093c4:	2a0b      	cmp	r2, #11
 80093c6:	d916      	bls.n	80093f6 <_malloc_r+0xba>
 80093c8:	1961      	adds	r1, r4, r5
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	6025      	str	r5, [r4, #0]
 80093ce:	bf18      	it	ne
 80093d0:	6059      	strne	r1, [r3, #4]
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	bf08      	it	eq
 80093d6:	6031      	streq	r1, [r6, #0]
 80093d8:	5162      	str	r2, [r4, r5]
 80093da:	604b      	str	r3, [r1, #4]
 80093dc:	4638      	mov	r0, r7
 80093de:	f104 060b 	add.w	r6, r4, #11
 80093e2:	f001 fd33 	bl	800ae4c <__malloc_unlock>
 80093e6:	f026 0607 	bic.w	r6, r6, #7
 80093ea:	1d23      	adds	r3, r4, #4
 80093ec:	1af2      	subs	r2, r6, r3
 80093ee:	d0b6      	beq.n	800935e <_malloc_r+0x22>
 80093f0:	1b9b      	subs	r3, r3, r6
 80093f2:	50a3      	str	r3, [r4, r2]
 80093f4:	e7b3      	b.n	800935e <_malloc_r+0x22>
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	bf0c      	ite	eq
 80093fc:	6032      	streq	r2, [r6, #0]
 80093fe:	605a      	strne	r2, [r3, #4]
 8009400:	e7ec      	b.n	80093dc <_malloc_r+0xa0>
 8009402:	4623      	mov	r3, r4
 8009404:	6864      	ldr	r4, [r4, #4]
 8009406:	e7b2      	b.n	800936e <_malloc_r+0x32>
 8009408:	4634      	mov	r4, r6
 800940a:	6876      	ldr	r6, [r6, #4]
 800940c:	e7b9      	b.n	8009382 <_malloc_r+0x46>
 800940e:	230c      	movs	r3, #12
 8009410:	4638      	mov	r0, r7
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	f001 fd1a 	bl	800ae4c <__malloc_unlock>
 8009418:	e7a1      	b.n	800935e <_malloc_r+0x22>
 800941a:	6025      	str	r5, [r4, #0]
 800941c:	e7de      	b.n	80093dc <_malloc_r+0xa0>
 800941e:	bf00      	nop
 8009420:	20000a30 	.word	0x20000a30

08009424 <_sbrk_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	2300      	movs	r3, #0
 8009428:	4d05      	ldr	r5, [pc, #20]	; (8009440 <_sbrk_r+0x1c>)
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f8 fcce 	bl	8001dd0 <_sbrk>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_sbrk_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_sbrk_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20000a3c 	.word	0x20000a3c

08009444 <sulp>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	460f      	mov	r7, r1
 800944a:	4690      	mov	r8, r2
 800944c:	f002 f874 	bl	800b538 <__ulp>
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	f1b8 0f00 	cmp.w	r8, #0
 8009458:	d011      	beq.n	800947e <sulp+0x3a>
 800945a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800945e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009462:	2b00      	cmp	r3, #0
 8009464:	dd0b      	ble.n	800947e <sulp+0x3a>
 8009466:	2400      	movs	r4, #0
 8009468:	051b      	lsls	r3, r3, #20
 800946a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800946e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009472:	4622      	mov	r2, r4
 8009474:	462b      	mov	r3, r5
 8009476:	f7f7 f82f 	bl	80004d8 <__aeabi_dmul>
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009488 <_strtod_l>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	469b      	mov	fp, r3
 800948e:	2300      	movs	r3, #0
 8009490:	b09f      	sub	sp, #124	; 0x7c
 8009492:	931a      	str	r3, [sp, #104]	; 0x68
 8009494:	4b9e      	ldr	r3, [pc, #632]	; (8009710 <_strtod_l+0x288>)
 8009496:	4682      	mov	sl, r0
 8009498:	681f      	ldr	r7, [r3, #0]
 800949a:	460e      	mov	r6, r1
 800949c:	4638      	mov	r0, r7
 800949e:	9215      	str	r2, [sp, #84]	; 0x54
 80094a0:	f7f6 fe56 	bl	8000150 <strlen>
 80094a4:	f04f 0800 	mov.w	r8, #0
 80094a8:	4604      	mov	r4, r0
 80094aa:	f04f 0900 	mov.w	r9, #0
 80094ae:	9619      	str	r6, [sp, #100]	; 0x64
 80094b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	2a2b      	cmp	r2, #43	; 0x2b
 80094b6:	d04c      	beq.n	8009552 <_strtod_l+0xca>
 80094b8:	d83a      	bhi.n	8009530 <_strtod_l+0xa8>
 80094ba:	2a0d      	cmp	r2, #13
 80094bc:	d833      	bhi.n	8009526 <_strtod_l+0x9e>
 80094be:	2a08      	cmp	r2, #8
 80094c0:	d833      	bhi.n	800952a <_strtod_l+0xa2>
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	d03d      	beq.n	8009542 <_strtod_l+0xba>
 80094c6:	2300      	movs	r3, #0
 80094c8:	930a      	str	r3, [sp, #40]	; 0x28
 80094ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80094cc:	782b      	ldrb	r3, [r5, #0]
 80094ce:	2b30      	cmp	r3, #48	; 0x30
 80094d0:	f040 80aa 	bne.w	8009628 <_strtod_l+0x1a0>
 80094d4:	786b      	ldrb	r3, [r5, #1]
 80094d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094da:	2b58      	cmp	r3, #88	; 0x58
 80094dc:	d166      	bne.n	80095ac <_strtod_l+0x124>
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	4650      	mov	r0, sl
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	ab1a      	add	r3, sp, #104	; 0x68
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	4a8a      	ldr	r2, [pc, #552]	; (8009714 <_strtod_l+0x28c>)
 80094ea:	f8cd b008 	str.w	fp, [sp, #8]
 80094ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80094f0:	a919      	add	r1, sp, #100	; 0x64
 80094f2:	f001 f91f 	bl	800a734 <__gethex>
 80094f6:	f010 0607 	ands.w	r6, r0, #7
 80094fa:	4604      	mov	r4, r0
 80094fc:	d005      	beq.n	800950a <_strtod_l+0x82>
 80094fe:	2e06      	cmp	r6, #6
 8009500:	d129      	bne.n	8009556 <_strtod_l+0xce>
 8009502:	2300      	movs	r3, #0
 8009504:	3501      	adds	r5, #1
 8009506:	9519      	str	r5, [sp, #100]	; 0x64
 8009508:	930a      	str	r3, [sp, #40]	; 0x28
 800950a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 858a 	bne.w	800a026 <_strtod_l+0xb9e>
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	b1d3      	cbz	r3, 800954c <_strtod_l+0xc4>
 8009516:	4642      	mov	r2, r8
 8009518:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800951c:	4610      	mov	r0, r2
 800951e:	4619      	mov	r1, r3
 8009520:	b01f      	add	sp, #124	; 0x7c
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	2a20      	cmp	r2, #32
 8009528:	d1cd      	bne.n	80094c6 <_strtod_l+0x3e>
 800952a:	3301      	adds	r3, #1
 800952c:	9319      	str	r3, [sp, #100]	; 0x64
 800952e:	e7bf      	b.n	80094b0 <_strtod_l+0x28>
 8009530:	2a2d      	cmp	r2, #45	; 0x2d
 8009532:	d1c8      	bne.n	80094c6 <_strtod_l+0x3e>
 8009534:	2201      	movs	r2, #1
 8009536:	920a      	str	r2, [sp, #40]	; 0x28
 8009538:	1c5a      	adds	r2, r3, #1
 800953a:	9219      	str	r2, [sp, #100]	; 0x64
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1c3      	bne.n	80094ca <_strtod_l+0x42>
 8009542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009544:	9619      	str	r6, [sp, #100]	; 0x64
 8009546:	2b00      	cmp	r3, #0
 8009548:	f040 856b 	bne.w	800a022 <_strtod_l+0xb9a>
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	e7e4      	b.n	800951c <_strtod_l+0x94>
 8009552:	2200      	movs	r2, #0
 8009554:	e7ef      	b.n	8009536 <_strtod_l+0xae>
 8009556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009558:	b13a      	cbz	r2, 800956a <_strtod_l+0xe2>
 800955a:	2135      	movs	r1, #53	; 0x35
 800955c:	a81c      	add	r0, sp, #112	; 0x70
 800955e:	f002 f8ef 	bl	800b740 <__copybits>
 8009562:	4650      	mov	r0, sl
 8009564:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009566:	f001 fcb7 	bl	800aed8 <_Bfree>
 800956a:	3e01      	subs	r6, #1
 800956c:	2e04      	cmp	r6, #4
 800956e:	d806      	bhi.n	800957e <_strtod_l+0xf6>
 8009570:	e8df f006 	tbb	[pc, r6]
 8009574:	1714030a 	.word	0x1714030a
 8009578:	0a          	.byte	0x0a
 8009579:	00          	.byte	0x00
 800957a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800957e:	0721      	lsls	r1, r4, #28
 8009580:	d5c3      	bpl.n	800950a <_strtod_l+0x82>
 8009582:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009586:	e7c0      	b.n	800950a <_strtod_l+0x82>
 8009588:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800958a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800958e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009596:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800959a:	e7f0      	b.n	800957e <_strtod_l+0xf6>
 800959c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009718 <_strtod_l+0x290>
 80095a0:	e7ed      	b.n	800957e <_strtod_l+0xf6>
 80095a2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80095a6:	f04f 38ff 	mov.w	r8, #4294967295
 80095aa:	e7e8      	b.n	800957e <_strtod_l+0xf6>
 80095ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	9219      	str	r2, [sp, #100]	; 0x64
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b30      	cmp	r3, #48	; 0x30
 80095b6:	d0f9      	beq.n	80095ac <_strtod_l+0x124>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0a6      	beq.n	800950a <_strtod_l+0x82>
 80095bc:	2301      	movs	r3, #1
 80095be:	9307      	str	r3, [sp, #28]
 80095c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095c2:	220a      	movs	r2, #10
 80095c4:	9308      	str	r3, [sp, #32]
 80095c6:	2300      	movs	r3, #0
 80095c8:	469b      	mov	fp, r3
 80095ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80095ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80095d0:	7805      	ldrb	r5, [r0, #0]
 80095d2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80095d6:	b2d9      	uxtb	r1, r3
 80095d8:	2909      	cmp	r1, #9
 80095da:	d927      	bls.n	800962c <_strtod_l+0x1a4>
 80095dc:	4622      	mov	r2, r4
 80095de:	4639      	mov	r1, r7
 80095e0:	f002 fc3d 	bl	800be5e <strncmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d033      	beq.n	8009650 <_strtod_l+0x1c8>
 80095e8:	2000      	movs	r0, #0
 80095ea:	462a      	mov	r2, r5
 80095ec:	465c      	mov	r4, fp
 80095ee:	4603      	mov	r3, r0
 80095f0:	9004      	str	r0, [sp, #16]
 80095f2:	2a65      	cmp	r2, #101	; 0x65
 80095f4:	d001      	beq.n	80095fa <_strtod_l+0x172>
 80095f6:	2a45      	cmp	r2, #69	; 0x45
 80095f8:	d114      	bne.n	8009624 <_strtod_l+0x19c>
 80095fa:	b91c      	cbnz	r4, 8009604 <_strtod_l+0x17c>
 80095fc:	9a07      	ldr	r2, [sp, #28]
 80095fe:	4302      	orrs	r2, r0
 8009600:	d09f      	beq.n	8009542 <_strtod_l+0xba>
 8009602:	2400      	movs	r4, #0
 8009604:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009606:	1c72      	adds	r2, r6, #1
 8009608:	9219      	str	r2, [sp, #100]	; 0x64
 800960a:	7872      	ldrb	r2, [r6, #1]
 800960c:	2a2b      	cmp	r2, #43	; 0x2b
 800960e:	d079      	beq.n	8009704 <_strtod_l+0x27c>
 8009610:	2a2d      	cmp	r2, #45	; 0x2d
 8009612:	f000 8083 	beq.w	800971c <_strtod_l+0x294>
 8009616:	2700      	movs	r7, #0
 8009618:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800961c:	2909      	cmp	r1, #9
 800961e:	f240 8083 	bls.w	8009728 <_strtod_l+0x2a0>
 8009622:	9619      	str	r6, [sp, #100]	; 0x64
 8009624:	2500      	movs	r5, #0
 8009626:	e09f      	b.n	8009768 <_strtod_l+0x2e0>
 8009628:	2300      	movs	r3, #0
 800962a:	e7c8      	b.n	80095be <_strtod_l+0x136>
 800962c:	f1bb 0f08 	cmp.w	fp, #8
 8009630:	bfd5      	itete	le
 8009632:	9906      	ldrle	r1, [sp, #24]
 8009634:	9905      	ldrgt	r1, [sp, #20]
 8009636:	fb02 3301 	mlale	r3, r2, r1, r3
 800963a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800963e:	f100 0001 	add.w	r0, r0, #1
 8009642:	bfd4      	ite	le
 8009644:	9306      	strle	r3, [sp, #24]
 8009646:	9305      	strgt	r3, [sp, #20]
 8009648:	f10b 0b01 	add.w	fp, fp, #1
 800964c:	9019      	str	r0, [sp, #100]	; 0x64
 800964e:	e7be      	b.n	80095ce <_strtod_l+0x146>
 8009650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009652:	191a      	adds	r2, r3, r4
 8009654:	9219      	str	r2, [sp, #100]	; 0x64
 8009656:	5d1a      	ldrb	r2, [r3, r4]
 8009658:	f1bb 0f00 	cmp.w	fp, #0
 800965c:	d036      	beq.n	80096cc <_strtod_l+0x244>
 800965e:	465c      	mov	r4, fp
 8009660:	9004      	str	r0, [sp, #16]
 8009662:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009666:	2b09      	cmp	r3, #9
 8009668:	d912      	bls.n	8009690 <_strtod_l+0x208>
 800966a:	2301      	movs	r3, #1
 800966c:	e7c1      	b.n	80095f2 <_strtod_l+0x16a>
 800966e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009670:	3001      	adds	r0, #1
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	9219      	str	r2, [sp, #100]	; 0x64
 8009676:	785a      	ldrb	r2, [r3, #1]
 8009678:	2a30      	cmp	r2, #48	; 0x30
 800967a:	d0f8      	beq.n	800966e <_strtod_l+0x1e6>
 800967c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009680:	2b08      	cmp	r3, #8
 8009682:	f200 84d5 	bhi.w	800a030 <_strtod_l+0xba8>
 8009686:	9004      	str	r0, [sp, #16]
 8009688:	2000      	movs	r0, #0
 800968a:	4604      	mov	r4, r0
 800968c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800968e:	9308      	str	r3, [sp, #32]
 8009690:	3a30      	subs	r2, #48	; 0x30
 8009692:	f100 0301 	add.w	r3, r0, #1
 8009696:	d013      	beq.n	80096c0 <_strtod_l+0x238>
 8009698:	9904      	ldr	r1, [sp, #16]
 800969a:	1905      	adds	r5, r0, r4
 800969c:	4419      	add	r1, r3
 800969e:	9104      	str	r1, [sp, #16]
 80096a0:	4623      	mov	r3, r4
 80096a2:	210a      	movs	r1, #10
 80096a4:	42ab      	cmp	r3, r5
 80096a6:	d113      	bne.n	80096d0 <_strtod_l+0x248>
 80096a8:	1823      	adds	r3, r4, r0
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	f104 0401 	add.w	r4, r4, #1
 80096b0:	4404      	add	r4, r0
 80096b2:	dc1b      	bgt.n	80096ec <_strtod_l+0x264>
 80096b4:	230a      	movs	r3, #10
 80096b6:	9906      	ldr	r1, [sp, #24]
 80096b8:	fb03 2301 	mla	r3, r3, r1, r2
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	2300      	movs	r3, #0
 80096c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096c2:	4618      	mov	r0, r3
 80096c4:	1c51      	adds	r1, r2, #1
 80096c6:	9119      	str	r1, [sp, #100]	; 0x64
 80096c8:	7852      	ldrb	r2, [r2, #1]
 80096ca:	e7ca      	b.n	8009662 <_strtod_l+0x1da>
 80096cc:	4658      	mov	r0, fp
 80096ce:	e7d3      	b.n	8009678 <_strtod_l+0x1f0>
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	dc04      	bgt.n	80096de <_strtod_l+0x256>
 80096d4:	9f06      	ldr	r7, [sp, #24]
 80096d6:	434f      	muls	r7, r1
 80096d8:	9706      	str	r7, [sp, #24]
 80096da:	3301      	adds	r3, #1
 80096dc:	e7e2      	b.n	80096a4 <_strtod_l+0x21c>
 80096de:	1c5f      	adds	r7, r3, #1
 80096e0:	2f10      	cmp	r7, #16
 80096e2:	bfde      	ittt	le
 80096e4:	9f05      	ldrle	r7, [sp, #20]
 80096e6:	434f      	mulle	r7, r1
 80096e8:	9705      	strle	r7, [sp, #20]
 80096ea:	e7f6      	b.n	80096da <_strtod_l+0x252>
 80096ec:	2c10      	cmp	r4, #16
 80096ee:	bfdf      	itttt	le
 80096f0:	230a      	movle	r3, #10
 80096f2:	9905      	ldrle	r1, [sp, #20]
 80096f4:	fb03 2301 	mlale	r3, r3, r1, r2
 80096f8:	9305      	strle	r3, [sp, #20]
 80096fa:	e7e0      	b.n	80096be <_strtod_l+0x236>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	2301      	movs	r3, #1
 8009702:	e77b      	b.n	80095fc <_strtod_l+0x174>
 8009704:	2700      	movs	r7, #0
 8009706:	1cb2      	adds	r2, r6, #2
 8009708:	9219      	str	r2, [sp, #100]	; 0x64
 800970a:	78b2      	ldrb	r2, [r6, #2]
 800970c:	e784      	b.n	8009618 <_strtod_l+0x190>
 800970e:	bf00      	nop
 8009710:	0800c314 	.word	0x0800c314
 8009714:	0800c0e4 	.word	0x0800c0e4
 8009718:	7ff00000 	.word	0x7ff00000
 800971c:	2701      	movs	r7, #1
 800971e:	e7f2      	b.n	8009706 <_strtod_l+0x27e>
 8009720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009722:	1c51      	adds	r1, r2, #1
 8009724:	9119      	str	r1, [sp, #100]	; 0x64
 8009726:	7852      	ldrb	r2, [r2, #1]
 8009728:	2a30      	cmp	r2, #48	; 0x30
 800972a:	d0f9      	beq.n	8009720 <_strtod_l+0x298>
 800972c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009730:	2908      	cmp	r1, #8
 8009732:	f63f af77 	bhi.w	8009624 <_strtod_l+0x19c>
 8009736:	f04f 0e0a 	mov.w	lr, #10
 800973a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800973e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009740:	9209      	str	r2, [sp, #36]	; 0x24
 8009742:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009744:	1c51      	adds	r1, r2, #1
 8009746:	9119      	str	r1, [sp, #100]	; 0x64
 8009748:	7852      	ldrb	r2, [r2, #1]
 800974a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800974e:	2d09      	cmp	r5, #9
 8009750:	d935      	bls.n	80097be <_strtod_l+0x336>
 8009752:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009754:	1b49      	subs	r1, r1, r5
 8009756:	2908      	cmp	r1, #8
 8009758:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800975c:	dc02      	bgt.n	8009764 <_strtod_l+0x2dc>
 800975e:	4565      	cmp	r5, ip
 8009760:	bfa8      	it	ge
 8009762:	4665      	movge	r5, ip
 8009764:	b107      	cbz	r7, 8009768 <_strtod_l+0x2e0>
 8009766:	426d      	negs	r5, r5
 8009768:	2c00      	cmp	r4, #0
 800976a:	d14c      	bne.n	8009806 <_strtod_l+0x37e>
 800976c:	9907      	ldr	r1, [sp, #28]
 800976e:	4301      	orrs	r1, r0
 8009770:	f47f aecb 	bne.w	800950a <_strtod_l+0x82>
 8009774:	2b00      	cmp	r3, #0
 8009776:	f47f aee4 	bne.w	8009542 <_strtod_l+0xba>
 800977a:	2a69      	cmp	r2, #105	; 0x69
 800977c:	d026      	beq.n	80097cc <_strtod_l+0x344>
 800977e:	dc23      	bgt.n	80097c8 <_strtod_l+0x340>
 8009780:	2a49      	cmp	r2, #73	; 0x49
 8009782:	d023      	beq.n	80097cc <_strtod_l+0x344>
 8009784:	2a4e      	cmp	r2, #78	; 0x4e
 8009786:	f47f aedc 	bne.w	8009542 <_strtod_l+0xba>
 800978a:	499d      	ldr	r1, [pc, #628]	; (8009a00 <_strtod_l+0x578>)
 800978c:	a819      	add	r0, sp, #100	; 0x64
 800978e:	f001 fa1f 	bl	800abd0 <__match>
 8009792:	2800      	cmp	r0, #0
 8009794:	f43f aed5 	beq.w	8009542 <_strtod_l+0xba>
 8009798:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b28      	cmp	r3, #40	; 0x28
 800979e:	d12c      	bne.n	80097fa <_strtod_l+0x372>
 80097a0:	4998      	ldr	r1, [pc, #608]	; (8009a04 <_strtod_l+0x57c>)
 80097a2:	aa1c      	add	r2, sp, #112	; 0x70
 80097a4:	a819      	add	r0, sp, #100	; 0x64
 80097a6:	f001 fa27 	bl	800abf8 <__hexnan>
 80097aa:	2805      	cmp	r0, #5
 80097ac:	d125      	bne.n	80097fa <_strtod_l+0x372>
 80097ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80097b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80097b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80097bc:	e6a5      	b.n	800950a <_strtod_l+0x82>
 80097be:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80097c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80097c6:	e7bc      	b.n	8009742 <_strtod_l+0x2ba>
 80097c8:	2a6e      	cmp	r2, #110	; 0x6e
 80097ca:	e7dc      	b.n	8009786 <_strtod_l+0x2fe>
 80097cc:	498e      	ldr	r1, [pc, #568]	; (8009a08 <_strtod_l+0x580>)
 80097ce:	a819      	add	r0, sp, #100	; 0x64
 80097d0:	f001 f9fe 	bl	800abd0 <__match>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f43f aeb4 	beq.w	8009542 <_strtod_l+0xba>
 80097da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097dc:	498b      	ldr	r1, [pc, #556]	; (8009a0c <_strtod_l+0x584>)
 80097de:	3b01      	subs	r3, #1
 80097e0:	a819      	add	r0, sp, #100	; 0x64
 80097e2:	9319      	str	r3, [sp, #100]	; 0x64
 80097e4:	f001 f9f4 	bl	800abd0 <__match>
 80097e8:	b910      	cbnz	r0, 80097f0 <_strtod_l+0x368>
 80097ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097ec:	3301      	adds	r3, #1
 80097ee:	9319      	str	r3, [sp, #100]	; 0x64
 80097f0:	f04f 0800 	mov.w	r8, #0
 80097f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009a10 <_strtod_l+0x588>
 80097f8:	e687      	b.n	800950a <_strtod_l+0x82>
 80097fa:	4886      	ldr	r0, [pc, #536]	; (8009a14 <_strtod_l+0x58c>)
 80097fc:	f002 fae6 	bl	800bdcc <nan>
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	e681      	b.n	800950a <_strtod_l+0x82>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	f1bb 0f00 	cmp.w	fp, #0
 800980c:	bf08      	it	eq
 800980e:	46a3      	moveq	fp, r4
 8009810:	1aeb      	subs	r3, r5, r3
 8009812:	2c10      	cmp	r4, #16
 8009814:	9806      	ldr	r0, [sp, #24]
 8009816:	4626      	mov	r6, r4
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	bfa8      	it	ge
 800981c:	2610      	movge	r6, #16
 800981e:	f7f6 fde1 	bl	80003e4 <__aeabi_ui2d>
 8009822:	2c09      	cmp	r4, #9
 8009824:	4680      	mov	r8, r0
 8009826:	4689      	mov	r9, r1
 8009828:	dd13      	ble.n	8009852 <_strtod_l+0x3ca>
 800982a:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <_strtod_l+0x590>)
 800982c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009830:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009834:	f7f6 fe50 	bl	80004d8 <__aeabi_dmul>
 8009838:	4680      	mov	r8, r0
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	4689      	mov	r9, r1
 800983e:	f7f6 fdd1 	bl	80003e4 <__aeabi_ui2d>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fc8f 	bl	800016c <__adddf3>
 800984e:	4680      	mov	r8, r0
 8009850:	4689      	mov	r9, r1
 8009852:	2c0f      	cmp	r4, #15
 8009854:	dc36      	bgt.n	80098c4 <_strtod_l+0x43c>
 8009856:	9b07      	ldr	r3, [sp, #28]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f43f ae56 	beq.w	800950a <_strtod_l+0x82>
 800985e:	dd22      	ble.n	80098a6 <_strtod_l+0x41e>
 8009860:	2b16      	cmp	r3, #22
 8009862:	dc09      	bgt.n	8009878 <_strtod_l+0x3f0>
 8009864:	496c      	ldr	r1, [pc, #432]	; (8009a18 <_strtod_l+0x590>)
 8009866:	4642      	mov	r2, r8
 8009868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800986c:	464b      	mov	r3, r9
 800986e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009872:	f7f6 fe31 	bl	80004d8 <__aeabi_dmul>
 8009876:	e7c3      	b.n	8009800 <_strtod_l+0x378>
 8009878:	9a07      	ldr	r2, [sp, #28]
 800987a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800987e:	4293      	cmp	r3, r2
 8009880:	db20      	blt.n	80098c4 <_strtod_l+0x43c>
 8009882:	4d65      	ldr	r5, [pc, #404]	; (8009a18 <_strtod_l+0x590>)
 8009884:	f1c4 040f 	rsb	r4, r4, #15
 8009888:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800988c:	4642      	mov	r2, r8
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	464b      	mov	r3, r9
 8009894:	f7f6 fe20 	bl	80004d8 <__aeabi_dmul>
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	1b1c      	subs	r4, r3, r4
 800989c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80098a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098a4:	e7e5      	b.n	8009872 <_strtod_l+0x3ea>
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	3316      	adds	r3, #22
 80098aa:	db0b      	blt.n	80098c4 <_strtod_l+0x43c>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	4640      	mov	r0, r8
 80098b0:	1b5d      	subs	r5, r3, r5
 80098b2:	4b59      	ldr	r3, [pc, #356]	; (8009a18 <_strtod_l+0x590>)
 80098b4:	4649      	mov	r1, r9
 80098b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80098ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098be:	f7f6 ff35 	bl	800072c <__aeabi_ddiv>
 80098c2:	e79d      	b.n	8009800 <_strtod_l+0x378>
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	1ba6      	subs	r6, r4, r6
 80098c8:	441e      	add	r6, r3
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	dd74      	ble.n	80099b8 <_strtod_l+0x530>
 80098ce:	f016 030f 	ands.w	r3, r6, #15
 80098d2:	d00a      	beq.n	80098ea <_strtod_l+0x462>
 80098d4:	4950      	ldr	r1, [pc, #320]	; (8009a18 <_strtod_l+0x590>)
 80098d6:	4642      	mov	r2, r8
 80098d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e0:	464b      	mov	r3, r9
 80098e2:	f7f6 fdf9 	bl	80004d8 <__aeabi_dmul>
 80098e6:	4680      	mov	r8, r0
 80098e8:	4689      	mov	r9, r1
 80098ea:	f036 060f 	bics.w	r6, r6, #15
 80098ee:	d052      	beq.n	8009996 <_strtod_l+0x50e>
 80098f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80098f4:	dd27      	ble.n	8009946 <_strtod_l+0x4be>
 80098f6:	f04f 0b00 	mov.w	fp, #0
 80098fa:	f8cd b010 	str.w	fp, [sp, #16]
 80098fe:	f8cd b020 	str.w	fp, [sp, #32]
 8009902:	f8cd b018 	str.w	fp, [sp, #24]
 8009906:	2322      	movs	r3, #34	; 0x22
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009a10 <_strtod_l+0x588>
 8009910:	f8ca 3000 	str.w	r3, [sl]
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f43f adf7 	beq.w	800950a <_strtod_l+0x82>
 800991c:	4650      	mov	r0, sl
 800991e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009920:	f001 fada 	bl	800aed8 <_Bfree>
 8009924:	4650      	mov	r0, sl
 8009926:	9906      	ldr	r1, [sp, #24]
 8009928:	f001 fad6 	bl	800aed8 <_Bfree>
 800992c:	4650      	mov	r0, sl
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	f001 fad2 	bl	800aed8 <_Bfree>
 8009934:	4650      	mov	r0, sl
 8009936:	9908      	ldr	r1, [sp, #32]
 8009938:	f001 face 	bl	800aed8 <_Bfree>
 800993c:	4659      	mov	r1, fp
 800993e:	4650      	mov	r0, sl
 8009940:	f001 faca 	bl	800aed8 <_Bfree>
 8009944:	e5e1      	b.n	800950a <_strtod_l+0x82>
 8009946:	4b35      	ldr	r3, [pc, #212]	; (8009a1c <_strtod_l+0x594>)
 8009948:	4640      	mov	r0, r8
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	2300      	movs	r3, #0
 800994e:	4649      	mov	r1, r9
 8009950:	461f      	mov	r7, r3
 8009952:	1136      	asrs	r6, r6, #4
 8009954:	2e01      	cmp	r6, #1
 8009956:	dc21      	bgt.n	800999c <_strtod_l+0x514>
 8009958:	b10b      	cbz	r3, 800995e <_strtod_l+0x4d6>
 800995a:	4680      	mov	r8, r0
 800995c:	4689      	mov	r9, r1
 800995e:	4b2f      	ldr	r3, [pc, #188]	; (8009a1c <_strtod_l+0x594>)
 8009960:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009964:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009968:	4642      	mov	r2, r8
 800996a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800996e:	464b      	mov	r3, r9
 8009970:	f7f6 fdb2 	bl	80004d8 <__aeabi_dmul>
 8009974:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <_strtod_l+0x588>)
 8009976:	460a      	mov	r2, r1
 8009978:	400b      	ands	r3, r1
 800997a:	4929      	ldr	r1, [pc, #164]	; (8009a20 <_strtod_l+0x598>)
 800997c:	4680      	mov	r8, r0
 800997e:	428b      	cmp	r3, r1
 8009980:	d8b9      	bhi.n	80098f6 <_strtod_l+0x46e>
 8009982:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009986:	428b      	cmp	r3, r1
 8009988:	bf86      	itte	hi
 800998a:	f04f 38ff 	movhi.w	r8, #4294967295
 800998e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009a24 <_strtod_l+0x59c>
 8009992:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009996:	2300      	movs	r3, #0
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	e07f      	b.n	8009a9c <_strtod_l+0x614>
 800999c:	07f2      	lsls	r2, r6, #31
 800999e:	d505      	bpl.n	80099ac <_strtod_l+0x524>
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fd97 	bl	80004d8 <__aeabi_dmul>
 80099aa:	2301      	movs	r3, #1
 80099ac:	9a05      	ldr	r2, [sp, #20]
 80099ae:	3701      	adds	r7, #1
 80099b0:	3208      	adds	r2, #8
 80099b2:	1076      	asrs	r6, r6, #1
 80099b4:	9205      	str	r2, [sp, #20]
 80099b6:	e7cd      	b.n	8009954 <_strtod_l+0x4cc>
 80099b8:	d0ed      	beq.n	8009996 <_strtod_l+0x50e>
 80099ba:	4276      	negs	r6, r6
 80099bc:	f016 020f 	ands.w	r2, r6, #15
 80099c0:	d00a      	beq.n	80099d8 <_strtod_l+0x550>
 80099c2:	4b15      	ldr	r3, [pc, #84]	; (8009a18 <_strtod_l+0x590>)
 80099c4:	4640      	mov	r0, r8
 80099c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ca:	4649      	mov	r1, r9
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f7f6 feac 	bl	800072c <__aeabi_ddiv>
 80099d4:	4680      	mov	r8, r0
 80099d6:	4689      	mov	r9, r1
 80099d8:	1136      	asrs	r6, r6, #4
 80099da:	d0dc      	beq.n	8009996 <_strtod_l+0x50e>
 80099dc:	2e1f      	cmp	r6, #31
 80099de:	dd23      	ble.n	8009a28 <_strtod_l+0x5a0>
 80099e0:	f04f 0b00 	mov.w	fp, #0
 80099e4:	f8cd b010 	str.w	fp, [sp, #16]
 80099e8:	f8cd b020 	str.w	fp, [sp, #32]
 80099ec:	f8cd b018 	str.w	fp, [sp, #24]
 80099f0:	2322      	movs	r3, #34	; 0x22
 80099f2:	f04f 0800 	mov.w	r8, #0
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	f8ca 3000 	str.w	r3, [sl]
 80099fe:	e789      	b.n	8009914 <_strtod_l+0x48c>
 8009a00:	0800c0e1 	.word	0x0800c0e1
 8009a04:	0800c0f8 	.word	0x0800c0f8
 8009a08:	0800c0d8 	.word	0x0800c0d8
 8009a0c:	0800c0db 	.word	0x0800c0db
 8009a10:	7ff00000 	.word	0x7ff00000
 8009a14:	0800c50a 	.word	0x0800c50a
 8009a18:	0800c3c8 	.word	0x0800c3c8
 8009a1c:	0800c3a0 	.word	0x0800c3a0
 8009a20:	7ca00000 	.word	0x7ca00000
 8009a24:	7fefffff 	.word	0x7fefffff
 8009a28:	f016 0310 	ands.w	r3, r6, #16
 8009a2c:	bf18      	it	ne
 8009a2e:	236a      	movne	r3, #106	; 0x6a
 8009a30:	4640      	mov	r0, r8
 8009a32:	9305      	str	r3, [sp, #20]
 8009a34:	4649      	mov	r1, r9
 8009a36:	2300      	movs	r3, #0
 8009a38:	4fb0      	ldr	r7, [pc, #704]	; (8009cfc <_strtod_l+0x874>)
 8009a3a:	07f2      	lsls	r2, r6, #31
 8009a3c:	d504      	bpl.n	8009a48 <_strtod_l+0x5c0>
 8009a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	2301      	movs	r3, #1
 8009a48:	1076      	asrs	r6, r6, #1
 8009a4a:	f107 0708 	add.w	r7, r7, #8
 8009a4e:	d1f4      	bne.n	8009a3a <_strtod_l+0x5b2>
 8009a50:	b10b      	cbz	r3, 8009a56 <_strtod_l+0x5ce>
 8009a52:	4680      	mov	r8, r0
 8009a54:	4689      	mov	r9, r1
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	b1c3      	cbz	r3, 8009a8c <_strtod_l+0x604>
 8009a5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009a5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	4649      	mov	r1, r9
 8009a66:	dd11      	ble.n	8009a8c <_strtod_l+0x604>
 8009a68:	2b1f      	cmp	r3, #31
 8009a6a:	f340 8127 	ble.w	8009cbc <_strtod_l+0x834>
 8009a6e:	2b34      	cmp	r3, #52	; 0x34
 8009a70:	bfd8      	it	le
 8009a72:	f04f 33ff 	movle.w	r3, #4294967295
 8009a76:	f04f 0800 	mov.w	r8, #0
 8009a7a:	bfcf      	iteee	gt
 8009a7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009a84:	fa03 f202 	lslle.w	r2, r3, r2
 8009a88:	ea02 0901 	andle.w	r9, r2, r1
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4640      	mov	r0, r8
 8009a92:	4649      	mov	r1, r9
 8009a94:	f7f6 ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d1a1      	bne.n	80099e0 <_strtod_l+0x558>
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	465a      	mov	r2, fp
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	9908      	ldr	r1, [sp, #32]
 8009aa8:	f001 fa7e 	bl	800afa8 <__s2b>
 8009aac:	9008      	str	r0, [sp, #32]
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f af21 	beq.w	80098f6 <_strtod_l+0x46e>
 8009ab4:	9b04      	ldr	r3, [sp, #16]
 8009ab6:	f04f 0b00 	mov.w	fp, #0
 8009aba:	1b5d      	subs	r5, r3, r5
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	f8cd b010 	str.w	fp, [sp, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfb4      	ite	lt
 8009ac6:	462b      	movlt	r3, r5
 8009ac8:	2300      	movge	r3, #0
 8009aca:	930e      	str	r3, [sp, #56]	; 0x38
 8009acc:	9b07      	ldr	r3, [sp, #28]
 8009ace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ad2:	9314      	str	r3, [sp, #80]	; 0x50
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	6859      	ldr	r1, [r3, #4]
 8009ada:	f001 f9bd 	bl	800ae58 <_Balloc>
 8009ade:	9006      	str	r0, [sp, #24]
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f43f af10 	beq.w	8009906 <_strtod_l+0x47e>
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	300c      	adds	r0, #12
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	f103 010c 	add.w	r1, r3, #12
 8009af0:	3202      	adds	r2, #2
 8009af2:	0092      	lsls	r2, r2, #2
 8009af4:	f001 f996 	bl	800ae24 <memcpy>
 8009af8:	ab1c      	add	r3, sp, #112	; 0x70
 8009afa:	9301      	str	r3, [sp, #4]
 8009afc:	ab1b      	add	r3, sp, #108	; 0x6c
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	4650      	mov	r0, sl
 8009b06:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009b0a:	f001 fd8f 	bl	800b62c <__d2b>
 8009b0e:	901a      	str	r0, [sp, #104]	; 0x68
 8009b10:	2800      	cmp	r0, #0
 8009b12:	f43f aef8 	beq.w	8009906 <_strtod_l+0x47e>
 8009b16:	2101      	movs	r1, #1
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f001 fadd 	bl	800b0d8 <__i2b>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	9004      	str	r0, [sp, #16]
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f43f aeef 	beq.w	8009906 <_strtod_l+0x47e>
 8009b28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	bfab      	itete	ge
 8009b30:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009b32:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009b34:	18ee      	addge	r6, r5, r3
 8009b36:	1b5c      	sublt	r4, r3, r5
 8009b38:	9b05      	ldr	r3, [sp, #20]
 8009b3a:	bfa8      	it	ge
 8009b3c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009b3e:	eba5 0503 	sub.w	r5, r5, r3
 8009b42:	4415      	add	r5, r2
 8009b44:	4b6e      	ldr	r3, [pc, #440]	; (8009d00 <_strtod_l+0x878>)
 8009b46:	f105 35ff 	add.w	r5, r5, #4294967295
 8009b4a:	bfb8      	it	lt
 8009b4c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009b4e:	429d      	cmp	r5, r3
 8009b50:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b54:	f280 80c4 	bge.w	8009ce0 <_strtod_l+0x858>
 8009b58:	1b5b      	subs	r3, r3, r5
 8009b5a:	2b1f      	cmp	r3, #31
 8009b5c:	f04f 0701 	mov.w	r7, #1
 8009b60:	eba2 0203 	sub.w	r2, r2, r3
 8009b64:	f300 80b1 	bgt.w	8009cca <_strtod_l+0x842>
 8009b68:	2500      	movs	r5, #0
 8009b6a:	fa07 f303 	lsl.w	r3, r7, r3
 8009b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b70:	18b7      	adds	r7, r6, r2
 8009b72:	9b05      	ldr	r3, [sp, #20]
 8009b74:	42be      	cmp	r6, r7
 8009b76:	4414      	add	r4, r2
 8009b78:	441c      	add	r4, r3
 8009b7a:	4633      	mov	r3, r6
 8009b7c:	bfa8      	it	ge
 8009b7e:	463b      	movge	r3, r7
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	bfa8      	it	ge
 8009b84:	4623      	movge	r3, r4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfc2      	ittt	gt
 8009b8a:	1aff      	subgt	r7, r7, r3
 8009b8c:	1ae4      	subgt	r4, r4, r3
 8009b8e:	1af6      	subgt	r6, r6, r3
 8009b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dd17      	ble.n	8009bc6 <_strtod_l+0x73e>
 8009b96:	461a      	mov	r2, r3
 8009b98:	4650      	mov	r0, sl
 8009b9a:	9904      	ldr	r1, [sp, #16]
 8009b9c:	f001 fb5a 	bl	800b254 <__pow5mult>
 8009ba0:	9004      	str	r0, [sp, #16]
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f43f aeaf 	beq.w	8009906 <_strtod_l+0x47e>
 8009ba8:	4601      	mov	r1, r0
 8009baa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bac:	4650      	mov	r0, sl
 8009bae:	f001 faa9 	bl	800b104 <__multiply>
 8009bb2:	9009      	str	r0, [sp, #36]	; 0x24
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f43f aea6 	beq.w	8009906 <_strtod_l+0x47e>
 8009bba:	4650      	mov	r0, sl
 8009bbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009bbe:	f001 f98b 	bl	800aed8 <_Bfree>
 8009bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	f300 808e 	bgt.w	8009ce8 <_strtod_l+0x860>
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd08      	ble.n	8009be4 <_strtod_l+0x75c>
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bd6:	9906      	ldr	r1, [sp, #24]
 8009bd8:	f001 fb3c 	bl	800b254 <__pow5mult>
 8009bdc:	9006      	str	r0, [sp, #24]
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f43f ae91 	beq.w	8009906 <_strtod_l+0x47e>
 8009be4:	2c00      	cmp	r4, #0
 8009be6:	dd08      	ble.n	8009bfa <_strtod_l+0x772>
 8009be8:	4622      	mov	r2, r4
 8009bea:	4650      	mov	r0, sl
 8009bec:	9906      	ldr	r1, [sp, #24]
 8009bee:	f001 fb8b 	bl	800b308 <__lshift>
 8009bf2:	9006      	str	r0, [sp, #24]
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f43f ae86 	beq.w	8009906 <_strtod_l+0x47e>
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	dd08      	ble.n	8009c10 <_strtod_l+0x788>
 8009bfe:	4632      	mov	r2, r6
 8009c00:	4650      	mov	r0, sl
 8009c02:	9904      	ldr	r1, [sp, #16]
 8009c04:	f001 fb80 	bl	800b308 <__lshift>
 8009c08:	9004      	str	r0, [sp, #16]
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f43f ae7b 	beq.w	8009906 <_strtod_l+0x47e>
 8009c10:	4650      	mov	r0, sl
 8009c12:	9a06      	ldr	r2, [sp, #24]
 8009c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c16:	f001 fc03 	bl	800b420 <__mdiff>
 8009c1a:	4683      	mov	fp, r0
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f43f ae72 	beq.w	8009906 <_strtod_l+0x47e>
 8009c22:	2400      	movs	r4, #0
 8009c24:	68c3      	ldr	r3, [r0, #12]
 8009c26:	9904      	ldr	r1, [sp, #16]
 8009c28:	60c4      	str	r4, [r0, #12]
 8009c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c2c:	f001 fbdc 	bl	800b3e8 <__mcmp>
 8009c30:	42a0      	cmp	r0, r4
 8009c32:	da6b      	bge.n	8009d0c <_strtod_l+0x884>
 8009c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c36:	ea53 0308 	orrs.w	r3, r3, r8
 8009c3a:	f040 8091 	bne.w	8009d60 <_strtod_l+0x8d8>
 8009c3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f040 808c 	bne.w	8009d60 <_strtod_l+0x8d8>
 8009c48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c4c:	0d1b      	lsrs	r3, r3, #20
 8009c4e:	051b      	lsls	r3, r3, #20
 8009c50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c54:	f240 8084 	bls.w	8009d60 <_strtod_l+0x8d8>
 8009c58:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009c5c:	b91b      	cbnz	r3, 8009c66 <_strtod_l+0x7de>
 8009c5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	dd7c      	ble.n	8009d60 <_strtod_l+0x8d8>
 8009c66:	4659      	mov	r1, fp
 8009c68:	2201      	movs	r2, #1
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	f001 fb4c 	bl	800b308 <__lshift>
 8009c70:	9904      	ldr	r1, [sp, #16]
 8009c72:	4683      	mov	fp, r0
 8009c74:	f001 fbb8 	bl	800b3e8 <__mcmp>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	dd71      	ble.n	8009d60 <_strtod_l+0x8d8>
 8009c7c:	9905      	ldr	r1, [sp, #20]
 8009c7e:	464b      	mov	r3, r9
 8009c80:	4a20      	ldr	r2, [pc, #128]	; (8009d04 <_strtod_l+0x87c>)
 8009c82:	2900      	cmp	r1, #0
 8009c84:	f000 808c 	beq.w	8009da0 <_strtod_l+0x918>
 8009c88:	ea02 0109 	and.w	r1, r2, r9
 8009c8c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c90:	f300 8086 	bgt.w	8009da0 <_strtod_l+0x918>
 8009c94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c98:	f77f aeaa 	ble.w	80099f0 <_strtod_l+0x568>
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4b19      	ldr	r3, [pc, #100]	; (8009d08 <_strtod_l+0x880>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f7f6 fc18 	bl	80004d8 <__aeabi_dmul>
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4303      	orrs	r3, r0
 8009cac:	bf08      	it	eq
 8009cae:	2322      	moveq	r3, #34	; 0x22
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	4689      	mov	r9, r1
 8009cb4:	bf08      	it	eq
 8009cb6:	f8ca 3000 	streq.w	r3, [sl]
 8009cba:	e62f      	b.n	800991c <_strtod_l+0x494>
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	ea03 0808 	and.w	r8, r3, r8
 8009cc8:	e6e0      	b.n	8009a8c <_strtod_l+0x604>
 8009cca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009cce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009cd2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009cd6:	35e2      	adds	r5, #226	; 0xe2
 8009cd8:	fa07 f505 	lsl.w	r5, r7, r5
 8009cdc:	970f      	str	r7, [sp, #60]	; 0x3c
 8009cde:	e747      	b.n	8009b70 <_strtod_l+0x6e8>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce6:	e743      	b.n	8009b70 <_strtod_l+0x6e8>
 8009ce8:	463a      	mov	r2, r7
 8009cea:	4650      	mov	r0, sl
 8009cec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cee:	f001 fb0b 	bl	800b308 <__lshift>
 8009cf2:	901a      	str	r0, [sp, #104]	; 0x68
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f47f af69 	bne.w	8009bcc <_strtod_l+0x744>
 8009cfa:	e604      	b.n	8009906 <_strtod_l+0x47e>
 8009cfc:	0800c110 	.word	0x0800c110
 8009d00:	fffffc02 	.word	0xfffffc02
 8009d04:	7ff00000 	.word	0x7ff00000
 8009d08:	39500000 	.word	0x39500000
 8009d0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009d10:	d165      	bne.n	8009dde <_strtod_l+0x956>
 8009d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d18:	b35a      	cbz	r2, 8009d72 <_strtod_l+0x8ea>
 8009d1a:	4a99      	ldr	r2, [pc, #612]	; (8009f80 <_strtod_l+0xaf8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d12b      	bne.n	8009d78 <_strtod_l+0x8f0>
 8009d20:	9b05      	ldr	r3, [sp, #20]
 8009d22:	4641      	mov	r1, r8
 8009d24:	b303      	cbz	r3, 8009d68 <_strtod_l+0x8e0>
 8009d26:	464a      	mov	r2, r9
 8009d28:	4b96      	ldr	r3, [pc, #600]	; (8009f84 <_strtod_l+0xafc>)
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d30:	f04f 32ff 	mov.w	r2, #4294967295
 8009d34:	d81b      	bhi.n	8009d6e <_strtod_l+0x8e6>
 8009d36:	0d1b      	lsrs	r3, r3, #20
 8009d38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d40:	4299      	cmp	r1, r3
 8009d42:	d119      	bne.n	8009d78 <_strtod_l+0x8f0>
 8009d44:	4b90      	ldr	r3, [pc, #576]	; (8009f88 <_strtod_l+0xb00>)
 8009d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d102      	bne.n	8009d52 <_strtod_l+0x8ca>
 8009d4c:	3101      	adds	r1, #1
 8009d4e:	f43f adda 	beq.w	8009906 <_strtod_l+0x47e>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	4b8b      	ldr	r3, [pc, #556]	; (8009f84 <_strtod_l+0xafc>)
 8009d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d5a:	401a      	ands	r2, r3
 8009d5c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009d60:	9b05      	ldr	r3, [sp, #20]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d19a      	bne.n	8009c9c <_strtod_l+0x814>
 8009d66:	e5d9      	b.n	800991c <_strtod_l+0x494>
 8009d68:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6c:	e7e8      	b.n	8009d40 <_strtod_l+0x8b8>
 8009d6e:	4613      	mov	r3, r2
 8009d70:	e7e6      	b.n	8009d40 <_strtod_l+0x8b8>
 8009d72:	ea53 0308 	orrs.w	r3, r3, r8
 8009d76:	d081      	beq.n	8009c7c <_strtod_l+0x7f4>
 8009d78:	b1e5      	cbz	r5, 8009db4 <_strtod_l+0x92c>
 8009d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7c:	421d      	tst	r5, r3
 8009d7e:	d0ef      	beq.n	8009d60 <_strtod_l+0x8d8>
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	b1c3      	cbz	r3, 8009dbc <_strtod_l+0x934>
 8009d8a:	f7ff fb5b 	bl	8009444 <sulp>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d96:	f7f6 f9e9 	bl	800016c <__adddf3>
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	e7df      	b.n	8009d60 <_strtod_l+0x8d8>
 8009da0:	4013      	ands	r3, r2
 8009da2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009da6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009daa:	f04f 38ff 	mov.w	r8, #4294967295
 8009dae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009db2:	e7d5      	b.n	8009d60 <_strtod_l+0x8d8>
 8009db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009db6:	ea13 0f08 	tst.w	r3, r8
 8009dba:	e7e0      	b.n	8009d7e <_strtod_l+0x8f6>
 8009dbc:	f7ff fb42 	bl	8009444 <sulp>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dc8:	f7f6 f9ce 	bl	8000168 <__aeabi_dsub>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	4689      	mov	r9, r1
 8009dd4:	f7f6 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0c1      	beq.n	8009d60 <_strtod_l+0x8d8>
 8009ddc:	e608      	b.n	80099f0 <_strtod_l+0x568>
 8009dde:	4658      	mov	r0, fp
 8009de0:	9904      	ldr	r1, [sp, #16]
 8009de2:	f001 fc7f 	bl	800b6e4 <__ratio>
 8009de6:	2200      	movs	r2, #0
 8009de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	f7f6 fdee 	bl	80009d0 <__aeabi_dcmple>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d070      	beq.n	8009eda <_strtod_l+0xa52>
 8009df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d042      	beq.n	8009e84 <_strtod_l+0x9fc>
 8009dfe:	2600      	movs	r6, #0
 8009e00:	4f62      	ldr	r7, [pc, #392]	; (8009f8c <_strtod_l+0xb04>)
 8009e02:	4d62      	ldr	r5, [pc, #392]	; (8009f8c <_strtod_l+0xb04>)
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e0a:	0d1b      	lsrs	r3, r3, #20
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e12:	4b5f      	ldr	r3, [pc, #380]	; (8009f90 <_strtod_l+0xb08>)
 8009e14:	429a      	cmp	r2, r3
 8009e16:	f040 80c3 	bne.w	8009fa0 <_strtod_l+0xb18>
 8009e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009e22:	4649      	mov	r1, r9
 8009e24:	f001 fb88 	bl	800b538 <__ulp>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f7f6 fb52 	bl	80004d8 <__aeabi_dmul>
 8009e34:	4642      	mov	r2, r8
 8009e36:	464b      	mov	r3, r9
 8009e38:	f7f6 f998 	bl	800016c <__adddf3>
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4951      	ldr	r1, [pc, #324]	; (8009f84 <_strtod_l+0xafc>)
 8009e40:	4a54      	ldr	r2, [pc, #336]	; (8009f94 <_strtod_l+0xb0c>)
 8009e42:	4019      	ands	r1, r3
 8009e44:	4291      	cmp	r1, r2
 8009e46:	4680      	mov	r8, r0
 8009e48:	d95d      	bls.n	8009f06 <_strtod_l+0xa7e>
 8009e4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e4c:	4b4e      	ldr	r3, [pc, #312]	; (8009f88 <_strtod_l+0xb00>)
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d103      	bne.n	8009e5a <_strtod_l+0x9d2>
 8009e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e54:	3301      	adds	r3, #1
 8009e56:	f43f ad56 	beq.w	8009906 <_strtod_l+0x47e>
 8009e5a:	f04f 38ff 	mov.w	r8, #4294967295
 8009e5e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009f88 <_strtod_l+0xb00>
 8009e62:	4650      	mov	r0, sl
 8009e64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e66:	f001 f837 	bl	800aed8 <_Bfree>
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	9906      	ldr	r1, [sp, #24]
 8009e6e:	f001 f833 	bl	800aed8 <_Bfree>
 8009e72:	4650      	mov	r0, sl
 8009e74:	9904      	ldr	r1, [sp, #16]
 8009e76:	f001 f82f 	bl	800aed8 <_Bfree>
 8009e7a:	4659      	mov	r1, fp
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	f001 f82b 	bl	800aed8 <_Bfree>
 8009e82:	e627      	b.n	8009ad4 <_strtod_l+0x64c>
 8009e84:	f1b8 0f00 	cmp.w	r8, #0
 8009e88:	d119      	bne.n	8009ebe <_strtod_l+0xa36>
 8009e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e90:	b9e3      	cbnz	r3, 8009ecc <_strtod_l+0xa44>
 8009e92:	2200      	movs	r2, #0
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	4b3c      	ldr	r3, [pc, #240]	; (8009f8c <_strtod_l+0xb04>)
 8009e9a:	f7f6 fd8f 	bl	80009bc <__aeabi_dcmplt>
 8009e9e:	b9c8      	cbnz	r0, 8009ed4 <_strtod_l+0xa4c>
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4b3c      	ldr	r3, [pc, #240]	; (8009f98 <_strtod_l+0xb10>)
 8009ea8:	f7f6 fb16 	bl	80004d8 <__aeabi_dmul>
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009eb4:	9416      	str	r4, [sp, #88]	; 0x58
 8009eb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009eb8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009ebc:	e7a2      	b.n	8009e04 <_strtod_l+0x97c>
 8009ebe:	f1b8 0f01 	cmp.w	r8, #1
 8009ec2:	d103      	bne.n	8009ecc <_strtod_l+0xa44>
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f43f ad92 	beq.w	80099f0 <_strtod_l+0x568>
 8009ecc:	2600      	movs	r6, #0
 8009ece:	2400      	movs	r4, #0
 8009ed0:	4f32      	ldr	r7, [pc, #200]	; (8009f9c <_strtod_l+0xb14>)
 8009ed2:	e796      	b.n	8009e02 <_strtod_l+0x97a>
 8009ed4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ed6:	4d30      	ldr	r5, [pc, #192]	; (8009f98 <_strtod_l+0xb10>)
 8009ed8:	e7ea      	b.n	8009eb0 <_strtod_l+0xa28>
 8009eda:	4b2f      	ldr	r3, [pc, #188]	; (8009f98 <_strtod_l+0xb10>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 faf9 	bl	80004d8 <__aeabi_dmul>
 8009ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	b933      	cbnz	r3, 8009efc <_strtod_l+0xa74>
 8009eee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ef2:	9010      	str	r0, [sp, #64]	; 0x40
 8009ef4:	9311      	str	r3, [sp, #68]	; 0x44
 8009ef6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009efa:	e783      	b.n	8009e04 <_strtod_l+0x97c>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009f04:	e7f7      	b.n	8009ef6 <_strtod_l+0xa6e>
 8009f06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009f0a:	9b05      	ldr	r3, [sp, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1a8      	bne.n	8009e62 <_strtod_l+0x9da>
 8009f10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f16:	0d1b      	lsrs	r3, r3, #20
 8009f18:	051b      	lsls	r3, r3, #20
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d1a1      	bne.n	8009e62 <_strtod_l+0x9da>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f7 f8af 	bl	8001084 <__aeabi_d2lz>
 8009f26:	f7f6 faa9 	bl	800047c <__aeabi_l2d>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f919 	bl	8000168 <__aeabi_dsub>
 8009f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f3c:	ea43 0308 	orr.w	r3, r3, r8
 8009f40:	4313      	orrs	r3, r2
 8009f42:	4604      	mov	r4, r0
 8009f44:	460d      	mov	r5, r1
 8009f46:	d066      	beq.n	800a016 <_strtod_l+0xb8e>
 8009f48:	a309      	add	r3, pc, #36	; (adr r3, 8009f70 <_strtod_l+0xae8>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fd35 	bl	80009bc <__aeabi_dcmplt>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f47f ace2 	bne.w	800991c <_strtod_l+0x494>
 8009f58:	a307      	add	r3, pc, #28	; (adr r3, 8009f78 <_strtod_l+0xaf0>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 fd49 	bl	80009f8 <__aeabi_dcmpgt>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f af7b 	beq.w	8009e62 <_strtod_l+0x9da>
 8009f6c:	e4d6      	b.n	800991c <_strtod_l+0x494>
 8009f6e:	bf00      	nop
 8009f70:	94a03595 	.word	0x94a03595
 8009f74:	3fdfffff 	.word	0x3fdfffff
 8009f78:	35afe535 	.word	0x35afe535
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	000fffff 	.word	0x000fffff
 8009f84:	7ff00000 	.word	0x7ff00000
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	7fe00000 	.word	0x7fe00000
 8009f94:	7c9fffff 	.word	0x7c9fffff
 8009f98:	3fe00000 	.word	0x3fe00000
 8009f9c:	bff00000 	.word	0xbff00000
 8009fa0:	9b05      	ldr	r3, [sp, #20]
 8009fa2:	b313      	cbz	r3, 8009fea <_strtod_l+0xb62>
 8009fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009faa:	d81e      	bhi.n	8009fea <_strtod_l+0xb62>
 8009fac:	a326      	add	r3, pc, #152	; (adr r3, 800a048 <_strtod_l+0xbc0>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fd0b 	bl	80009d0 <__aeabi_dcmple>
 8009fba:	b190      	cbz	r0, 8009fe2 <_strtod_l+0xb5a>
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7f6 fd4c 	bl	8000a5c <__aeabi_d2uiz>
 8009fc4:	2801      	cmp	r0, #1
 8009fc6:	bf38      	it	cc
 8009fc8:	2001      	movcc	r0, #1
 8009fca:	f7f6 fa0b 	bl	80003e4 <__aeabi_ui2d>
 8009fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	b9d3      	cbnz	r3, 800a00c <_strtod_l+0xb84>
 8009fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fda:	9012      	str	r0, [sp, #72]	; 0x48
 8009fdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fde:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fe4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009fe8:	1a9f      	subs	r7, r3, r2
 8009fea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fee:	f001 faa3 	bl	800b538 <__ulp>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 fa6d 	bl	80004d8 <__aeabi_dmul>
 8009ffe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a002:	f7f6 f8b3 	bl	800016c <__adddf3>
 800a006:	4680      	mov	r8, r0
 800a008:	4689      	mov	r9, r1
 800a00a:	e77e      	b.n	8009f0a <_strtod_l+0xa82>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a014:	e7e3      	b.n	8009fde <_strtod_l+0xb56>
 800a016:	a30e      	add	r3, pc, #56	; (adr r3, 800a050 <_strtod_l+0xbc8>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 fcce 	bl	80009bc <__aeabi_dcmplt>
 800a020:	e7a1      	b.n	8009f66 <_strtod_l+0xade>
 800a022:	2300      	movs	r3, #0
 800a024:	930a      	str	r3, [sp, #40]	; 0x28
 800a026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a028:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	f7ff ba71 	b.w	8009512 <_strtod_l+0x8a>
 800a030:	2a65      	cmp	r2, #101	; 0x65
 800a032:	f43f ab63 	beq.w	80096fc <_strtod_l+0x274>
 800a036:	2a45      	cmp	r2, #69	; 0x45
 800a038:	f43f ab60 	beq.w	80096fc <_strtod_l+0x274>
 800a03c:	2301      	movs	r3, #1
 800a03e:	f7ff bb95 	b.w	800976c <_strtod_l+0x2e4>
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
 800a048:	ffc00000 	.word	0xffc00000
 800a04c:	41dfffff 	.word	0x41dfffff
 800a050:	94a03595 	.word	0x94a03595
 800a054:	3fcfffff 	.word	0x3fcfffff

0800a058 <strtod>:
 800a058:	460a      	mov	r2, r1
 800a05a:	4601      	mov	r1, r0
 800a05c:	4802      	ldr	r0, [pc, #8]	; (800a068 <strtod+0x10>)
 800a05e:	4b03      	ldr	r3, [pc, #12]	; (800a06c <strtod+0x14>)
 800a060:	6800      	ldr	r0, [r0, #0]
 800a062:	f7ff ba11 	b.w	8009488 <_strtod_l>
 800a066:	bf00      	nop
 800a068:	20000040 	.word	0x20000040
 800a06c:	200000a8 	.word	0x200000a8

0800a070 <_strtol_l.constprop.0>:
 800a070:	2b01      	cmp	r3, #1
 800a072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a076:	4680      	mov	r8, r0
 800a078:	d001      	beq.n	800a07e <_strtol_l.constprop.0+0xe>
 800a07a:	2b24      	cmp	r3, #36	; 0x24
 800a07c:	d906      	bls.n	800a08c <_strtol_l.constprop.0+0x1c>
 800a07e:	f7ff f8bb 	bl	80091f8 <__errno>
 800a082:	2316      	movs	r3, #22
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	2000      	movs	r0, #0
 800a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08c:	460d      	mov	r5, r1
 800a08e:	4f35      	ldr	r7, [pc, #212]	; (800a164 <_strtol_l.constprop.0+0xf4>)
 800a090:	4628      	mov	r0, r5
 800a092:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a096:	5de6      	ldrb	r6, [r4, r7]
 800a098:	f016 0608 	ands.w	r6, r6, #8
 800a09c:	d1f8      	bne.n	800a090 <_strtol_l.constprop.0+0x20>
 800a09e:	2c2d      	cmp	r4, #45	; 0x2d
 800a0a0:	d12f      	bne.n	800a102 <_strtol_l.constprop.0+0x92>
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	782c      	ldrb	r4, [r5, #0]
 800a0a6:	1c85      	adds	r5, r0, #2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d057      	beq.n	800a15c <_strtol_l.constprop.0+0xec>
 800a0ac:	2b10      	cmp	r3, #16
 800a0ae:	d109      	bne.n	800a0c4 <_strtol_l.constprop.0+0x54>
 800a0b0:	2c30      	cmp	r4, #48	; 0x30
 800a0b2:	d107      	bne.n	800a0c4 <_strtol_l.constprop.0+0x54>
 800a0b4:	7828      	ldrb	r0, [r5, #0]
 800a0b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a0ba:	2858      	cmp	r0, #88	; 0x58
 800a0bc:	d149      	bne.n	800a152 <_strtol_l.constprop.0+0xe2>
 800a0be:	2310      	movs	r3, #16
 800a0c0:	786c      	ldrb	r4, [r5, #1]
 800a0c2:	3502      	adds	r5, #2
 800a0c4:	2700      	movs	r7, #0
 800a0c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a0ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a0ce:	fbbe f9f3 	udiv	r9, lr, r3
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	fb03 ea19 	mls	sl, r3, r9, lr
 800a0d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a0dc:	f1bc 0f09 	cmp.w	ip, #9
 800a0e0:	d814      	bhi.n	800a10c <_strtol_l.constprop.0+0x9c>
 800a0e2:	4664      	mov	r4, ip
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	dd22      	ble.n	800a12e <_strtol_l.constprop.0+0xbe>
 800a0e8:	2f00      	cmp	r7, #0
 800a0ea:	db1d      	blt.n	800a128 <_strtol_l.constprop.0+0xb8>
 800a0ec:	4581      	cmp	r9, r0
 800a0ee:	d31b      	bcc.n	800a128 <_strtol_l.constprop.0+0xb8>
 800a0f0:	d101      	bne.n	800a0f6 <_strtol_l.constprop.0+0x86>
 800a0f2:	45a2      	cmp	sl, r4
 800a0f4:	db18      	blt.n	800a128 <_strtol_l.constprop.0+0xb8>
 800a0f6:	2701      	movs	r7, #1
 800a0f8:	fb00 4003 	mla	r0, r0, r3, r4
 800a0fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a100:	e7ea      	b.n	800a0d8 <_strtol_l.constprop.0+0x68>
 800a102:	2c2b      	cmp	r4, #43	; 0x2b
 800a104:	bf04      	itt	eq
 800a106:	782c      	ldrbeq	r4, [r5, #0]
 800a108:	1c85      	addeq	r5, r0, #2
 800a10a:	e7cd      	b.n	800a0a8 <_strtol_l.constprop.0+0x38>
 800a10c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a110:	f1bc 0f19 	cmp.w	ip, #25
 800a114:	d801      	bhi.n	800a11a <_strtol_l.constprop.0+0xaa>
 800a116:	3c37      	subs	r4, #55	; 0x37
 800a118:	e7e4      	b.n	800a0e4 <_strtol_l.constprop.0+0x74>
 800a11a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a11e:	f1bc 0f19 	cmp.w	ip, #25
 800a122:	d804      	bhi.n	800a12e <_strtol_l.constprop.0+0xbe>
 800a124:	3c57      	subs	r4, #87	; 0x57
 800a126:	e7dd      	b.n	800a0e4 <_strtol_l.constprop.0+0x74>
 800a128:	f04f 37ff 	mov.w	r7, #4294967295
 800a12c:	e7e6      	b.n	800a0fc <_strtol_l.constprop.0+0x8c>
 800a12e:	2f00      	cmp	r7, #0
 800a130:	da07      	bge.n	800a142 <_strtol_l.constprop.0+0xd2>
 800a132:	2322      	movs	r3, #34	; 0x22
 800a134:	4670      	mov	r0, lr
 800a136:	f8c8 3000 	str.w	r3, [r8]
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d0a4      	beq.n	800a088 <_strtol_l.constprop.0+0x18>
 800a13e:	1e69      	subs	r1, r5, #1
 800a140:	e005      	b.n	800a14e <_strtol_l.constprop.0+0xde>
 800a142:	b106      	cbz	r6, 800a146 <_strtol_l.constprop.0+0xd6>
 800a144:	4240      	negs	r0, r0
 800a146:	2a00      	cmp	r2, #0
 800a148:	d09e      	beq.n	800a088 <_strtol_l.constprop.0+0x18>
 800a14a:	2f00      	cmp	r7, #0
 800a14c:	d1f7      	bne.n	800a13e <_strtol_l.constprop.0+0xce>
 800a14e:	6011      	str	r1, [r2, #0]
 800a150:	e79a      	b.n	800a088 <_strtol_l.constprop.0+0x18>
 800a152:	2430      	movs	r4, #48	; 0x30
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1b5      	bne.n	800a0c4 <_strtol_l.constprop.0+0x54>
 800a158:	2308      	movs	r3, #8
 800a15a:	e7b3      	b.n	800a0c4 <_strtol_l.constprop.0+0x54>
 800a15c:	2c30      	cmp	r4, #48	; 0x30
 800a15e:	d0a9      	beq.n	800a0b4 <_strtol_l.constprop.0+0x44>
 800a160:	230a      	movs	r3, #10
 800a162:	e7af      	b.n	800a0c4 <_strtol_l.constprop.0+0x54>
 800a164:	0800c139 	.word	0x0800c139

0800a168 <strtol>:
 800a168:	4613      	mov	r3, r2
 800a16a:	460a      	mov	r2, r1
 800a16c:	4601      	mov	r1, r0
 800a16e:	4802      	ldr	r0, [pc, #8]	; (800a178 <strtol+0x10>)
 800a170:	6800      	ldr	r0, [r0, #0]
 800a172:	f7ff bf7d 	b.w	800a070 <_strtol_l.constprop.0>
 800a176:	bf00      	nop
 800a178:	20000040 	.word	0x20000040

0800a17c <__swbuf_r>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	460e      	mov	r6, r1
 800a180:	4614      	mov	r4, r2
 800a182:	4605      	mov	r5, r0
 800a184:	b118      	cbz	r0, 800a18e <__swbuf_r+0x12>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <__swbuf_r+0x12>
 800a18a:	f000 f9cd 	bl	800a528 <__sinit>
 800a18e:	4b21      	ldr	r3, [pc, #132]	; (800a214 <__swbuf_r+0x98>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d12b      	bne.n	800a1ec <__swbuf_r+0x70>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	69a3      	ldr	r3, [r4, #24]
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	071a      	lsls	r2, r3, #28
 800a19e:	d52f      	bpl.n	800a200 <__swbuf_r+0x84>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b36b      	cbz	r3, 800a200 <__swbuf_r+0x84>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	b2f6      	uxtb	r6, r6
 800a1aa:	1ac0      	subs	r0, r0, r3
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	4637      	mov	r7, r6
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	dc04      	bgt.n	800a1be <__swbuf_r+0x42>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 f922 	bl	800a400 <_fflush_r>
 800a1bc:	bb30      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	60a3      	str	r3, [r4, #8]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	701e      	strb	r6, [r3, #0]
 800a1ce:	6963      	ldr	r3, [r4, #20]
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	d004      	beq.n	800a1de <__swbuf_r+0x62>
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	07db      	lsls	r3, r3, #31
 800a1d8:	d506      	bpl.n	800a1e8 <__swbuf_r+0x6c>
 800a1da:	2e0a      	cmp	r6, #10
 800a1dc:	d104      	bne.n	800a1e8 <__swbuf_r+0x6c>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f90d 	bl	800a400 <_fflush_r>
 800a1e6:	b988      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <__swbuf_r+0x9c>)
 800a1ee:	429c      	cmp	r4, r3
 800a1f0:	d101      	bne.n	800a1f6 <__swbuf_r+0x7a>
 800a1f2:	68ac      	ldr	r4, [r5, #8]
 800a1f4:	e7cf      	b.n	800a196 <__swbuf_r+0x1a>
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <__swbuf_r+0xa0>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	bf08      	it	eq
 800a1fc:	68ec      	ldreq	r4, [r5, #12]
 800a1fe:	e7ca      	b.n	800a196 <__swbuf_r+0x1a>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f80c 	bl	800a220 <__swsetup_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d0cb      	beq.n	800a1a4 <__swbuf_r+0x28>
 800a20c:	f04f 37ff 	mov.w	r7, #4294967295
 800a210:	e7ea      	b.n	800a1e8 <__swbuf_r+0x6c>
 800a212:	bf00      	nop
 800a214:	0800c25c 	.word	0x0800c25c
 800a218:	0800c27c 	.word	0x0800c27c
 800a21c:	0800c23c 	.word	0x0800c23c

0800a220 <__swsetup_r>:
 800a220:	4b32      	ldr	r3, [pc, #200]	; (800a2ec <__swsetup_r+0xcc>)
 800a222:	b570      	push	{r4, r5, r6, lr}
 800a224:	681d      	ldr	r5, [r3, #0]
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	b125      	cbz	r5, 800a236 <__swsetup_r+0x16>
 800a22c:	69ab      	ldr	r3, [r5, #24]
 800a22e:	b913      	cbnz	r3, 800a236 <__swsetup_r+0x16>
 800a230:	4628      	mov	r0, r5
 800a232:	f000 f979 	bl	800a528 <__sinit>
 800a236:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <__swsetup_r+0xd0>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	d10f      	bne.n	800a25c <__swsetup_r+0x3c>
 800a23c:	686c      	ldr	r4, [r5, #4]
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a244:	0719      	lsls	r1, r3, #28
 800a246:	d42c      	bmi.n	800a2a2 <__swsetup_r+0x82>
 800a248:	06dd      	lsls	r5, r3, #27
 800a24a:	d411      	bmi.n	800a270 <__swsetup_r+0x50>
 800a24c:	2309      	movs	r3, #9
 800a24e:	6033      	str	r3, [r6, #0]
 800a250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	e03e      	b.n	800a2da <__swsetup_r+0xba>
 800a25c:	4b25      	ldr	r3, [pc, #148]	; (800a2f4 <__swsetup_r+0xd4>)
 800a25e:	429c      	cmp	r4, r3
 800a260:	d101      	bne.n	800a266 <__swsetup_r+0x46>
 800a262:	68ac      	ldr	r4, [r5, #8]
 800a264:	e7eb      	b.n	800a23e <__swsetup_r+0x1e>
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <__swsetup_r+0xd8>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	bf08      	it	eq
 800a26c:	68ec      	ldreq	r4, [r5, #12]
 800a26e:	e7e6      	b.n	800a23e <__swsetup_r+0x1e>
 800a270:	0758      	lsls	r0, r3, #29
 800a272:	d512      	bpl.n	800a29a <__swsetup_r+0x7a>
 800a274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a276:	b141      	cbz	r1, 800a28a <__swsetup_r+0x6a>
 800a278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a27c:	4299      	cmp	r1, r3
 800a27e:	d002      	beq.n	800a286 <__swsetup_r+0x66>
 800a280:	4630      	mov	r0, r6
 800a282:	f7fe fff3 	bl	800926c <_free_r>
 800a286:	2300      	movs	r3, #0
 800a288:	6363      	str	r3, [r4, #52]	; 0x34
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	2300      	movs	r3, #0
 800a294:	6063      	str	r3, [r4, #4]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f043 0308 	orr.w	r3, r3, #8
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	b94b      	cbnz	r3, 800a2ba <__swsetup_r+0x9a>
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b0:	d003      	beq.n	800a2ba <__swsetup_r+0x9a>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f000 fd63 	bl	800ad80 <__smakebuf_r>
 800a2ba:	89a0      	ldrh	r0, [r4, #12]
 800a2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2c0:	f010 0301 	ands.w	r3, r0, #1
 800a2c4:	d00a      	beq.n	800a2dc <__swsetup_r+0xbc>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6963      	ldr	r3, [r4, #20]
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	61a3      	str	r3, [r4, #24]
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b943      	cbnz	r3, 800a2e6 <__swsetup_r+0xc6>
 800a2d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2d8:	d1ba      	bne.n	800a250 <__swsetup_r+0x30>
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	0781      	lsls	r1, r0, #30
 800a2de:	bf58      	it	pl
 800a2e0:	6963      	ldrpl	r3, [r4, #20]
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	e7f4      	b.n	800a2d0 <__swsetup_r+0xb0>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e7f7      	b.n	800a2da <__swsetup_r+0xba>
 800a2ea:	bf00      	nop
 800a2ec:	20000040 	.word	0x20000040
 800a2f0:	0800c25c 	.word	0x0800c25c
 800a2f4:	0800c27c 	.word	0x0800c27c
 800a2f8:	0800c23c 	.word	0x0800c23c

0800a2fc <__sflush_r>:
 800a2fc:	898a      	ldrh	r2, [r1, #12]
 800a2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a300:	4605      	mov	r5, r0
 800a302:	0710      	lsls	r0, r2, #28
 800a304:	460c      	mov	r4, r1
 800a306:	d457      	bmi.n	800a3b8 <__sflush_r+0xbc>
 800a308:	684b      	ldr	r3, [r1, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc04      	bgt.n	800a318 <__sflush_r+0x1c>
 800a30e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc01      	bgt.n	800a318 <__sflush_r+0x1c>
 800a314:	2000      	movs	r0, #0
 800a316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d0fa      	beq.n	800a314 <__sflush_r+0x18>
 800a31e:	2300      	movs	r3, #0
 800a320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a324:	682f      	ldr	r7, [r5, #0]
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	d032      	beq.n	800a390 <__sflush_r+0x94>
 800a32a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	075a      	lsls	r2, r3, #29
 800a330:	d505      	bpl.n	800a33e <__sflush_r+0x42>
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	1ac0      	subs	r0, r0, r3
 800a336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a338:	b10b      	cbz	r3, 800a33e <__sflush_r+0x42>
 800a33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a33c:	1ac0      	subs	r0, r0, r3
 800a33e:	2300      	movs	r3, #0
 800a340:	4602      	mov	r2, r0
 800a342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a344:	4628      	mov	r0, r5
 800a346:	6a21      	ldr	r1, [r4, #32]
 800a348:	47b0      	blx	r6
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	d106      	bne.n	800a35e <__sflush_r+0x62>
 800a350:	6829      	ldr	r1, [r5, #0]
 800a352:	291d      	cmp	r1, #29
 800a354:	d82c      	bhi.n	800a3b0 <__sflush_r+0xb4>
 800a356:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <__sflush_r+0x100>)
 800a358:	40ca      	lsrs	r2, r1
 800a35a:	07d6      	lsls	r6, r2, #31
 800a35c:	d528      	bpl.n	800a3b0 <__sflush_r+0xb4>
 800a35e:	2200      	movs	r2, #0
 800a360:	6062      	str	r2, [r4, #4]
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	04d9      	lsls	r1, r3, #19
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	d504      	bpl.n	800a374 <__sflush_r+0x78>
 800a36a:	1c42      	adds	r2, r0, #1
 800a36c:	d101      	bne.n	800a372 <__sflush_r+0x76>
 800a36e:	682b      	ldr	r3, [r5, #0]
 800a370:	b903      	cbnz	r3, 800a374 <__sflush_r+0x78>
 800a372:	6560      	str	r0, [r4, #84]	; 0x54
 800a374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a376:	602f      	str	r7, [r5, #0]
 800a378:	2900      	cmp	r1, #0
 800a37a:	d0cb      	beq.n	800a314 <__sflush_r+0x18>
 800a37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a380:	4299      	cmp	r1, r3
 800a382:	d002      	beq.n	800a38a <__sflush_r+0x8e>
 800a384:	4628      	mov	r0, r5
 800a386:	f7fe ff71 	bl	800926c <_free_r>
 800a38a:	2000      	movs	r0, #0
 800a38c:	6360      	str	r0, [r4, #52]	; 0x34
 800a38e:	e7c2      	b.n	800a316 <__sflush_r+0x1a>
 800a390:	6a21      	ldr	r1, [r4, #32]
 800a392:	2301      	movs	r3, #1
 800a394:	4628      	mov	r0, r5
 800a396:	47b0      	blx	r6
 800a398:	1c41      	adds	r1, r0, #1
 800a39a:	d1c7      	bne.n	800a32c <__sflush_r+0x30>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0c4      	beq.n	800a32c <__sflush_r+0x30>
 800a3a2:	2b1d      	cmp	r3, #29
 800a3a4:	d001      	beq.n	800a3aa <__sflush_r+0xae>
 800a3a6:	2b16      	cmp	r3, #22
 800a3a8:	d101      	bne.n	800a3ae <__sflush_r+0xb2>
 800a3aa:	602f      	str	r7, [r5, #0]
 800a3ac:	e7b2      	b.n	800a314 <__sflush_r+0x18>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	e7ae      	b.n	800a316 <__sflush_r+0x1a>
 800a3b8:	690f      	ldr	r7, [r1, #16]
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	d0aa      	beq.n	800a314 <__sflush_r+0x18>
 800a3be:	0793      	lsls	r3, r2, #30
 800a3c0:	bf18      	it	ne
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	680e      	ldr	r6, [r1, #0]
 800a3c6:	bf08      	it	eq
 800a3c8:	694b      	ldreq	r3, [r1, #20]
 800a3ca:	1bf6      	subs	r6, r6, r7
 800a3cc:	600f      	str	r7, [r1, #0]
 800a3ce:	608b      	str	r3, [r1, #8]
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	dd9f      	ble.n	800a314 <__sflush_r+0x18>
 800a3d4:	4633      	mov	r3, r6
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	4628      	mov	r0, r5
 800a3da:	6a21      	ldr	r1, [r4, #32]
 800a3dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a3e0:	47e0      	blx	ip
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	dc06      	bgt.n	800a3f4 <__sflush_r+0xf8>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e790      	b.n	800a316 <__sflush_r+0x1a>
 800a3f4:	4407      	add	r7, r0
 800a3f6:	1a36      	subs	r6, r6, r0
 800a3f8:	e7ea      	b.n	800a3d0 <__sflush_r+0xd4>
 800a3fa:	bf00      	nop
 800a3fc:	20400001 	.word	0x20400001

0800a400 <_fflush_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	690b      	ldr	r3, [r1, #16]
 800a404:	4605      	mov	r5, r0
 800a406:	460c      	mov	r4, r1
 800a408:	b913      	cbnz	r3, 800a410 <_fflush_r+0x10>
 800a40a:	2500      	movs	r5, #0
 800a40c:	4628      	mov	r0, r5
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	b118      	cbz	r0, 800a41a <_fflush_r+0x1a>
 800a412:	6983      	ldr	r3, [r0, #24]
 800a414:	b90b      	cbnz	r3, 800a41a <_fflush_r+0x1a>
 800a416:	f000 f887 	bl	800a528 <__sinit>
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <_fflush_r+0x6c>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d11b      	bne.n	800a458 <_fflush_r+0x58>
 800a420:	686c      	ldr	r4, [r5, #4]
 800a422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0ef      	beq.n	800a40a <_fflush_r+0xa>
 800a42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a42c:	07d0      	lsls	r0, r2, #31
 800a42e:	d404      	bmi.n	800a43a <_fflush_r+0x3a>
 800a430:	0599      	lsls	r1, r3, #22
 800a432:	d402      	bmi.n	800a43a <_fflush_r+0x3a>
 800a434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a436:	f000 fc7c 	bl	800ad32 <__retarget_lock_acquire_recursive>
 800a43a:	4628      	mov	r0, r5
 800a43c:	4621      	mov	r1, r4
 800a43e:	f7ff ff5d 	bl	800a2fc <__sflush_r>
 800a442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a444:	4605      	mov	r5, r0
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d4e0      	bmi.n	800a40c <_fflush_r+0xc>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	059b      	lsls	r3, r3, #22
 800a44e:	d4dd      	bmi.n	800a40c <_fflush_r+0xc>
 800a450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a452:	f000 fc6f 	bl	800ad34 <__retarget_lock_release_recursive>
 800a456:	e7d9      	b.n	800a40c <_fflush_r+0xc>
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <_fflush_r+0x70>)
 800a45a:	429c      	cmp	r4, r3
 800a45c:	d101      	bne.n	800a462 <_fflush_r+0x62>
 800a45e:	68ac      	ldr	r4, [r5, #8]
 800a460:	e7df      	b.n	800a422 <_fflush_r+0x22>
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <_fflush_r+0x74>)
 800a464:	429c      	cmp	r4, r3
 800a466:	bf08      	it	eq
 800a468:	68ec      	ldreq	r4, [r5, #12]
 800a46a:	e7da      	b.n	800a422 <_fflush_r+0x22>
 800a46c:	0800c25c 	.word	0x0800c25c
 800a470:	0800c27c 	.word	0x0800c27c
 800a474:	0800c23c 	.word	0x0800c23c

0800a478 <std>:
 800a478:	2300      	movs	r3, #0
 800a47a:	b510      	push	{r4, lr}
 800a47c:	4604      	mov	r4, r0
 800a47e:	e9c0 3300 	strd	r3, r3, [r0]
 800a482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a486:	6083      	str	r3, [r0, #8]
 800a488:	8181      	strh	r1, [r0, #12]
 800a48a:	6643      	str	r3, [r0, #100]	; 0x64
 800a48c:	81c2      	strh	r2, [r0, #14]
 800a48e:	6183      	str	r3, [r0, #24]
 800a490:	4619      	mov	r1, r3
 800a492:	2208      	movs	r2, #8
 800a494:	305c      	adds	r0, #92	; 0x5c
 800a496:	f7fe fee1 	bl	800925c <memset>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <std+0x38>)
 800a49c:	6224      	str	r4, [r4, #32]
 800a49e:	6263      	str	r3, [r4, #36]	; 0x24
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <std+0x3c>)
 800a4a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <std+0x40>)
 800a4a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <std+0x44>)
 800a4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800bdd9 	.word	0x0800bdd9
 800a4b4:	0800bdfb 	.word	0x0800bdfb
 800a4b8:	0800be33 	.word	0x0800be33
 800a4bc:	0800be57 	.word	0x0800be57

0800a4c0 <_cleanup_r>:
 800a4c0:	4901      	ldr	r1, [pc, #4]	; (800a4c8 <_cleanup_r+0x8>)
 800a4c2:	f000 b8af 	b.w	800a624 <_fwalk_reent>
 800a4c6:	bf00      	nop
 800a4c8:	0800a401 	.word	0x0800a401

0800a4cc <__sfmoreglue>:
 800a4cc:	2268      	movs	r2, #104	; 0x68
 800a4ce:	b570      	push	{r4, r5, r6, lr}
 800a4d0:	1e4d      	subs	r5, r1, #1
 800a4d2:	4355      	muls	r5, r2
 800a4d4:	460e      	mov	r6, r1
 800a4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4da:	f7fe ff2f 	bl	800933c <_malloc_r>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	b140      	cbz	r0, 800a4f4 <__sfmoreglue+0x28>
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4e8:	300c      	adds	r0, #12
 800a4ea:	60a0      	str	r0, [r4, #8]
 800a4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4f0:	f7fe feb4 	bl	800925c <memset>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}

0800a4f8 <__sfp_lock_acquire>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__sfp_lock_acquire+0x8>)
 800a4fa:	f000 bc1a 	b.w	800ad32 <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	20000a39 	.word	0x20000a39

0800a504 <__sfp_lock_release>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__sfp_lock_release+0x8>)
 800a506:	f000 bc15 	b.w	800ad34 <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	20000a39 	.word	0x20000a39

0800a510 <__sinit_lock_acquire>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__sinit_lock_acquire+0x8>)
 800a512:	f000 bc0e 	b.w	800ad32 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	20000a3a 	.word	0x20000a3a

0800a51c <__sinit_lock_release>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__sinit_lock_release+0x8>)
 800a51e:	f000 bc09 	b.w	800ad34 <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	20000a3a 	.word	0x20000a3a

0800a528 <__sinit>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	4604      	mov	r4, r0
 800a52c:	f7ff fff0 	bl	800a510 <__sinit_lock_acquire>
 800a530:	69a3      	ldr	r3, [r4, #24]
 800a532:	b11b      	cbz	r3, 800a53c <__sinit+0x14>
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f7ff bff0 	b.w	800a51c <__sinit_lock_release>
 800a53c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a540:	6523      	str	r3, [r4, #80]	; 0x50
 800a542:	4b13      	ldr	r3, [pc, #76]	; (800a590 <__sinit+0x68>)
 800a544:	4a13      	ldr	r2, [pc, #76]	; (800a594 <__sinit+0x6c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	62a2      	str	r2, [r4, #40]	; 0x28
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	bf08      	it	eq
 800a54e:	2301      	moveq	r3, #1
 800a550:	4620      	mov	r0, r4
 800a552:	bf08      	it	eq
 800a554:	61a3      	streq	r3, [r4, #24]
 800a556:	f000 f81f 	bl	800a598 <__sfp>
 800a55a:	6060      	str	r0, [r4, #4]
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 f81b 	bl	800a598 <__sfp>
 800a562:	60a0      	str	r0, [r4, #8]
 800a564:	4620      	mov	r0, r4
 800a566:	f000 f817 	bl	800a598 <__sfp>
 800a56a:	2200      	movs	r2, #0
 800a56c:	2104      	movs	r1, #4
 800a56e:	60e0      	str	r0, [r4, #12]
 800a570:	6860      	ldr	r0, [r4, #4]
 800a572:	f7ff ff81 	bl	800a478 <std>
 800a576:	2201      	movs	r2, #1
 800a578:	2109      	movs	r1, #9
 800a57a:	68a0      	ldr	r0, [r4, #8]
 800a57c:	f7ff ff7c 	bl	800a478 <std>
 800a580:	2202      	movs	r2, #2
 800a582:	2112      	movs	r1, #18
 800a584:	68e0      	ldr	r0, [r4, #12]
 800a586:	f7ff ff77 	bl	800a478 <std>
 800a58a:	2301      	movs	r3, #1
 800a58c:	61a3      	str	r3, [r4, #24]
 800a58e:	e7d1      	b.n	800a534 <__sinit+0xc>
 800a590:	0800c0d4 	.word	0x0800c0d4
 800a594:	0800a4c1 	.word	0x0800a4c1

0800a598 <__sfp>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	4607      	mov	r7, r0
 800a59c:	f7ff ffac 	bl	800a4f8 <__sfp_lock_acquire>
 800a5a0:	4b1e      	ldr	r3, [pc, #120]	; (800a61c <__sfp+0x84>)
 800a5a2:	681e      	ldr	r6, [r3, #0]
 800a5a4:	69b3      	ldr	r3, [r6, #24]
 800a5a6:	b913      	cbnz	r3, 800a5ae <__sfp+0x16>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7ff ffbd 	bl	800a528 <__sinit>
 800a5ae:	3648      	adds	r6, #72	; 0x48
 800a5b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	d503      	bpl.n	800a5c0 <__sfp+0x28>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	b30b      	cbz	r3, 800a600 <__sfp+0x68>
 800a5bc:	6836      	ldr	r6, [r6, #0]
 800a5be:	e7f7      	b.n	800a5b0 <__sfp+0x18>
 800a5c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5c4:	b9d5      	cbnz	r5, 800a5fc <__sfp+0x64>
 800a5c6:	4b16      	ldr	r3, [pc, #88]	; (800a620 <__sfp+0x88>)
 800a5c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5cc:	60e3      	str	r3, [r4, #12]
 800a5ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a5d0:	f000 fbae 	bl	800ad30 <__retarget_lock_init_recursive>
 800a5d4:	f7ff ff96 	bl	800a504 <__sfp_lock_release>
 800a5d8:	2208      	movs	r2, #8
 800a5da:	4629      	mov	r1, r5
 800a5dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5e4:	6025      	str	r5, [r4, #0]
 800a5e6:	61a5      	str	r5, [r4, #24]
 800a5e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5ec:	f7fe fe36 	bl	800925c <memset>
 800a5f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fc:	3468      	adds	r4, #104	; 0x68
 800a5fe:	e7d9      	b.n	800a5b4 <__sfp+0x1c>
 800a600:	2104      	movs	r1, #4
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff ff62 	bl	800a4cc <__sfmoreglue>
 800a608:	4604      	mov	r4, r0
 800a60a:	6030      	str	r0, [r6, #0]
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1d5      	bne.n	800a5bc <__sfp+0x24>
 800a610:	f7ff ff78 	bl	800a504 <__sfp_lock_release>
 800a614:	230c      	movs	r3, #12
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	e7ee      	b.n	800a5f8 <__sfp+0x60>
 800a61a:	bf00      	nop
 800a61c:	0800c0d4 	.word	0x0800c0d4
 800a620:	ffff0001 	.word	0xffff0001

0800a624 <_fwalk_reent>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	4606      	mov	r6, r0
 800a62a:	4688      	mov	r8, r1
 800a62c:	2700      	movs	r7, #0
 800a62e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a636:	f1b9 0901 	subs.w	r9, r9, #1
 800a63a:	d505      	bpl.n	800a648 <_fwalk_reent+0x24>
 800a63c:	6824      	ldr	r4, [r4, #0]
 800a63e:	2c00      	cmp	r4, #0
 800a640:	d1f7      	bne.n	800a632 <_fwalk_reent+0xe>
 800a642:	4638      	mov	r0, r7
 800a644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a648:	89ab      	ldrh	r3, [r5, #12]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d907      	bls.n	800a65e <_fwalk_reent+0x3a>
 800a64e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a652:	3301      	adds	r3, #1
 800a654:	d003      	beq.n	800a65e <_fwalk_reent+0x3a>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	47c0      	blx	r8
 800a65c:	4307      	orrs	r7, r0
 800a65e:	3568      	adds	r5, #104	; 0x68
 800a660:	e7e9      	b.n	800a636 <_fwalk_reent+0x12>

0800a662 <rshift>:
 800a662:	6903      	ldr	r3, [r0, #16]
 800a664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a668:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a66c:	f100 0414 	add.w	r4, r0, #20
 800a670:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a674:	dd46      	ble.n	800a704 <rshift+0xa2>
 800a676:	f011 011f 	ands.w	r1, r1, #31
 800a67a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a67e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a682:	d10c      	bne.n	800a69e <rshift+0x3c>
 800a684:	4629      	mov	r1, r5
 800a686:	f100 0710 	add.w	r7, r0, #16
 800a68a:	42b1      	cmp	r1, r6
 800a68c:	d335      	bcc.n	800a6fa <rshift+0x98>
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	1eea      	subs	r2, r5, #3
 800a694:	4296      	cmp	r6, r2
 800a696:	bf38      	it	cc
 800a698:	2300      	movcc	r3, #0
 800a69a:	4423      	add	r3, r4
 800a69c:	e015      	b.n	800a6ca <rshift+0x68>
 800a69e:	46a1      	mov	r9, r4
 800a6a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6a4:	f1c1 0820 	rsb	r8, r1, #32
 800a6a8:	40cf      	lsrs	r7, r1
 800a6aa:	f105 0e04 	add.w	lr, r5, #4
 800a6ae:	4576      	cmp	r6, lr
 800a6b0:	46f4      	mov	ip, lr
 800a6b2:	d816      	bhi.n	800a6e2 <rshift+0x80>
 800a6b4:	1a9a      	subs	r2, r3, r2
 800a6b6:	0092      	lsls	r2, r2, #2
 800a6b8:	3a04      	subs	r2, #4
 800a6ba:	3501      	adds	r5, #1
 800a6bc:	42ae      	cmp	r6, r5
 800a6be:	bf38      	it	cc
 800a6c0:	2200      	movcc	r2, #0
 800a6c2:	18a3      	adds	r3, r4, r2
 800a6c4:	50a7      	str	r7, [r4, r2]
 800a6c6:	b107      	cbz	r7, 800a6ca <rshift+0x68>
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	eba3 0204 	sub.w	r2, r3, r4
 800a6d0:	bf08      	it	eq
 800a6d2:	2300      	moveq	r3, #0
 800a6d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6d8:	6102      	str	r2, [r0, #16]
 800a6da:	bf08      	it	eq
 800a6dc:	6143      	streq	r3, [r0, #20]
 800a6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6e2:	f8dc c000 	ldr.w	ip, [ip]
 800a6e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6ea:	ea4c 0707 	orr.w	r7, ip, r7
 800a6ee:	f849 7b04 	str.w	r7, [r9], #4
 800a6f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6f6:	40cf      	lsrs	r7, r1
 800a6f8:	e7d9      	b.n	800a6ae <rshift+0x4c>
 800a6fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800a702:	e7c2      	b.n	800a68a <rshift+0x28>
 800a704:	4623      	mov	r3, r4
 800a706:	e7e0      	b.n	800a6ca <rshift+0x68>

0800a708 <__hexdig_fun>:
 800a708:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a70c:	2b09      	cmp	r3, #9
 800a70e:	d802      	bhi.n	800a716 <__hexdig_fun+0xe>
 800a710:	3820      	subs	r0, #32
 800a712:	b2c0      	uxtb	r0, r0
 800a714:	4770      	bx	lr
 800a716:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d801      	bhi.n	800a722 <__hexdig_fun+0x1a>
 800a71e:	3847      	subs	r0, #71	; 0x47
 800a720:	e7f7      	b.n	800a712 <__hexdig_fun+0xa>
 800a722:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a726:	2b05      	cmp	r3, #5
 800a728:	d801      	bhi.n	800a72e <__hexdig_fun+0x26>
 800a72a:	3827      	subs	r0, #39	; 0x27
 800a72c:	e7f1      	b.n	800a712 <__hexdig_fun+0xa>
 800a72e:	2000      	movs	r0, #0
 800a730:	4770      	bx	lr
	...

0800a734 <__gethex>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	b08b      	sub	sp, #44	; 0x2c
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	4bb2      	ldr	r3, [pc, #712]	; (800aa08 <__gethex+0x2d4>)
 800a73e:	9002      	str	r0, [sp, #8]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	468b      	mov	fp, r1
 800a744:	4618      	mov	r0, r3
 800a746:	4690      	mov	r8, r2
 800a748:	9303      	str	r3, [sp, #12]
 800a74a:	f7f5 fd01 	bl	8000150 <strlen>
 800a74e:	4682      	mov	sl, r0
 800a750:	9b03      	ldr	r3, [sp, #12]
 800a752:	f8db 2000 	ldr.w	r2, [fp]
 800a756:	4403      	add	r3, r0
 800a758:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	1c93      	adds	r3, r2, #2
 800a760:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a764:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a768:	32fe      	adds	r2, #254	; 0xfe
 800a76a:	18d1      	adds	r1, r2, r3
 800a76c:	461f      	mov	r7, r3
 800a76e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a772:	9101      	str	r1, [sp, #4]
 800a774:	2830      	cmp	r0, #48	; 0x30
 800a776:	d0f8      	beq.n	800a76a <__gethex+0x36>
 800a778:	f7ff ffc6 	bl	800a708 <__hexdig_fun>
 800a77c:	4604      	mov	r4, r0
 800a77e:	2800      	cmp	r0, #0
 800a780:	d13a      	bne.n	800a7f8 <__gethex+0xc4>
 800a782:	4652      	mov	r2, sl
 800a784:	4638      	mov	r0, r7
 800a786:	9903      	ldr	r1, [sp, #12]
 800a788:	f001 fb69 	bl	800be5e <strncmp>
 800a78c:	4605      	mov	r5, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	d166      	bne.n	800a860 <__gethex+0x12c>
 800a792:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a796:	eb07 060a 	add.w	r6, r7, sl
 800a79a:	f7ff ffb5 	bl	800a708 <__hexdig_fun>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d060      	beq.n	800a864 <__gethex+0x130>
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	7818      	ldrb	r0, [r3, #0]
 800a7a6:	461f      	mov	r7, r3
 800a7a8:	2830      	cmp	r0, #48	; 0x30
 800a7aa:	f103 0301 	add.w	r3, r3, #1
 800a7ae:	d0f9      	beq.n	800a7a4 <__gethex+0x70>
 800a7b0:	f7ff ffaa 	bl	800a708 <__hexdig_fun>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	fab0 f480 	clz	r4, r0
 800a7ba:	4635      	mov	r5, r6
 800a7bc:	0964      	lsrs	r4, r4, #5
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	463a      	mov	r2, r7
 800a7c2:	4616      	mov	r6, r2
 800a7c4:	7830      	ldrb	r0, [r6, #0]
 800a7c6:	3201      	adds	r2, #1
 800a7c8:	f7ff ff9e 	bl	800a708 <__hexdig_fun>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d1f8      	bne.n	800a7c2 <__gethex+0x8e>
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	9903      	ldr	r1, [sp, #12]
 800a7d6:	f001 fb42 	bl	800be5e <strncmp>
 800a7da:	b980      	cbnz	r0, 800a7fe <__gethex+0xca>
 800a7dc:	b94d      	cbnz	r5, 800a7f2 <__gethex+0xbe>
 800a7de:	eb06 050a 	add.w	r5, r6, sl
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	7830      	ldrb	r0, [r6, #0]
 800a7e8:	3201      	adds	r2, #1
 800a7ea:	f7ff ff8d 	bl	800a708 <__hexdig_fun>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d1f8      	bne.n	800a7e4 <__gethex+0xb0>
 800a7f2:	1bad      	subs	r5, r5, r6
 800a7f4:	00ad      	lsls	r5, r5, #2
 800a7f6:	e004      	b.n	800a802 <__gethex+0xce>
 800a7f8:	2400      	movs	r4, #0
 800a7fa:	4625      	mov	r5, r4
 800a7fc:	e7e0      	b.n	800a7c0 <__gethex+0x8c>
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	d1f7      	bne.n	800a7f2 <__gethex+0xbe>
 800a802:	7833      	ldrb	r3, [r6, #0]
 800a804:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a808:	2b50      	cmp	r3, #80	; 0x50
 800a80a:	d139      	bne.n	800a880 <__gethex+0x14c>
 800a80c:	7873      	ldrb	r3, [r6, #1]
 800a80e:	2b2b      	cmp	r3, #43	; 0x2b
 800a810:	d02a      	beq.n	800a868 <__gethex+0x134>
 800a812:	2b2d      	cmp	r3, #45	; 0x2d
 800a814:	d02c      	beq.n	800a870 <__gethex+0x13c>
 800a816:	f04f 0900 	mov.w	r9, #0
 800a81a:	1c71      	adds	r1, r6, #1
 800a81c:	7808      	ldrb	r0, [r1, #0]
 800a81e:	f7ff ff73 	bl	800a708 <__hexdig_fun>
 800a822:	1e43      	subs	r3, r0, #1
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b18      	cmp	r3, #24
 800a828:	d82a      	bhi.n	800a880 <__gethex+0x14c>
 800a82a:	f1a0 0210 	sub.w	r2, r0, #16
 800a82e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a832:	f7ff ff69 	bl	800a708 <__hexdig_fun>
 800a836:	1e43      	subs	r3, r0, #1
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b18      	cmp	r3, #24
 800a83c:	d91b      	bls.n	800a876 <__gethex+0x142>
 800a83e:	f1b9 0f00 	cmp.w	r9, #0
 800a842:	d000      	beq.n	800a846 <__gethex+0x112>
 800a844:	4252      	negs	r2, r2
 800a846:	4415      	add	r5, r2
 800a848:	f8cb 1000 	str.w	r1, [fp]
 800a84c:	b1d4      	cbz	r4, 800a884 <__gethex+0x150>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	bf14      	ite	ne
 800a854:	2700      	movne	r7, #0
 800a856:	2706      	moveq	r7, #6
 800a858:	4638      	mov	r0, r7
 800a85a:	b00b      	add	sp, #44	; 0x2c
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	463e      	mov	r6, r7
 800a862:	4625      	mov	r5, r4
 800a864:	2401      	movs	r4, #1
 800a866:	e7cc      	b.n	800a802 <__gethex+0xce>
 800a868:	f04f 0900 	mov.w	r9, #0
 800a86c:	1cb1      	adds	r1, r6, #2
 800a86e:	e7d5      	b.n	800a81c <__gethex+0xe8>
 800a870:	f04f 0901 	mov.w	r9, #1
 800a874:	e7fa      	b.n	800a86c <__gethex+0x138>
 800a876:	230a      	movs	r3, #10
 800a878:	fb03 0202 	mla	r2, r3, r2, r0
 800a87c:	3a10      	subs	r2, #16
 800a87e:	e7d6      	b.n	800a82e <__gethex+0xfa>
 800a880:	4631      	mov	r1, r6
 800a882:	e7e1      	b.n	800a848 <__gethex+0x114>
 800a884:	4621      	mov	r1, r4
 800a886:	1bf3      	subs	r3, r6, r7
 800a888:	3b01      	subs	r3, #1
 800a88a:	2b07      	cmp	r3, #7
 800a88c:	dc0a      	bgt.n	800a8a4 <__gethex+0x170>
 800a88e:	9802      	ldr	r0, [sp, #8]
 800a890:	f000 fae2 	bl	800ae58 <_Balloc>
 800a894:	4604      	mov	r4, r0
 800a896:	b940      	cbnz	r0, 800a8aa <__gethex+0x176>
 800a898:	4602      	mov	r2, r0
 800a89a:	21de      	movs	r1, #222	; 0xde
 800a89c:	4b5b      	ldr	r3, [pc, #364]	; (800aa0c <__gethex+0x2d8>)
 800a89e:	485c      	ldr	r0, [pc, #368]	; (800aa10 <__gethex+0x2dc>)
 800a8a0:	f001 fb10 	bl	800bec4 <__assert_func>
 800a8a4:	3101      	adds	r1, #1
 800a8a6:	105b      	asrs	r3, r3, #1
 800a8a8:	e7ef      	b.n	800a88a <__gethex+0x156>
 800a8aa:	f04f 0b00 	mov.w	fp, #0
 800a8ae:	f100 0914 	add.w	r9, r0, #20
 800a8b2:	f1ca 0301 	rsb	r3, sl, #1
 800a8b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a8ba:	f8cd b004 	str.w	fp, [sp, #4]
 800a8be:	9308      	str	r3, [sp, #32]
 800a8c0:	42b7      	cmp	r7, r6
 800a8c2:	d33f      	bcc.n	800a944 <__gethex+0x210>
 800a8c4:	9f04      	ldr	r7, [sp, #16]
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	f847 3b04 	str.w	r3, [r7], #4
 800a8cc:	eba7 0709 	sub.w	r7, r7, r9
 800a8d0:	10bf      	asrs	r7, r7, #2
 800a8d2:	6127      	str	r7, [r4, #16]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fbb1 	bl	800b03c <__hi0bits>
 800a8da:	017f      	lsls	r7, r7, #5
 800a8dc:	f8d8 6000 	ldr.w	r6, [r8]
 800a8e0:	1a3f      	subs	r7, r7, r0
 800a8e2:	42b7      	cmp	r7, r6
 800a8e4:	dd62      	ble.n	800a9ac <__gethex+0x278>
 800a8e6:	1bbf      	subs	r7, r7, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 ff4b 	bl	800b786 <__any_on>
 800a8f0:	4682      	mov	sl, r0
 800a8f2:	b1a8      	cbz	r0, 800a920 <__gethex+0x1ec>
 800a8f4:	f04f 0a01 	mov.w	sl, #1
 800a8f8:	1e7b      	subs	r3, r7, #1
 800a8fa:	1159      	asrs	r1, r3, #5
 800a8fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a900:	f003 021f 	and.w	r2, r3, #31
 800a904:	fa0a f202 	lsl.w	r2, sl, r2
 800a908:	420a      	tst	r2, r1
 800a90a:	d009      	beq.n	800a920 <__gethex+0x1ec>
 800a90c:	4553      	cmp	r3, sl
 800a90e:	dd05      	ble.n	800a91c <__gethex+0x1e8>
 800a910:	4620      	mov	r0, r4
 800a912:	1eb9      	subs	r1, r7, #2
 800a914:	f000 ff37 	bl	800b786 <__any_on>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d144      	bne.n	800a9a6 <__gethex+0x272>
 800a91c:	f04f 0a02 	mov.w	sl, #2
 800a920:	4639      	mov	r1, r7
 800a922:	4620      	mov	r0, r4
 800a924:	f7ff fe9d 	bl	800a662 <rshift>
 800a928:	443d      	add	r5, r7
 800a92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a92e:	42ab      	cmp	r3, r5
 800a930:	da4a      	bge.n	800a9c8 <__gethex+0x294>
 800a932:	4621      	mov	r1, r4
 800a934:	9802      	ldr	r0, [sp, #8]
 800a936:	f000 facf 	bl	800aed8 <_Bfree>
 800a93a:	2300      	movs	r3, #0
 800a93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a93e:	27a3      	movs	r7, #163	; 0xa3
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	e789      	b.n	800a858 <__gethex+0x124>
 800a944:	1e73      	subs	r3, r6, #1
 800a946:	9a06      	ldr	r2, [sp, #24]
 800a948:	9307      	str	r3, [sp, #28]
 800a94a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a94e:	4293      	cmp	r3, r2
 800a950:	d019      	beq.n	800a986 <__gethex+0x252>
 800a952:	f1bb 0f20 	cmp.w	fp, #32
 800a956:	d107      	bne.n	800a968 <__gethex+0x234>
 800a958:	9b04      	ldr	r3, [sp, #16]
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	f843 2b04 	str.w	r2, [r3], #4
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	2300      	movs	r3, #0
 800a964:	469b      	mov	fp, r3
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a96c:	f7ff fecc 	bl	800a708 <__hexdig_fun>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	f000 000f 	and.w	r0, r0, #15
 800a976:	fa00 f00b 	lsl.w	r0, r0, fp
 800a97a:	4303      	orrs	r3, r0
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f10b 0b04 	add.w	fp, fp, #4
 800a982:	9b07      	ldr	r3, [sp, #28]
 800a984:	e00d      	b.n	800a9a2 <__gethex+0x26e>
 800a986:	9a08      	ldr	r2, [sp, #32]
 800a988:	1e73      	subs	r3, r6, #1
 800a98a:	4413      	add	r3, r2
 800a98c:	42bb      	cmp	r3, r7
 800a98e:	d3e0      	bcc.n	800a952 <__gethex+0x21e>
 800a990:	4618      	mov	r0, r3
 800a992:	4652      	mov	r2, sl
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	9309      	str	r3, [sp, #36]	; 0x24
 800a998:	f001 fa61 	bl	800be5e <strncmp>
 800a99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d1d7      	bne.n	800a952 <__gethex+0x21e>
 800a9a2:	461e      	mov	r6, r3
 800a9a4:	e78c      	b.n	800a8c0 <__gethex+0x18c>
 800a9a6:	f04f 0a03 	mov.w	sl, #3
 800a9aa:	e7b9      	b.n	800a920 <__gethex+0x1ec>
 800a9ac:	da09      	bge.n	800a9c2 <__gethex+0x28e>
 800a9ae:	1bf7      	subs	r7, r6, r7
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	9802      	ldr	r0, [sp, #8]
 800a9b6:	f000 fca7 	bl	800b308 <__lshift>
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	1bed      	subs	r5, r5, r7
 800a9be:	f100 0914 	add.w	r9, r0, #20
 800a9c2:	f04f 0a00 	mov.w	sl, #0
 800a9c6:	e7b0      	b.n	800a92a <__gethex+0x1f6>
 800a9c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9cc:	42a8      	cmp	r0, r5
 800a9ce:	dd72      	ble.n	800aab6 <__gethex+0x382>
 800a9d0:	1b45      	subs	r5, r0, r5
 800a9d2:	42ae      	cmp	r6, r5
 800a9d4:	dc35      	bgt.n	800aa42 <__gethex+0x30e>
 800a9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d029      	beq.n	800aa32 <__gethex+0x2fe>
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d02b      	beq.n	800aa3a <__gethex+0x306>
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d11c      	bne.n	800aa20 <__gethex+0x2ec>
 800a9e6:	42ae      	cmp	r6, r5
 800a9e8:	d11a      	bne.n	800aa20 <__gethex+0x2ec>
 800a9ea:	2e01      	cmp	r6, #1
 800a9ec:	d112      	bne.n	800aa14 <__gethex+0x2e0>
 800a9ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9f2:	9a05      	ldr	r2, [sp, #20]
 800a9f4:	2762      	movs	r7, #98	; 0x62
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	6123      	str	r3, [r4, #16]
 800a9fc:	f8c9 3000 	str.w	r3, [r9]
 800aa00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa02:	601c      	str	r4, [r3, #0]
 800aa04:	e728      	b.n	800a858 <__gethex+0x124>
 800aa06:	bf00      	nop
 800aa08:	0800c314 	.word	0x0800c314
 800aa0c:	0800c29c 	.word	0x0800c29c
 800aa10:	0800c2ad 	.word	0x0800c2ad
 800aa14:	4620      	mov	r0, r4
 800aa16:	1e71      	subs	r1, r6, #1
 800aa18:	f000 feb5 	bl	800b786 <__any_on>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d1e6      	bne.n	800a9ee <__gethex+0x2ba>
 800aa20:	4621      	mov	r1, r4
 800aa22:	9802      	ldr	r0, [sp, #8]
 800aa24:	f000 fa58 	bl	800aed8 <_Bfree>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa2c:	2750      	movs	r7, #80	; 0x50
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e712      	b.n	800a858 <__gethex+0x124>
 800aa32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1f3      	bne.n	800aa20 <__gethex+0x2ec>
 800aa38:	e7d9      	b.n	800a9ee <__gethex+0x2ba>
 800aa3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1d6      	bne.n	800a9ee <__gethex+0x2ba>
 800aa40:	e7ee      	b.n	800aa20 <__gethex+0x2ec>
 800aa42:	1e6f      	subs	r7, r5, #1
 800aa44:	f1ba 0f00 	cmp.w	sl, #0
 800aa48:	d132      	bne.n	800aab0 <__gethex+0x37c>
 800aa4a:	b127      	cbz	r7, 800aa56 <__gethex+0x322>
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fe99 	bl	800b786 <__any_on>
 800aa54:	4682      	mov	sl, r0
 800aa56:	2101      	movs	r1, #1
 800aa58:	117b      	asrs	r3, r7, #5
 800aa5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa5e:	f007 071f 	and.w	r7, r7, #31
 800aa62:	fa01 f707 	lsl.w	r7, r1, r7
 800aa66:	421f      	tst	r7, r3
 800aa68:	f04f 0702 	mov.w	r7, #2
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4620      	mov	r0, r4
 800aa70:	bf18      	it	ne
 800aa72:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa76:	1b76      	subs	r6, r6, r5
 800aa78:	f7ff fdf3 	bl	800a662 <rshift>
 800aa7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa80:	f1ba 0f00 	cmp.w	sl, #0
 800aa84:	d048      	beq.n	800ab18 <__gethex+0x3e4>
 800aa86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d015      	beq.n	800aaba <__gethex+0x386>
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d017      	beq.n	800aac2 <__gethex+0x38e>
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d109      	bne.n	800aaaa <__gethex+0x376>
 800aa96:	f01a 0f02 	tst.w	sl, #2
 800aa9a:	d006      	beq.n	800aaaa <__gethex+0x376>
 800aa9c:	f8d9 0000 	ldr.w	r0, [r9]
 800aaa0:	ea4a 0a00 	orr.w	sl, sl, r0
 800aaa4:	f01a 0f01 	tst.w	sl, #1
 800aaa8:	d10e      	bne.n	800aac8 <__gethex+0x394>
 800aaaa:	f047 0710 	orr.w	r7, r7, #16
 800aaae:	e033      	b.n	800ab18 <__gethex+0x3e4>
 800aab0:	f04f 0a01 	mov.w	sl, #1
 800aab4:	e7cf      	b.n	800aa56 <__gethex+0x322>
 800aab6:	2701      	movs	r7, #1
 800aab8:	e7e2      	b.n	800aa80 <__gethex+0x34c>
 800aaba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aabc:	f1c3 0301 	rsb	r3, r3, #1
 800aac0:	9315      	str	r3, [sp, #84]	; 0x54
 800aac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0f0      	beq.n	800aaaa <__gethex+0x376>
 800aac8:	f04f 0c00 	mov.w	ip, #0
 800aacc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aad0:	f104 0314 	add.w	r3, r4, #20
 800aad4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aad8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aadc:	4618      	mov	r0, r3
 800aade:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aae6:	d01c      	beq.n	800ab22 <__gethex+0x3ee>
 800aae8:	3201      	adds	r2, #1
 800aaea:	6002      	str	r2, [r0, #0]
 800aaec:	2f02      	cmp	r7, #2
 800aaee:	f104 0314 	add.w	r3, r4, #20
 800aaf2:	d13d      	bne.n	800ab70 <__gethex+0x43c>
 800aaf4:	f8d8 2000 	ldr.w	r2, [r8]
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	42b2      	cmp	r2, r6
 800aafc:	d10a      	bne.n	800ab14 <__gethex+0x3e0>
 800aafe:	2201      	movs	r2, #1
 800ab00:	1171      	asrs	r1, r6, #5
 800ab02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab06:	f006 061f 	and.w	r6, r6, #31
 800ab0a:	fa02 f606 	lsl.w	r6, r2, r6
 800ab0e:	421e      	tst	r6, r3
 800ab10:	bf18      	it	ne
 800ab12:	4617      	movne	r7, r2
 800ab14:	f047 0720 	orr.w	r7, r7, #32
 800ab18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab1a:	601c      	str	r4, [r3, #0]
 800ab1c:	9b05      	ldr	r3, [sp, #20]
 800ab1e:	601d      	str	r5, [r3, #0]
 800ab20:	e69a      	b.n	800a858 <__gethex+0x124>
 800ab22:	4299      	cmp	r1, r3
 800ab24:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab28:	d8d8      	bhi.n	800aadc <__gethex+0x3a8>
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	459b      	cmp	fp, r3
 800ab2e:	db17      	blt.n	800ab60 <__gethex+0x42c>
 800ab30:	6861      	ldr	r1, [r4, #4]
 800ab32:	9802      	ldr	r0, [sp, #8]
 800ab34:	3101      	adds	r1, #1
 800ab36:	f000 f98f 	bl	800ae58 <_Balloc>
 800ab3a:	4681      	mov	r9, r0
 800ab3c:	b918      	cbnz	r0, 800ab46 <__gethex+0x412>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	2184      	movs	r1, #132	; 0x84
 800ab42:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <__gethex+0x474>)
 800ab44:	e6ab      	b.n	800a89e <__gethex+0x16a>
 800ab46:	6922      	ldr	r2, [r4, #16]
 800ab48:	f104 010c 	add.w	r1, r4, #12
 800ab4c:	3202      	adds	r2, #2
 800ab4e:	0092      	lsls	r2, r2, #2
 800ab50:	300c      	adds	r0, #12
 800ab52:	f000 f967 	bl	800ae24 <memcpy>
 800ab56:	4621      	mov	r1, r4
 800ab58:	9802      	ldr	r0, [sp, #8]
 800ab5a:	f000 f9bd 	bl	800aed8 <_Bfree>
 800ab5e:	464c      	mov	r4, r9
 800ab60:	6923      	ldr	r3, [r4, #16]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	6122      	str	r2, [r4, #16]
 800ab66:	2201      	movs	r2, #1
 800ab68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab6c:	615a      	str	r2, [r3, #20]
 800ab6e:	e7bd      	b.n	800aaec <__gethex+0x3b8>
 800ab70:	6922      	ldr	r2, [r4, #16]
 800ab72:	455a      	cmp	r2, fp
 800ab74:	dd0b      	ble.n	800ab8e <__gethex+0x45a>
 800ab76:	2101      	movs	r1, #1
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f7ff fd72 	bl	800a662 <rshift>
 800ab7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab82:	3501      	adds	r5, #1
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	f6ff aed4 	blt.w	800a932 <__gethex+0x1fe>
 800ab8a:	2701      	movs	r7, #1
 800ab8c:	e7c2      	b.n	800ab14 <__gethex+0x3e0>
 800ab8e:	f016 061f 	ands.w	r6, r6, #31
 800ab92:	d0fa      	beq.n	800ab8a <__gethex+0x456>
 800ab94:	4453      	add	r3, sl
 800ab96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab9a:	f000 fa4f 	bl	800b03c <__hi0bits>
 800ab9e:	f1c6 0620 	rsb	r6, r6, #32
 800aba2:	42b0      	cmp	r0, r6
 800aba4:	dbe7      	blt.n	800ab76 <__gethex+0x442>
 800aba6:	e7f0      	b.n	800ab8a <__gethex+0x456>
 800aba8:	0800c29c 	.word	0x0800c29c

0800abac <L_shift>:
 800abac:	f1c2 0208 	rsb	r2, r2, #8
 800abb0:	0092      	lsls	r2, r2, #2
 800abb2:	b570      	push	{r4, r5, r6, lr}
 800abb4:	f1c2 0620 	rsb	r6, r2, #32
 800abb8:	6843      	ldr	r3, [r0, #4]
 800abba:	6804      	ldr	r4, [r0, #0]
 800abbc:	fa03 f506 	lsl.w	r5, r3, r6
 800abc0:	432c      	orrs	r4, r5
 800abc2:	40d3      	lsrs	r3, r2
 800abc4:	6004      	str	r4, [r0, #0]
 800abc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abca:	4288      	cmp	r0, r1
 800abcc:	d3f4      	bcc.n	800abb8 <L_shift+0xc>
 800abce:	bd70      	pop	{r4, r5, r6, pc}

0800abd0 <__match>:
 800abd0:	b530      	push	{r4, r5, lr}
 800abd2:	6803      	ldr	r3, [r0, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abda:	b914      	cbnz	r4, 800abe2 <__match+0x12>
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	2001      	movs	r0, #1
 800abe0:	bd30      	pop	{r4, r5, pc}
 800abe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abea:	2d19      	cmp	r5, #25
 800abec:	bf98      	it	ls
 800abee:	3220      	addls	r2, #32
 800abf0:	42a2      	cmp	r2, r4
 800abf2:	d0f0      	beq.n	800abd6 <__match+0x6>
 800abf4:	2000      	movs	r0, #0
 800abf6:	e7f3      	b.n	800abe0 <__match+0x10>

0800abf8 <__hexnan>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	2500      	movs	r5, #0
 800abfe:	680b      	ldr	r3, [r1, #0]
 800ac00:	4682      	mov	sl, r0
 800ac02:	115e      	asrs	r6, r3, #5
 800ac04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac08:	f013 031f 	ands.w	r3, r3, #31
 800ac0c:	bf18      	it	ne
 800ac0e:	3604      	addne	r6, #4
 800ac10:	1f37      	subs	r7, r6, #4
 800ac12:	46b9      	mov	r9, r7
 800ac14:	463c      	mov	r4, r7
 800ac16:	46ab      	mov	fp, r5
 800ac18:	b087      	sub	sp, #28
 800ac1a:	4690      	mov	r8, r2
 800ac1c:	6802      	ldr	r2, [r0, #0]
 800ac1e:	9301      	str	r3, [sp, #4]
 800ac20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac24:	9502      	str	r5, [sp, #8]
 800ac26:	7851      	ldrb	r1, [r2, #1]
 800ac28:	1c53      	adds	r3, r2, #1
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	b341      	cbz	r1, 800ac80 <__hexnan+0x88>
 800ac2e:	4608      	mov	r0, r1
 800ac30:	9205      	str	r2, [sp, #20]
 800ac32:	9104      	str	r1, [sp, #16]
 800ac34:	f7ff fd68 	bl	800a708 <__hexdig_fun>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d14f      	bne.n	800acdc <__hexnan+0xe4>
 800ac3c:	9904      	ldr	r1, [sp, #16]
 800ac3e:	9a05      	ldr	r2, [sp, #20]
 800ac40:	2920      	cmp	r1, #32
 800ac42:	d818      	bhi.n	800ac76 <__hexnan+0x7e>
 800ac44:	9b02      	ldr	r3, [sp, #8]
 800ac46:	459b      	cmp	fp, r3
 800ac48:	dd13      	ble.n	800ac72 <__hexnan+0x7a>
 800ac4a:	454c      	cmp	r4, r9
 800ac4c:	d206      	bcs.n	800ac5c <__hexnan+0x64>
 800ac4e:	2d07      	cmp	r5, #7
 800ac50:	dc04      	bgt.n	800ac5c <__hexnan+0x64>
 800ac52:	462a      	mov	r2, r5
 800ac54:	4649      	mov	r1, r9
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff ffa8 	bl	800abac <L_shift>
 800ac5c:	4544      	cmp	r4, r8
 800ac5e:	d950      	bls.n	800ad02 <__hexnan+0x10a>
 800ac60:	2300      	movs	r3, #0
 800ac62:	f1a4 0904 	sub.w	r9, r4, #4
 800ac66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac6a:	461d      	mov	r5, r3
 800ac6c:	464c      	mov	r4, r9
 800ac6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac72:	9a03      	ldr	r2, [sp, #12]
 800ac74:	e7d7      	b.n	800ac26 <__hexnan+0x2e>
 800ac76:	2929      	cmp	r1, #41	; 0x29
 800ac78:	d156      	bne.n	800ad28 <__hexnan+0x130>
 800ac7a:	3202      	adds	r2, #2
 800ac7c:	f8ca 2000 	str.w	r2, [sl]
 800ac80:	f1bb 0f00 	cmp.w	fp, #0
 800ac84:	d050      	beq.n	800ad28 <__hexnan+0x130>
 800ac86:	454c      	cmp	r4, r9
 800ac88:	d206      	bcs.n	800ac98 <__hexnan+0xa0>
 800ac8a:	2d07      	cmp	r5, #7
 800ac8c:	dc04      	bgt.n	800ac98 <__hexnan+0xa0>
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4649      	mov	r1, r9
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff ff8a 	bl	800abac <L_shift>
 800ac98:	4544      	cmp	r4, r8
 800ac9a:	d934      	bls.n	800ad06 <__hexnan+0x10e>
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	f1a8 0204 	sub.w	r2, r8, #4
 800aca2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aca6:	429f      	cmp	r7, r3
 800aca8:	f842 1f04 	str.w	r1, [r2, #4]!
 800acac:	d2f9      	bcs.n	800aca2 <__hexnan+0xaa>
 800acae:	1b3b      	subs	r3, r7, r4
 800acb0:	f023 0303 	bic.w	r3, r3, #3
 800acb4:	3304      	adds	r3, #4
 800acb6:	3401      	adds	r4, #1
 800acb8:	3e03      	subs	r6, #3
 800acba:	42b4      	cmp	r4, r6
 800acbc:	bf88      	it	hi
 800acbe:	2304      	movhi	r3, #4
 800acc0:	2200      	movs	r2, #0
 800acc2:	4443      	add	r3, r8
 800acc4:	f843 2b04 	str.w	r2, [r3], #4
 800acc8:	429f      	cmp	r7, r3
 800acca:	d2fb      	bcs.n	800acc4 <__hexnan+0xcc>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	b91b      	cbnz	r3, 800acd8 <__hexnan+0xe0>
 800acd0:	4547      	cmp	r7, r8
 800acd2:	d127      	bne.n	800ad24 <__hexnan+0x12c>
 800acd4:	2301      	movs	r3, #1
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	2005      	movs	r0, #5
 800acda:	e026      	b.n	800ad2a <__hexnan+0x132>
 800acdc:	3501      	adds	r5, #1
 800acde:	2d08      	cmp	r5, #8
 800ace0:	f10b 0b01 	add.w	fp, fp, #1
 800ace4:	dd06      	ble.n	800acf4 <__hexnan+0xfc>
 800ace6:	4544      	cmp	r4, r8
 800ace8:	d9c3      	bls.n	800ac72 <__hexnan+0x7a>
 800acea:	2300      	movs	r3, #0
 800acec:	2501      	movs	r5, #1
 800acee:	f844 3c04 	str.w	r3, [r4, #-4]
 800acf2:	3c04      	subs	r4, #4
 800acf4:	6822      	ldr	r2, [r4, #0]
 800acf6:	f000 000f 	and.w	r0, r0, #15
 800acfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800acfe:	6022      	str	r2, [r4, #0]
 800ad00:	e7b7      	b.n	800ac72 <__hexnan+0x7a>
 800ad02:	2508      	movs	r5, #8
 800ad04:	e7b5      	b.n	800ac72 <__hexnan+0x7a>
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0df      	beq.n	800accc <__hexnan+0xd4>
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad10:	f1c3 0320 	rsb	r3, r3, #32
 800ad14:	fa22 f303 	lsr.w	r3, r2, r3
 800ad18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad1c:	401a      	ands	r2, r3
 800ad1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad22:	e7d3      	b.n	800accc <__hexnan+0xd4>
 800ad24:	3f04      	subs	r7, #4
 800ad26:	e7d1      	b.n	800accc <__hexnan+0xd4>
 800ad28:	2004      	movs	r0, #4
 800ad2a:	b007      	add	sp, #28
 800ad2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad30 <__retarget_lock_init_recursive>:
 800ad30:	4770      	bx	lr

0800ad32 <__retarget_lock_acquire_recursive>:
 800ad32:	4770      	bx	lr

0800ad34 <__retarget_lock_release_recursive>:
 800ad34:	4770      	bx	lr

0800ad36 <__swhatbuf_r>:
 800ad36:	b570      	push	{r4, r5, r6, lr}
 800ad38:	460e      	mov	r6, r1
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	4614      	mov	r4, r2
 800ad40:	2900      	cmp	r1, #0
 800ad42:	461d      	mov	r5, r3
 800ad44:	b096      	sub	sp, #88	; 0x58
 800ad46:	da08      	bge.n	800ad5a <__swhatbuf_r+0x24>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad4e:	602a      	str	r2, [r5, #0]
 800ad50:	061a      	lsls	r2, r3, #24
 800ad52:	d410      	bmi.n	800ad76 <__swhatbuf_r+0x40>
 800ad54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad58:	e00e      	b.n	800ad78 <__swhatbuf_r+0x42>
 800ad5a:	466a      	mov	r2, sp
 800ad5c:	f001 f8f2 	bl	800bf44 <_fstat_r>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	dbf1      	blt.n	800ad48 <__swhatbuf_r+0x12>
 800ad64:	9a01      	ldr	r2, [sp, #4]
 800ad66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad6e:	425a      	negs	r2, r3
 800ad70:	415a      	adcs	r2, r3
 800ad72:	602a      	str	r2, [r5, #0]
 800ad74:	e7ee      	b.n	800ad54 <__swhatbuf_r+0x1e>
 800ad76:	2340      	movs	r3, #64	; 0x40
 800ad78:	2000      	movs	r0, #0
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	b016      	add	sp, #88	; 0x58
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}

0800ad80 <__smakebuf_r>:
 800ad80:	898b      	ldrh	r3, [r1, #12]
 800ad82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad84:	079d      	lsls	r5, r3, #30
 800ad86:	4606      	mov	r6, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	d507      	bpl.n	800ad9c <__smakebuf_r+0x1c>
 800ad8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	2301      	movs	r3, #1
 800ad96:	6163      	str	r3, [r4, #20]
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	466a      	mov	r2, sp
 800ad9e:	ab01      	add	r3, sp, #4
 800ada0:	f7ff ffc9 	bl	800ad36 <__swhatbuf_r>
 800ada4:	9900      	ldr	r1, [sp, #0]
 800ada6:	4605      	mov	r5, r0
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7fe fac7 	bl	800933c <_malloc_r>
 800adae:	b948      	cbnz	r0, 800adc4 <__smakebuf_r+0x44>
 800adb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb4:	059a      	lsls	r2, r3, #22
 800adb6:	d4ef      	bmi.n	800ad98 <__smakebuf_r+0x18>
 800adb8:	f023 0303 	bic.w	r3, r3, #3
 800adbc:	f043 0302 	orr.w	r3, r3, #2
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	e7e3      	b.n	800ad8c <__smakebuf_r+0xc>
 800adc4:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <__smakebuf_r+0x7c>)
 800adc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	6020      	str	r0, [r4, #0]
 800adcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	9b00      	ldr	r3, [sp, #0]
 800add4:	6120      	str	r0, [r4, #16]
 800add6:	6163      	str	r3, [r4, #20]
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	b15b      	cbz	r3, 800adf4 <__smakebuf_r+0x74>
 800addc:	4630      	mov	r0, r6
 800adde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade2:	f001 f8c1 	bl	800bf68 <_isatty_r>
 800ade6:	b128      	cbz	r0, 800adf4 <__smakebuf_r+0x74>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	89a0      	ldrh	r0, [r4, #12]
 800adf6:	4305      	orrs	r5, r0
 800adf8:	81a5      	strh	r5, [r4, #12]
 800adfa:	e7cd      	b.n	800ad98 <__smakebuf_r+0x18>
 800adfc:	0800a4c1 	.word	0x0800a4c1

0800ae00 <__ascii_mbtowc>:
 800ae00:	b082      	sub	sp, #8
 800ae02:	b901      	cbnz	r1, 800ae06 <__ascii_mbtowc+0x6>
 800ae04:	a901      	add	r1, sp, #4
 800ae06:	b142      	cbz	r2, 800ae1a <__ascii_mbtowc+0x1a>
 800ae08:	b14b      	cbz	r3, 800ae1e <__ascii_mbtowc+0x1e>
 800ae0a:	7813      	ldrb	r3, [r2, #0]
 800ae0c:	600b      	str	r3, [r1, #0]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	1e10      	subs	r0, r2, #0
 800ae12:	bf18      	it	ne
 800ae14:	2001      	movne	r0, #1
 800ae16:	b002      	add	sp, #8
 800ae18:	4770      	bx	lr
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	e7fb      	b.n	800ae16 <__ascii_mbtowc+0x16>
 800ae1e:	f06f 0001 	mvn.w	r0, #1
 800ae22:	e7f8      	b.n	800ae16 <__ascii_mbtowc+0x16>

0800ae24 <memcpy>:
 800ae24:	440a      	add	r2, r1
 800ae26:	4291      	cmp	r1, r2
 800ae28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae2c:	d100      	bne.n	800ae30 <memcpy+0xc>
 800ae2e:	4770      	bx	lr
 800ae30:	b510      	push	{r4, lr}
 800ae32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae36:	4291      	cmp	r1, r2
 800ae38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae3c:	d1f9      	bne.n	800ae32 <memcpy+0xe>
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <__malloc_lock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__malloc_lock+0x8>)
 800ae42:	f7ff bf76 	b.w	800ad32 <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000a38 	.word	0x20000a38

0800ae4c <__malloc_unlock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__malloc_unlock+0x8>)
 800ae4e:	f7ff bf71 	b.w	800ad34 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000a38 	.word	0x20000a38

0800ae58 <_Balloc>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	b976      	cbnz	r6, 800ae80 <_Balloc+0x28>
 800ae62:	2010      	movs	r0, #16
 800ae64:	f7fe f9f2 	bl	800924c <malloc>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae6c:	b920      	cbnz	r0, 800ae78 <_Balloc+0x20>
 800ae6e:	2166      	movs	r1, #102	; 0x66
 800ae70:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <_Balloc+0x78>)
 800ae72:	4818      	ldr	r0, [pc, #96]	; (800aed4 <_Balloc+0x7c>)
 800ae74:	f001 f826 	bl	800bec4 <__assert_func>
 800ae78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae7c:	6006      	str	r6, [r0, #0]
 800ae7e:	60c6      	str	r6, [r0, #12]
 800ae80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae82:	68f3      	ldr	r3, [r6, #12]
 800ae84:	b183      	cbz	r3, 800aea8 <_Balloc+0x50>
 800ae86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae8e:	b9b8      	cbnz	r0, 800aec0 <_Balloc+0x68>
 800ae90:	2101      	movs	r1, #1
 800ae92:	fa01 f605 	lsl.w	r6, r1, r5
 800ae96:	1d72      	adds	r2, r6, #5
 800ae98:	4620      	mov	r0, r4
 800ae9a:	0092      	lsls	r2, r2, #2
 800ae9c:	f000 fc94 	bl	800b7c8 <_calloc_r>
 800aea0:	b160      	cbz	r0, 800aebc <_Balloc+0x64>
 800aea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aea6:	e00e      	b.n	800aec6 <_Balloc+0x6e>
 800aea8:	2221      	movs	r2, #33	; 0x21
 800aeaa:	2104      	movs	r1, #4
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fc8b 	bl	800b7c8 <_calloc_r>
 800aeb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb4:	60f0      	str	r0, [r6, #12]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e4      	bne.n	800ae86 <_Balloc+0x2e>
 800aebc:	2000      	movs	r0, #0
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	6802      	ldr	r2, [r0, #0]
 800aec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aec6:	2300      	movs	r3, #0
 800aec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aecc:	e7f7      	b.n	800aebe <_Balloc+0x66>
 800aece:	bf00      	nop
 800aed0:	0800c328 	.word	0x0800c328
 800aed4:	0800c33f 	.word	0x0800c33f

0800aed8 <_Bfree>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aedc:	4605      	mov	r5, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	b976      	cbnz	r6, 800af00 <_Bfree+0x28>
 800aee2:	2010      	movs	r0, #16
 800aee4:	f7fe f9b2 	bl	800924c <malloc>
 800aee8:	4602      	mov	r2, r0
 800aeea:	6268      	str	r0, [r5, #36]	; 0x24
 800aeec:	b920      	cbnz	r0, 800aef8 <_Bfree+0x20>
 800aeee:	218a      	movs	r1, #138	; 0x8a
 800aef0:	4b08      	ldr	r3, [pc, #32]	; (800af14 <_Bfree+0x3c>)
 800aef2:	4809      	ldr	r0, [pc, #36]	; (800af18 <_Bfree+0x40>)
 800aef4:	f000 ffe6 	bl	800bec4 <__assert_func>
 800aef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aefc:	6006      	str	r6, [r0, #0]
 800aefe:	60c6      	str	r6, [r0, #12]
 800af00:	b13c      	cbz	r4, 800af12 <_Bfree+0x3a>
 800af02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af04:	6862      	ldr	r2, [r4, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af0c:	6021      	str	r1, [r4, #0]
 800af0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	0800c328 	.word	0x0800c328
 800af18:	0800c33f 	.word	0x0800c33f

0800af1c <__multadd>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	4607      	mov	r7, r0
 800af22:	460c      	mov	r4, r1
 800af24:	461e      	mov	r6, r3
 800af26:	2000      	movs	r0, #0
 800af28:	690d      	ldr	r5, [r1, #16]
 800af2a:	f101 0c14 	add.w	ip, r1, #20
 800af2e:	f8dc 3000 	ldr.w	r3, [ip]
 800af32:	3001      	adds	r0, #1
 800af34:	b299      	uxth	r1, r3
 800af36:	fb02 6101 	mla	r1, r2, r1, r6
 800af3a:	0c1e      	lsrs	r6, r3, #16
 800af3c:	0c0b      	lsrs	r3, r1, #16
 800af3e:	fb02 3306 	mla	r3, r2, r6, r3
 800af42:	b289      	uxth	r1, r1
 800af44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af48:	4285      	cmp	r5, r0
 800af4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af4e:	f84c 1b04 	str.w	r1, [ip], #4
 800af52:	dcec      	bgt.n	800af2e <__multadd+0x12>
 800af54:	b30e      	cbz	r6, 800af9a <__multadd+0x7e>
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	42ab      	cmp	r3, r5
 800af5a:	dc19      	bgt.n	800af90 <__multadd+0x74>
 800af5c:	6861      	ldr	r1, [r4, #4]
 800af5e:	4638      	mov	r0, r7
 800af60:	3101      	adds	r1, #1
 800af62:	f7ff ff79 	bl	800ae58 <_Balloc>
 800af66:	4680      	mov	r8, r0
 800af68:	b928      	cbnz	r0, 800af76 <__multadd+0x5a>
 800af6a:	4602      	mov	r2, r0
 800af6c:	21b5      	movs	r1, #181	; 0xb5
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <__multadd+0x84>)
 800af70:	480c      	ldr	r0, [pc, #48]	; (800afa4 <__multadd+0x88>)
 800af72:	f000 ffa7 	bl	800bec4 <__assert_func>
 800af76:	6922      	ldr	r2, [r4, #16]
 800af78:	f104 010c 	add.w	r1, r4, #12
 800af7c:	3202      	adds	r2, #2
 800af7e:	0092      	lsls	r2, r2, #2
 800af80:	300c      	adds	r0, #12
 800af82:	f7ff ff4f 	bl	800ae24 <memcpy>
 800af86:	4621      	mov	r1, r4
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ffa5 	bl	800aed8 <_Bfree>
 800af8e:	4644      	mov	r4, r8
 800af90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af94:	3501      	adds	r5, #1
 800af96:	615e      	str	r6, [r3, #20]
 800af98:	6125      	str	r5, [r4, #16]
 800af9a:	4620      	mov	r0, r4
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	0800c29c 	.word	0x0800c29c
 800afa4:	0800c33f 	.word	0x0800c33f

0800afa8 <__s2b>:
 800afa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afac:	4615      	mov	r5, r2
 800afae:	2209      	movs	r2, #9
 800afb0:	461f      	mov	r7, r3
 800afb2:	3308      	adds	r3, #8
 800afb4:	460c      	mov	r4, r1
 800afb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800afba:	4606      	mov	r6, r0
 800afbc:	2201      	movs	r2, #1
 800afbe:	2100      	movs	r1, #0
 800afc0:	429a      	cmp	r2, r3
 800afc2:	db09      	blt.n	800afd8 <__s2b+0x30>
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7ff ff47 	bl	800ae58 <_Balloc>
 800afca:	b940      	cbnz	r0, 800afde <__s2b+0x36>
 800afcc:	4602      	mov	r2, r0
 800afce:	21ce      	movs	r1, #206	; 0xce
 800afd0:	4b18      	ldr	r3, [pc, #96]	; (800b034 <__s2b+0x8c>)
 800afd2:	4819      	ldr	r0, [pc, #100]	; (800b038 <__s2b+0x90>)
 800afd4:	f000 ff76 	bl	800bec4 <__assert_func>
 800afd8:	0052      	lsls	r2, r2, #1
 800afda:	3101      	adds	r1, #1
 800afdc:	e7f0      	b.n	800afc0 <__s2b+0x18>
 800afde:	9b08      	ldr	r3, [sp, #32]
 800afe0:	2d09      	cmp	r5, #9
 800afe2:	6143      	str	r3, [r0, #20]
 800afe4:	f04f 0301 	mov.w	r3, #1
 800afe8:	6103      	str	r3, [r0, #16]
 800afea:	dd16      	ble.n	800b01a <__s2b+0x72>
 800afec:	f104 0909 	add.w	r9, r4, #9
 800aff0:	46c8      	mov	r8, r9
 800aff2:	442c      	add	r4, r5
 800aff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aff8:	4601      	mov	r1, r0
 800affa:	220a      	movs	r2, #10
 800affc:	4630      	mov	r0, r6
 800affe:	3b30      	subs	r3, #48	; 0x30
 800b000:	f7ff ff8c 	bl	800af1c <__multadd>
 800b004:	45a0      	cmp	r8, r4
 800b006:	d1f5      	bne.n	800aff4 <__s2b+0x4c>
 800b008:	f1a5 0408 	sub.w	r4, r5, #8
 800b00c:	444c      	add	r4, r9
 800b00e:	1b2d      	subs	r5, r5, r4
 800b010:	1963      	adds	r3, r4, r5
 800b012:	42bb      	cmp	r3, r7
 800b014:	db04      	blt.n	800b020 <__s2b+0x78>
 800b016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01a:	2509      	movs	r5, #9
 800b01c:	340a      	adds	r4, #10
 800b01e:	e7f6      	b.n	800b00e <__s2b+0x66>
 800b020:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b024:	4601      	mov	r1, r0
 800b026:	220a      	movs	r2, #10
 800b028:	4630      	mov	r0, r6
 800b02a:	3b30      	subs	r3, #48	; 0x30
 800b02c:	f7ff ff76 	bl	800af1c <__multadd>
 800b030:	e7ee      	b.n	800b010 <__s2b+0x68>
 800b032:	bf00      	nop
 800b034:	0800c29c 	.word	0x0800c29c
 800b038:	0800c33f 	.word	0x0800c33f

0800b03c <__hi0bits>:
 800b03c:	0c02      	lsrs	r2, r0, #16
 800b03e:	0412      	lsls	r2, r2, #16
 800b040:	4603      	mov	r3, r0
 800b042:	b9ca      	cbnz	r2, 800b078 <__hi0bits+0x3c>
 800b044:	0403      	lsls	r3, r0, #16
 800b046:	2010      	movs	r0, #16
 800b048:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b04c:	bf04      	itt	eq
 800b04e:	021b      	lsleq	r3, r3, #8
 800b050:	3008      	addeq	r0, #8
 800b052:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b056:	bf04      	itt	eq
 800b058:	011b      	lsleq	r3, r3, #4
 800b05a:	3004      	addeq	r0, #4
 800b05c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b060:	bf04      	itt	eq
 800b062:	009b      	lsleq	r3, r3, #2
 800b064:	3002      	addeq	r0, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	db05      	blt.n	800b076 <__hi0bits+0x3a>
 800b06a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b06e:	f100 0001 	add.w	r0, r0, #1
 800b072:	bf08      	it	eq
 800b074:	2020      	moveq	r0, #32
 800b076:	4770      	bx	lr
 800b078:	2000      	movs	r0, #0
 800b07a:	e7e5      	b.n	800b048 <__hi0bits+0xc>

0800b07c <__lo0bits>:
 800b07c:	6803      	ldr	r3, [r0, #0]
 800b07e:	4602      	mov	r2, r0
 800b080:	f013 0007 	ands.w	r0, r3, #7
 800b084:	d00b      	beq.n	800b09e <__lo0bits+0x22>
 800b086:	07d9      	lsls	r1, r3, #31
 800b088:	d421      	bmi.n	800b0ce <__lo0bits+0x52>
 800b08a:	0798      	lsls	r0, r3, #30
 800b08c:	bf49      	itett	mi
 800b08e:	085b      	lsrmi	r3, r3, #1
 800b090:	089b      	lsrpl	r3, r3, #2
 800b092:	2001      	movmi	r0, #1
 800b094:	6013      	strmi	r3, [r2, #0]
 800b096:	bf5c      	itt	pl
 800b098:	2002      	movpl	r0, #2
 800b09a:	6013      	strpl	r3, [r2, #0]
 800b09c:	4770      	bx	lr
 800b09e:	b299      	uxth	r1, r3
 800b0a0:	b909      	cbnz	r1, 800b0a6 <__lo0bits+0x2a>
 800b0a2:	2010      	movs	r0, #16
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	b2d9      	uxtb	r1, r3
 800b0a8:	b909      	cbnz	r1, 800b0ae <__lo0bits+0x32>
 800b0aa:	3008      	adds	r0, #8
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	0719      	lsls	r1, r3, #28
 800b0b0:	bf04      	itt	eq
 800b0b2:	091b      	lsreq	r3, r3, #4
 800b0b4:	3004      	addeq	r0, #4
 800b0b6:	0799      	lsls	r1, r3, #30
 800b0b8:	bf04      	itt	eq
 800b0ba:	089b      	lsreq	r3, r3, #2
 800b0bc:	3002      	addeq	r0, #2
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	d403      	bmi.n	800b0ca <__lo0bits+0x4e>
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	f100 0001 	add.w	r0, r0, #1
 800b0c8:	d003      	beq.n	800b0d2 <__lo0bits+0x56>
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	4770      	bx	lr
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	4770      	bx	lr
 800b0d2:	2020      	movs	r0, #32
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__i2b>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2101      	movs	r1, #1
 800b0de:	f7ff febb 	bl	800ae58 <_Balloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	b928      	cbnz	r0, 800b0f2 <__i2b+0x1a>
 800b0e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b0ea:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <__i2b+0x24>)
 800b0ec:	4804      	ldr	r0, [pc, #16]	; (800b100 <__i2b+0x28>)
 800b0ee:	f000 fee9 	bl	800bec4 <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6144      	str	r4, [r0, #20]
 800b0f6:	6103      	str	r3, [r0, #16]
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800c29c 	.word	0x0800c29c
 800b100:	0800c33f 	.word	0x0800c33f

0800b104 <__multiply>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	4691      	mov	r9, r2
 800b10a:	690a      	ldr	r2, [r1, #16]
 800b10c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b110:	460c      	mov	r4, r1
 800b112:	429a      	cmp	r2, r3
 800b114:	bfbe      	ittt	lt
 800b116:	460b      	movlt	r3, r1
 800b118:	464c      	movlt	r4, r9
 800b11a:	4699      	movlt	r9, r3
 800b11c:	6927      	ldr	r7, [r4, #16]
 800b11e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b122:	68a3      	ldr	r3, [r4, #8]
 800b124:	6861      	ldr	r1, [r4, #4]
 800b126:	eb07 060a 	add.w	r6, r7, sl
 800b12a:	42b3      	cmp	r3, r6
 800b12c:	b085      	sub	sp, #20
 800b12e:	bfb8      	it	lt
 800b130:	3101      	addlt	r1, #1
 800b132:	f7ff fe91 	bl	800ae58 <_Balloc>
 800b136:	b930      	cbnz	r0, 800b146 <__multiply+0x42>
 800b138:	4602      	mov	r2, r0
 800b13a:	f240 115d 	movw	r1, #349	; 0x15d
 800b13e:	4b43      	ldr	r3, [pc, #268]	; (800b24c <__multiply+0x148>)
 800b140:	4843      	ldr	r0, [pc, #268]	; (800b250 <__multiply+0x14c>)
 800b142:	f000 febf 	bl	800bec4 <__assert_func>
 800b146:	f100 0514 	add.w	r5, r0, #20
 800b14a:	462b      	mov	r3, r5
 800b14c:	2200      	movs	r2, #0
 800b14e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b152:	4543      	cmp	r3, r8
 800b154:	d321      	bcc.n	800b19a <__multiply+0x96>
 800b156:	f104 0314 	add.w	r3, r4, #20
 800b15a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b15e:	f109 0314 	add.w	r3, r9, #20
 800b162:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b166:	9202      	str	r2, [sp, #8]
 800b168:	1b3a      	subs	r2, r7, r4
 800b16a:	3a15      	subs	r2, #21
 800b16c:	f022 0203 	bic.w	r2, r2, #3
 800b170:	3204      	adds	r2, #4
 800b172:	f104 0115 	add.w	r1, r4, #21
 800b176:	428f      	cmp	r7, r1
 800b178:	bf38      	it	cc
 800b17a:	2204      	movcc	r2, #4
 800b17c:	9201      	str	r2, [sp, #4]
 800b17e:	9a02      	ldr	r2, [sp, #8]
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	429a      	cmp	r2, r3
 800b184:	d80c      	bhi.n	800b1a0 <__multiply+0x9c>
 800b186:	2e00      	cmp	r6, #0
 800b188:	dd03      	ble.n	800b192 <__multiply+0x8e>
 800b18a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d059      	beq.n	800b246 <__multiply+0x142>
 800b192:	6106      	str	r6, [r0, #16]
 800b194:	b005      	add	sp, #20
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	f843 2b04 	str.w	r2, [r3], #4
 800b19e:	e7d8      	b.n	800b152 <__multiply+0x4e>
 800b1a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1a4:	f1ba 0f00 	cmp.w	sl, #0
 800b1a8:	d023      	beq.n	800b1f2 <__multiply+0xee>
 800b1aa:	46a9      	mov	r9, r5
 800b1ac:	f04f 0c00 	mov.w	ip, #0
 800b1b0:	f104 0e14 	add.w	lr, r4, #20
 800b1b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1b8:	f8d9 1000 	ldr.w	r1, [r9]
 800b1bc:	fa1f fb82 	uxth.w	fp, r2
 800b1c0:	b289      	uxth	r1, r1
 800b1c2:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1c6:	4461      	add	r1, ip
 800b1c8:	f8d9 c000 	ldr.w	ip, [r9]
 800b1cc:	0c12      	lsrs	r2, r2, #16
 800b1ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b1d2:	fb0a c202 	mla	r2, sl, r2, ip
 800b1d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1da:	b289      	uxth	r1, r1
 800b1dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1e0:	4577      	cmp	r7, lr
 800b1e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1e6:	f849 1b04 	str.w	r1, [r9], #4
 800b1ea:	d8e3      	bhi.n	800b1b4 <__multiply+0xb0>
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	f845 c002 	str.w	ip, [r5, r2]
 800b1f2:	9a03      	ldr	r2, [sp, #12]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1fa:	f1b9 0f00 	cmp.w	r9, #0
 800b1fe:	d020      	beq.n	800b242 <__multiply+0x13e>
 800b200:	46ae      	mov	lr, r5
 800b202:	f04f 0a00 	mov.w	sl, #0
 800b206:	6829      	ldr	r1, [r5, #0]
 800b208:	f104 0c14 	add.w	ip, r4, #20
 800b20c:	f8bc b000 	ldrh.w	fp, [ip]
 800b210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b214:	b289      	uxth	r1, r1
 800b216:	fb09 220b 	mla	r2, r9, fp, r2
 800b21a:	4492      	add	sl, r2
 800b21c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b220:	f84e 1b04 	str.w	r1, [lr], #4
 800b224:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b228:	f8be 1000 	ldrh.w	r1, [lr]
 800b22c:	0c12      	lsrs	r2, r2, #16
 800b22e:	fb09 1102 	mla	r1, r9, r2, r1
 800b232:	4567      	cmp	r7, ip
 800b234:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b23c:	d8e6      	bhi.n	800b20c <__multiply+0x108>
 800b23e:	9a01      	ldr	r2, [sp, #4]
 800b240:	50a9      	str	r1, [r5, r2]
 800b242:	3504      	adds	r5, #4
 800b244:	e79b      	b.n	800b17e <__multiply+0x7a>
 800b246:	3e01      	subs	r6, #1
 800b248:	e79d      	b.n	800b186 <__multiply+0x82>
 800b24a:	bf00      	nop
 800b24c:	0800c29c 	.word	0x0800c29c
 800b250:	0800c33f 	.word	0x0800c33f

0800b254 <__pow5mult>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	4615      	mov	r5, r2
 800b25a:	f012 0203 	ands.w	r2, r2, #3
 800b25e:	4606      	mov	r6, r0
 800b260:	460f      	mov	r7, r1
 800b262:	d007      	beq.n	800b274 <__pow5mult+0x20>
 800b264:	4c25      	ldr	r4, [pc, #148]	; (800b2fc <__pow5mult+0xa8>)
 800b266:	3a01      	subs	r2, #1
 800b268:	2300      	movs	r3, #0
 800b26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b26e:	f7ff fe55 	bl	800af1c <__multadd>
 800b272:	4607      	mov	r7, r0
 800b274:	10ad      	asrs	r5, r5, #2
 800b276:	d03d      	beq.n	800b2f4 <__pow5mult+0xa0>
 800b278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b27a:	b97c      	cbnz	r4, 800b29c <__pow5mult+0x48>
 800b27c:	2010      	movs	r0, #16
 800b27e:	f7fd ffe5 	bl	800924c <malloc>
 800b282:	4602      	mov	r2, r0
 800b284:	6270      	str	r0, [r6, #36]	; 0x24
 800b286:	b928      	cbnz	r0, 800b294 <__pow5mult+0x40>
 800b288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b28c:	4b1c      	ldr	r3, [pc, #112]	; (800b300 <__pow5mult+0xac>)
 800b28e:	481d      	ldr	r0, [pc, #116]	; (800b304 <__pow5mult+0xb0>)
 800b290:	f000 fe18 	bl	800bec4 <__assert_func>
 800b294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b298:	6004      	str	r4, [r0, #0]
 800b29a:	60c4      	str	r4, [r0, #12]
 800b29c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a4:	b94c      	cbnz	r4, 800b2ba <__pow5mult+0x66>
 800b2a6:	f240 2171 	movw	r1, #625	; 0x271
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff ff14 	bl	800b0d8 <__i2b>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	07eb      	lsls	r3, r5, #31
 800b2c0:	d50a      	bpl.n	800b2d8 <__pow5mult+0x84>
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7ff ff1c 	bl	800b104 <__multiply>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff fe01 	bl	800aed8 <_Bfree>
 800b2d6:	4647      	mov	r7, r8
 800b2d8:	106d      	asrs	r5, r5, #1
 800b2da:	d00b      	beq.n	800b2f4 <__pow5mult+0xa0>
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	b938      	cbnz	r0, 800b2f0 <__pow5mult+0x9c>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff ff0d 	bl	800b104 <__multiply>
 800b2ea:	6020      	str	r0, [r4, #0]
 800b2ec:	f8c0 9000 	str.w	r9, [r0]
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	e7e4      	b.n	800b2be <__pow5mult+0x6a>
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fa:	bf00      	nop
 800b2fc:	0800c490 	.word	0x0800c490
 800b300:	0800c328 	.word	0x0800c328
 800b304:	0800c33f 	.word	0x0800c33f

0800b308 <__lshift>:
 800b308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b30c:	460c      	mov	r4, r1
 800b30e:	4607      	mov	r7, r0
 800b310:	4691      	mov	r9, r2
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	6849      	ldr	r1, [r1, #4]
 800b316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b320:	f108 0601 	add.w	r6, r8, #1
 800b324:	42b3      	cmp	r3, r6
 800b326:	db0b      	blt.n	800b340 <__lshift+0x38>
 800b328:	4638      	mov	r0, r7
 800b32a:	f7ff fd95 	bl	800ae58 <_Balloc>
 800b32e:	4605      	mov	r5, r0
 800b330:	b948      	cbnz	r0, 800b346 <__lshift+0x3e>
 800b332:	4602      	mov	r2, r0
 800b334:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b338:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <__lshift+0xd8>)
 800b33a:	482a      	ldr	r0, [pc, #168]	; (800b3e4 <__lshift+0xdc>)
 800b33c:	f000 fdc2 	bl	800bec4 <__assert_func>
 800b340:	3101      	adds	r1, #1
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	e7ee      	b.n	800b324 <__lshift+0x1c>
 800b346:	2300      	movs	r3, #0
 800b348:	f100 0114 	add.w	r1, r0, #20
 800b34c:	f100 0210 	add.w	r2, r0, #16
 800b350:	4618      	mov	r0, r3
 800b352:	4553      	cmp	r3, sl
 800b354:	db37      	blt.n	800b3c6 <__lshift+0xbe>
 800b356:	6920      	ldr	r0, [r4, #16]
 800b358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b35c:	f104 0314 	add.w	r3, r4, #20
 800b360:	f019 091f 	ands.w	r9, r9, #31
 800b364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b36c:	d02f      	beq.n	800b3ce <__lshift+0xc6>
 800b36e:	468a      	mov	sl, r1
 800b370:	f04f 0c00 	mov.w	ip, #0
 800b374:	f1c9 0e20 	rsb	lr, r9, #32
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	fa02 f209 	lsl.w	r2, r2, r9
 800b37e:	ea42 020c 	orr.w	r2, r2, ip
 800b382:	f84a 2b04 	str.w	r2, [sl], #4
 800b386:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38a:	4298      	cmp	r0, r3
 800b38c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b390:	d8f2      	bhi.n	800b378 <__lshift+0x70>
 800b392:	1b03      	subs	r3, r0, r4
 800b394:	3b15      	subs	r3, #21
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	3304      	adds	r3, #4
 800b39c:	f104 0215 	add.w	r2, r4, #21
 800b3a0:	4290      	cmp	r0, r2
 800b3a2:	bf38      	it	cc
 800b3a4:	2304      	movcc	r3, #4
 800b3a6:	f841 c003 	str.w	ip, [r1, r3]
 800b3aa:	f1bc 0f00 	cmp.w	ip, #0
 800b3ae:	d001      	beq.n	800b3b4 <__lshift+0xac>
 800b3b0:	f108 0602 	add.w	r6, r8, #2
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	612e      	str	r6, [r5, #16]
 800b3bc:	f7ff fd8c 	bl	800aed8 <_Bfree>
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	e7c1      	b.n	800b352 <__lshift+0x4a>
 800b3ce:	3904      	subs	r1, #4
 800b3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d4:	4298      	cmp	r0, r3
 800b3d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3da:	d8f9      	bhi.n	800b3d0 <__lshift+0xc8>
 800b3dc:	e7ea      	b.n	800b3b4 <__lshift+0xac>
 800b3de:	bf00      	nop
 800b3e0:	0800c29c 	.word	0x0800c29c
 800b3e4:	0800c33f 	.word	0x0800c33f

0800b3e8 <__mcmp>:
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	690a      	ldr	r2, [r1, #16]
 800b3ec:	6900      	ldr	r0, [r0, #16]
 800b3ee:	b530      	push	{r4, r5, lr}
 800b3f0:	1a80      	subs	r0, r0, r2
 800b3f2:	d10d      	bne.n	800b410 <__mcmp+0x28>
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	3114      	adds	r1, #20
 800b3f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b408:	4295      	cmp	r5, r2
 800b40a:	d002      	beq.n	800b412 <__mcmp+0x2a>
 800b40c:	d304      	bcc.n	800b418 <__mcmp+0x30>
 800b40e:	2001      	movs	r0, #1
 800b410:	bd30      	pop	{r4, r5, pc}
 800b412:	42a3      	cmp	r3, r4
 800b414:	d3f4      	bcc.n	800b400 <__mcmp+0x18>
 800b416:	e7fb      	b.n	800b410 <__mcmp+0x28>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	e7f8      	b.n	800b410 <__mcmp+0x28>
	...

0800b420 <__mdiff>:
 800b420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	460d      	mov	r5, r1
 800b426:	4607      	mov	r7, r0
 800b428:	4611      	mov	r1, r2
 800b42a:	4628      	mov	r0, r5
 800b42c:	4614      	mov	r4, r2
 800b42e:	f7ff ffdb 	bl	800b3e8 <__mcmp>
 800b432:	1e06      	subs	r6, r0, #0
 800b434:	d111      	bne.n	800b45a <__mdiff+0x3a>
 800b436:	4631      	mov	r1, r6
 800b438:	4638      	mov	r0, r7
 800b43a:	f7ff fd0d 	bl	800ae58 <_Balloc>
 800b43e:	4602      	mov	r2, r0
 800b440:	b928      	cbnz	r0, 800b44e <__mdiff+0x2e>
 800b442:	f240 2132 	movw	r1, #562	; 0x232
 800b446:	4b3a      	ldr	r3, [pc, #232]	; (800b530 <__mdiff+0x110>)
 800b448:	483a      	ldr	r0, [pc, #232]	; (800b534 <__mdiff+0x114>)
 800b44a:	f000 fd3b 	bl	800bec4 <__assert_func>
 800b44e:	2301      	movs	r3, #1
 800b450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b454:	4610      	mov	r0, r2
 800b456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	bfa4      	itt	ge
 800b45c:	4623      	movge	r3, r4
 800b45e:	462c      	movge	r4, r5
 800b460:	4638      	mov	r0, r7
 800b462:	6861      	ldr	r1, [r4, #4]
 800b464:	bfa6      	itte	ge
 800b466:	461d      	movge	r5, r3
 800b468:	2600      	movge	r6, #0
 800b46a:	2601      	movlt	r6, #1
 800b46c:	f7ff fcf4 	bl	800ae58 <_Balloc>
 800b470:	4602      	mov	r2, r0
 800b472:	b918      	cbnz	r0, 800b47c <__mdiff+0x5c>
 800b474:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b478:	4b2d      	ldr	r3, [pc, #180]	; (800b530 <__mdiff+0x110>)
 800b47a:	e7e5      	b.n	800b448 <__mdiff+0x28>
 800b47c:	f102 0814 	add.w	r8, r2, #20
 800b480:	46c2      	mov	sl, r8
 800b482:	f04f 0c00 	mov.w	ip, #0
 800b486:	6927      	ldr	r7, [r4, #16]
 800b488:	60c6      	str	r6, [r0, #12]
 800b48a:	692e      	ldr	r6, [r5, #16]
 800b48c:	f104 0014 	add.w	r0, r4, #20
 800b490:	f105 0914 	add.w	r9, r5, #20
 800b494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b49c:	3410      	adds	r4, #16
 800b49e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b4a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4a6:	fa1f f18b 	uxth.w	r1, fp
 800b4aa:	448c      	add	ip, r1
 800b4ac:	b299      	uxth	r1, r3
 800b4ae:	0c1b      	lsrs	r3, r3, #16
 800b4b0:	ebac 0101 	sub.w	r1, ip, r1
 800b4b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b4bc:	b289      	uxth	r1, r1
 800b4be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b4c2:	454e      	cmp	r6, r9
 800b4c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b4c8:	f84a 3b04 	str.w	r3, [sl], #4
 800b4cc:	d8e7      	bhi.n	800b49e <__mdiff+0x7e>
 800b4ce:	1b73      	subs	r3, r6, r5
 800b4d0:	3b15      	subs	r3, #21
 800b4d2:	f023 0303 	bic.w	r3, r3, #3
 800b4d6:	3515      	adds	r5, #21
 800b4d8:	3304      	adds	r3, #4
 800b4da:	42ae      	cmp	r6, r5
 800b4dc:	bf38      	it	cc
 800b4de:	2304      	movcc	r3, #4
 800b4e0:	4418      	add	r0, r3
 800b4e2:	4443      	add	r3, r8
 800b4e4:	461e      	mov	r6, r3
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	4575      	cmp	r5, lr
 800b4ea:	d30e      	bcc.n	800b50a <__mdiff+0xea>
 800b4ec:	f10e 0103 	add.w	r1, lr, #3
 800b4f0:	1a09      	subs	r1, r1, r0
 800b4f2:	f021 0103 	bic.w	r1, r1, #3
 800b4f6:	3803      	subs	r0, #3
 800b4f8:	4586      	cmp	lr, r0
 800b4fa:	bf38      	it	cc
 800b4fc:	2100      	movcc	r1, #0
 800b4fe:	4419      	add	r1, r3
 800b500:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b504:	b18b      	cbz	r3, 800b52a <__mdiff+0x10a>
 800b506:	6117      	str	r7, [r2, #16]
 800b508:	e7a4      	b.n	800b454 <__mdiff+0x34>
 800b50a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b50e:	fa1f f188 	uxth.w	r1, r8
 800b512:	4461      	add	r1, ip
 800b514:	140c      	asrs	r4, r1, #16
 800b516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b51a:	b289      	uxth	r1, r1
 800b51c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b520:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b524:	f846 1b04 	str.w	r1, [r6], #4
 800b528:	e7de      	b.n	800b4e8 <__mdiff+0xc8>
 800b52a:	3f01      	subs	r7, #1
 800b52c:	e7e8      	b.n	800b500 <__mdiff+0xe0>
 800b52e:	bf00      	nop
 800b530:	0800c29c 	.word	0x0800c29c
 800b534:	0800c33f 	.word	0x0800c33f

0800b538 <__ulp>:
 800b538:	4b11      	ldr	r3, [pc, #68]	; (800b580 <__ulp+0x48>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b540:	2b00      	cmp	r3, #0
 800b542:	dd02      	ble.n	800b54a <__ulp+0x12>
 800b544:	2000      	movs	r0, #0
 800b546:	4619      	mov	r1, r3
 800b548:	4770      	bx	lr
 800b54a:	425b      	negs	r3, r3
 800b54c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b550:	f04f 0000 	mov.w	r0, #0
 800b554:	f04f 0100 	mov.w	r1, #0
 800b558:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b55c:	da04      	bge.n	800b568 <__ulp+0x30>
 800b55e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b562:	fa43 f102 	asr.w	r1, r3, r2
 800b566:	4770      	bx	lr
 800b568:	f1a2 0314 	sub.w	r3, r2, #20
 800b56c:	2b1e      	cmp	r3, #30
 800b56e:	bfd6      	itet	le
 800b570:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b574:	2301      	movgt	r3, #1
 800b576:	fa22 f303 	lsrle.w	r3, r2, r3
 800b57a:	4618      	mov	r0, r3
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	7ff00000 	.word	0x7ff00000

0800b584 <__b2d>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	6907      	ldr	r7, [r0, #16]
 800b58a:	f100 0914 	add.w	r9, r0, #20
 800b58e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b592:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b596:	f1a7 0804 	sub.w	r8, r7, #4
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff fd4e 	bl	800b03c <__hi0bits>
 800b5a0:	f1c0 0320 	rsb	r3, r0, #32
 800b5a4:	280a      	cmp	r0, #10
 800b5a6:	600b      	str	r3, [r1, #0]
 800b5a8:	491f      	ldr	r1, [pc, #124]	; (800b628 <__b2d+0xa4>)
 800b5aa:	dc17      	bgt.n	800b5dc <__b2d+0x58>
 800b5ac:	45c1      	cmp	r9, r8
 800b5ae:	bf28      	it	cs
 800b5b0:	2200      	movcs	r2, #0
 800b5b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5b6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b5ba:	bf38      	it	cc
 800b5bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5c0:	ea43 0501 	orr.w	r5, r3, r1
 800b5c4:	f100 0315 	add.w	r3, r0, #21
 800b5c8:	fa06 f303 	lsl.w	r3, r6, r3
 800b5cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800b5d0:	ea43 0402 	orr.w	r4, r3, r2
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5dc:	45c1      	cmp	r9, r8
 800b5de:	bf2e      	itee	cs
 800b5e0:	2200      	movcs	r2, #0
 800b5e2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5e6:	f1a7 0808 	subcc.w	r8, r7, #8
 800b5ea:	f1b0 030b 	subs.w	r3, r0, #11
 800b5ee:	d016      	beq.n	800b61e <__b2d+0x9a>
 800b5f0:	f1c3 0720 	rsb	r7, r3, #32
 800b5f4:	fa22 f107 	lsr.w	r1, r2, r7
 800b5f8:	45c8      	cmp	r8, r9
 800b5fa:	fa06 f603 	lsl.w	r6, r6, r3
 800b5fe:	ea46 0601 	orr.w	r6, r6, r1
 800b602:	bf94      	ite	ls
 800b604:	2100      	movls	r1, #0
 800b606:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b60a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b60e:	fa02 f003 	lsl.w	r0, r2, r3
 800b612:	40f9      	lsrs	r1, r7
 800b614:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b618:	ea40 0401 	orr.w	r4, r0, r1
 800b61c:	e7da      	b.n	800b5d4 <__b2d+0x50>
 800b61e:	4614      	mov	r4, r2
 800b620:	ea46 0501 	orr.w	r5, r6, r1
 800b624:	e7d6      	b.n	800b5d4 <__b2d+0x50>
 800b626:	bf00      	nop
 800b628:	3ff00000 	.word	0x3ff00000

0800b62c <__d2b>:
 800b62c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b630:	2101      	movs	r1, #1
 800b632:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b636:	4690      	mov	r8, r2
 800b638:	461d      	mov	r5, r3
 800b63a:	f7ff fc0d 	bl	800ae58 <_Balloc>
 800b63e:	4604      	mov	r4, r0
 800b640:	b930      	cbnz	r0, 800b650 <__d2b+0x24>
 800b642:	4602      	mov	r2, r0
 800b644:	f240 310a 	movw	r1, #778	; 0x30a
 800b648:	4b24      	ldr	r3, [pc, #144]	; (800b6dc <__d2b+0xb0>)
 800b64a:	4825      	ldr	r0, [pc, #148]	; (800b6e0 <__d2b+0xb4>)
 800b64c:	f000 fc3a 	bl	800bec4 <__assert_func>
 800b650:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b654:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b658:	bb2d      	cbnz	r5, 800b6a6 <__d2b+0x7a>
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	f1b8 0300 	subs.w	r3, r8, #0
 800b660:	d026      	beq.n	800b6b0 <__d2b+0x84>
 800b662:	4668      	mov	r0, sp
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	f7ff fd09 	bl	800b07c <__lo0bits>
 800b66a:	9900      	ldr	r1, [sp, #0]
 800b66c:	b1f0      	cbz	r0, 800b6ac <__d2b+0x80>
 800b66e:	9a01      	ldr	r2, [sp, #4]
 800b670:	f1c0 0320 	rsb	r3, r0, #32
 800b674:	fa02 f303 	lsl.w	r3, r2, r3
 800b678:	430b      	orrs	r3, r1
 800b67a:	40c2      	lsrs	r2, r0
 800b67c:	6163      	str	r3, [r4, #20]
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	bf14      	ite	ne
 800b686:	2102      	movne	r1, #2
 800b688:	2101      	moveq	r1, #1
 800b68a:	61a3      	str	r3, [r4, #24]
 800b68c:	6121      	str	r1, [r4, #16]
 800b68e:	b1c5      	cbz	r5, 800b6c2 <__d2b+0x96>
 800b690:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b694:	4405      	add	r5, r0
 800b696:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b69a:	603d      	str	r5, [r7, #0]
 800b69c:	6030      	str	r0, [r6, #0]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	b002      	add	sp, #8
 800b6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6aa:	e7d6      	b.n	800b65a <__d2b+0x2e>
 800b6ac:	6161      	str	r1, [r4, #20]
 800b6ae:	e7e7      	b.n	800b680 <__d2b+0x54>
 800b6b0:	a801      	add	r0, sp, #4
 800b6b2:	f7ff fce3 	bl	800b07c <__lo0bits>
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	9b01      	ldr	r3, [sp, #4]
 800b6ba:	6121      	str	r1, [r4, #16]
 800b6bc:	6163      	str	r3, [r4, #20]
 800b6be:	3020      	adds	r0, #32
 800b6c0:	e7e5      	b.n	800b68e <__d2b+0x62>
 800b6c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b6c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6ca:	6038      	str	r0, [r7, #0]
 800b6cc:	6918      	ldr	r0, [r3, #16]
 800b6ce:	f7ff fcb5 	bl	800b03c <__hi0bits>
 800b6d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b6d6:	6031      	str	r1, [r6, #0]
 800b6d8:	e7e1      	b.n	800b69e <__d2b+0x72>
 800b6da:	bf00      	nop
 800b6dc:	0800c29c 	.word	0x0800c29c
 800b6e0:	0800c33f 	.word	0x0800c33f

0800b6e4 <__ratio>:
 800b6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	4688      	mov	r8, r1
 800b6ea:	4669      	mov	r1, sp
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	f7ff ff49 	bl	800b584 <__b2d>
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	a901      	add	r1, sp, #4
 800b6fc:	f7ff ff42 	bl	800b584 <__b2d>
 800b700:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b704:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b708:	468b      	mov	fp, r1
 800b70a:	eba3 0c02 	sub.w	ip, r3, r2
 800b70e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bfd5      	itete	le
 800b71c:	460a      	movle	r2, r1
 800b71e:	462a      	movgt	r2, r5
 800b720:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b724:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b728:	bfd8      	it	le
 800b72a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b72e:	465b      	mov	r3, fp
 800b730:	4602      	mov	r2, r0
 800b732:	4639      	mov	r1, r7
 800b734:	4620      	mov	r0, r4
 800b736:	f7f4 fff9 	bl	800072c <__aeabi_ddiv>
 800b73a:	b003      	add	sp, #12
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b740 <__copybits>:
 800b740:	3901      	subs	r1, #1
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	1149      	asrs	r1, r1, #5
 800b746:	6914      	ldr	r4, [r2, #16]
 800b748:	3101      	adds	r1, #1
 800b74a:	f102 0314 	add.w	r3, r2, #20
 800b74e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b752:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b756:	1f05      	subs	r5, r0, #4
 800b758:	42a3      	cmp	r3, r4
 800b75a:	d30c      	bcc.n	800b776 <__copybits+0x36>
 800b75c:	1aa3      	subs	r3, r4, r2
 800b75e:	3b11      	subs	r3, #17
 800b760:	f023 0303 	bic.w	r3, r3, #3
 800b764:	3211      	adds	r2, #17
 800b766:	42a2      	cmp	r2, r4
 800b768:	bf88      	it	hi
 800b76a:	2300      	movhi	r3, #0
 800b76c:	4418      	add	r0, r3
 800b76e:	2300      	movs	r3, #0
 800b770:	4288      	cmp	r0, r1
 800b772:	d305      	bcc.n	800b780 <__copybits+0x40>
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	f853 6b04 	ldr.w	r6, [r3], #4
 800b77a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b77e:	e7eb      	b.n	800b758 <__copybits+0x18>
 800b780:	f840 3b04 	str.w	r3, [r0], #4
 800b784:	e7f4      	b.n	800b770 <__copybits+0x30>

0800b786 <__any_on>:
 800b786:	f100 0214 	add.w	r2, r0, #20
 800b78a:	6900      	ldr	r0, [r0, #16]
 800b78c:	114b      	asrs	r3, r1, #5
 800b78e:	4298      	cmp	r0, r3
 800b790:	b510      	push	{r4, lr}
 800b792:	db11      	blt.n	800b7b8 <__any_on+0x32>
 800b794:	dd0a      	ble.n	800b7ac <__any_on+0x26>
 800b796:	f011 011f 	ands.w	r1, r1, #31
 800b79a:	d007      	beq.n	800b7ac <__any_on+0x26>
 800b79c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7a0:	fa24 f001 	lsr.w	r0, r4, r1
 800b7a4:	fa00 f101 	lsl.w	r1, r0, r1
 800b7a8:	428c      	cmp	r4, r1
 800b7aa:	d10b      	bne.n	800b7c4 <__any_on+0x3e>
 800b7ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d803      	bhi.n	800b7bc <__any_on+0x36>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	bd10      	pop	{r4, pc}
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	e7f7      	b.n	800b7ac <__any_on+0x26>
 800b7bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	d0f5      	beq.n	800b7b0 <__any_on+0x2a>
 800b7c4:	2001      	movs	r0, #1
 800b7c6:	e7f6      	b.n	800b7b6 <__any_on+0x30>

0800b7c8 <_calloc_r>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	fba1 5402 	umull	r5, r4, r1, r2
 800b7ce:	b934      	cbnz	r4, 800b7de <_calloc_r+0x16>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	f7fd fdb3 	bl	800933c <_malloc_r>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	b928      	cbnz	r0, 800b7e6 <_calloc_r+0x1e>
 800b7da:	4630      	mov	r0, r6
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
 800b7de:	220c      	movs	r2, #12
 800b7e0:	2600      	movs	r6, #0
 800b7e2:	6002      	str	r2, [r0, #0]
 800b7e4:	e7f9      	b.n	800b7da <_calloc_r+0x12>
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	f7fd fd37 	bl	800925c <memset>
 800b7ee:	e7f4      	b.n	800b7da <_calloc_r+0x12>

0800b7f0 <__sfputc_r>:
 800b7f0:	6893      	ldr	r3, [r2, #8]
 800b7f2:	b410      	push	{r4}
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	6093      	str	r3, [r2, #8]
 800b7fa:	da07      	bge.n	800b80c <__sfputc_r+0x1c>
 800b7fc:	6994      	ldr	r4, [r2, #24]
 800b7fe:	42a3      	cmp	r3, r4
 800b800:	db01      	blt.n	800b806 <__sfputc_r+0x16>
 800b802:	290a      	cmp	r1, #10
 800b804:	d102      	bne.n	800b80c <__sfputc_r+0x1c>
 800b806:	bc10      	pop	{r4}
 800b808:	f7fe bcb8 	b.w	800a17c <__swbuf_r>
 800b80c:	6813      	ldr	r3, [r2, #0]
 800b80e:	1c58      	adds	r0, r3, #1
 800b810:	6010      	str	r0, [r2, #0]
 800b812:	7019      	strb	r1, [r3, #0]
 800b814:	4608      	mov	r0, r1
 800b816:	bc10      	pop	{r4}
 800b818:	4770      	bx	lr

0800b81a <__sfputs_r>:
 800b81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4614      	mov	r4, r2
 800b822:	18d5      	adds	r5, r2, r3
 800b824:	42ac      	cmp	r4, r5
 800b826:	d101      	bne.n	800b82c <__sfputs_r+0x12>
 800b828:	2000      	movs	r0, #0
 800b82a:	e007      	b.n	800b83c <__sfputs_r+0x22>
 800b82c:	463a      	mov	r2, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b834:	f7ff ffdc 	bl	800b7f0 <__sfputc_r>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d1f3      	bne.n	800b824 <__sfputs_r+0xa>
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b840 <_vfiprintf_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	460d      	mov	r5, r1
 800b846:	4614      	mov	r4, r2
 800b848:	4698      	mov	r8, r3
 800b84a:	4606      	mov	r6, r0
 800b84c:	b09d      	sub	sp, #116	; 0x74
 800b84e:	b118      	cbz	r0, 800b858 <_vfiprintf_r+0x18>
 800b850:	6983      	ldr	r3, [r0, #24]
 800b852:	b90b      	cbnz	r3, 800b858 <_vfiprintf_r+0x18>
 800b854:	f7fe fe68 	bl	800a528 <__sinit>
 800b858:	4b89      	ldr	r3, [pc, #548]	; (800ba80 <_vfiprintf_r+0x240>)
 800b85a:	429d      	cmp	r5, r3
 800b85c:	d11b      	bne.n	800b896 <_vfiprintf_r+0x56>
 800b85e:	6875      	ldr	r5, [r6, #4]
 800b860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d405      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86e:	f7ff fa60 	bl	800ad32 <__retarget_lock_acquire_recursive>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d501      	bpl.n	800b87c <_vfiprintf_r+0x3c>
 800b878:	692b      	ldr	r3, [r5, #16]
 800b87a:	b9eb      	cbnz	r3, 800b8b8 <_vfiprintf_r+0x78>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f7fe fcce 	bl	800a220 <__swsetup_r>
 800b884:	b1c0      	cbz	r0, 800b8b8 <_vfiprintf_r+0x78>
 800b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b888:	07dc      	lsls	r4, r3, #31
 800b88a:	d50e      	bpl.n	800b8aa <_vfiprintf_r+0x6a>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	b01d      	add	sp, #116	; 0x74
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	4b7b      	ldr	r3, [pc, #492]	; (800ba84 <_vfiprintf_r+0x244>)
 800b898:	429d      	cmp	r5, r3
 800b89a:	d101      	bne.n	800b8a0 <_vfiprintf_r+0x60>
 800b89c:	68b5      	ldr	r5, [r6, #8]
 800b89e:	e7df      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8a0:	4b79      	ldr	r3, [pc, #484]	; (800ba88 <_vfiprintf_r+0x248>)
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	bf08      	it	eq
 800b8a6:	68f5      	ldreq	r5, [r6, #12]
 800b8a8:	e7da      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	0598      	lsls	r0, r3, #22
 800b8ae:	d4ed      	bmi.n	800b88c <_vfiprintf_r+0x4c>
 800b8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b2:	f7ff fa3f 	bl	800ad34 <__retarget_lock_release_recursive>
 800b8b6:	e7e9      	b.n	800b88c <_vfiprintf_r+0x4c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	2320      	movs	r3, #32
 800b8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8c2:	2330      	movs	r3, #48	; 0x30
 800b8c4:	f04f 0901 	mov.w	r9, #1
 800b8c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ba8c <_vfiprintf_r+0x24c>
 800b8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8d4:	4623      	mov	r3, r4
 800b8d6:	469a      	mov	sl, r3
 800b8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8dc:	b10a      	cbz	r2, 800b8e2 <_vfiprintf_r+0xa2>
 800b8de:	2a25      	cmp	r2, #37	; 0x25
 800b8e0:	d1f9      	bne.n	800b8d6 <_vfiprintf_r+0x96>
 800b8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e6:	d00b      	beq.n	800b900 <_vfiprintf_r+0xc0>
 800b8e8:	465b      	mov	r3, fp
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff ff93 	bl	800b81a <__sfputs_r>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	f000 80aa 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fc:	445a      	add	r2, fp
 800b8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b900:	f89a 3000 	ldrb.w	r3, [sl]
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 80a2 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b914:	f10a 0a01 	add.w	sl, sl, #1
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b920:	931a      	str	r3, [sp, #104]	; 0x68
 800b922:	4654      	mov	r4, sl
 800b924:	2205      	movs	r2, #5
 800b926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92a:	4858      	ldr	r0, [pc, #352]	; (800ba8c <_vfiprintf_r+0x24c>)
 800b92c:	f000 fb3e 	bl	800bfac <memchr>
 800b930:	9a04      	ldr	r2, [sp, #16]
 800b932:	b9d8      	cbnz	r0, 800b96c <_vfiprintf_r+0x12c>
 800b934:	06d1      	lsls	r1, r2, #27
 800b936:	bf44      	itt	mi
 800b938:	2320      	movmi	r3, #32
 800b93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93e:	0713      	lsls	r3, r2, #28
 800b940:	bf44      	itt	mi
 800b942:	232b      	movmi	r3, #43	; 0x2b
 800b944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b948:	f89a 3000 	ldrb.w	r3, [sl]
 800b94c:	2b2a      	cmp	r3, #42	; 0x2a
 800b94e:	d015      	beq.n	800b97c <_vfiprintf_r+0x13c>
 800b950:	4654      	mov	r4, sl
 800b952:	2000      	movs	r0, #0
 800b954:	f04f 0c0a 	mov.w	ip, #10
 800b958:	9a07      	ldr	r2, [sp, #28]
 800b95a:	4621      	mov	r1, r4
 800b95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b960:	3b30      	subs	r3, #48	; 0x30
 800b962:	2b09      	cmp	r3, #9
 800b964:	d94e      	bls.n	800ba04 <_vfiprintf_r+0x1c4>
 800b966:	b1b0      	cbz	r0, 800b996 <_vfiprintf_r+0x156>
 800b968:	9207      	str	r2, [sp, #28]
 800b96a:	e014      	b.n	800b996 <_vfiprintf_r+0x156>
 800b96c:	eba0 0308 	sub.w	r3, r0, r8
 800b970:	fa09 f303 	lsl.w	r3, r9, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	46a2      	mov	sl, r4
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	e7d2      	b.n	800b922 <_vfiprintf_r+0xe2>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	1d19      	adds	r1, r3, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	9103      	str	r1, [sp, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfbb      	ittet	lt
 800b988:	425b      	neglt	r3, r3
 800b98a:	f042 0202 	orrlt.w	r2, r2, #2
 800b98e:	9307      	strge	r3, [sp, #28]
 800b990:	9307      	strlt	r3, [sp, #28]
 800b992:	bfb8      	it	lt
 800b994:	9204      	strlt	r2, [sp, #16]
 800b996:	7823      	ldrb	r3, [r4, #0]
 800b998:	2b2e      	cmp	r3, #46	; 0x2e
 800b99a:	d10c      	bne.n	800b9b6 <_vfiprintf_r+0x176>
 800b99c:	7863      	ldrb	r3, [r4, #1]
 800b99e:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a0:	d135      	bne.n	800ba0e <_vfiprintf_r+0x1ce>
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	3402      	adds	r4, #2
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	9203      	str	r2, [sp, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	bfb8      	it	lt
 800b9b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ba90 <_vfiprintf_r+0x250>
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	4650      	mov	r0, sl
 800b9be:	7821      	ldrb	r1, [r4, #0]
 800b9c0:	f000 faf4 	bl	800bfac <memchr>
 800b9c4:	b140      	cbz	r0, 800b9d8 <_vfiprintf_r+0x198>
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	eba0 000a 	sub.w	r0, r0, sl
 800b9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b9d0:	9b04      	ldr	r3, [sp, #16]
 800b9d2:	3401      	adds	r4, #1
 800b9d4:	4303      	orrs	r3, r0
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9dc:	2206      	movs	r2, #6
 800b9de:	482d      	ldr	r0, [pc, #180]	; (800ba94 <_vfiprintf_r+0x254>)
 800b9e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9e4:	f000 fae2 	bl	800bfac <memchr>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d03f      	beq.n	800ba6c <_vfiprintf_r+0x22c>
 800b9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ba98 <_vfiprintf_r+0x258>)
 800b9ee:	bb1b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x1f8>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	3307      	adds	r3, #7
 800b9f4:	f023 0307 	bic.w	r3, r3, #7
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	9303      	str	r3, [sp, #12]
 800b9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fe:	443b      	add	r3, r7
 800ba00:	9309      	str	r3, [sp, #36]	; 0x24
 800ba02:	e767      	b.n	800b8d4 <_vfiprintf_r+0x94>
 800ba04:	460c      	mov	r4, r1
 800ba06:	2001      	movs	r0, #1
 800ba08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba0c:	e7a5      	b.n	800b95a <_vfiprintf_r+0x11a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f04f 0c0a 	mov.w	ip, #10
 800ba14:	4619      	mov	r1, r3
 800ba16:	3401      	adds	r4, #1
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba20:	3a30      	subs	r2, #48	; 0x30
 800ba22:	2a09      	cmp	r2, #9
 800ba24:	d903      	bls.n	800ba2e <_vfiprintf_r+0x1ee>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0c5      	beq.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2a:	9105      	str	r1, [sp, #20]
 800ba2c:	e7c3      	b.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	2301      	movs	r3, #1
 800ba32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba36:	e7f0      	b.n	800ba1a <_vfiprintf_r+0x1da>
 800ba38:	ab03      	add	r3, sp, #12
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4630      	mov	r0, r6
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <_vfiprintf_r+0x25c>)
 800ba42:	a904      	add	r1, sp, #16
 800ba44:	f3af 8000 	nop.w
 800ba48:	4607      	mov	r7, r0
 800ba4a:	1c78      	adds	r0, r7, #1
 800ba4c:	d1d6      	bne.n	800b9fc <_vfiprintf_r+0x1bc>
 800ba4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba50:	07d9      	lsls	r1, r3, #31
 800ba52:	d405      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba54:	89ab      	ldrh	r3, [r5, #12]
 800ba56:	059a      	lsls	r2, r3, #22
 800ba58:	d402      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba5c:	f7ff f96a 	bl	800ad34 <__retarget_lock_release_recursive>
 800ba60:	89ab      	ldrh	r3, [r5, #12]
 800ba62:	065b      	lsls	r3, r3, #25
 800ba64:	f53f af12 	bmi.w	800b88c <_vfiprintf_r+0x4c>
 800ba68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba6a:	e711      	b.n	800b890 <_vfiprintf_r+0x50>
 800ba6c:	ab03      	add	r3, sp, #12
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	462a      	mov	r2, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <_vfiprintf_r+0x25c>)
 800ba76:	a904      	add	r1, sp, #16
 800ba78:	f000 f882 	bl	800bb80 <_printf_i>
 800ba7c:	e7e4      	b.n	800ba48 <_vfiprintf_r+0x208>
 800ba7e:	bf00      	nop
 800ba80:	0800c25c 	.word	0x0800c25c
 800ba84:	0800c27c 	.word	0x0800c27c
 800ba88:	0800c23c 	.word	0x0800c23c
 800ba8c:	0800c49c 	.word	0x0800c49c
 800ba90:	0800c4a2 	.word	0x0800c4a2
 800ba94:	0800c4a6 	.word	0x0800c4a6
 800ba98:	00000000 	.word	0x00000000
 800ba9c:	0800b81b 	.word	0x0800b81b

0800baa0 <_printf_common>:
 800baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa4:	4616      	mov	r6, r2
 800baa6:	4699      	mov	r9, r3
 800baa8:	688a      	ldr	r2, [r1, #8]
 800baaa:	690b      	ldr	r3, [r1, #16]
 800baac:	4607      	mov	r7, r0
 800baae:	4293      	cmp	r3, r2
 800bab0:	bfb8      	it	lt
 800bab2:	4613      	movlt	r3, r2
 800bab4:	6033      	str	r3, [r6, #0]
 800bab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baba:	460c      	mov	r4, r1
 800babc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bac0:	b10a      	cbz	r2, 800bac6 <_printf_common+0x26>
 800bac2:	3301      	adds	r3, #1
 800bac4:	6033      	str	r3, [r6, #0]
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	0699      	lsls	r1, r3, #26
 800baca:	bf42      	ittt	mi
 800bacc:	6833      	ldrmi	r3, [r6, #0]
 800bace:	3302      	addmi	r3, #2
 800bad0:	6033      	strmi	r3, [r6, #0]
 800bad2:	6825      	ldr	r5, [r4, #0]
 800bad4:	f015 0506 	ands.w	r5, r5, #6
 800bad8:	d106      	bne.n	800bae8 <_printf_common+0x48>
 800bada:	f104 0a19 	add.w	sl, r4, #25
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	6832      	ldr	r2, [r6, #0]
 800bae2:	1a9b      	subs	r3, r3, r2
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dc28      	bgt.n	800bb3a <_printf_common+0x9a>
 800bae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800baec:	1e13      	subs	r3, r2, #0
 800baee:	6822      	ldr	r2, [r4, #0]
 800baf0:	bf18      	it	ne
 800baf2:	2301      	movne	r3, #1
 800baf4:	0692      	lsls	r2, r2, #26
 800baf6:	d42d      	bmi.n	800bb54 <_printf_common+0xb4>
 800baf8:	4649      	mov	r1, r9
 800bafa:	4638      	mov	r0, r7
 800bafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb00:	47c0      	blx	r8
 800bb02:	3001      	adds	r0, #1
 800bb04:	d020      	beq.n	800bb48 <_printf_common+0xa8>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	68e5      	ldr	r5, [r4, #12]
 800bb0a:	f003 0306 	and.w	r3, r3, #6
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	bf18      	it	ne
 800bb12:	2500      	movne	r5, #0
 800bb14:	6832      	ldr	r2, [r6, #0]
 800bb16:	f04f 0600 	mov.w	r6, #0
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	bf08      	it	eq
 800bb1e:	1aad      	subeq	r5, r5, r2
 800bb20:	6922      	ldr	r2, [r4, #16]
 800bb22:	bf08      	it	eq
 800bb24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	bfc4      	itt	gt
 800bb2c:	1a9b      	subgt	r3, r3, r2
 800bb2e:	18ed      	addgt	r5, r5, r3
 800bb30:	341a      	adds	r4, #26
 800bb32:	42b5      	cmp	r5, r6
 800bb34:	d11a      	bne.n	800bb6c <_printf_common+0xcc>
 800bb36:	2000      	movs	r0, #0
 800bb38:	e008      	b.n	800bb4c <_printf_common+0xac>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	4649      	mov	r1, r9
 800bb40:	4638      	mov	r0, r7
 800bb42:	47c0      	blx	r8
 800bb44:	3001      	adds	r0, #1
 800bb46:	d103      	bne.n	800bb50 <_printf_common+0xb0>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295
 800bb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb50:	3501      	adds	r5, #1
 800bb52:	e7c4      	b.n	800bade <_printf_common+0x3e>
 800bb54:	2030      	movs	r0, #48	; 0x30
 800bb56:	18e1      	adds	r1, r4, r3
 800bb58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb62:	4422      	add	r2, r4
 800bb64:	3302      	adds	r3, #2
 800bb66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb6a:	e7c5      	b.n	800baf8 <_printf_common+0x58>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	4622      	mov	r2, r4
 800bb70:	4649      	mov	r1, r9
 800bb72:	4638      	mov	r0, r7
 800bb74:	47c0      	blx	r8
 800bb76:	3001      	adds	r0, #1
 800bb78:	d0e6      	beq.n	800bb48 <_printf_common+0xa8>
 800bb7a:	3601      	adds	r6, #1
 800bb7c:	e7d9      	b.n	800bb32 <_printf_common+0x92>
	...

0800bb80 <_printf_i>:
 800bb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	7e0f      	ldrb	r7, [r1, #24]
 800bb86:	4691      	mov	r9, r2
 800bb88:	2f78      	cmp	r7, #120	; 0x78
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	469a      	mov	sl, r3
 800bb90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb96:	d807      	bhi.n	800bba8 <_printf_i+0x28>
 800bb98:	2f62      	cmp	r7, #98	; 0x62
 800bb9a:	d80a      	bhi.n	800bbb2 <_printf_i+0x32>
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	f000 80d9 	beq.w	800bd54 <_printf_i+0x1d4>
 800bba2:	2f58      	cmp	r7, #88	; 0x58
 800bba4:	f000 80a4 	beq.w	800bcf0 <_printf_i+0x170>
 800bba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbb0:	e03a      	b.n	800bc28 <_printf_i+0xa8>
 800bbb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbb6:	2b15      	cmp	r3, #21
 800bbb8:	d8f6      	bhi.n	800bba8 <_printf_i+0x28>
 800bbba:	a101      	add	r1, pc, #4	; (adr r1, 800bbc0 <_printf_i+0x40>)
 800bbbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbc0:	0800bc19 	.word	0x0800bc19
 800bbc4:	0800bc2d 	.word	0x0800bc2d
 800bbc8:	0800bba9 	.word	0x0800bba9
 800bbcc:	0800bba9 	.word	0x0800bba9
 800bbd0:	0800bba9 	.word	0x0800bba9
 800bbd4:	0800bba9 	.word	0x0800bba9
 800bbd8:	0800bc2d 	.word	0x0800bc2d
 800bbdc:	0800bba9 	.word	0x0800bba9
 800bbe0:	0800bba9 	.word	0x0800bba9
 800bbe4:	0800bba9 	.word	0x0800bba9
 800bbe8:	0800bba9 	.word	0x0800bba9
 800bbec:	0800bd3b 	.word	0x0800bd3b
 800bbf0:	0800bc5d 	.word	0x0800bc5d
 800bbf4:	0800bd1d 	.word	0x0800bd1d
 800bbf8:	0800bba9 	.word	0x0800bba9
 800bbfc:	0800bba9 	.word	0x0800bba9
 800bc00:	0800bd5d 	.word	0x0800bd5d
 800bc04:	0800bba9 	.word	0x0800bba9
 800bc08:	0800bc5d 	.word	0x0800bc5d
 800bc0c:	0800bba9 	.word	0x0800bba9
 800bc10:	0800bba9 	.word	0x0800bba9
 800bc14:	0800bd25 	.word	0x0800bd25
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	1d1a      	adds	r2, r3, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	602a      	str	r2, [r5, #0]
 800bc20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e0a4      	b.n	800bd76 <_printf_i+0x1f6>
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	6829      	ldr	r1, [r5, #0]
 800bc30:	0606      	lsls	r6, r0, #24
 800bc32:	f101 0304 	add.w	r3, r1, #4
 800bc36:	d50a      	bpl.n	800bc4e <_printf_i+0xce>
 800bc38:	680e      	ldr	r6, [r1, #0]
 800bc3a:	602b      	str	r3, [r5, #0]
 800bc3c:	2e00      	cmp	r6, #0
 800bc3e:	da03      	bge.n	800bc48 <_printf_i+0xc8>
 800bc40:	232d      	movs	r3, #45	; 0x2d
 800bc42:	4276      	negs	r6, r6
 800bc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc48:	230a      	movs	r3, #10
 800bc4a:	485e      	ldr	r0, [pc, #376]	; (800bdc4 <_printf_i+0x244>)
 800bc4c:	e019      	b.n	800bc82 <_printf_i+0x102>
 800bc4e:	680e      	ldr	r6, [r1, #0]
 800bc50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	bf18      	it	ne
 800bc58:	b236      	sxthne	r6, r6
 800bc5a:	e7ef      	b.n	800bc3c <_printf_i+0xbc>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	6820      	ldr	r0, [r4, #0]
 800bc60:	1d19      	adds	r1, r3, #4
 800bc62:	6029      	str	r1, [r5, #0]
 800bc64:	0601      	lsls	r1, r0, #24
 800bc66:	d501      	bpl.n	800bc6c <_printf_i+0xec>
 800bc68:	681e      	ldr	r6, [r3, #0]
 800bc6a:	e002      	b.n	800bc72 <_printf_i+0xf2>
 800bc6c:	0646      	lsls	r6, r0, #25
 800bc6e:	d5fb      	bpl.n	800bc68 <_printf_i+0xe8>
 800bc70:	881e      	ldrh	r6, [r3, #0]
 800bc72:	2f6f      	cmp	r7, #111	; 0x6f
 800bc74:	bf0c      	ite	eq
 800bc76:	2308      	moveq	r3, #8
 800bc78:	230a      	movne	r3, #10
 800bc7a:	4852      	ldr	r0, [pc, #328]	; (800bdc4 <_printf_i+0x244>)
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc82:	6865      	ldr	r5, [r4, #4]
 800bc84:	2d00      	cmp	r5, #0
 800bc86:	bfa8      	it	ge
 800bc88:	6821      	ldrge	r1, [r4, #0]
 800bc8a:	60a5      	str	r5, [r4, #8]
 800bc8c:	bfa4      	itt	ge
 800bc8e:	f021 0104 	bicge.w	r1, r1, #4
 800bc92:	6021      	strge	r1, [r4, #0]
 800bc94:	b90e      	cbnz	r6, 800bc9a <_printf_i+0x11a>
 800bc96:	2d00      	cmp	r5, #0
 800bc98:	d04d      	beq.n	800bd36 <_printf_i+0x1b6>
 800bc9a:	4615      	mov	r5, r2
 800bc9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800bca0:	fb03 6711 	mls	r7, r3, r1, r6
 800bca4:	5dc7      	ldrb	r7, [r0, r7]
 800bca6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcaa:	4637      	mov	r7, r6
 800bcac:	42bb      	cmp	r3, r7
 800bcae:	460e      	mov	r6, r1
 800bcb0:	d9f4      	bls.n	800bc9c <_printf_i+0x11c>
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d10b      	bne.n	800bcce <_printf_i+0x14e>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	07de      	lsls	r6, r3, #31
 800bcba:	d508      	bpl.n	800bcce <_printf_i+0x14e>
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	6861      	ldr	r1, [r4, #4]
 800bcc0:	4299      	cmp	r1, r3
 800bcc2:	bfde      	ittt	le
 800bcc4:	2330      	movle	r3, #48	; 0x30
 800bcc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcce:	1b52      	subs	r2, r2, r5
 800bcd0:	6122      	str	r2, [r4, #16]
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f8cd a000 	str.w	sl, [sp]
 800bcdc:	aa03      	add	r2, sp, #12
 800bcde:	f7ff fedf 	bl	800baa0 <_printf_common>
 800bce2:	3001      	adds	r0, #1
 800bce4:	d14c      	bne.n	800bd80 <_printf_i+0x200>
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcea:	b004      	add	sp, #16
 800bcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf0:	4834      	ldr	r0, [pc, #208]	; (800bdc4 <_printf_i+0x244>)
 800bcf2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcf6:	6829      	ldr	r1, [r5, #0]
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcfe:	6029      	str	r1, [r5, #0]
 800bd00:	061d      	lsls	r5, r3, #24
 800bd02:	d514      	bpl.n	800bd2e <_printf_i+0x1ae>
 800bd04:	07df      	lsls	r7, r3, #31
 800bd06:	bf44      	itt	mi
 800bd08:	f043 0320 	orrmi.w	r3, r3, #32
 800bd0c:	6023      	strmi	r3, [r4, #0]
 800bd0e:	b91e      	cbnz	r6, 800bd18 <_printf_i+0x198>
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	f023 0320 	bic.w	r3, r3, #32
 800bd16:	6023      	str	r3, [r4, #0]
 800bd18:	2310      	movs	r3, #16
 800bd1a:	e7af      	b.n	800bc7c <_printf_i+0xfc>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	f043 0320 	orr.w	r3, r3, #32
 800bd22:	6023      	str	r3, [r4, #0]
 800bd24:	2378      	movs	r3, #120	; 0x78
 800bd26:	4828      	ldr	r0, [pc, #160]	; (800bdc8 <_printf_i+0x248>)
 800bd28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd2c:	e7e3      	b.n	800bcf6 <_printf_i+0x176>
 800bd2e:	0659      	lsls	r1, r3, #25
 800bd30:	bf48      	it	mi
 800bd32:	b2b6      	uxthmi	r6, r6
 800bd34:	e7e6      	b.n	800bd04 <_printf_i+0x184>
 800bd36:	4615      	mov	r5, r2
 800bd38:	e7bb      	b.n	800bcb2 <_printf_i+0x132>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	6826      	ldr	r6, [r4, #0]
 800bd3e:	1d18      	adds	r0, r3, #4
 800bd40:	6961      	ldr	r1, [r4, #20]
 800bd42:	6028      	str	r0, [r5, #0]
 800bd44:	0635      	lsls	r5, r6, #24
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	d501      	bpl.n	800bd4e <_printf_i+0x1ce>
 800bd4a:	6019      	str	r1, [r3, #0]
 800bd4c:	e002      	b.n	800bd54 <_printf_i+0x1d4>
 800bd4e:	0670      	lsls	r0, r6, #25
 800bd50:	d5fb      	bpl.n	800bd4a <_printf_i+0x1ca>
 800bd52:	8019      	strh	r1, [r3, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	4615      	mov	r5, r2
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	e7ba      	b.n	800bcd2 <_printf_i+0x152>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	2100      	movs	r1, #0
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	602a      	str	r2, [r5, #0]
 800bd64:	681d      	ldr	r5, [r3, #0]
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f000 f91f 	bl	800bfac <memchr>
 800bd6e:	b108      	cbz	r0, 800bd74 <_printf_i+0x1f4>
 800bd70:	1b40      	subs	r0, r0, r5
 800bd72:	6060      	str	r0, [r4, #4]
 800bd74:	6863      	ldr	r3, [r4, #4]
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd7e:	e7a8      	b.n	800bcd2 <_printf_i+0x152>
 800bd80:	462a      	mov	r2, r5
 800bd82:	4649      	mov	r1, r9
 800bd84:	4640      	mov	r0, r8
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	47d0      	blx	sl
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d0ab      	beq.n	800bce6 <_printf_i+0x166>
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	079b      	lsls	r3, r3, #30
 800bd92:	d413      	bmi.n	800bdbc <_printf_i+0x23c>
 800bd94:	68e0      	ldr	r0, [r4, #12]
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	4298      	cmp	r0, r3
 800bd9a:	bfb8      	it	lt
 800bd9c:	4618      	movlt	r0, r3
 800bd9e:	e7a4      	b.n	800bcea <_printf_i+0x16a>
 800bda0:	2301      	movs	r3, #1
 800bda2:	4632      	mov	r2, r6
 800bda4:	4649      	mov	r1, r9
 800bda6:	4640      	mov	r0, r8
 800bda8:	47d0      	blx	sl
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d09b      	beq.n	800bce6 <_printf_i+0x166>
 800bdae:	3501      	adds	r5, #1
 800bdb0:	68e3      	ldr	r3, [r4, #12]
 800bdb2:	9903      	ldr	r1, [sp, #12]
 800bdb4:	1a5b      	subs	r3, r3, r1
 800bdb6:	42ab      	cmp	r3, r5
 800bdb8:	dcf2      	bgt.n	800bda0 <_printf_i+0x220>
 800bdba:	e7eb      	b.n	800bd94 <_printf_i+0x214>
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	f104 0619 	add.w	r6, r4, #25
 800bdc2:	e7f5      	b.n	800bdb0 <_printf_i+0x230>
 800bdc4:	0800c4ad 	.word	0x0800c4ad
 800bdc8:	0800c4be 	.word	0x0800c4be

0800bdcc <nan>:
 800bdcc:	2000      	movs	r0, #0
 800bdce:	4901      	ldr	r1, [pc, #4]	; (800bdd4 <nan+0x8>)
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	7ff80000 	.word	0x7ff80000

0800bdd8 <__sread>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	f000 f8f2 	bl	800bfc8 <_read_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	bfab      	itete	ge
 800bde8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdea:	89a3      	ldrhlt	r3, [r4, #12]
 800bdec:	181b      	addge	r3, r3, r0
 800bdee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdf2:	bfac      	ite	ge
 800bdf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdf6:	81a3      	strhlt	r3, [r4, #12]
 800bdf8:	bd10      	pop	{r4, pc}

0800bdfa <__swrite>:
 800bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	461f      	mov	r7, r3
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	4605      	mov	r5, r0
 800be04:	05db      	lsls	r3, r3, #23
 800be06:	460c      	mov	r4, r1
 800be08:	4616      	mov	r6, r2
 800be0a:	d505      	bpl.n	800be18 <__swrite+0x1e>
 800be0c:	2302      	movs	r3, #2
 800be0e:	2200      	movs	r2, #0
 800be10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be14:	f000 f8b8 	bl	800bf88 <_lseek_r>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	4632      	mov	r2, r6
 800be1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	4628      	mov	r0, r5
 800be24:	463b      	mov	r3, r7
 800be26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	f000 b837 	b.w	800bea0 <_write_r>

0800be32 <__sseek>:
 800be32:	b510      	push	{r4, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3a:	f000 f8a5 	bl	800bf88 <_lseek_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	bf15      	itete	ne
 800be44:	6560      	strne	r0, [r4, #84]	; 0x54
 800be46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be4e:	81a3      	strheq	r3, [r4, #12]
 800be50:	bf18      	it	ne
 800be52:	81a3      	strhne	r3, [r4, #12]
 800be54:	bd10      	pop	{r4, pc}

0800be56 <__sclose>:
 800be56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5a:	f000 b851 	b.w	800bf00 <_close_r>

0800be5e <strncmp>:
 800be5e:	4603      	mov	r3, r0
 800be60:	b510      	push	{r4, lr}
 800be62:	b172      	cbz	r2, 800be82 <strncmp+0x24>
 800be64:	3901      	subs	r1, #1
 800be66:	1884      	adds	r4, r0, r2
 800be68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be70:	4290      	cmp	r0, r2
 800be72:	d101      	bne.n	800be78 <strncmp+0x1a>
 800be74:	42a3      	cmp	r3, r4
 800be76:	d101      	bne.n	800be7c <strncmp+0x1e>
 800be78:	1a80      	subs	r0, r0, r2
 800be7a:	bd10      	pop	{r4, pc}
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d1f3      	bne.n	800be68 <strncmp+0xa>
 800be80:	e7fa      	b.n	800be78 <strncmp+0x1a>
 800be82:	4610      	mov	r0, r2
 800be84:	e7f9      	b.n	800be7a <strncmp+0x1c>

0800be86 <__ascii_wctomb>:
 800be86:	4603      	mov	r3, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	b141      	cbz	r1, 800be9e <__ascii_wctomb+0x18>
 800be8c:	2aff      	cmp	r2, #255	; 0xff
 800be8e:	d904      	bls.n	800be9a <__ascii_wctomb+0x14>
 800be90:	228a      	movs	r2, #138	; 0x8a
 800be92:	f04f 30ff 	mov.w	r0, #4294967295
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	4770      	bx	lr
 800be9a:	2001      	movs	r0, #1
 800be9c:	700a      	strb	r2, [r1, #0]
 800be9e:	4770      	bx	lr

0800bea0 <_write_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	2200      	movs	r2, #0
 800beaa:	4d05      	ldr	r5, [pc, #20]	; (800bec0 <_write_r+0x20>)
 800beac:	602a      	str	r2, [r5, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	f7f5 ff42 	bl	8001d38 <_write>
 800beb4:	1c43      	adds	r3, r0, #1
 800beb6:	d102      	bne.n	800bebe <_write_r+0x1e>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	b103      	cbz	r3, 800bebe <_write_r+0x1e>
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
 800bec0:	20000a3c 	.word	0x20000a3c

0800bec4 <__assert_func>:
 800bec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bec6:	4614      	mov	r4, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <__assert_func+0x2c>)
 800becc:	4605      	mov	r5, r0
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68d8      	ldr	r0, [r3, #12]
 800bed2:	b14c      	cbz	r4, 800bee8 <__assert_func+0x24>
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <__assert_func+0x30>)
 800bed6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beda:	9100      	str	r1, [sp, #0]
 800bedc:	462b      	mov	r3, r5
 800bede:	4906      	ldr	r1, [pc, #24]	; (800bef8 <__assert_func+0x34>)
 800bee0:	f000 f81e 	bl	800bf20 <fiprintf>
 800bee4:	f000 f882 	bl	800bfec <abort>
 800bee8:	4b04      	ldr	r3, [pc, #16]	; (800befc <__assert_func+0x38>)
 800beea:	461c      	mov	r4, r3
 800beec:	e7f3      	b.n	800bed6 <__assert_func+0x12>
 800beee:	bf00      	nop
 800bef0:	20000040 	.word	0x20000040
 800bef4:	0800c4cf 	.word	0x0800c4cf
 800bef8:	0800c4dc 	.word	0x0800c4dc
 800befc:	0800c50a 	.word	0x0800c50a

0800bf00 <_close_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	2300      	movs	r3, #0
 800bf04:	4d05      	ldr	r5, [pc, #20]	; (800bf1c <_close_r+0x1c>)
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	f7f5 ff30 	bl	8001d70 <_close>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_close_r+0x1a>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_close_r+0x1a>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	20000a3c 	.word	0x20000a3c

0800bf20 <fiprintf>:
 800bf20:	b40e      	push	{r1, r2, r3}
 800bf22:	b503      	push	{r0, r1, lr}
 800bf24:	4601      	mov	r1, r0
 800bf26:	ab03      	add	r3, sp, #12
 800bf28:	4805      	ldr	r0, [pc, #20]	; (800bf40 <fiprintf+0x20>)
 800bf2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf2e:	6800      	ldr	r0, [r0, #0]
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	f7ff fc85 	bl	800b840 <_vfiprintf_r>
 800bf36:	b002      	add	sp, #8
 800bf38:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf3c:	b003      	add	sp, #12
 800bf3e:	4770      	bx	lr
 800bf40:	20000040 	.word	0x20000040

0800bf44 <_fstat_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	2300      	movs	r3, #0
 800bf48:	4d06      	ldr	r5, [pc, #24]	; (800bf64 <_fstat_r+0x20>)
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	4611      	mov	r1, r2
 800bf50:	602b      	str	r3, [r5, #0]
 800bf52:	f7f5 ff18 	bl	8001d86 <_fstat>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	d102      	bne.n	800bf60 <_fstat_r+0x1c>
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	b103      	cbz	r3, 800bf60 <_fstat_r+0x1c>
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	bf00      	nop
 800bf64:	20000a3c 	.word	0x20000a3c

0800bf68 <_isatty_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4d05      	ldr	r5, [pc, #20]	; (800bf84 <_isatty_r+0x1c>)
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	f7f5 ff16 	bl	8001da4 <_isatty>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_isatty_r+0x1a>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_isatty_r+0x1a>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	20000a3c 	.word	0x20000a3c

0800bf88 <_lseek_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	2200      	movs	r2, #0
 800bf92:	4d05      	ldr	r5, [pc, #20]	; (800bfa8 <_lseek_r+0x20>)
 800bf94:	602a      	str	r2, [r5, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f7f5 ff0e 	bl	8001db8 <_lseek>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_lseek_r+0x1e>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_lseek_r+0x1e>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	20000a3c 	.word	0x20000a3c

0800bfac <memchr>:
 800bfac:	4603      	mov	r3, r0
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	b2c9      	uxtb	r1, r1
 800bfb2:	4402      	add	r2, r0
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	d101      	bne.n	800bfbe <memchr+0x12>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	e003      	b.n	800bfc6 <memchr+0x1a>
 800bfbe:	7804      	ldrb	r4, [r0, #0]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	428c      	cmp	r4, r1
 800bfc4:	d1f6      	bne.n	800bfb4 <memchr+0x8>
 800bfc6:	bd10      	pop	{r4, pc}

0800bfc8 <_read_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4604      	mov	r4, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	4611      	mov	r1, r2
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4d05      	ldr	r5, [pc, #20]	; (800bfe8 <_read_r+0x20>)
 800bfd4:	602a      	str	r2, [r5, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f7f5 fe91 	bl	8001cfe <_read>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_read_r+0x1e>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_read_r+0x1e>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	20000a3c 	.word	0x20000a3c

0800bfec <abort>:
 800bfec:	2006      	movs	r0, #6
 800bfee:	b508      	push	{r3, lr}
 800bff0:	f000 f82c 	bl	800c04c <raise>
 800bff4:	2001      	movs	r0, #1
 800bff6:	f7f5 fe78 	bl	8001cea <_exit>

0800bffa <_raise_r>:
 800bffa:	291f      	cmp	r1, #31
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	d904      	bls.n	800c00e <_raise_r+0x14>
 800c004:	2316      	movs	r3, #22
 800c006:	6003      	str	r3, [r0, #0]
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	bd38      	pop	{r3, r4, r5, pc}
 800c00e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c010:	b112      	cbz	r2, 800c018 <_raise_r+0x1e>
 800c012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c016:	b94b      	cbnz	r3, 800c02c <_raise_r+0x32>
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 f831 	bl	800c080 <_getpid_r>
 800c01e:	462a      	mov	r2, r5
 800c020:	4601      	mov	r1, r0
 800c022:	4620      	mov	r0, r4
 800c024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c028:	f000 b818 	b.w	800c05c <_kill_r>
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d00a      	beq.n	800c046 <_raise_r+0x4c>
 800c030:	1c59      	adds	r1, r3, #1
 800c032:	d103      	bne.n	800c03c <_raise_r+0x42>
 800c034:	2316      	movs	r3, #22
 800c036:	6003      	str	r3, [r0, #0]
 800c038:	2001      	movs	r0, #1
 800c03a:	e7e7      	b.n	800c00c <_raise_r+0x12>
 800c03c:	2400      	movs	r4, #0
 800c03e:	4628      	mov	r0, r5
 800c040:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c044:	4798      	blx	r3
 800c046:	2000      	movs	r0, #0
 800c048:	e7e0      	b.n	800c00c <_raise_r+0x12>
	...

0800c04c <raise>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <raise+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f7ff bfd2 	b.w	800bffa <_raise_r>
 800c056:	bf00      	nop
 800c058:	20000040 	.word	0x20000040

0800c05c <_kill_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	2300      	movs	r3, #0
 800c060:	4d06      	ldr	r5, [pc, #24]	; (800c07c <_kill_r+0x20>)
 800c062:	4604      	mov	r4, r0
 800c064:	4608      	mov	r0, r1
 800c066:	4611      	mov	r1, r2
 800c068:	602b      	str	r3, [r5, #0]
 800c06a:	f7f5 fe2e 	bl	8001cca <_kill>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d102      	bne.n	800c078 <_kill_r+0x1c>
 800c072:	682b      	ldr	r3, [r5, #0]
 800c074:	b103      	cbz	r3, 800c078 <_kill_r+0x1c>
 800c076:	6023      	str	r3, [r4, #0]
 800c078:	bd38      	pop	{r3, r4, r5, pc}
 800c07a:	bf00      	nop
 800c07c:	20000a3c 	.word	0x20000a3c

0800c080 <_getpid_r>:
 800c080:	f7f5 be1c 	b.w	8001cbc <_getpid>

0800c084 <_init>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	bf00      	nop
 800c088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08a:	bc08      	pop	{r3}
 800c08c:	469e      	mov	lr, r3
 800c08e:	4770      	bx	lr

0800c090 <_fini>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	bf00      	nop
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr
