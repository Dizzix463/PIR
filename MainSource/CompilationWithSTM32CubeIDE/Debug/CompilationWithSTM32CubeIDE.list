
CompilationWithSTM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b64c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800b760  0800b760  0001b760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc4  0800bbc4  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbc4  0800bbc4  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbc4  0800bbc4  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800bbcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000210  0800bddc  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  0800bddc  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c9  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd1  00000000  00000000  00030402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000330d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001995b  00000000  00000000  00034e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fad  00000000  00000000  0004e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca93  00000000  00000000  00060710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  000ed1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b744 	.word	0x0800b744

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800b744 	.word	0x0800b744

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2uiz>:
 8001044:	0042      	lsls	r2, r0, #1
 8001046:	d20e      	bcs.n	8001066 <__aeabi_f2uiz+0x22>
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800104c:	d30b      	bcc.n	8001066 <__aeabi_f2uiz+0x22>
 800104e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d409      	bmi.n	800106c <__aeabi_f2uiz+0x28>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001060:	fa23 f002 	lsr.w	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr
 800106c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001070:	d101      	bne.n	8001076 <__aeabi_f2uiz+0x32>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d102      	bne.n	800107c <__aeabi_f2uiz+0x38>
 8001076:	f04f 30ff 	mov.w	r0, #4294967295
 800107a:	4770      	bx	lr
 800107c:	f04f 0000 	mov.w	r0, #0
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	460c      	mov	r4, r1
 800108a:	2200      	movs	r2, #0
 800108c:	2300      	movs	r3, #0
 800108e:	4628      	mov	r0, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fc93 	bl	80009bc <__aeabi_dcmplt>
 8001096:	b928      	cbnz	r0, 80010a4 <__aeabi_d2lz+0x20>
 8001098:	4628      	mov	r0, r5
 800109a:	4621      	mov	r1, r4
 800109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010a0:	f000 b80a 	b.w	80010b8 <__aeabi_d2ulz>
 80010a4:	4628      	mov	r0, r5
 80010a6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010aa:	f000 f805 	bl	80010b8 <__aeabi_d2ulz>
 80010ae:	4240      	negs	r0, r0
 80010b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	bf00      	nop

080010b8 <__aeabi_d2ulz>:
 80010b8:	b5d0      	push	{r4, r6, r7, lr}
 80010ba:	2200      	movs	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <__aeabi_d2ulz+0x34>)
 80010be:	4606      	mov	r6, r0
 80010c0:	460f      	mov	r7, r1
 80010c2:	f7ff fa09 	bl	80004d8 <__aeabi_dmul>
 80010c6:	f7ff fcc9 	bl	8000a5c <__aeabi_d2uiz>
 80010ca:	4604      	mov	r4, r0
 80010cc:	f7ff f98a 	bl	80003e4 <__aeabi_ui2d>
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <__aeabi_d2ulz+0x38>)
 80010d4:	f7ff fa00 	bl	80004d8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4630      	mov	r0, r6
 80010de:	4639      	mov	r1, r7
 80010e0:	f7ff f842 	bl	8000168 <__aeabi_dsub>
 80010e4:	f7ff fcba 	bl	8000a5c <__aeabi_d2uiz>
 80010e8:	4621      	mov	r1, r4
 80010ea:	bdd0      	pop	{r4, r6, r7, pc}
 80010ec:	3df00000 	.word	0x3df00000
 80010f0:	41f00000 	.word	0x41f00000

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2a      	ldr	r2, [pc, #168]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <MX_GPIO_Init+0xdc>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_GPIO_Init+0xdc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CRK_synch_Pin|CRK_synch_temp_Pin|first_CRK_synch_Pin|second_CRK_synch___CAM_Overflow___CRK_Overflow_Pin
 8001168:	2200      	movs	r2, #0
 800116a:	217f      	movs	r1, #127	; 0x7f
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <MX_GPIO_Init+0xe0>)
 800116e:	f001 fb0c 	bl	800278a <HAL_GPIO_WritePin>
                          |CRK_TOOTH_PER___CRK_SHO_LEVEL___SEG_ADP_ER_LIM___CrkPlsOrng___CRK_GAP_NOT_DET_Pin|LD2_Pin|CAM_PER_cam_spk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRK_synch_Pin|CRK_synch_temp_Pin|first_CRK_synch_Pin|second_CRK_synch___CAM_Overflow___CRK_Overflow_Pin
 8001172:	237f      	movs	r3, #127	; 0x7f
 8001174:	613b      	str	r3, [r7, #16]
                          |CRK_TOOTH_PER___CRK_SHO_LEVEL___SEG_ADP_ER_LIM___CrkPlsOrng___CRK_GAP_NOT_DET_Pin|LD2_Pin|CAM_PER_cam_spk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <MX_GPIO_Init+0xe0>)
 800118a:	f001 f963 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800118e:	f44f 43f6 	mov.w	r3, #31488	; 0x7b00
 8001192:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_GPIO_Init+0xe4>)
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <MX_GPIO_Init+0xe8>)
 80011a4:	f001 f956 	bl	8002454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2017      	movs	r0, #23
 80011ae:	f001 f91a 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b2:	2017      	movs	r0, #23
 80011b4:	f001 f933 	bl	800241e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f001 f912 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f001 f92b 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	10110000 	.word	0x10110000
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ffc2 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ### EXTI Callback functions ###
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == 8) // Capture Event rising edge --CRK--
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d158      	bne.n	800133a <HAL_GPIO_EXTI_Callback+0xc2>
			{
		CRK_signal = true; // Set actual signal level
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]

		if (should_record) {
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d014      	beq.n	80012c2 <HAL_GPIO_EXTI_Callback+0x4a>
			bool is_crk_buffer_full = CRK_save(GetTimestamp(), CRK_signal);
 8001298:	f006 fb62 	bl	8007960 <GetTimestamp>
 800129c:	4603      	mov	r3, r0
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fd27 	bl	8005cf8 <CRK_save>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
			if (is_crk_buffer_full) {
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_GPIO_EXTI_Callback+0x4a>
				should_record = false;
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		if (failure_active == false) // Set CRK-output
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_GPIO_EXTI_Callback+0x120>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			output_CRK_no_failure();
 80012d0:	f002 fe7a 	bl	8003fc8 <output_CRK_no_failure>
 80012d4:	e025      	b.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
		} else if (failure_identify != '1' && failure_identify != '4'
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b31      	cmp	r3, #49	; 0x31
 80012dc:	d021      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b34      	cmp	r3, #52	; 0x34
 80012e4:	d01d      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'f' && failure_identify != 'b'
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b66      	cmp	r3, #102	; 0x66
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b62      	cmp	r3, #98	; 0x62
 80012f4:	d015      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'i' && failure_identify != 'j'
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b69      	cmp	r3, #105	; 0x69
 80012fc:	d011      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b6a      	cmp	r3, #106	; 0x6a
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'k' && failure_identify != 'l'
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b6b      	cmp	r3, #107	; 0x6b
 800130c:	d009      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b6c      	cmp	r3, #108	; 0x6c
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
				&& failure_identify != 'm') {
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b6d      	cmp	r3, #109	; 0x6d
 800131c:	d001      	beq.n	8001322 <HAL_GPIO_EXTI_Callback+0xaa>
			output_CRK_no_failure();
 800131e:	f002 fe53 	bl	8003fc8 <output_CRK_no_failure>
		}

		low_time_CRK = IC1BUF; // Set actual low time of CRK signal
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001328:	6013      	str	r3, [r2, #0]

		output_CRK(failure_identify); // CRK Output
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_GPIO_EXTI_Callback+0x124>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fc9a 	bl	8003c68 <output_CRK>
		timer_overflow_CRK = 0;       // edge was detected, so no stalling
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

	}

	if (GPIO_Pin == 9) //## Capture Event falling edge --CRK--
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d16b      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x1a0>
			{
		CRK_signal = false; // Set actual signal level
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]

		if (should_record) {
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0x102>
			bool is_crk_buffer_full = CRK_save(GetTimestamp(), CRK_signal);
 8001350:	f006 fb06 	bl	8007960 <GetTimestamp>
 8001354:	4603      	mov	r3, r0
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_GPIO_EXTI_Callback+0x118>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fccb 	bl	8005cf8 <CRK_save>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	73bb      	strb	r3, [r7, #14]
			if (is_crk_buffer_full) {
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0x102>
				should_record = false;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		if (failure_active == false) // Set CRK-output
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_GPIO_EXTI_Callback+0x120>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <HAL_GPIO_EXTI_Callback+0x134>
		{
			output_CRK_no_failure();
 8001388:	f002 fe1e 	bl	8003fc8 <output_CRK_no_failure>
 800138c:	e034      	b.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 800138e:	bf00      	nop
 8001390:	200002a3 	.word	0x200002a3
 8001394:	2000078c 	.word	0x2000078c
 8001398:	2000066c 	.word	0x2000066c
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	20000254 	.word	0x20000254
 80013a4:	20000268 	.word	0x20000268
 80013a8:	2000026c 	.word	0x2000026c
		} else if (failure_identify != '1' && failure_identify != '4'
 80013ac:	4b66      	ldr	r3, [pc, #408]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b31      	cmp	r3, #49	; 0x31
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013b4:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b34      	cmp	r3, #52	; 0x34
 80013ba:	d01d      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'f' && failure_identify != 'h'
 80013bc:	4b62      	ldr	r3, [pc, #392]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b66      	cmp	r3, #102	; 0x66
 80013c2:	d019      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013c4:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b68      	cmp	r3, #104	; 0x68
 80013ca:	d015      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'i' && failure_identify != 'j'
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b69      	cmp	r3, #105	; 0x69
 80013d2:	d011      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013d4:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b6a      	cmp	r3, #106	; 0x6a
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'k' && failure_identify != 'l'
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b6b      	cmp	r3, #107	; 0x6b
 80013e2:	d009      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
 80013e4:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b6c      	cmp	r3, #108	; 0x6c
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
				&& failure_identify != 'm') {
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b6d      	cmp	r3, #109	; 0x6d
 80013f2:	d001      	beq.n	80013f8 <HAL_GPIO_EXTI_Callback+0x180>
			output_CRK_no_failure();
 80013f4:	f002 fde8 	bl	8003fc8 <output_CRK_no_failure>
		}

		sync_CRK_preparation(); // CRK synchronisation preparation
 80013f8:	f005 fd62 	bl	8006ec0 <sync_CRK_preparation>

		output_CRK(failure_identify); // CRK Output
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fc31 	bl	8003c68 <output_CRK>
		if (configuration_complete == true) {
 8001406:	4b51      	ldr	r3, [pc, #324]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_GPIO_EXTI_Callback+0x19a>
			sync_CRK(); // CRK synchronisation
 800140e:	f004 fcf7 	bl	8005e00 <sync_CRK>
		}
		timer_overflow_CRK = 0; // edge was detected, so no stalling
 8001412:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 14) //## Capture Event rising edge --CAM1--
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b0e      	cmp	r3, #14
 800141c:	d12c      	bne.n	8001478 <HAL_GPIO_EXTI_Callback+0x200>
			{

		CAM_signal[0] = true; // Set actual signal level
 800141e:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]

		if (should_record) {
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d014      	beq.n	8001458 <HAL_GPIO_EXTI_Callback+0x1e0>
			bool is_cam_buffer_full = CAM_save(GetTimestamp(), CAM_signal[0]);
 800142e:	f006 fa97 	bl	8007960 <GetTimestamp>
 8001432:	4603      	mov	r3, r0
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fc9e 	bl	8005d7c <CAM_save>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]
			if (is_cam_buffer_full) {
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_GPIO_EXTI_Callback+0x1e0>
				should_record = false;
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		output_CAM(failure_identify, 0); // CAM1 Output
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fcca 	bl	8003df8 <output_CAM>

		if (configuration_complete == true) {
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_EXTI_Callback+0x1fa>
			sync_CAM_CRK(0); // CAM_CRK Synchronisation
 800146c:	2000      	movs	r0, #0
 800146e:	f004 ff01 	bl	8006274 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 11)	//## Capture Event falling edge --CAM1--
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b0b      	cmp	r3, #11
 800147c:	d12e      	bne.n	80014dc <HAL_GPIO_EXTI_Callback+0x264>
			{
		CAM_signal[0] = false;	// Set actual signal level
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

		if (should_record) {
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d014      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x240>
			bool is_cam_buffer_full = CAM_save(GetTimestamp(), CAM_signal[0]);
 800148e:	f006 fa67 	bl	8007960 <GetTimestamp>
 8001492:	4603      	mov	r3, r0
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fc6e 	bl	8005d7c <CAM_save>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	733b      	strb	r3, [r7, #12]
			if (is_cam_buffer_full) {
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <HAL_GPIO_EXTI_Callback+0x240>
				should_record = false;
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
				// Should send CRK and CAM signals if not already sending
			}
		}

		TIM2_Reset();
 80014b8:	f006 f99c 	bl	80077f4 <TIM2_Reset>

		output_CAM(failure_identify, 0);	// CAM1 Output
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fc98 	bl	8003df8 <output_CAM>

		if (configuration_complete == true) {
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_EXTI_Callback+0x25e>
			sync_CAM_CRK(0); // CAM_CRK Synchronisation
 80014d0:	2000      	movs	r0, #0
 80014d2:	f004 fecf 	bl	8006274 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 12) //## Capture Event rising edge --CAM2--
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d112      	bne.n	8001508 <HAL_GPIO_EXTI_Callback+0x290>
			{
		CAM_signal[1] = true; // Set actual signal level
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	705a      	strb	r2, [r3, #1]

		output_CAM(failure_identify, 1); // CAM2 Output
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fc82 	bl	8003df8 <output_CAM>

		if (configuration_complete == true) {
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_GPIO_EXTI_Callback+0x28a>
			sync_CAM_CRK(1); // CAM_CRK Synchronisation
 80014fc:	2001      	movs	r0, #1
 80014fe:	f004 feb9 	bl	8006274 <sync_CAM_CRK>
		}
		timer_overflow_CAM = 0; // edge was detected, so no stalling
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == 13) //## Capture Event falling edge --CAM2--
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	2b0d      	cmp	r3, #13
 800150c:	d118      	bne.n	8001540 <HAL_GPIO_EXTI_Callback+0x2c8>
			{
		if (number_of_CAM == 2) {
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d114      	bne.n	8001540 <HAL_GPIO_EXTI_Callback+0x2c8>
			CAM_signal[1] = false; // Set actual signal level
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001518:	2200      	movs	r2, #0
 800151a:	705a      	strb	r2, [r3, #1]

			TIM2_Reset();
 800151c:	f006 f96a 	bl	80077f4 <TIM2_Reset>

			output_CAM(failure_identify, 1); // CAM2 Output
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fc66 	bl	8003df8 <output_CAM>

			if (configuration_complete == true) {
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_GPIO_EXTI_Callback+0x2c2>
				sync_CAM_CRK(1); // CAM_CRK Synchronisation
 8001534:	2001      	movs	r0, #1
 8001536:	f004 fe9d 	bl	8006274 <sync_CAM_CRK>
			}
			timer_overflow_CAM = 0; // edge was detected, so no stalling
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000000c 	.word	0x2000000c
 800154c:	200005e0 	.word	0x200005e0
 8001550:	2000026c 	.word	0x2000026c
 8001554:	20000658 	.word	0x20000658
 8001558:	2000078c 	.word	0x2000078c
 800155c:	200005e4 	.word	0x200005e4
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x14>
		TIM1_PeriodElapsedCallback();
 8001574:	f000 f81e 	bl	80015b4 <TIM1_PeriodElapsedCallback>
	}
	if (htim == &htim2) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x20>
		TIM2_PeriodElapsedCallback();
 8001580:	f000 f826 	bl	80015d0 <TIM2_PeriodElapsedCallback>
	}
	if (htim == &htim3) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TIM3_PeriodElapsedCallback();
 800158c:	f000 f82e 	bl	80015ec <TIM3_PeriodElapsedCallback>
	}
	if (htim == &htim4) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM4_PeriodElapsedCallback();
 8001598:	f000 f896 	bl	80016c8 <TIM4_PeriodElapsedCallback>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000990 	.word	0x20000990
 80015a8:	200009d8 	.word	0x200009d8
 80015ac:	20000a20 	.word	0x20000a20
 80015b0:	20000a68 	.word	0x20000a68

080015b4 <TIM1_PeriodElapsedCallback>:

//## Timer 1 Interrupt CRK tooth time (previously timer2)

void TIM1_PeriodElapsedCallback(void) {
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

	// all overflows between the events
	timer_overflow_CRK++;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <TIM1_PeriodElapsedCallback+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <TIM1_PeriodElapsedCallback+0x18>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000026c 	.word	0x2000026c

080015d0 <TIM2_PeriodElapsedCallback>:

//## Timer 2 Interrupt CAM tooth time (previously timer3)

void TIM2_PeriodElapsedCallback(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
// all overflows between the events
// test
	timer_overflow_CAM++;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <TIM2_PeriodElapsedCallback+0x18>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <TIM2_PeriodElapsedCallback+0x18>)
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200005e4 	.word	0x200005e4

080015ec <TIM3_PeriodElapsedCallback>:
//## Timer 3 Interrupt: CAM_PER - start value

void TIM3_PeriodElapsedCallback(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

	if (failure_identify == '5') { // CAM_PER: error identified by '5'
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b35      	cmp	r3, #53	; 0x35
 80015f6:	d128      	bne.n	800164a <TIM3_PeriodElapsedCallback+0x5e>

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1) {
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	482e      	ldr	r0, [pc, #184]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 80015fe:	f001 f8ad 	bl	800275c <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <TIM3_PeriodElapsedCallback+0x2a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160e:	482a      	ldr	r0, [pc, #168]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 8001610:	f001 f8bb 	bl	800278a <HAL_GPIO_WritePin>
 8001614:	e005      	b.n	8001622 <TIM3_PeriodElapsedCallback+0x36>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161c:	4826      	ldr	r0, [pc, #152]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800161e:	f001 f8b4 	bl	800278a <HAL_GPIO_WritePin>
		}

		counter_CAM_PER[0]++; // Number of times we lost CAM with timer 6
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800162a:	6013      	str	r3, [r2, #0]
		if (counter_CAM_PER[0] == 2) {
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d105      	bne.n	8001640 <TIM3_PeriodElapsedCallback+0x54>
			HAL_TIM_Base_Stop(&htim3);
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001636:	f001 fd8d 	bl	8003154 <HAL_TIM_Base_Stop>
			counter_CAM_PER[0] = 0; // Reset timer 6 CAM lost counter
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <TIM3_PeriodElapsedCallback+0xd0>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0); // reset the timers counter
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

		HAL_TIM_Base_Stop(&htim3);
	}
}
 8001648:	e031      	b.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
	} else if (failure_identify == '6') { // CRK_TOOTH_PER
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b36      	cmp	r3, #54	; 0x36
 8001650:	d121      	bne.n	8001696 <TIM3_PeriodElapsedCallback+0xaa>
		__HAL_TIM_SET_AUTORELOAD(&htim4, 1439); // Define ARR value 20us*72Mhz = 1440 (PSC=0 pour TIM7)
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f240 529f 	movw	r2, #1439	; 0x59f
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 800165e:	f240 529f 	movw	r2, #1439	; 0x59f
 8001662:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Stop(&htim4);
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <TIM3_PeriodElapsedCallback+0xd8>)
 8001666:	f001 fd75 	bl	8003154 <HAL_TIM_Base_Stop>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 800166a:	2110      	movs	r1, #16
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800166e:	f001 f875 	bl	800275c <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <TIM3_PeriodElapsedCallback+0x98>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2110      	movs	r1, #16
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800167e:	f001 f884 	bl	800278a <HAL_GPIO_WritePin>
 8001682:	e004      	b.n	800168e <TIM3_PeriodElapsedCallback+0xa2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2110      	movs	r1, #16
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 800168a:	f001 f87e 	bl	800278a <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 8001690:	f001 fd60 	bl	8003154 <HAL_TIM_Base_Stop>
}
 8001694:	e00b      	b.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
	} else if (failure_identify == 'b') { // CRK_SHO_LEVEL
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <TIM3_PeriodElapsedCallback+0xc8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b62      	cmp	r3, #98	; 0x62
 800169c:	d107      	bne.n	80016ae <TIM3_PeriodElapsedCallback+0xc2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2110      	movs	r1, #16
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <TIM3_PeriodElapsedCallback+0xcc>)
 80016a4:	f001 f871 	bl	800278a <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim3);
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <TIM3_PeriodElapsedCallback+0xd4>)
 80016aa:	f001 fd53 	bl	8003154 <HAL_TIM_Base_Stop>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	40010800 	.word	0x40010800
 80016bc:	20000688 	.word	0x20000688
 80016c0:	20000a20 	.word	0x20000a20
 80016c4:	20000a68 	.word	0x20000a68

080016c8 <TIM4_PeriodElapsedCallback>:

//## Timer 4 Interrupt: CAM_PER - pulse duration

void TIM4_PeriodElapsedCallback(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

	if (failure_identify == '5') // CAM_PER --> Cam_Spk
 80016cc:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b35      	cmp	r3, #53	; 0x35
 80016d2:	d125      	bne.n	8001720 <TIM4_PeriodElapsedCallback+0x58>
			{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4848      	ldr	r0, [pc, #288]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016d8:	f001 f840 	bl	800275c <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <TIM4_PeriodElapsedCallback+0x26>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4844      	ldr	r0, [pc, #272]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016e8:	f001 f84f 	bl	800278a <HAL_GPIO_WritePin>
 80016ec:	e004      	b.n	80016f8 <TIM4_PeriodElapsedCallback+0x30>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4841      	ldr	r0, [pc, #260]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80016f4:	f001 f849 	bl	800278a <HAL_GPIO_WritePin>
		}

		counter_CAM_PER[1]++; // Number of times we lost CAM with timer 7
 80016f8:	4b40      	ldr	r3, [pc, #256]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001700:	6053      	str	r3, [r2, #4]
		if (counter_CAM_PER[1] == 2) {
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d105      	bne.n	8001716 <TIM4_PeriodElapsedCallback+0x4e>

			HAL_TIM_Base_Stop(&htim4);
 800170a:	483d      	ldr	r0, [pc, #244]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 800170c:	f001 fd22 	bl	8003154 <HAL_TIM_Base_Stop>

			counter_CAM_PER[1] = 0; // Reset timer 7 CAM counter
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <TIM4_PeriodElapsedCallback+0x134>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
		}

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Base_Stop(&htim4);
	} else {
		HAL_TIM_Base_Stop(&htim4);
	}
}
 800171e:	e067      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	} else if (failure_identify == '6') // CRK_TOOTH_PER
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b36      	cmp	r3, #54	; 0x36
 8001726:	d115      	bne.n	8001754 <TIM4_PeriodElapsedCallback+0x8c>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8001728:	2110      	movs	r1, #16
 800172a:	4833      	ldr	r0, [pc, #204]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800172c:	f001 f816 	bl	800275c <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <TIM4_PeriodElapsedCallback+0x7a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2110      	movs	r1, #16
 800173a:	482f      	ldr	r0, [pc, #188]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800173c:	f001 f825 	bl	800278a <HAL_GPIO_WritePin>
 8001740:	e004      	b.n	800174c <TIM4_PeriodElapsedCallback+0x84>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2110      	movs	r1, #16
 8001746:	482c      	ldr	r0, [pc, #176]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 8001748:	f001 f81f 	bl	800278a <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim4);
 800174c:	482c      	ldr	r0, [pc, #176]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 800174e:	f001 fd01 	bl	8003154 <HAL_TIM_Base_Stop>
}
 8001752:	e04d      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	} else if (failure_identify == 'j') { // SEG_ADP_ER_LIM
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b6a      	cmp	r3, #106	; 0x6a
 800175a:	d139      	bne.n	80017d0 <TIM4_PeriodElapsedCallback+0x108>
		timer_Counter_SEG_ADP_ER_LIM++;
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 8001764:	6013      	str	r3, [r2, #0]
		switch (timer_Counter_SEG_ADP_ER_LIM) {
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <TIM4_PeriodElapsedCallback+0x13c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d002      	beq.n	8001774 <TIM4_PeriodElapsedCallback+0xac>
 800176e:	2b02      	cmp	r3, #2
 8001770:	d027      	beq.n	80017c2 <TIM4_PeriodElapsedCallback+0xfa>
 8001772:	e029      	b.n	80017c8 <TIM4_PeriodElapsedCallback+0x100>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2110      	movs	r1, #16
 8001778:	481f      	ldr	r0, [pc, #124]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 800177a:	f001 f806 	bl	800278a <HAL_GPIO_WritePin>
			if (failure_waiting == true) { // if the rising edge has already happen
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <TIM4_PeriodElapsedCallback+0x140>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <TIM4_PeriodElapsedCallback+0xf2>
				if (sensortype_CRK == 'c') // sensor is cpdd
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <TIM4_PeriodElapsedCallback+0x144>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b63      	cmp	r3, #99	; 0x63
 800178c:	d104      	bne.n	8001798 <TIM4_PeriodElapsedCallback+0xd0>
					SysTick_Config(3600); // 72MHz*50us=3600
 800178e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001792:	f7ff fd4f 	bl	8001234 <SysTick_Config>
 8001796:	e00e      	b.n	80017b6 <TIM4_PeriodElapsedCallback+0xee>
				} else if (sensortype_CRK == 'h') { // all the others
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <TIM4_PeriodElapsedCallback+0x144>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b68      	cmp	r3, #104	; 0x68
 800179e:	d107      	bne.n	80017b0 <TIM4_PeriodElapsedCallback+0xe8>
					SysTick_Config((T_TOOTH_RAW / 2) - 1);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <TIM4_PeriodElapsedCallback+0x148>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd43 	bl	8001234 <SysTick_Config>
 80017ae:	e002      	b.n	80017b6 <TIM4_PeriodElapsedCallback+0xee>
					SysTick_Config(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fd3f 	bl	8001234 <SysTick_Config>
				HAL_ResumeTick();
 80017b6:	f000 fd31 	bl	800221c <HAL_ResumeTick>
			failure_passed = true;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <TIM4_PeriodElapsedCallback+0x14c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
			break;
 80017c0:	e002      	b.n	80017c8 <TIM4_PeriodElapsedCallback+0x100>
			SEG_ADP_ER_LIM_reset(); //SEG_... failure_inactive, passed and waiting =false, init timer 7 & 8, SEG_...error counter reset
 80017c2:	f003 ff8b 	bl	80056dc <SEG_ADP_ER_LIM_reset>
			break;
 80017c6:	bf00      	nop
		HAL_TIM_Base_Stop(&htim4);
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017ca:	f001 fcc3 	bl	8003154 <HAL_TIM_Base_Stop>
}
 80017ce:	e00f      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
	} else if (failure_identify == 'k') // CrkPlsOrng
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <TIM4_PeriodElapsedCallback+0x12c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b6b      	cmp	r3, #107	; 0x6b
 80017d6:	d108      	bne.n	80017ea <TIM4_PeriodElapsedCallback+0x122>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2110      	movs	r1, #16
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <TIM4_PeriodElapsedCallback+0x130>)
 80017de:	f000 ffd4 	bl	800278a <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop(&htim4);
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017e4:	f001 fcb6 	bl	8003154 <HAL_TIM_Base_Stop>
}
 80017e8:	e002      	b.n	80017f0 <TIM4_PeriodElapsedCallback+0x128>
		HAL_TIM_Base_Stop(&htim4);
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <TIM4_PeriodElapsedCallback+0x138>)
 80017ec:	f001 fcb2 	bl	8003154 <HAL_TIM_Base_Stop>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	40010800 	.word	0x40010800
 80017fc:	20000688 	.word	0x20000688
 8001800:	20000a68 	.word	0x20000a68
 8001804:	20000760 	.word	0x20000760
 8001808:	20000670 	.word	0x20000670
 800180c:	20000250 	.word	0x20000250
 8001810:	20000264 	.word	0x20000264
 8001814:	2000066f 	.word	0x2000066f

08001818 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800181c:	f000 fc9c 	bl	8002158 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001820:	f000 f89c 	bl	800195c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001824:	f7ff fc66 	bl	80010f4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001828:	f000 fa46 	bl	8001cb8 <MX_TIM1_Init>
	MX_TIM2_Init();
 800182c:	f000 fa94 	bl	8001d58 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001830:	f000 fae0 	bl	8001df4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001834:	f000 fb2c 	bl	8001e90 <MX_TIM4_Init>
	MX_USART1_Init();
 8001838:	f000 fbf0 	bl	800201c <MX_USART1_Init>
	/* USER CODE BEGIN 2 */
	// ## User init ##
	SysTickInit(); //TODO: Check on the systick here
 800183c:	f005 ffba 	bl	80077b4 <SysTickInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2108      	movs	r1, #8
 8001844:	4839      	ldr	r0, [pc, #228]	; (800192c <main+0x114>)
 8001846:	f000 ffa0 	bl	800278a <HAL_GPIO_WritePin>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// failure processing
		if (configuration_complete) {
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <main+0x118>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <main+0x44>
			failure_processing(failure_identify);
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <main+0x11c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f004 f91a 	bl	8005a90 <failure_processing>
		}

		// process the received message
		if (message_received == true && com_error == false) {
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <main+0x120>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <main+0x5e>
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <main+0x124>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <main+0x5e>
			USART_ProcessMessage();
 8001872:	f006 f899 	bl	80079a8 <USART_ProcessMessage>
		}

		// reset all values when CRK stalling is detected
		if ((timer_overflow_CRK > 10)) // || (timer_overflow_CAM > 5))
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <main+0x128>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b0a      	cmp	r3, #10
 800187c:	d906      	bls.n	800188c <main+0x74>
		{
			// Stalling_detection();
			Stalling_detection_CRK();
 800187e:	f005 f9f3 	bl	8006c68 <Stalling_detection_CRK>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	2108      	movs	r1, #8
 8001886:	4829      	ldr	r0, [pc, #164]	; (800192c <main+0x114>)
 8001888:	f000 ff7f 	bl	800278a <HAL_GPIO_WritePin>
		}
		// reset all values when CAM stalling is detected //was not here before
		if ((timer_overflow_CAM > 5)) {
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <main+0x12c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d90a      	bls.n	80018aa <main+0x92>
			Stalling_detection_CAM(0);
 8001894:	2000      	movs	r0, #0
 8001896:	f005 fa77 	bl	8006d88 <Stalling_detection_CAM>
			Stalling_detection_CAM(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f005 fa74 	bl	8006d88 <Stalling_detection_CAM>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2108      	movs	r1, #8
 80018a4:	4821      	ldr	r0, [pc, #132]	; (800192c <main+0x114>)
 80018a6:	f000 ff70 	bl	800278a <HAL_GPIO_WritePin>
		}

		// send failure configuration status
		USART_send_failure_configuration_status(failure_identify,
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <main+0x11c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <main+0x130>)
 80018b0:	7811      	ldrb	r1, [r2, #0]
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <main+0x134>)
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f006 ff48 	bl	800874c <USART_send_failure_configuration_status>
				failure_configured, failure_configured_CAM_blank_out);

		// check input signal level and set corresponding output level
		Input_signal_observe(output_level_setting);
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <main+0x138>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 fe47 	bl	8007554 <Input_signal_observe>
		if (CRK_synch) {
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <main+0x13c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <main+0xcc>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4816      	ldr	r0, [pc, #88]	; (800192c <main+0x114>)
 80018d4:	f000 ff59 	bl	800278a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2104      	movs	r1, #4
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <main+0x114>)
 80018de:	f000 ff54 	bl	800278a <HAL_GPIO_WritePin>
 80018e2:	e004      	b.n	80018ee <main+0xd6>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <main+0x114>)
 80018ea:	f000 ff4e 	bl	800278a <HAL_GPIO_WritePin>
		}

		if (CRK_synch_temp) {
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <main+0x140>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <main+0xea>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2102      	movs	r1, #2
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <main+0x114>)
 80018fc:	f000 ff45 	bl	800278a <HAL_GPIO_WritePin>
 8001900:	e004      	b.n	800190c <main+0xf4>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2102      	movs	r1, #2
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <main+0x114>)
 8001908:	f000 ff3f 	bl	800278a <HAL_GPIO_WritePin>
		}

		if (CRK_synch) {
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <main+0x13c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <main+0x108>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2108      	movs	r1, #8
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <main+0x114>)
 800191a:	f000 ff36 	bl	800278a <HAL_GPIO_WritePin>
 800191e:	e794      	b.n	800184a <main+0x32>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2108      	movs	r1, #8
 8001924:	4801      	ldr	r0, [pc, #4]	; (800192c <main+0x114>)
 8001926:	f000 ff30 	bl	800278a <HAL_GPIO_WritePin>
		if (configuration_complete) {
 800192a:	e78e      	b.n	800184a <main+0x32>
 800192c:	40010800 	.word	0x40010800
 8001930:	200005e0 	.word	0x200005e0
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20000986 	.word	0x20000986
 800193c:	20000987 	.word	0x20000987
 8001940:	2000026c 	.word	0x2000026c
 8001944:	200005e4 	.word	0x200005e4
 8001948:	20000671 	.word	0x20000671
 800194c:	20000672 	.word	0x20000672
 8001950:	200005e1 	.word	0x200005e1
 8001954:	200002a0 	.word	0x200002a0
 8001958:	200002a1 	.word	0x200002a1

0800195c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b090      	sub	sp, #64	; 0x40
 8001960:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	2228      	movs	r2, #40	; 0x28
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f006 ffd6 	bl	800891c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001982:	2301      	movs	r3, #1
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001986:	2310      	movs	r3, #16
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198a:	2302      	movs	r3, #2
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800198e:	2300      	movs	r3, #0
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001992:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f000 ff25 	bl	80027ec <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x50>
		Error_Handler();
 80019a8:	f000 f819 	bl	80019de <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019ac:	230f      	movs	r3, #15
 80019ae:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 f992 	bl	8002cf0 <HAL_RCC_ClockConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x7a>
		Error_Handler();
 80019d2:	f000 f804 	bl	80019de <Error_Handler>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3740      	adds	r7, #64	; 0x40
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e2:	b672      	cpsid	i
}
 80019e4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019e6:	e7fe      	b.n	80019e6 <Error_Handler+0x8>

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_MspInit+0x5c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_MspInit+0x60>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_MspInit+0x60>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a92:	f000 fba7 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aa2:	f000 fe8b 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001aa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aaa:	f000 fe87 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM1_UP_IRQHandler+0x10>)
 8001aba:	f001 fbf1 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000990 	.word	0x20000990

08001ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM2_IRQHandler+0x10>)
 8001ace:	f001 fbe7 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200009d8 	.word	0x200009d8

08001adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM3_IRQHandler+0x10>)
 8001ae2:	f001 fbdd 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000a20 	.word	0x20000a20

08001af0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM4_IRQHandler+0x10>)
 8001af6:	f001 fbd3 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000a68 	.word	0x20000a68

08001b04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b0c:	f000 fe56 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b14:	f000 fe52 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b1c:	f000 fe4e 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b24:	f000 fe4a 	bl	80027bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <_kill>:

int _kill(int pid, int sig)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b44:	f006 feb8 	bl	80088b8 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2216      	movs	r2, #22
 8001b4c:	601a      	str	r2, [r3, #0]
	return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_exit>:

void _exit (int status)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b62:	f04f 31ff 	mov.w	r1, #4294967295
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffe7 	bl	8001b3a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b6c:	e7fe      	b.n	8001b6c <_exit+0x12>

08001b6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e00a      	b.n	8001b96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b80:	f3af 8000 	nop.w
 8001b84:	4601      	mov	r1, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	60ba      	str	r2, [r7, #8]
 8001b8c:	b2ca      	uxtb	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf0      	blt.n	8001b80 <_read+0x12>
	}

return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e009      	b.n	8001bce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dbf1      	blt.n	8001bba <_write+0x12>
	}
	return len;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_close>:

int _close(int file)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c06:	605a      	str	r2, [r3, #4]
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_isatty>:

int _isatty(int file)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f006 fe22 	bl	80088b8 <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20005000 	.word	0x20005000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	2000098c 	.word	0x2000098c
 8001ca8:	20000b30 	.word	0x20000b30

08001cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <MX_TIM1_Init+0x9c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cdc:	2277      	movs	r2, #119	; 0x77
 8001cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62999;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001ce8:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d00:	4813      	ldr	r0, [pc, #76]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d02:	f001 f98d 	bl	8003020 <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d0c:	f7ff fe67 	bl	80019de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d1e:	f001 fbc7 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d28:	f7ff fe59 	bl	80019de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d3a:	f001 fda7 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d44:	f7ff fe4b 	bl	80019de <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000990 	.word	0x20000990
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d7e:	f240 12df 	movw	r2, #479	; 0x1df
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62999;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d8c:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001da0:	f001 f93e 	bl	8003020 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001daa:	f7ff fe18 	bl	80019de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dbc:	f001 fb78 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f7ff fe0a 	bl	80019de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dd8:	f001 fd58 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f7ff fdfc 	bl	80019de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200009d8 	.word	0x200009d8

08001df4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <MX_TIM3_Init+0x98>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e18:	220f      	movs	r2, #15
 8001e1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62999;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e24:	f24f 6217 	movw	r2, #62999	; 0xf617
 8001e28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e38:	f001 f8f2 	bl	8003020 <HAL_TIM_Base_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fdcc 	bl	80019de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e54:	f001 fb2c 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e5e:	f7ff fdbe 	bl	80019de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_TIM3_Init+0x94>)
 8001e70:	f001 fd0c 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001e7a:	f7ff fdb0 	bl	80019de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000a20 	.word	0x20000a20
 8001e8c:	40000400 	.word	0x40000400

08001e90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <MX_TIM4_Init+0x98>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 719;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001ec0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ed2:	4814      	ldr	r0, [pc, #80]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001ed4:	f001 f8a4 	bl	8003020 <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ede:	f7ff fd7e 	bl	80019de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001ef0:	f001 fade 	bl	80034b0 <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f7ff fd70 	bl	80019de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_TIM4_Init+0x94>)
 8001f0c:	f001 fcbe 	bl	800388c <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f16:	f7ff fd62 	bl	80019de <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000a68 	.word	0x20000a68
 8001f28:	40000800 	.word	0x40000800

08001f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a34      	ldr	r2, [pc, #208]	; (800200c <HAL_TIM_Base_MspInit+0xe0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d114      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2019      	movs	r0, #25
 8001f5c:	f000 fa43 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f60:	2019      	movs	r0, #25
 8001f62:	f000 fa5c 	bl	800241e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f66:	e04c      	b.n	8002002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d114      	bne.n	8001f9c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	201c      	movs	r0, #28
 8001f90:	f000 fa29 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f94:	201c      	movs	r0, #28
 8001f96:	f000 fa42 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001f9a:	e032      	b.n	8002002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d114      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	201d      	movs	r0, #29
 8001fc4:	f000 fa0f 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fc8:	201d      	movs	r0, #29
 8001fca:	f000 fa28 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001fce:	e018      	b.n	8002002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_TIM_Base_MspInit+0xec>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d113      	bne.n	8002002 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_TIM_Base_MspInit+0xe4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201e      	movs	r0, #30
 8001ff8:	f000 f9f5 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f000 fa0e 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800

0800201c <MX_USART1_Init>:

USART_HandleTypeDef husart1;

/* USART1 init function */
void MX_USART1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_USART1_Init+0x50>)
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <MX_USART1_Init+0x54>)
 8002024:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART1_Init+0x50>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_USART1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <MX_USART1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_USART1_Init+0x50>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_USART1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_USART1_Init+0x50>)
 800205a:	f001 fc87 	bl	800396c <HAL_USART_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8002064:	f7ff fcbb 	bl	80019de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000ab0 	.word	0x20000ab0
 8002070:	40013800 	.word	0x40013800

08002074 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(usartHandle->Instance==USART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_USART_MspInit+0x8c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d131      	bne.n	80020f8 <HAL_USART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_USART_MspInit+0x90>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_USART_MspInit+0x90>)
 800209a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_USART_MspInit+0x90>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_USART_MspInit+0x90>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_USART_MspInit+0x90>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_USART_MspInit+0x90>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	480b      	ldr	r0, [pc, #44]	; (8002108 <HAL_USART_MspInit+0x94>)
 80020da:	f000 f9bb 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_USART_MspInit+0x94>)
 80020f4:	f000 f9ae 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40013800 	.word	0x40013800
 8002104:	40021000 	.word	0x40021000
 8002108:	40010800 	.word	0x40010800

0800210c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002132:	f7ff fdbb 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f006 fbc5 	bl	80088c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213a:	f7ff fb6d 	bl	8001818 <main>
  bx lr
 800213e:	4770      	bx	lr
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002148:	0800bbcc 	.word	0x0800bbcc
  ldr r2, =_sbss
 800214c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002150:	20000b2c 	.word	0x20000b2c

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x28>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x28>)
 8002162:	f043 0310 	orr.w	r3, r3, #16
 8002166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f931 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fc38 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f949 	bl	800243a <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f911 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000030 	.word	0x20000030
 80021dc:	20000038 	.word	0x20000038
 80021e0:	20000034 	.word	0x20000034

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_IncTick+0x20>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000038 	.word	0x20000038
 8002204:	20000af4 	.word	0x20000af4

08002208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <HAL_GetTick+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000af4 	.word	0x20000af4

0800221c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_ResumeTick+0x18>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_ResumeTick+0x18>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	e000e010 	.word	0xe000e010

08002238 <__NVIC_SetPriorityGrouping>:
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4906      	ldr	r1, [pc, #24]	; (80022d0 <__NVIC_EnableIRQ+0x34>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <SysTick_Config>:
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff90 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff2d 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff42 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff90 	bl	8002328 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5f 	bl	80022d4 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff35 	bl	800229c <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b08b      	sub	sp, #44	; 0x2c
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e169      	b.n	800273c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002468:	2201      	movs	r2, #1
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8158 	bne.w	8002736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a9a      	ldr	r2, [pc, #616]	; (80026f4 <HAL_GPIO_Init+0x2a0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d05e      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 8002490:	4a98      	ldr	r2, [pc, #608]	; (80026f4 <HAL_GPIO_Init+0x2a0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d875      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 8002496:	4a98      	ldr	r2, [pc, #608]	; (80026f8 <HAL_GPIO_Init+0x2a4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d058      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 800249c:	4a96      	ldr	r2, [pc, #600]	; (80026f8 <HAL_GPIO_Init+0x2a4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d86f      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024a2:	4a96      	ldr	r2, [pc, #600]	; (80026fc <HAL_GPIO_Init+0x2a8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d052      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024a8:	4a94      	ldr	r2, [pc, #592]	; (80026fc <HAL_GPIO_Init+0x2a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d869      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ae:	4a94      	ldr	r2, [pc, #592]	; (8002700 <HAL_GPIO_Init+0x2ac>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04c      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024b4:	4a92      	ldr	r2, [pc, #584]	; (8002700 <HAL_GPIO_Init+0x2ac>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d863      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ba:	4a92      	ldr	r2, [pc, #584]	; (8002704 <HAL_GPIO_Init+0x2b0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d046      	beq.n	800254e <HAL_GPIO_Init+0xfa>
 80024c0:	4a90      	ldr	r2, [pc, #576]	; (8002704 <HAL_GPIO_Init+0x2b0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d85d      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024c6:	2b12      	cmp	r3, #18
 80024c8:	d82a      	bhi.n	8002520 <HAL_GPIO_Init+0xcc>
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d859      	bhi.n	8002582 <HAL_GPIO_Init+0x12e>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_GPIO_Init+0x80>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	0800254f 	.word	0x0800254f
 80024d8:	08002529 	.word	0x08002529
 80024dc:	0800253b 	.word	0x0800253b
 80024e0:	0800257d 	.word	0x0800257d
 80024e4:	08002583 	.word	0x08002583
 80024e8:	08002583 	.word	0x08002583
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002583 	.word	0x08002583
 80024f4:	08002583 	.word	0x08002583
 80024f8:	08002583 	.word	0x08002583
 80024fc:	08002583 	.word	0x08002583
 8002500:	08002583 	.word	0x08002583
 8002504:	08002583 	.word	0x08002583
 8002508:	08002583 	.word	0x08002583
 800250c:	08002583 	.word	0x08002583
 8002510:	08002583 	.word	0x08002583
 8002514:	08002583 	.word	0x08002583
 8002518:	08002531 	.word	0x08002531
 800251c:	08002545 	.word	0x08002545
 8002520:	4a79      	ldr	r2, [pc, #484]	; (8002708 <HAL_GPIO_Init+0x2b4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002526:	e02c      	b.n	8002582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	623b      	str	r3, [r7, #32]
          break;
 800252e:	e029      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	3304      	adds	r3, #4
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	e024      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	3308      	adds	r3, #8
 8002540:	623b      	str	r3, [r7, #32]
          break;
 8002542:	e01f      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	330c      	adds	r3, #12
 800254a:	623b      	str	r3, [r7, #32]
          break;
 800254c:	e01a      	b.n	8002584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002556:	2304      	movs	r3, #4
 8002558:	623b      	str	r3, [r7, #32]
          break;
 800255a:	e013      	b.n	8002584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002564:	2308      	movs	r3, #8
 8002566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	611a      	str	r2, [r3, #16]
          break;
 800256e:	e009      	b.n	8002584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002570:	2308      	movs	r3, #8
 8002572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	615a      	str	r2, [r3, #20]
          break;
 800257a:	e003      	b.n	8002584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
          break;
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x130>
          break;
 8002582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d801      	bhi.n	800258e <HAL_GPIO_Init+0x13a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_Init+0x13e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d802      	bhi.n	80025a0 <HAL_GPIO_Init+0x14c>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	e002      	b.n	80025a6 <HAL_GPIO_Init+0x152>
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	3b08      	subs	r3, #8
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	210f      	movs	r1, #15
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	401a      	ands	r2, r3
 80025b8:	6a39      	ldr	r1, [r7, #32]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80b1 	beq.w	8002736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_GPIO_Init+0x2b8>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x2b8>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_GPIO_Init+0x2b8>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2bc>)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_GPIO_Init+0x2c0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x1ec>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_GPIO_Init+0x2c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00d      	beq.n	800263c <HAL_GPIO_Init+0x1e8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3e      	ldr	r2, [pc, #248]	; (800271c <HAL_GPIO_Init+0x2c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_GPIO_Init+0x1e4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3d      	ldr	r2, [pc, #244]	; (8002720 <HAL_GPIO_Init+0x2cc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_GPIO_Init+0x1e0>
 8002630:	2303      	movs	r3, #3
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002634:	2304      	movs	r3, #4
 8002636:	e004      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002638:	2302      	movs	r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002640:	2300      	movs	r3, #0
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	4093      	lsls	r3, r2
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002652:	492f      	ldr	r1, [pc, #188]	; (8002710 <HAL_GPIO_Init+0x2bc>)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	492c      	ldr	r1, [pc, #176]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	43db      	mvns	r3, r3
 8002682:	4928      	ldr	r1, [pc, #160]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 8002684:	4013      	ands	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4922      	ldr	r1, [pc, #136]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	491e      	ldr	r1, [pc, #120]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	4918      	ldr	r1, [pc, #96]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4914      	ldr	r1, [pc, #80]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d021      	beq.n	8002728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e021      	b.n	8002736 <HAL_GPIO_Init+0x2e2>
 80026f2:	bf00      	nop
 80026f4:	10320000 	.word	0x10320000
 80026f8:	10310000 	.word	0x10310000
 80026fc:	10220000 	.word	0x10220000
 8002700:	10210000 	.word	0x10210000
 8002704:	10120000 	.word	0x10120000
 8002708:	10110000 	.word	0x10110000
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	40010800 	.word	0x40010800
 8002718:	40010c00 	.word	0x40010c00
 800271c:	40011000 	.word	0x40011000
 8002720:	40011400 	.word	0x40011400
 8002724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_GPIO_Init+0x304>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	43db      	mvns	r3, r3
 8002730:	4909      	ldr	r1, [pc, #36]	; (8002758 <HAL_GPIO_Init+0x304>)
 8002732:	4013      	ands	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	3301      	adds	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f ae8e 	bne.w	8002468 <HAL_GPIO_Init+0x14>
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	372c      	adds	r7, #44	; 0x2c
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e001      	b.n	800277e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	807b      	strh	r3, [r7, #2]
 8002796:	4613      	mov	r3, r2
 8002798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800279a:	787b      	ldrb	r3, [r7, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027a6:	e003      	b.n	80027b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	041a      	lsls	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fd4c 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e272      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002818:	4b8f      	ldr	r3, [pc, #572]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d112      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
 8002824:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x12c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e24c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x76>
 8002854:	4b80      	ldr	r3, [pc, #512]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7f      	ldr	r2, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7a      	ldr	r2, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xbc>
 800288e:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a71      	ldr	r2, [pc, #452]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 80028a8:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff fc9e 	bl	8002208 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff fc9a 	bl	8002208 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e200      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe4>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff fc8a 	bl	8002208 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff fc86 	bl	8002208 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1ec      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x10c>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d063      	beq.n	80029ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x18c>
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x176>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1c0      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4939      	ldr	r1, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e03a      	b.n	80029ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7ff fc3f 	bl	8002208 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff fc3b 	bl	8002208 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e1a1      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4927      	ldr	r1, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fc1e 	bl	8002208 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7ff fc1a 	bl	8002208 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e180      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03a      	beq.n	8002a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a08:	f7ff fbfe 	bl	8002208 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7ff fbfa 	bl	8002208 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e160      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 fad8 	bl	8002fe4 <RCC_Delay>
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fbe4 	bl	8002208 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a42:	e00f      	b.n	8002a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7ff fbe0 	bl	8002208 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d908      	bls.n	8002a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e146      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	42420000 	.word	0x42420000
 8002a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	4b92      	ldr	r3, [pc, #584]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e9      	bne.n	8002a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a6 	beq.w	8002bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a82:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a87      	ldr	r2, [pc, #540]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	61d3      	str	r3, [r2, #28]
 8002a9a:	4b85      	ldr	r3, [pc, #532]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b82      	ldr	r3, [pc, #520]	; (8002cb4 <HAL_RCC_OscConfig+0x4c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x4c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7e      	ldr	r2, [pc, #504]	; (8002cb4 <HAL_RCC_OscConfig+0x4c8>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fba1 	bl	8002208 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7ff fb9d 	bl	8002208 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e103      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b75      	ldr	r3, [pc, #468]	; (8002cb4 <HAL_RCC_OscConfig+0x4c8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x312>
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	e02d      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a69      	ldr	r2, [pc, #420]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a66      	ldr	r2, [pc, #408]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x356>
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a60      	ldr	r2, [pc, #384]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	4b5e      	ldr	r3, [pc, #376]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a5d      	ldr	r2, [pc, #372]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	e00b      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a57      	ldr	r2, [pc, #348]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d015      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7ff fb51 	bl	8002208 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7ff fb4d 	bl	8002208 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0b1      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ee      	beq.n	8002b6a <HAL_RCC_OscConfig+0x37e>
 8002b8c:	e014      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fb3b 	bl	8002208 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7ff fb37 	bl	8002208 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e09b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d061      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d146      	bne.n	8002c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7ff fb0b 	bl	8002208 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7ff fb07 	bl	8002208 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e06d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d108      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4921      	ldr	r1, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a19      	ldr	r1, [r3, #32]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	430b      	orrs	r3, r1
 8002c42:	491b      	ldr	r1, [pc, #108]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fadb 	bl	8002208 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7ff fad7 	bl	8002208 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x46a>
 8002c74:	e035      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fac4 	bl	8002208 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7ff fac0 	bl	8002208 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e026      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x498>
 8002ca2:	e01e      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e019      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x500>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d040      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d115      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e073      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4936      	ldr	r1, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7ff fa12 	bl	8002208 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7ff fa0e 	bl	8002208 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e053      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d210      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 0207 	bic.w	r2, r3, #7
 8002e26:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1cc>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f970 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	0800b774 	.word	0x0800b774
 8002ebc:	20000030 	.word	0x20000030
 8002ec0:	20000034 	.word	0x20000034

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b490      	push	{r4, r7}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ecc:	1d3c      	adds	r4, r7, #4
 8002ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ed4:	f240 2301 	movw	r3, #513	; 0x201
 8002ed8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x46>
 8002f02:	e02b      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f06:	623b      	str	r3, [r7, #32]
      break;
 8002f08:	e02b      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	0c9b      	lsrs	r3, r3, #18
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	443b      	add	r3, r7
 8002f16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0c5b      	lsrs	r3, r3, #17
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	443b      	add	r3, r7
 8002f34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f3e:	fb03 f202 	mul.w	r2, r3, r2
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e004      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	623b      	str	r3, [r7, #32]
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f5e:	623b      	str	r3, [r7, #32]
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6a3b      	ldr	r3, [r7, #32]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc90      	pop	{r4, r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	0800b760 	.word	0x0800b760
 8002f74:	40021000 	.word	0x40021000
 8002f78:	007a1200 	.word	0x007a1200
 8002f7c:	003d0900 	.word	0x003d0900

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20000030 	.word	0x20000030

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff2 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	0800b784 	.word	0x0800b784

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffde 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0adb      	lsrs	r3, r3, #11
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	0800b784 	.word	0x0800b784

08002fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <RCC_Delay+0x34>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <RCC_Delay+0x38>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a5b      	lsrs	r3, r3, #9
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003000:	bf00      	nop
  }
  while (Delay --);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e5a      	subs	r2, r3, #1
 8003006:	60fa      	str	r2, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <RCC_Delay+0x1c>
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000030 	.word	0x20000030
 800301c:	10624dd3 	.word	0x10624dd3

08003020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e041      	b.n	80030b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe ff70 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 fb1c 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_TIM_Base_Start+0x88>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00e      	beq.n	8003108 <HAL_TIM_Base_Start+0x48>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d009      	beq.n	8003108 <HAL_TIM_Base_Start+0x48>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIM_Base_Start+0x8c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_TIM_Base_Start+0x48>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_TIM_Base_Start+0x90>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d111      	bne.n	800312c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b06      	cmp	r3, #6
 8003118:	d010      	beq.n	800313c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	e007      	b.n	800313c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	f241 1311 	movw	r3, #4369	; 0x1111
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <HAL_TIM_Base_Stop+0x38>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	f240 4344 	movw	r3, #1092	; 0x444
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_TIM_Base_Stop+0x38>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d001      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e03a      	b.n	800322e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_TIM_Base_Start_IT+0x98>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x58>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d009      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x58>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_TIM_Base_Start_IT+0x9c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x58>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_TIM_Base_Start_IT+0xa0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d111      	bne.n	800321c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d010      	beq.n	800322c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	e007      	b.n	800322c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800

08003244 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	f241 1311 	movw	r3, #4369	; 0x1111
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_TIM_Base_Stop_IT+0x48>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	f240 4344 	movw	r3, #1092	; 0x444
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_TIM_Base_Stop_IT+0x48>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9b1 	bl	800364a <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9a4 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f9b3 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f987 	bl	800364a <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f97a 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f989 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f95d 	bl	800364a <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f950 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f95f 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f933 	bl	800364a <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f926 	bl	8003638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f935 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe f8a0 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa85 	bl	800395a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8f9 	bl	800366e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0220 	mvn.w	r2, #32
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa50 	bl	8003948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x18>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0b3      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x180>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xd0>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x168>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	f000 8085 	beq.w	800361c <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xa2>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x116>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xf6>
 800352c:	2b50      	cmp	r3, #80	; 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x136>
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x156>
 800353c:	2b30      	cmp	r3, #48	; 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x156>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x156>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f000 f974 	bl	800384e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003574:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04e      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f000 f95d 	bl	800384e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03b      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 f8d4 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f92b 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02b      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 f8f2 	bl	80037bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f91b 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01b      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 f8b4 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f90b 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 8003604:	e00b      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 f902 	bl	800381a <TIM_ITRx_SetConfig>
        break;
 8003616:	e002      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800361c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return htim->State;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
	...

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <TIM_Base_SetConfig+0xb8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00b      	beq.n	80036cc <TIM_Base_SetConfig+0x30>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d007      	beq.n	80036cc <TIM_Base_SetConfig+0x30>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a26      	ldr	r2, [pc, #152]	; (8003758 <TIM_Base_SetConfig+0xbc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x30>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <TIM_Base_SetConfig+0xc0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <TIM_Base_SetConfig+0xb8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0x62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <TIM_Base_SetConfig+0xbc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0x62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <TIM_Base_SetConfig+0xc0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <TIM_Base_SetConfig+0xb8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	615a      	str	r2, [r3, #20]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800

08003760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0201 	bic.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 030a 	bic.w	r3, r3, #10
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	031b      	lsls	r3, r3, #12
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	621a      	str	r2, [r3, #32]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	f043 0307 	orr.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003868:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	431a      	orrs	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	609a      	str	r2, [r3, #8]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e046      	b.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d009      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a10      	ldr	r2, [pc, #64]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10c      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800

08003948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e033      	b.n	80039e6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fb6e 	bl	8002074 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f869 	bl	8003a78 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_USART_Transmit_IT>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  if (husart->State == HAL_USART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d130      	bne.n	8003a6a <HAL_USART_Transmit_IT+0x7c>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_USART_Transmit_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_USART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e029      	b.n	8003a6c <HAL_USART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_USART_Transmit_IT+0x38>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e022      	b.n	8003a6c <HAL_USART_Transmit_IT+0x7e>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->pTxBuffPtr = pTxData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    husart->TxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2212      	movs	r2, #18
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
       configured only for transmit "USART_MODE_TX"
       The __HAL_USART_ENABLE_IT(husart, USART_IT_ERR) can be used to enable the Frame error,
       Noise error interrupt */

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the USART Transmit Data Register Empty Interrupt */
    SET_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a64:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_USART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020c 	bic.w	r2, r2, #12
 8003a92:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003aac:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ada:	f023 030c 	bic.w	r3, r3, #12
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b0c:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a53      	ldr	r2, [pc, #332]	; (8003c60 <USART_SetConfig+0x1e8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d14f      	bne.n	8003bb8 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7ff fa50 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8003b1c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	0119      	lsls	r1, r3, #4
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003b56:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2064      	movs	r0, #100	; 0x64
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	; 0x32
 8003b68:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003b76:	4419      	add	r1, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8e:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003b90:	fba3 0302 	umull	r0, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2064      	movs	r0, #100	; 0x64
 8003b98:	fb00 f303 	mul.w	r3, r0, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003bb6:	e04e      	b.n	8003c56 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7ff f9ec 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009a      	lsls	r2, r3, #2
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	0119      	lsls	r1, r3, #4
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2064      	movs	r0, #100	; 0x64
 8003bfe:	fb00 f303 	mul.w	r3, r0, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	3332      	adds	r3, #50	; 0x32
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003c16:	4419      	add	r1, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009a      	lsls	r2, r3, #2
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003c30:	fba3 0302 	umull	r0, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2064      	movs	r0, #100	; 0x64
 8003c38:	fb00 f303 	mul.w	r3, r0, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <USART_SetConfig+0x1ec>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	440a      	add	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40013800 	.word	0x40013800
 8003c64:	51eb851f 	.word	0x51eb851f

08003c68 <output_CRK>:

/* Public functions -------------------------------------------------------- */

//## Output Function CRK
void output_CRK(char failure_ident)  // processed at each CRK edge
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	3b31      	subs	r3, #49	; 0x31
 8003c76:	2b3c      	cmp	r3, #60	; 0x3c
 8003c78:	f200 80b6 	bhi.w	8003de8 <output_CRK+0x180>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <output_CRK+0x1c>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003de9 	.word	0x08003de9
 8003c88:	08003de9 	.word	0x08003de9
 8003c8c:	08003de9 	.word	0x08003de9
 8003c90:	08003d79 	.word	0x08003d79
 8003c94:	08003de9 	.word	0x08003de9
 8003c98:	08003d7f 	.word	0x08003d7f
 8003c9c:	08003d85 	.word	0x08003d85
 8003ca0:	08003de9 	.word	0x08003de9
 8003ca4:	08003d91 	.word	0x08003d91
 8003ca8:	08003de9 	.word	0x08003de9
 8003cac:	08003de9 	.word	0x08003de9
 8003cb0:	08003de9 	.word	0x08003de9
 8003cb4:	08003de9 	.word	0x08003de9
 8003cb8:	08003de9 	.word	0x08003de9
 8003cbc:	08003de9 	.word	0x08003de9
 8003cc0:	08003de9 	.word	0x08003de9
 8003cc4:	08003de9 	.word	0x08003de9
 8003cc8:	08003de9 	.word	0x08003de9
 8003ccc:	08003de9 	.word	0x08003de9
 8003cd0:	08003de9 	.word	0x08003de9
 8003cd4:	08003de9 	.word	0x08003de9
 8003cd8:	08003de9 	.word	0x08003de9
 8003cdc:	08003de9 	.word	0x08003de9
 8003ce0:	08003de9 	.word	0x08003de9
 8003ce4:	08003de9 	.word	0x08003de9
 8003ce8:	08003de9 	.word	0x08003de9
 8003cec:	08003de9 	.word	0x08003de9
 8003cf0:	08003de9 	.word	0x08003de9
 8003cf4:	08003de9 	.word	0x08003de9
 8003cf8:	08003de9 	.word	0x08003de9
 8003cfc:	08003de9 	.word	0x08003de9
 8003d00:	08003de9 	.word	0x08003de9
 8003d04:	08003de9 	.word	0x08003de9
 8003d08:	08003de9 	.word	0x08003de9
 8003d0c:	08003de9 	.word	0x08003de9
 8003d10:	08003de9 	.word	0x08003de9
 8003d14:	08003de9 	.word	0x08003de9
 8003d18:	08003de9 	.word	0x08003de9
 8003d1c:	08003de9 	.word	0x08003de9
 8003d20:	08003de9 	.word	0x08003de9
 8003d24:	08003de9 	.word	0x08003de9
 8003d28:	08003de9 	.word	0x08003de9
 8003d2c:	08003de9 	.word	0x08003de9
 8003d30:	08003de9 	.word	0x08003de9
 8003d34:	08003de9 	.word	0x08003de9
 8003d38:	08003de9 	.word	0x08003de9
 8003d3c:	08003de9 	.word	0x08003de9
 8003d40:	08003de9 	.word	0x08003de9
 8003d44:	08003de9 	.word	0x08003de9
 8003d48:	08003de9 	.word	0x08003de9
 8003d4c:	08003de9 	.word	0x08003de9
 8003d50:	08003de9 	.word	0x08003de9
 8003d54:	08003de9 	.word	0x08003de9
 8003d58:	08003de9 	.word	0x08003de9
 8003d5c:	08003de9 	.word	0x08003de9
 8003d60:	08003dbf 	.word	0x08003dbf
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	08003dcb 	.word	0x08003dcb
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003dd7 	.word	0x08003dd7
 8003d74:	08003ddd 	.word	0x08003ddd
        case '3': {
            break;
        }
        case '4':  // CRK_RUN_OUT
        {
            output_CRK_RUN_OUT();
 8003d78:	f000 f970 	bl	800405c <output_CRK_RUN_OUT>
            break;
 8003d7c:	e035      	b.n	8003dea <output_CRK+0x182>
        }
        case '6':  // CRK_TOOTH_PER
        {
            output_CRK_TOOTH_PER();
 8003d7e:	f000 fcb5 	bl	80046ec <output_CRK_TOOTH_PER>

            break;
 8003d82:	e032      	b.n	8003dea <output_CRK+0x182>
        }
        case '7':  // CAM_TOOTH_OFF
        {
            CAM_delay_counter(active_cam_failure);
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <output_CRK+0x18c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f82f 	bl	8004dec <CAM_delay_counter>

            break;
 8003d8e:	e02c      	b.n	8003dea <output_CRK+0x182>
        {
            break;
        }
        case '9':  // CAM_SYN_CRK
        {
            if (active_cam_failure == 2) {
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <output_CRK+0x18c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d106      	bne.n	8003da6 <output_CRK+0x13e>
                CAM_delay_counter(0);  // for CAM1
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f001 f827 	bl	8004dec <CAM_delay_counter>
                CAM_delay_counter(1);  // for CAM2
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f001 f824 	bl	8004dec <CAM_delay_counter>
            } else if (active_cam_failure == 1) {
                CAM_delay_counter(1);  // for CAM2
            } else {
                CAM_delay_counter(0);  // for CAM1
            }
            break;
 8003da4:	e021      	b.n	8003dea <output_CRK+0x182>
            } else if (active_cam_failure == 1) {
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <output_CRK+0x18c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d103      	bne.n	8003db6 <output_CRK+0x14e>
                CAM_delay_counter(1);  // for CAM2
 8003dae:	2001      	movs	r0, #1
 8003db0:	f001 f81c 	bl	8004dec <CAM_delay_counter>
            break;
 8003db4:	e019      	b.n	8003dea <output_CRK+0x182>
                CAM_delay_counter(0);  // for CAM1
 8003db6:	2000      	movs	r0, #0
 8003db8:	f001 f818 	bl	8004dec <CAM_delay_counter>
            break;
 8003dbc:	e015      	b.n	8003dea <output_CRK+0x182>
        {
            break;
        }
        case 'h':  // CRK_TOOTH_OFF
        {
            output_CRK_TOOTH_OFF();
 8003dbe:	f001 f9f1 	bl	80051a4 <output_CRK_TOOTH_OFF>
            break;
 8003dc2:	e012      	b.n	8003dea <output_CRK+0x182>
        }
        case 'i':  // CRK_GAP_NOT_DET
        {
            output_CRK_GAP_NOT_DET();
 8003dc4:	f001 fab0 	bl	8005328 <output_CRK_GAP_NOT_DET>
            break;
 8003dc8:	e00f      	b.n	8003dea <output_CRK+0x182>
        }
        case 'j':  // SEG_ADP_ER_LIM
        {
            output_SEG_ADP_ER_LIM();
 8003dca:	f001 fb45 	bl	8005458 <output_SEG_ADP_ER_LIM>
            break;
 8003dce:	e00c      	b.n	8003dea <output_CRK+0x182>
        }
        case 'k':  // CRK_pulse_duration
        {
            output_CRK_pulse_duration();
 8003dd0:	f001 fca0 	bl	8005714 <output_CRK_pulse_duration>
            break;
 8003dd4:	e009      	b.n	8003dea <output_CRK+0x182>
        }
        case 'l':  // POSN_ENG_STST
        {
            output_POSN_ENG_STST();
 8003dd6:	f001 fcc3 	bl	8005760 <output_POSN_ENG_STST>
            break;
 8003dda:	e006      	b.n	8003dea <output_CRK+0x182>
        }
        case 'm':  // SC_CAM_CRK
        {
            output_SC_CAM_CRK(active_cam_failure);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <output_CRK+0x18c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 fddd 	bl	80059a0 <output_SC_CAM_CRK>
            break;
 8003de6:	e000      	b.n	8003dea <output_CRK+0x182>
        }
        default:
            break;
 8003de8:	bf00      	nop
    }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000668 	.word	0x20000668

08003df8 <output_CAM>:

//## Output Function CAM
void output_CAM(char failure_ident, int cam_id) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
    if ((cam_id == active_cam_failure) || active_cam_failure == 2) {
 8003e04:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <output_CAM+0x1cc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d004      	beq.n	8003e18 <output_CAM+0x20>
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <output_CAM+0x1cc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	f040 80cd 	bne.w	8003fb2 <output_CAM+0x1ba>
        switch (failure_ident) {
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	3b30      	subs	r3, #48	; 0x30
 8003e1c:	2b3d      	cmp	r3, #61	; 0x3d
 8003e1e:	f200 80c6 	bhi.w	8003fae <output_CAM+0x1b6>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <output_CAM+0x30>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003f21 	.word	0x08003f21
 8003e2c:	08003f29 	.word	0x08003f29
 8003e30:	08003f31 	.word	0x08003f31
 8003e34:	08003f39 	.word	0x08003f39
 8003e38:	08003f41 	.word	0x08003f41
 8003e3c:	08003f49 	.word	0x08003f49
 8003e40:	08003f57 	.word	0x08003f57
 8003e44:	08003faf 	.word	0x08003faf
 8003e48:	08003f5f 	.word	0x08003f5f
 8003e4c:	08003f67 	.word	0x08003f67
 8003e50:	08003faf 	.word	0x08003faf
 8003e54:	08003faf 	.word	0x08003faf
 8003e58:	08003faf 	.word	0x08003faf
 8003e5c:	08003faf 	.word	0x08003faf
 8003e60:	08003faf 	.word	0x08003faf
 8003e64:	08003faf 	.word	0x08003faf
 8003e68:	08003faf 	.word	0x08003faf
 8003e6c:	08003faf 	.word	0x08003faf
 8003e70:	08003faf 	.word	0x08003faf
 8003e74:	08003faf 	.word	0x08003faf
 8003e78:	08003faf 	.word	0x08003faf
 8003e7c:	08003faf 	.word	0x08003faf
 8003e80:	08003faf 	.word	0x08003faf
 8003e84:	08003faf 	.word	0x08003faf
 8003e88:	08003faf 	.word	0x08003faf
 8003e8c:	08003faf 	.word	0x08003faf
 8003e90:	08003faf 	.word	0x08003faf
 8003e94:	08003faf 	.word	0x08003faf
 8003e98:	08003faf 	.word	0x08003faf
 8003e9c:	08003faf 	.word	0x08003faf
 8003ea0:	08003faf 	.word	0x08003faf
 8003ea4:	08003faf 	.word	0x08003faf
 8003ea8:	08003faf 	.word	0x08003faf
 8003eac:	08003faf 	.word	0x08003faf
 8003eb0:	08003faf 	.word	0x08003faf
 8003eb4:	08003faf 	.word	0x08003faf
 8003eb8:	08003faf 	.word	0x08003faf
 8003ebc:	08003faf 	.word	0x08003faf
 8003ec0:	08003faf 	.word	0x08003faf
 8003ec4:	08003faf 	.word	0x08003faf
 8003ec8:	08003faf 	.word	0x08003faf
 8003ecc:	08003faf 	.word	0x08003faf
 8003ed0:	08003faf 	.word	0x08003faf
 8003ed4:	08003faf 	.word	0x08003faf
 8003ed8:	08003faf 	.word	0x08003faf
 8003edc:	08003faf 	.word	0x08003faf
 8003ee0:	08003faf 	.word	0x08003faf
 8003ee4:	08003faf 	.word	0x08003faf
 8003ee8:	08003faf 	.word	0x08003faf
 8003eec:	08003faf 	.word	0x08003faf
 8003ef0:	08003f6f 	.word	0x08003f6f
 8003ef4:	08003faf 	.word	0x08003faf
 8003ef8:	08003faf 	.word	0x08003faf
 8003efc:	08003faf 	.word	0x08003faf
 8003f00:	08003f77 	.word	0x08003f77
 8003f04:	08003faf 	.word	0x08003faf
 8003f08:	08003f7f 	.word	0x08003f7f
 8003f0c:	08003f87 	.word	0x08003f87
 8003f10:	08003f8f 	.word	0x08003f8f
 8003f14:	08003f97 	.word	0x08003f97
 8003f18:	08003f9f 	.word	0x08003f9f
 8003f1c:	08003fa7 	.word	0x08003fa7
            case '0':  // NO_FAILURE
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f000 f869 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f26:	e043      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '1':  // CRK_NO_SIG
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f28:	6838      	ldr	r0, [r7, #0]
 8003f2a:	f000 f865 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f2e:	e03f      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '2':  // CAM_NO_SIG
            {
                output_CAM_no_failure(cam_id);
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f000 f861 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f36:	e03b      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '3':  // CRK/CAM_NO_SIG
            {
                output_CAM_no_failure(cam_id);
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f000 f85d 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f3e:	e037      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '4':  // CRK_RUN_OUT
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f40:	6838      	ldr	r0, [r7, #0]
 8003f42:	f000 f859 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f46:	e033      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '5':  // CAM_PER
            {
                output_CAM_no_failure(cam_id);
 8003f48:	6838      	ldr	r0, [r7, #0]
 8003f4a:	f000 f855 	bl	8003ff8 <output_CAM_no_failure>
                output_CAM_PER(cam_id);
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f000 f95e 	bl	8004210 <output_CAM_PER>
                break;
 8003f54:	e02c      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '6':  // CRK_TOOTH_PER
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f56:	6838      	ldr	r0, [r7, #0]
 8003f58:	f000 f84e 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f5c:	e028      	b.n	8003fb0 <output_CAM+0x1b8>
            {
                break;
            }
            case '8':  // CAM_PAT_ERR
            {
                output_CAM_PAT_ERR(cam_id);
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f001 fc44 	bl	80057ec <output_CAM_PAT_ERR>
                break;
 8003f64:	e024      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case '9':  // CAM_SYN_CRK
            {
                Output_CAM_delay(cam_id);
 8003f66:	6838      	ldr	r0, [r7, #0]
 8003f68:	f000 fbfe 	bl	8004768 <Output_CAM_delay>
                break;
 8003f6c:	e020      	b.n	8003fb0 <output_CAM+0x1b8>
            {
                break;
            }
            case 'b':  // CRK_SHO_LEVEL
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f6e:	6838      	ldr	r0, [r7, #0]
 8003f70:	f000 f842 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f74:	e01c      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'f':  // CRK_TOOTH_NR
            {
                output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f000 f83e 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f7c:	e018      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'h':  // CRK_TOOTH_OFF
            {
                output_CAM_no_failure(cam_id);
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f000 f83a 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f84:	e014      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'i':  // CRK_Gap_Not_Det
            {
                output_CAM_no_failure(cam_id);
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f000 f836 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f8c:	e010      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'j':  // SEG_ADP_ER_LIM
            {
                output_CAM_no_failure(cam_id);
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	f000 f832 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f94:	e00c      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'k':  // CRK_pulse_duration
            {
                output_CAM_no_failure(cam_id);
 8003f96:	6838      	ldr	r0, [r7, #0]
 8003f98:	f000 f82e 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003f9c:	e008      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'l':  // POSN_ENG_STST
            {
                output_CAM_no_failure(cam_id);
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f000 f82a 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8003fa4:	e004      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            case 'm':  // SC_CAM_CRK
            {
                output_SC_CAM_CRK(cam_id);
 8003fa6:	6838      	ldr	r0, [r7, #0]
 8003fa8:	f001 fcfa 	bl	80059a0 <output_SC_CAM_CRK>
                break;
 8003fac:	e000      	b.n	8003fb0 <output_CAM+0x1b8>
            }
            default:
                break;
 8003fae:	bf00      	nop
        switch (failure_ident) {
 8003fb0:	e003      	b.n	8003fba <output_CAM+0x1c2>
        }
    } else {
        output_CAM_no_failure(cam_id);  // no failure to be put out on CAM
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f000 f820 	bl	8003ff8 <output_CAM_no_failure>
    }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000668 	.word	0x20000668

08003fc8 <output_CRK_no_failure>:
/**
 * @brief This function outputs the CRK signal in its normal state (no failure).
 * This simply consists in reproducing the CRK signal as is.
 *
 */
void output_CRK_no_failure(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <output_CRK_no_failure+0x28>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <output_CRK_no_failure+0x18>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	4806      	ldr	r0, [pc, #24]	; (8003ff4 <output_CRK_no_failure+0x2c>)
 8003fda:	f7fe fbd6 	bl	800278a <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    }
}
 8003fde:	e004      	b.n	8003fea <output_CRK_no_failure+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	4803      	ldr	r0, [pc, #12]	; (8003ff4 <output_CRK_no_failure+0x2c>)
 8003fe6:	f7fe fbd0 	bl	800278a <HAL_GPIO_WritePin>
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200002a3 	.word	0x200002a3
 8003ff4:	40010800 	.word	0x40010800

08003ff8 <output_CAM_no_failure>:

//## Output_CAM no Failure Function
void output_CAM_no_failure(int cam_id) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    if (CAM_signal[cam_id] == true) {
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <output_CAM_no_failure+0x5c>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00f      	beq.n	800402c <output_CAM_no_failure+0x34>
        if (cam_id == 0) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <output_CAM_no_failure+0x28>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004012:	2201      	movs	r2, #1
 8004014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004018:	480f      	ldr	r0, [pc, #60]	; (8004058 <output_CAM_no_failure+0x60>)
 800401a:	f7fe fbb6 	bl	800278a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
        }
    }
}
 800401e:	e014      	b.n	800404a <output_CAM_no_failure+0x52>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004020:	2201      	movs	r2, #1
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <output_CAM_no_failure+0x60>)
 8004026:	f7fe fbb0 	bl	800278a <HAL_GPIO_WritePin>
}
 800402a:	e00e      	b.n	800404a <output_CAM_no_failure+0x52>
        if (cam_id == 0) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <output_CAM_no_failure+0x48>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004032:	2200      	movs	r2, #0
 8004034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004038:	4807      	ldr	r0, [pc, #28]	; (8004058 <output_CAM_no_failure+0x60>)
 800403a:	f7fe fba6 	bl	800278a <HAL_GPIO_WritePin>
}
 800403e:	e004      	b.n	800404a <output_CAM_no_failure+0x52>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004040:	2200      	movs	r2, #0
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	4804      	ldr	r0, [pc, #16]	; (8004058 <output_CAM_no_failure+0x60>)
 8004046:	f7fe fba0 	bl	800278a <HAL_GPIO_WritePin>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000658 	.word	0x20000658
 8004058:	40010800 	.word	0x40010800

0800405c <output_CRK_RUN_OUT>:

//### Output CRK: RUN_OUT ###
void output_CRK_RUN_OUT(void) {
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <output_CRK_RUN_OUT+0x15c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d014      	beq.n	8004092 <output_CRK_RUN_OUT+0x36>
        if (teeth_count_CRK != number_teeth_between_gaps) {  // count the teeths on th rising edge
 8004068:	4b54      	ldr	r3, [pc, #336]	; (80041bc <output_CRK_RUN_OUT+0x160>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <output_CRK_RUN_OUT+0x164>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d005      	beq.n	8004080 <output_CRK_RUN_OUT+0x24>
            teeth_counter_CRK_RUN_OUT = teeth_count_CRK + 1;
 8004074:	4b51      	ldr	r3, [pc, #324]	; (80041bc <output_CRK_RUN_OUT+0x160>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e008      	b.n	8004092 <output_CRK_RUN_OUT+0x36>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {  // if we reched a gap
 8004080:	4b4e      	ldr	r3, [pc, #312]	; (80041bc <output_CRK_RUN_OUT+0x160>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b4e      	ldr	r3, [pc, #312]	; (80041c0 <output_CRK_RUN_OUT+0x164>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d102      	bne.n	8004092 <output_CRK_RUN_OUT+0x36>
            teeth_counter_CRK_RUN_OUT = 1;
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]
        }
    }

    if (failure_active == true) {                                                                                                 // if failure is active
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <output_CRK_RUN_OUT+0x16c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03a      	beq.n	8004110 <output_CRK_RUN_OUT+0xb4>
        if ((teeth_counter_CRK_RUN_OUT * revolution_CRK) >= (failure_period_CRK_RUN_OUT + angle_to_start_failure_CRK_RUN_OUT)) {  // once we have reached the failure end
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc f9a0 	bl	80003e4 <__aeabi_ui2d>
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <output_CRK_RUN_OUT+0x170>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc fa15 	bl	80004d8 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <output_CRK_RUN_OUT+0x174>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <output_CRK_RUN_OUT+0x178>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc f98f 	bl	80003e4 <__aeabi_ui2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc fc89 	bl	80009e4 <__aeabi_dcmpge>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <output_CRK_RUN_OUT+0x8a>
            failure_active = false;
 80040d8:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <output_CRK_RUN_OUT+0x16c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
            failure_passed = true;
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <output_CRK_RUN_OUT+0x17c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
            failure_active = true;
        } else {
        }
        output_CRK_no_failure();
    }
}
 80040e4:	e065      	b.n	80041b2 <output_CRK_RUN_OUT+0x156>
            if (sc_type_CRK_RUN_OUT == 'g') {
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <output_CRK_RUN_OUT+0x180>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b67      	cmp	r3, #103	; 0x67
 80040ec:	d106      	bne.n	80040fc <output_CRK_RUN_OUT+0xa0>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);  // set CRK as low
 80040ee:	2200      	movs	r2, #0
 80040f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040f4:	483a      	ldr	r0, [pc, #232]	; (80041e0 <output_CRK_RUN_OUT+0x184>)
 80040f6:	f7fe fb48 	bl	800278a <HAL_GPIO_WritePin>
}
 80040fa:	e05a      	b.n	80041b2 <output_CRK_RUN_OUT+0x156>
            } else if (sc_type_CRK_RUN_OUT == 'b') {
 80040fc:	4b37      	ldr	r3, [pc, #220]	; (80041dc <output_CRK_RUN_OUT+0x180>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b62      	cmp	r3, #98	; 0x62
 8004102:	d156      	bne.n	80041b2 <output_CRK_RUN_OUT+0x156>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // set CRK as hight
 8004104:	2201      	movs	r2, #1
 8004106:	2110      	movs	r1, #16
 8004108:	4835      	ldr	r0, [pc, #212]	; (80041e0 <output_CRK_RUN_OUT+0x184>)
 800410a:	f7fe fb3e 	bl	800278a <HAL_GPIO_WritePin>
}
 800410e:	e050      	b.n	80041b2 <output_CRK_RUN_OUT+0x156>
    } else if (failure_passed == true) {  // once the failure finished have a normal output
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <output_CRK_RUN_OUT+0x17c>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <output_CRK_RUN_OUT+0xda>
        if (teeth_count_CRK == number_teeth_between_gaps) {
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <output_CRK_RUN_OUT+0x160>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <output_CRK_RUN_OUT+0x164>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d102      	bne.n	800412a <output_CRK_RUN_OUT+0xce>
            failure_passed = false;
 8004124:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <output_CRK_RUN_OUT+0x17c>)
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
        teeth_counter_CRK_RUN_OUT = 1;
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
        output_CRK_no_failure();
 8004130:	f7ff ff4a 	bl	8003fc8 <output_CRK_no_failure>
}
 8004134:	e03d      	b.n	80041b2 <output_CRK_RUN_OUT+0x156>
        if ((angle_to_start_failure_CRK_RUN_OUT < (teeth_counter_CRK_RUN_OUT * revolution_CRK)) && ((teeth_counter_CRK_RUN_OUT * revolution_CRK) < (angle_to_start_failure_CRK_RUN_OUT + failure_period_CRK_RUN_OUT))) {  // if we are past the the angle of fairue start and still in the failure period
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <output_CRK_RUN_OUT+0x178>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc f952 	bl	80003e4 <__aeabi_ui2d>
 8004140:	4604      	mov	r4, r0
 8004142:	460d      	mov	r5, r1
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc f94b 	bl	80003e4 <__aeabi_ui2d>
 800414e:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <output_CRK_RUN_OUT+0x170>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc f9c0 	bl	80004d8 <__aeabi_dmul>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4620      	mov	r0, r4
 800415e:	4629      	mov	r1, r5
 8004160:	f7fc fc2c 	bl	80009bc <__aeabi_dcmplt>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d021      	beq.n	80041ae <output_CRK_RUN_OUT+0x152>
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <output_CRK_RUN_OUT+0x168>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f938 	bl	80003e4 <__aeabi_ui2d>
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <output_CRK_RUN_OUT+0x170>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f9ad 	bl	80004d8 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4614      	mov	r4, r2
 8004184:	461d      	mov	r5, r3
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <output_CRK_RUN_OUT+0x178>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <output_CRK_RUN_OUT+0x174>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7fc f927 	bl	80003e4 <__aeabi_ui2d>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4620      	mov	r0, r4
 800419c:	4629      	mov	r1, r5
 800419e:	f7fc fc0d 	bl	80009bc <__aeabi_dcmplt>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <output_CRK_RUN_OUT+0x152>
            failure_active = true;
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <output_CRK_RUN_OUT+0x16c>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
        output_CRK_no_failure();
 80041ae:	f7ff ff0b 	bl	8003fc8 <output_CRK_no_failure>
}
 80041b2:	bf00      	nop
 80041b4:	bdb0      	pop	{r4, r5, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200002a3 	.word	0x200002a3
 80041bc:	20000270 	.word	0x20000270
 80041c0:	20000280 	.word	0x20000280
 80041c4:	20000674 	.word	0x20000674
 80041c8:	2000066c 	.word	0x2000066c
 80041cc:	20000298 	.word	0x20000298
 80041d0:	2000067c 	.word	0x2000067c
 80041d4:	20000678 	.word	0x20000678
 80041d8:	2000066f 	.word	0x2000066f
 80041dc:	20000673 	.word	0x20000673
 80041e0:	40010800 	.word	0x40010800

080041e4 <CRK_RUN_OUT_reset>:

//### CRK_RUN_OUT_reset ###
void CRK_RUN_OUT_reset(void) {
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
    failure_active = false;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <CRK_RUN_OUT_reset+0x20>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
    failure_passed = false;
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <CRK_RUN_OUT_reset+0x24>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    period_counter_CRK_RUN_OUT = 0;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <CRK_RUN_OUT_reset+0x28>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000066c 	.word	0x2000066c
 8004208:	2000066f 	.word	0x2000066f
 800420c:	20000680 	.word	0x20000680

08004210 <output_CAM_PER>:

//## Output CAM: CAM_PER
void output_CAM_PER(int cam_id) {
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    if (active_edges_CAM_PER == 'b') {
 8004218:	4bb2      	ldr	r3, [pc, #712]	; (80044e4 <output_CAM_PER+0x2d4>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b62      	cmp	r3, #98	; 0x62
 800421e:	f040 80a9 	bne.w	8004374 <output_CAM_PER+0x164>
        if (cam_id == 0) {          // For CAM1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d152      	bne.n	80042ce <output_CAM_PER+0xbe>
            HAL_TIM_Base_Stop(&htim3); // Enable Timer3 (formerly Timer6 on microchip)
 8004228:	48af      	ldr	r0, [pc, #700]	; (80044e8 <output_CAM_PER+0x2d8>)
 800422a:	f7fe ff93 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 800422e:	4aaf      	ldr	r2, [pc, #700]	; (80044ec <output_CAM_PER+0x2dc>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004242:	f7fc fa73 	bl	800072c <__aeabi_ddiv>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	4ba7      	ldr	r3, [pc, #668]	; (80044f0 <output_CAM_PER+0x2e0>)
 8004254:	f7fb ff88 	bl	8000168 <__aeabi_dsub>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	4ba4      	ldr	r3, [pc, #656]	; (80044f4 <output_CAM_PER+0x2e4>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fc fa61 	bl	800072c <__aeabi_ddiv>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	499e      	ldr	r1, [pc, #632]	; (80044e8 <output_CAM_PER+0x2d8>)
 8004270:	680c      	ldr	r4, [r1, #0]
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f7fc fbf1 	bl	8000a5c <__aeabi_d2uiz>
 800427a:	4603      	mov	r3, r0
 800427c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800427e:	4a9b      	ldr	r2, [pc, #620]	; (80044ec <output_CAM_PER+0x2dc>)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004292:	f7fc fa4b 	bl	800072c <__aeabi_ddiv>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	4b93      	ldr	r3, [pc, #588]	; (80044f0 <output_CAM_PER+0x2e0>)
 80042a4:	f7fb ff60 	bl	8000168 <__aeabi_dsub>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	4b90      	ldr	r3, [pc, #576]	; (80044f4 <output_CAM_PER+0x2e4>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc fa39 	bl	800072c <__aeabi_ddiv>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	f7fc fbcb 	bl	8000a5c <__aeabi_d2uiz>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a87      	ldr	r2, [pc, #540]	; (80044e8 <output_CAM_PER+0x2d8>)
 80042ca:	60d3      	str	r3, [r2, #12]
        } else {                    // For CAM2
            HAL_TIM_Base_Stop(&htim4); // Enable Timer4 (formerly Timer7 on microchip)
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
        }
    }
}
 80042cc:	e1cd      	b.n	800466a <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4);  // Enable Timer4 (formerly Timer7 on microchip)
 80042ce:	488a      	ldr	r0, [pc, #552]	; (80044f8 <output_CAM_PER+0x2e8>)
 80042d0:	f7fe ff40 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 80042d4:	4a85      	ldr	r2, [pc, #532]	; (80044ec <output_CAM_PER+0x2dc>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042e8:	f7fc fa20 	bl	800072c <__aeabi_ddiv>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <output_CAM_PER+0x2e0>)
 80042fa:	f7fb ff35 	bl	8000168 <__aeabi_dsub>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <output_CAM_PER+0x2e4>)
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f7fc fa0e 	bl	800072c <__aeabi_ddiv>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4978      	ldr	r1, [pc, #480]	; (80044f8 <output_CAM_PER+0x2e8>)
 8004316:	680c      	ldr	r4, [r1, #0]
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f7fc fb9e 	bl	8000a5c <__aeabi_d2uiz>
 8004320:	4603      	mov	r3, r0
 8004322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004324:	4a71      	ldr	r2, [pc, #452]	; (80044ec <output_CAM_PER+0x2dc>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004338:	f7fc f9f8 	bl	800072c <__aeabi_ddiv>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	4b69      	ldr	r3, [pc, #420]	; (80044f0 <output_CAM_PER+0x2e0>)
 800434a:	f7fb ff0d 	bl	8000168 <__aeabi_dsub>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <output_CAM_PER+0x2e4>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f9e6 	bl	800072c <__aeabi_ddiv>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f7fc fb78 	bl	8000a5c <__aeabi_d2uiz>
 800436c:	4603      	mov	r3, r0
 800436e:	4a62      	ldr	r2, [pc, #392]	; (80044f8 <output_CAM_PER+0x2e8>)
 8004370:	60d3      	str	r3, [r2, #12]
}
 8004372:	e17a      	b.n	800466a <output_CAM_PER+0x45a>
    } else if (active_edges_CAM_PER == 'f' && CAM_signal[cam_id] == false) {
 8004374:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <output_CAM_PER+0x2d4>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b66      	cmp	r3, #102	; 0x66
 800437a:	f040 80c1 	bne.w	8004500 <output_CAM_PER+0x2f0>
 800437e:	4a5f      	ldr	r2, [pc, #380]	; (80044fc <output_CAM_PER+0x2ec>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80b7 	beq.w	8004500 <output_CAM_PER+0x2f0>
        if (cam_id == 0) {          // For CAM1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d152      	bne.n	800443e <output_CAM_PER+0x22e>
            HAL_TIM_Base_Stop(&htim3);  // Enable Timer3 (formerly Timer6 on microchip)
 8004398:	4853      	ldr	r0, [pc, #332]	; (80044e8 <output_CAM_PER+0x2d8>)
 800439a:	f7fe fedb 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 800439e:	4a53      	ldr	r2, [pc, #332]	; (80044ec <output_CAM_PER+0x2dc>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b2:	f7fc f9bb 	bl	800072c <__aeabi_ddiv>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <output_CAM_PER+0x2e0>)
 80043c4:	f7fb fed0 	bl	8000168 <__aeabi_dsub>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <output_CAM_PER+0x2e4>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f9a9 	bl	800072c <__aeabi_ddiv>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4942      	ldr	r1, [pc, #264]	; (80044e8 <output_CAM_PER+0x2d8>)
 80043e0:	680c      	ldr	r4, [r1, #0]
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	f7fc fb39 	bl	8000a5c <__aeabi_d2uiz>
 80043ea:	4603      	mov	r3, r0
 80043ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <output_CAM_PER+0x2dc>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004402:	f7fc f993 	bl	800072c <__aeabi_ddiv>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <output_CAM_PER+0x2e0>)
 8004414:	f7fb fea8 	bl	8000168 <__aeabi_dsub>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <output_CAM_PER+0x2e4>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f7fc f981 	bl	800072c <__aeabi_ddiv>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc fb13 	bl	8000a5c <__aeabi_d2uiz>
 8004436:	4603      	mov	r3, r0
 8004438:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <output_CAM_PER+0x2d8>)
 800443a:	60d3      	str	r3, [r2, #12]
        if (cam_id == 0) {          // For CAM1
 800443c:	e115      	b.n	800466a <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4);  // Enable Timer4 (formerly Timer7 on microchip)
 800443e:	482e      	ldr	r0, [pc, #184]	; (80044f8 <output_CAM_PER+0x2e8>)
 8004440:	f7fe fe88 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004444:	4a29      	ldr	r2, [pc, #164]	; (80044ec <output_CAM_PER+0x2dc>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004458:	f7fc f968 	bl	800072c <__aeabi_ddiv>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <output_CAM_PER+0x2e0>)
 800446a:	f7fb fe7d 	bl	8000168 <__aeabi_dsub>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <output_CAM_PER+0x2e4>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc f956 	bl	800072c <__aeabi_ddiv>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	491c      	ldr	r1, [pc, #112]	; (80044f8 <output_CAM_PER+0x2e8>)
 8004486:	680c      	ldr	r4, [r1, #0]
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	f7fc fae6 	bl	8000a5c <__aeabi_d2uiz>
 8004490:	4603      	mov	r3, r0
 8004492:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <output_CAM_PER+0x2dc>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044a8:	f7fc f940 	bl	800072c <__aeabi_ddiv>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <output_CAM_PER+0x2e0>)
 80044ba:	f7fb fe55 	bl	8000168 <__aeabi_dsub>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <output_CAM_PER+0x2e4>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f7fc f92e 	bl	800072c <__aeabi_ddiv>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	f7fc fac0 	bl	8000a5c <__aeabi_d2uiz>
 80044dc:	4603      	mov	r3, r0
 80044de:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <output_CAM_PER+0x2e8>)
 80044e0:	60d3      	str	r3, [r2, #12]
        if (cam_id == 0) {          // For CAM1
 80044e2:	e0c2      	b.n	800466a <output_CAM_PER+0x45a>
 80044e4:	20000694 	.word	0x20000694
 80044e8:	20000a20 	.word	0x20000a20
 80044ec:	200002b8 	.word	0x200002b8
 80044f0:	40140000 	.word	0x40140000
 80044f4:	20000010 	.word	0x20000010
 80044f8:	20000a68 	.word	0x20000a68
 80044fc:	20000658 	.word	0x20000658
    } else if (active_edges_CAM_PER == 'r' && CAM_signal[cam_id] == true) {
 8004500:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <output_CAM_PER+0x464>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b72      	cmp	r3, #114	; 0x72
 8004506:	f040 80b0 	bne.w	800466a <output_CAM_PER+0x45a>
 800450a:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <output_CAM_PER+0x468>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80a9 	beq.w	800466a <output_CAM_PER+0x45a>
        if (cam_id == 0) {          // For CAM1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d152      	bne.n	80045c4 <output_CAM_PER+0x3b4>
            HAL_TIM_Base_Stop(&htim3);   // Enable Timer3 (formerly Timer6 on microchip)
 800451e:	4857      	ldr	r0, [pc, #348]	; (800467c <output_CAM_PER+0x46c>)
 8004520:	f7fe fe18 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim3, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 8004524:	4a56      	ldr	r2, [pc, #344]	; (8004680 <output_CAM_PER+0x470>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004538:	f7fc f8f8 	bl	800072c <__aeabi_ddiv>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <output_CAM_PER+0x474>)
 800454a:	f7fb fe0d 	bl	8000168 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <output_CAM_PER+0x478>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fc f8e6 	bl	800072c <__aeabi_ddiv>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4945      	ldr	r1, [pc, #276]	; (800467c <output_CAM_PER+0x46c>)
 8004566:	680c      	ldr	r4, [r1, #0]
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f7fc fa76 	bl	8000a5c <__aeabi_d2uiz>
 8004570:	4603      	mov	r3, r0
 8004572:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004574:	4a42      	ldr	r2, [pc, #264]	; (8004680 <output_CAM_PER+0x470>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004588:	f7fc f8d0 	bl	800072c <__aeabi_ddiv>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <output_CAM_PER+0x474>)
 800459a:	f7fb fde5 	bl	8000168 <__aeabi_dsub>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <output_CAM_PER+0x478>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fc f8be 	bl	800072c <__aeabi_ddiv>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	f7fc fa50 	bl	8000a5c <__aeabi_d2uiz>
 80045bc:	4603      	mov	r3, r0
 80045be:	4a2f      	ldr	r2, [pc, #188]	; (800467c <output_CAM_PER+0x46c>)
 80045c0:	60d3      	str	r3, [r2, #12]
}
 80045c2:	e052      	b.n	800466a <output_CAM_PER+0x45a>
            HAL_TIM_Base_Stop(&htim4); // Enable Timer4 (formerly Timer7 on microchip)
 80045c4:	4831      	ldr	r0, [pc, #196]	; (800468c <output_CAM_PER+0x47c>)
 80045c6:	f7fe fdc5 	bl	8003154 <HAL_TIM_Base_Stop>
            __HAL_TIM_SET_AUTORELOAD(&htim4, (filter_time_CAM[cam_id] / 2.0 - 5) / microsecond_per_timer_tick_CAM_PER__CRK_TOOTH_PER);
 80045ca:	4a2d      	ldr	r2, [pc, #180]	; (8004680 <output_CAM_PER+0x470>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045de:	f7fc f8a5 	bl	800072c <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	4b25      	ldr	r3, [pc, #148]	; (8004684 <output_CAM_PER+0x474>)
 80045f0:	f7fb fdba 	bl	8000168 <__aeabi_dsub>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <output_CAM_PER+0x478>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fc f893 	bl	800072c <__aeabi_ddiv>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4920      	ldr	r1, [pc, #128]	; (800468c <output_CAM_PER+0x47c>)
 800460c:	680c      	ldr	r4, [r1, #0]
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	f7fc fa23 	bl	8000a5c <__aeabi_d2uiz>
 8004616:	4603      	mov	r3, r0
 8004618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800461a:	4a19      	ldr	r2, [pc, #100]	; (8004680 <output_CAM_PER+0x470>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800462e:	f7fc f87d 	bl	800072c <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <output_CAM_PER+0x474>)
 8004640:	f7fb fd92 	bl	8000168 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <output_CAM_PER+0x478>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fc f86b 	bl	800072c <__aeabi_ddiv>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f7fc f9fd 	bl	8000a5c <__aeabi_d2uiz>
 8004662:	4603      	mov	r3, r0
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <output_CAM_PER+0x47c>)
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	e7ff      	b.n	800466a <output_CAM_PER+0x45a>
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bd90      	pop	{r4, r7, pc}
 8004672:	bf00      	nop
 8004674:	20000694 	.word	0x20000694
 8004678:	20000658 	.word	0x20000658
 800467c:	20000a20 	.word	0x20000a20
 8004680:	200002b8 	.word	0x200002b8
 8004684:	40140000 	.word	0x40140000
 8004688:	20000010 	.word	0x20000010
 800468c:	20000a68 	.word	0x20000a68

08004690 <CAM_PER_reset>:

//## CAM_PER_reset
void CAM_PER_reset(void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if TIM3 is busy
 8004694:	4812      	ldr	r0, [pc, #72]	; (80046e0 <CAM_PER_reset+0x50>)
 8004696:	f7fe fff3 	bl	8003680 <HAL_TIM_Base_GetState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b02      	cmp	r3, #2
 800469e:	d106      	bne.n	80046ae <CAM_PER_reset+0x1e>
    {
        HAL_TIM_Base_Stop_IT(&htim3);
 80046a0:	480f      	ldr	r0, [pc, #60]	; (80046e0 <CAM_PER_reset+0x50>)
 80046a2:	f7fe fdcf 	bl	8003244 <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_SET_COUNTER(&htim3, 0);  // disable and reset the timer
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <CAM_PER_reset+0x50>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if timer4 is enabled
 80046ae:	480c      	ldr	r0, [pc, #48]	; (80046e0 <CAM_PER_reset+0x50>)
 80046b0:	f7fe ffe6 	bl	8003680 <HAL_TIM_Base_GetState>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d106      	bne.n	80046c8 <CAM_PER_reset+0x38>
    {
        HAL_TIM_Base_Stop_IT(&htim4);
 80046ba:	480a      	ldr	r0, [pc, #40]	; (80046e4 <CAM_PER_reset+0x54>)
 80046bc:	f7fe fdc2 	bl	8003244 <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_SET_COUNTER(&htim4, 0);  // disable and reset the timer
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <CAM_PER_reset+0x54>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

	MX_TIM3_Init();
 80046c8:	f7fd fb94 	bl	8001df4 <MX_TIM3_Init>
	MX_TIM4_Init();
 80046cc:	f7fd fbe0 	bl	8001e90 <MX_TIM4_Init>
    counter_CAM_PER[0] = 0;
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <CAM_PER_reset+0x58>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    counter_CAM_PER[1] = 0;
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <CAM_PER_reset+0x58>)
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000a20 	.word	0x20000a20
 80046e4:	20000a68 	.word	0x20000a68
 80046e8:	20000688 	.word	0x20000688

080046ec <output_CRK_TOOTH_PER>:

//## Output CRK: CRK_TOOTH_PER
void output_CRK_TOOTH_PER(void) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
    if (CRK_signal == false) {
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <output_CRK_TOOTH_PER+0x1c>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f083 0301 	eor.w	r3, r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <output_CRK_TOOTH_PER+0x18>
        HAL_TIM_Base_Start(&htim3); // Enable timer3 (formerly Timer6 on microchip)     
 80046fe:	4803      	ldr	r0, [pc, #12]	; (800470c <output_CRK_TOOTH_PER+0x20>)
 8004700:	f7fe fcde 	bl	80030c0 <HAL_TIM_Base_Start>
    }
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200002a3 	.word	0x200002a3
 800470c:	20000a20 	.word	0x20000a20

08004710 <CRK_TOOTH_PER_reset>:

//## CRK_TOOTH_PER_reset
void CRK_TOOTH_PER_reset(void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY)  // if timer3 is enabled
 8004714:	4810      	ldr	r0, [pc, #64]	; (8004758 <CRK_TOOTH_PER_reset+0x48>)
 8004716:	f7fe ffb3 	bl	8003680 <HAL_TIM_Base_GetState>
 800471a:	4603      	mov	r3, r0
 800471c:	2b02      	cmp	r3, #2
 800471e:	d106      	bne.n	800472e <CRK_TOOTH_PER_reset+0x1e>
    {
        HAL_TIM_Base_Stop(&htim3);
 8004720:	480d      	ldr	r0, [pc, #52]	; (8004758 <CRK_TOOTH_PER_reset+0x48>)
 8004722:	f7fe fd17 	bl	8003154 <HAL_TIM_Base_Stop>
        __HAL_TIM_SET_COUNTER(&htim3,0);// disable and reset the timer
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <CRK_TOOTH_PER_reset+0x48>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

    }

    if (HAL_TIM_Base_GetState(&htim4) == HAL_TIM_STATE_BUSY)  // if timer4 is enabled
 800472e:	480b      	ldr	r0, [pc, #44]	; (800475c <CRK_TOOTH_PER_reset+0x4c>)
 8004730:	f7fe ffa6 	bl	8003680 <HAL_TIM_Base_GetState>
 8004734:	4603      	mov	r3, r0
 8004736:	2b02      	cmp	r3, #2
 8004738:	d106      	bne.n	8004748 <CRK_TOOTH_PER_reset+0x38>
    {
        HAL_TIM_Base_Stop(&htim4);
 800473a:	4808      	ldr	r0, [pc, #32]	; (800475c <CRK_TOOTH_PER_reset+0x4c>)
 800473c:	f7fe fd0a 	bl	8003154 <HAL_TIM_Base_Stop>
        __HAL_TIM_SET_COUNTER(&htim4,0);  // disable and reset the timer
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <CRK_TOOTH_PER_reset+0x4c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	625a      	str	r2, [r3, #36]	; 0x24
    }

    failure_set = false;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <CRK_TOOTH_PER_reset+0x50>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
    failure_active = false;
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <CRK_TOOTH_PER_reset+0x54>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000a20 	.word	0x20000a20
 800475c:	20000a68 	.word	0x20000a68
 8004760:	2000066e 	.word	0x2000066e
 8004764:	2000066c 	.word	0x2000066c

08004768 <Output_CAM_delay>:

//## Output CAM_delay: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void Output_CAM_delay(int cam_id) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
    if (failure_identify == '9') {
 8004770:	4b79      	ldr	r3, [pc, #484]	; (8004958 <Output_CAM_delay+0x1f0>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b39      	cmp	r3, #57	; 0x39
 8004776:	f040 80e4 	bne.w	8004942 <Output_CAM_delay+0x1da>
        switch (active_CAM_edges[cam_id]) {
 800477a:	4a78      	ldr	r2, [pc, #480]	; (800495c <Output_CAM_delay+0x1f4>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b72      	cmp	r3, #114	; 0x72
 8004784:	d07a      	beq.n	800487c <Output_CAM_delay+0x114>
 8004786:	2b72      	cmp	r3, #114	; 0x72
 8004788:	f300 80d7 	bgt.w	800493a <Output_CAM_delay+0x1d2>
 800478c:	2b62      	cmp	r3, #98	; 0x62
 800478e:	d002      	beq.n	8004796 <Output_CAM_delay+0x2e>
 8004790:	2b66      	cmp	r3, #102	; 0x66
 8004792:	d011      	beq.n	80047b8 <Output_CAM_delay+0x50>
 8004794:	e0d1      	b.n	800493a <Output_CAM_delay+0x1d2>
            case ('b'): {
                if (engine_start == true) {
 8004796:	4b72      	ldr	r3, [pc, #456]	; (8004960 <Output_CAM_delay+0x1f8>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <Output_CAM_delay+0x48>
                    HAL_TIM_Base_Start(&htim1); // Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 800479e:	4871      	ldr	r0, [pc, #452]	; (8004964 <Output_CAM_delay+0x1fc>)
 80047a0:	f7fe fc8e 	bl	80030c0 <HAL_TIM_Base_Start>
                    timer_active_CAM_delay[cam_id] = true;
 80047a4:	4a70      	ldr	r2, [pc, #448]	; (8004968 <Output_CAM_delay+0x200>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
                } else {
                    output_CAM_no_failure(cam_id);
                }

                break;
 80047ae:	e0cf      	b.n	8004950 <Output_CAM_delay+0x1e8>
                    output_CAM_no_failure(cam_id);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fc21 	bl	8003ff8 <output_CAM_no_failure>
                break;
 80047b6:	e0cb      	b.n	8004950 <Output_CAM_delay+0x1e8>
            }
            case ('f'): {
                if (CAM_signal[cam_id] == false) {
 80047b8:	4a6c      	ldr	r2, [pc, #432]	; (800496c <Output_CAM_delay+0x204>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01b      	beq.n	8004802 <Output_CAM_delay+0x9a>
                    if (engine_start == true) {
 80047ca:	4b65      	ldr	r3, [pc, #404]	; (8004960 <Output_CAM_delay+0x1f8>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <Output_CAM_delay+0x92>
                        HAL_TIM_Base_Start(&htim1);// Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 80047d2:	4864      	ldr	r0, [pc, #400]	; (8004964 <Output_CAM_delay+0x1fc>)
 80047d4:	f7fe fc74 	bl	80030c0 <HAL_TIM_Base_Start>
                        timer_active_CAM_delay[cam_id] = true;
 80047d8:	4a63      	ldr	r2, [pc, #396]	; (8004968 <Output_CAM_delay+0x200>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]

                        if (failure_active == false) {
 80047e2:	4b63      	ldr	r3, [pc, #396]	; (8004970 <Output_CAM_delay+0x208>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	f083 0301 	eor.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80ac 	beq.w	800494a <Output_CAM_delay+0x1e2>
                            failure_active = true;
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <Output_CAM_delay+0x208>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
                        }
                    }
                }
                break;
 80047f8:	e0a7      	b.n	800494a <Output_CAM_delay+0x1e2>
                        output_CAM_no_failure(cam_id);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fbfc 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8004800:	e0a3      	b.n	800494a <Output_CAM_delay+0x1e2>
                } else if (CAM_signal[cam_id] == true && failure_active == false) {
 8004802:	4a5a      	ldr	r2, [pc, #360]	; (800496c <Output_CAM_delay+0x204>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 809d 	beq.w	800494a <Output_CAM_delay+0x1e2>
 8004810:	4b57      	ldr	r3, [pc, #348]	; (8004970 <Output_CAM_delay+0x208>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f083 0301 	eor.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8095 	beq.w	800494a <Output_CAM_delay+0x1e2>
                    if (cam_id == 0) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d114      	bne.n	8004850 <Output_CAM_delay+0xe8>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8004826:	210b      	movs	r1, #11
 8004828:	4852      	ldr	r0, [pc, #328]	; (8004974 <Output_CAM_delay+0x20c>)
 800482a:	f7fd ff97 	bl	800275c <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <Output_CAM_delay+0xda>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004834:	2201      	movs	r2, #1
 8004836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800483a:	484e      	ldr	r0, [pc, #312]	; (8004974 <Output_CAM_delay+0x20c>)
 800483c:	f7fd ffa5 	bl	800278a <HAL_GPIO_WritePin>
                break;
 8004840:	e083      	b.n	800494a <Output_CAM_delay+0x1e2>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004842:	2200      	movs	r2, #0
 8004844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004848:	484a      	ldr	r0, [pc, #296]	; (8004974 <Output_CAM_delay+0x20c>)
 800484a:	f7fd ff9e 	bl	800278a <HAL_GPIO_WritePin>
                break;
 800484e:	e07c      	b.n	800494a <Output_CAM_delay+0x1e2>
                    } else if (cam_id == 1) {
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d179      	bne.n	800494a <Output_CAM_delay+0x1e2>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8004856:	2106      	movs	r1, #6
 8004858:	4846      	ldr	r0, [pc, #280]	; (8004974 <Output_CAM_delay+0x20c>)
 800485a:	f7fd ff7f 	bl	800275c <HAL_GPIO_ReadPin>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <Output_CAM_delay+0x108>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004864:	2201      	movs	r2, #1
 8004866:	2140      	movs	r1, #64	; 0x40
 8004868:	4842      	ldr	r0, [pc, #264]	; (8004974 <Output_CAM_delay+0x20c>)
 800486a:	f7fd ff8e 	bl	800278a <HAL_GPIO_WritePin>
                break;
 800486e:	e06c      	b.n	800494a <Output_CAM_delay+0x1e2>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004870:	2200      	movs	r2, #0
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	483f      	ldr	r0, [pc, #252]	; (8004974 <Output_CAM_delay+0x20c>)
 8004876:	f7fd ff88 	bl	800278a <HAL_GPIO_WritePin>
                break;
 800487a:	e066      	b.n	800494a <Output_CAM_delay+0x1e2>
            }
            case ('r'): {
                if (CAM_signal[cam_id] == true) {
 800487c:	4a3b      	ldr	r2, [pc, #236]	; (800496c <Output_CAM_delay+0x204>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01a      	beq.n	80048be <Output_CAM_delay+0x156>
                    if (engine_start == true) {
 8004888:	4b35      	ldr	r3, [pc, #212]	; (8004960 <Output_CAM_delay+0x1f8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <Output_CAM_delay+0x14e>
                        HAL_TIM_Base_Start(&htim1);  // Enable tim1 (formerly Timer8 on microchip) till the first falling CRK_edge
 8004890:	4834      	ldr	r0, [pc, #208]	; (8004964 <Output_CAM_delay+0x1fc>)
 8004892:	f7fe fc15 	bl	80030c0 <HAL_TIM_Base_Start>
                        timer_active_CAM_delay[cam_id] = true;
 8004896:	4a34      	ldr	r2, [pc, #208]	; (8004968 <Output_CAM_delay+0x200>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]

                        if (failure_active == false) {
 80048a0:	4b33      	ldr	r3, [pc, #204]	; (8004970 <Output_CAM_delay+0x208>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04f      	beq.n	800494e <Output_CAM_delay+0x1e6>
                            failure_active = true;
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <Output_CAM_delay+0x208>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
                        }
                    }
                }
                break;
 80048b4:	e04b      	b.n	800494e <Output_CAM_delay+0x1e6>
                        output_CAM_no_failure(cam_id);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fb9e 	bl	8003ff8 <output_CAM_no_failure>
                break;
 80048bc:	e047      	b.n	800494e <Output_CAM_delay+0x1e6>
                } else if (CAM_signal[cam_id] == false && failure_active == false) {
 80048be:	4a2b      	ldr	r2, [pc, #172]	; (800496c <Output_CAM_delay+0x204>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4413      	add	r3, r2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03e      	beq.n	800494e <Output_CAM_delay+0x1e6>
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <Output_CAM_delay+0x208>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d037      	beq.n	800494e <Output_CAM_delay+0x1e6>
                    if (cam_id == 0) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d114      	bne.n	800490e <Output_CAM_delay+0x1a6>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 80048e4:	210b      	movs	r1, #11
 80048e6:	4823      	ldr	r0, [pc, #140]	; (8004974 <Output_CAM_delay+0x20c>)
 80048e8:	f7fd ff38 	bl	800275c <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <Output_CAM_delay+0x198>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80048f2:	2201      	movs	r2, #1
 80048f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048f8:	481e      	ldr	r0, [pc, #120]	; (8004974 <Output_CAM_delay+0x20c>)
 80048fa:	f7fd ff46 	bl	800278a <HAL_GPIO_WritePin>
                break;
 80048fe:	e026      	b.n	800494e <Output_CAM_delay+0x1e6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004906:	481b      	ldr	r0, [pc, #108]	; (8004974 <Output_CAM_delay+0x20c>)
 8004908:	f7fd ff3f 	bl	800278a <HAL_GPIO_WritePin>
                break;
 800490c:	e01f      	b.n	800494e <Output_CAM_delay+0x1e6>
                    } else if (cam_id == 1) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11c      	bne.n	800494e <Output_CAM_delay+0x1e6>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8004914:	2106      	movs	r1, #6
 8004916:	4817      	ldr	r0, [pc, #92]	; (8004974 <Output_CAM_delay+0x20c>)
 8004918:	f7fd ff20 	bl	800275c <HAL_GPIO_ReadPin>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <Output_CAM_delay+0x1c6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004922:	2201      	movs	r2, #1
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	4813      	ldr	r0, [pc, #76]	; (8004974 <Output_CAM_delay+0x20c>)
 8004928:	f7fd ff2f 	bl	800278a <HAL_GPIO_WritePin>
                break;
 800492c:	e00f      	b.n	800494e <Output_CAM_delay+0x1e6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800492e:	2200      	movs	r2, #0
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	4810      	ldr	r0, [pc, #64]	; (8004974 <Output_CAM_delay+0x20c>)
 8004934:	f7fd ff29 	bl	800278a <HAL_GPIO_WritePin>
                break;
 8004938:	e009      	b.n	800494e <Output_CAM_delay+0x1e6>
            }
            default: {
                output_CAM_no_failure(cam_id);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fb5c 	bl	8003ff8 <output_CAM_no_failure>
                break;
 8004940:	e006      	b.n	8004950 <Output_CAM_delay+0x1e8>
            }
        }
    } else {
        output_CAM_no_failure(cam_id);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fb58 	bl	8003ff8 <output_CAM_no_failure>
    }
}
 8004948:	e002      	b.n	8004950 <Output_CAM_delay+0x1e8>
                break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <Output_CAM_delay+0x1e8>
                break;
 800494e:	bf00      	nop
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	2000000c 	.word	0x2000000c
 800495c:	200005d8 	.word	0x200005d8
 8004960:	200002a5 	.word	0x200002a5
 8004964:	20000990 	.word	0x20000990
 8004968:	20000738 	.word	0x20000738
 800496c:	20000658 	.word	0x20000658
 8004970:	2000066c 	.word	0x2000066c
 8004974:	40010800 	.word	0x40010800

08004978 <CAM_delay>:

//## CAM_delay: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void CAM_delay(int cam_id) {
 8004978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800497c:	b08a      	sub	sp, #40	; 0x28
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
    if (TIM_Soft_Counting) {
 8004982:	4b90      	ldr	r3, [pc, #576]	; (8004bc4 <CAM_delay+0x24c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d066      	beq.n	8004a58 <CAM_delay+0xe0>
        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 800498a:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <CAM_delay+0x250>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <CAM_delay+0x254>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a8e      	ldr	r2, [pc, #568]	; (8004bd0 <CAM_delay+0x258>)
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	4619      	mov	r1, r3
 800499a:	f001 f93c 	bl	8005c16 <former_teeth_time_calculation>
 800499e:	e9c7 0106 	strd	r0, r1, [r7, #24]
                                                          teeth_count_CRK, number_miss_teeth);
        if (((double)TIM_Soft_GetCounter() / former_teeth_time) * revolution_CRK >= (revolution_CRK / 2.0)) {
 80049a2:	f002 ffab 	bl	80078fc <TIM_Soft_GetCounter>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fb fd2b 	bl	8000404 <__aeabi_i2d>
 80049ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b2:	f7fb febb 	bl	800072c <__aeabi_ddiv>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <CAM_delay+0x25c>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fd88 	bl	80004d8 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	461d      	mov	r5, r3
 80049d0:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <CAM_delay+0x25c>)
 80049d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049de:	f7fb fea5 	bl	800072c <__aeabi_ddiv>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fb fffb 	bl	80009e4 <__aeabi_dcmpge>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d031      	beq.n	8004a58 <CAM_delay+0xe0>
            if (cam_id == 0) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d115      	bne.n	8004a26 <CAM_delay+0xae>
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 80049fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049fe:	4876      	ldr	r0, [pc, #472]	; (8004bd8 <CAM_delay+0x260>)
 8004a00:	f7fd feac 	bl	800275c <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d106      	bne.n	8004a18 <CAM_delay+0xa0>
                {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a10:	4871      	ldr	r0, [pc, #452]	; (8004bd8 <CAM_delay+0x260>)
 8004a12:	f7fd feba 	bl	800278a <HAL_GPIO_WritePin>
 8004a16:	e01b      	b.n	8004a50 <CAM_delay+0xd8>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a1e:	486e      	ldr	r0, [pc, #440]	; (8004bd8 <CAM_delay+0x260>)
 8004a20:	f7fd feb3 	bl	800278a <HAL_GPIO_WritePin>
 8004a24:	e014      	b.n	8004a50 <CAM_delay+0xd8>
                }
            } else if (cam_id == 1) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d111      	bne.n	8004a50 <CAM_delay+0xd8>
                if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_SET) {
 8004a2c:	2106      	movs	r1, #6
 8004a2e:	486a      	ldr	r0, [pc, #424]	; (8004bd8 <CAM_delay+0x260>)
 8004a30:	f7fd fe94 	bl	800275c <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d105      	bne.n	8004a46 <CAM_delay+0xce>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	4866      	ldr	r0, [pc, #408]	; (8004bd8 <CAM_delay+0x260>)
 8004a40:	f7fd fea3 	bl	800278a <HAL_GPIO_WritePin>
 8004a44:	e004      	b.n	8004a50 <CAM_delay+0xd8>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004a46:	2201      	movs	r2, #1
 8004a48:	2140      	movs	r1, #64	; 0x40
 8004a4a:	4863      	ldr	r0, [pc, #396]	; (8004bd8 <CAM_delay+0x260>)
 8004a4c:	f7fd fe9d 	bl	800278a <HAL_GPIO_WritePin>
                }
            }
            TIM_Soft_Stop();
 8004a50:	f002 fefc 	bl	800784c <TIM_Soft_Stop>
            TIM_Soft_Reset();
 8004a54:	f002 ff38 	bl	80078c8 <TIM_Soft_Reset>
        }
    }

    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8004a58:	4a60      	ldr	r2, [pc, #384]	; (8004bdc <CAM_delay+0x264>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8095 	beq.w	8004b90 <CAM_delay+0x218>
 8004a66:	4a5e      	ldr	r2, [pc, #376]	; (8004be0 <CAM_delay+0x268>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 808e 	bne.w	8004b90 <CAM_delay+0x218>
        interrupt_check_CAM_delay[cam_id] = false;
 8004a74:	4a5b      	ldr	r2, [pc, #364]	; (8004be4 <CAM_delay+0x26c>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]

        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 8004a7e:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <CAM_delay+0x250>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <CAM_delay+0x254>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a51      	ldr	r2, [pc, #324]	; (8004bd0 <CAM_delay+0x258>)
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f001 f8c2 	bl	8005c16 <former_teeth_time_calculation>
 8004a92:	e9c7 0104 	strd	r0, r1, [r7, #16]
                                                          teeth_count_CRK, number_miss_teeth);

        if (((double)__HAL_TIM_GetCounter(&htim1) / former_teeth_time) * revolution_CRK >= (delay_angle_CAM_delay * delay_factor_CAM_delay)) {
 8004a96:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <CAM_delay+0x270>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fca1 	bl	80003e4 <__aeabi_ui2d>
 8004aa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004aa6:	f7fb fe41 	bl	800072c <__aeabi_ddiv>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <CAM_delay+0x25c>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd0e 	bl	80004d8 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4b49      	ldr	r3, [pc, #292]	; (8004bec <CAM_delay+0x274>)
 8004ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <CAM_delay+0x278>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fd02 	bl	80004d8 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4620      	mov	r0, r4
 8004ada:	4629      	mov	r1, r5
 8004adc:	f7fb ff82 	bl	80009e4 <__aeabi_dcmpge>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d100      	bne.n	8004ae8 <CAM_delay+0x170>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8004ae6:	e162      	b.n	8004dae <CAM_delay+0x436>
            HAL_TIM_Base_Start(&htim1);
 8004ae8:	483f      	ldr	r0, [pc, #252]	; (8004be8 <CAM_delay+0x270>)
 8004aea:	f7fe fae9 	bl	80030c0 <HAL_TIM_Base_Start>
            __HAL_TIM_SET_COUNTER(&htim1, 0); 
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <CAM_delay+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
            timer_active_CAM_delay[cam_id] = false;
 8004af6:	4a39      	ldr	r2, [pc, #228]	; (8004bdc <CAM_delay+0x264>)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]

            if (interrupt_check_CAM_delay[cam_id] == false) {
 8004b00:	4a38      	ldr	r2, [pc, #224]	; (8004be4 <CAM_delay+0x26c>)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f083 0301 	eor.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 814d 	beq.w	8004dae <CAM_delay+0x436>
                if (cam_id == 0) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d114      	bne.n	8004b44 <CAM_delay+0x1cc>
                    if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8004b1a:	210b      	movs	r1, #11
 8004b1c:	482e      	ldr	r0, [pc, #184]	; (8004bd8 <CAM_delay+0x260>)
 8004b1e:	f7fd fe1d 	bl	800275c <HAL_GPIO_ReadPin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <CAM_delay+0x1be>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b2e:	482a      	ldr	r0, [pc, #168]	; (8004bd8 <CAM_delay+0x260>)
 8004b30:	f7fd fe2b 	bl	800278a <HAL_GPIO_WritePin>
 8004b34:	e01b      	b.n	8004b6e <CAM_delay+0x1f6>
                    } else {
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004b36:	2201      	movs	r2, #1
 8004b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b3c:	4826      	ldr	r0, [pc, #152]	; (8004bd8 <CAM_delay+0x260>)
 8004b3e:	f7fd fe24 	bl	800278a <HAL_GPIO_WritePin>
 8004b42:	e014      	b.n	8004b6e <CAM_delay+0x1f6>
                    };
                } else if (cam_id == 1) {
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d111      	bne.n	8004b6e <CAM_delay+0x1f6>
                    if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8004b4a:	2106      	movs	r1, #6
 8004b4c:	4822      	ldr	r0, [pc, #136]	; (8004bd8 <CAM_delay+0x260>)
 8004b4e:	f7fd fe05 	bl	800275c <HAL_GPIO_ReadPin>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <CAM_delay+0x1ec>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2140      	movs	r1, #64	; 0x40
 8004b5c:	481e      	ldr	r0, [pc, #120]	; (8004bd8 <CAM_delay+0x260>)
 8004b5e:	f7fd fe14 	bl	800278a <HAL_GPIO_WritePin>
 8004b62:	e004      	b.n	8004b6e <CAM_delay+0x1f6>
                    } else {
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004b64:	2201      	movs	r2, #1
 8004b66:	2140      	movs	r1, #64	; 0x40
 8004b68:	481b      	ldr	r0, [pc, #108]	; (8004bd8 <CAM_delay+0x260>)
 8004b6a:	f7fd fe0e 	bl	800278a <HAL_GPIO_WritePin>
                    };
                }

                if (active_CAM_edges[cam_id] == 'r' || active_CAM_edges[cam_id] == 'f') {
 8004b6e:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <CAM_delay+0x27c>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b72      	cmp	r3, #114	; 0x72
 8004b78:	d006      	beq.n	8004b88 <CAM_delay+0x210>
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <CAM_delay+0x27c>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b66      	cmp	r3, #102	; 0x66
 8004b84:	f040 8113 	bne.w	8004dae <CAM_delay+0x436>
                    HAL_TIM_Base_Start(&htim1);
 8004b88:	4817      	ldr	r0, [pc, #92]	; (8004be8 <CAM_delay+0x270>)
 8004b8a:	f7fe fa99 	bl	80030c0 <HAL_TIM_Base_Start>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8004b8e:	e10e      	b.n	8004dae <CAM_delay+0x436>
                }
            }
        }
    } else if (number_processing_edges_CAM_delay[cam_id] > 0) {
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <CAM_delay+0x268>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 810d 	beq.w	8004db8 <CAM_delay+0x440>
        int i = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
        int count = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]

        double former_teeth_time;
        former_teeth_time = former_teeth_time_calculation(T_TOOTH_RAW,
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <CAM_delay+0x250>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <CAM_delay+0x254>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <CAM_delay+0x258>)
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f001 f82e 	bl	8005c16 <former_teeth_time_calculation>
 8004bba:	e9c7 0102 	strd	r0, r1, [r7, #8]
                                                          teeth_count_CRK, number_miss_teeth);

        for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	e0ed      	b.n	8004da0 <CAM_delay+0x428>
 8004bc4:	20000b14 	.word	0x20000b14
 8004bc8:	20000264 	.word	0x20000264
 8004bcc:	20000270 	.word	0x20000270
 8004bd0:	20000230 	.word	0x20000230
 8004bd4:	20000298 	.word	0x20000298
 8004bd8:	40010800 	.word	0x40010800
 8004bdc:	20000738 	.word	0x20000738
 8004be0:	20000698 	.word	0x20000698
 8004be4:	2000073c 	.word	0x2000073c
 8004be8:	20000990 	.word	0x20000990
 8004bec:	20000730 	.word	0x20000730
 8004bf0:	20000018 	.word	0x20000018
 8004bf4:	200005d8 	.word	0x200005d8
            if (count == number_processing_edges_CAM_delay[cam_id]) {
 8004bf8:	4a72      	ldr	r2, [pc, #456]	; (8004dc4 <CAM_delay+0x44c>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f000 80d5 	beq.w	8004db2 <CAM_delay+0x43a>
                break;
            }

            if (shift_counter_CAM_delay[cam_id][i] != 0) {
 8004c08:	496f      	ldr	r1, [pc, #444]	; (8004dc8 <CAM_delay+0x450>)
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	4413      	add	r3, r2
 8004c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80bc 	beq.w	8004d9a <CAM_delay+0x422>
                if (angle_to_edge_CAM_delay[cam_id][i] + ((double)(shift_counter_CAM_delay[cam_id][i] - 1) + ((double)(TIM_Soft_GetCounter() + timer_overflow_CRK * (unsigned long)(TIM2->ARR))) / former_teeth_time) * revolution_CRK >= (delay_angle_CAM_delay * delay_factor_CAM_delay))  // Aurait été plus propre avec un getAutoreload
 8004c22:	496a      	ldr	r1, [pc, #424]	; (8004dcc <CAM_delay+0x454>)
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	4413      	add	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c3a:	4963      	ldr	r1, [pc, #396]	; (8004dc8 <CAM_delay+0x450>)
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	4413      	add	r3, r2
 8004c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fb fbc7 	bl	80003e4 <__aeabi_ui2d>
 8004c56:	4680      	mov	r8, r0
 8004c58:	4689      	mov	r9, r1
 8004c5a:	f002 fe4f 	bl	80078fc <TIM_Soft_GetCounter>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a59      	ldr	r2, [pc, #356]	; (8004dd0 <CAM_delay+0x458>)
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	440b      	add	r3, r1
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fb fbb6 	bl	80003e4 <__aeabi_ui2d>
 8004c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7c:	f7fb fd56 	bl	800072c <__aeabi_ddiv>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb fa70 	bl	800016c <__adddf3>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	4b4f      	ldr	r3, [pc, #316]	; (8004dd4 <CAM_delay+0x45c>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fc1d 	bl	80004d8 <__aeabi_dmul>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb fa61 	bl	800016c <__adddf3>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4614      	mov	r4, r2
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <CAM_delay+0x460>)
 8004cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cb8:	4b48      	ldr	r3, [pc, #288]	; (8004ddc <CAM_delay+0x464>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc0b 	bl	80004d8 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fe8b 	bl	80009e4 <__aeabi_dcmpge>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05f      	beq.n	8004d94 <CAM_delay+0x41c>
                {
                    shift_counter_CAM_delay[cam_id][i] = 0;
 8004cd4:	493c      	ldr	r1, [pc, #240]	; (8004dc8 <CAM_delay+0x450>)
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4413      	add	r3, r2
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	4413      	add	r3, r2
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    angle_to_edge_CAM_delay[cam_id][i] = 0;
 8004cea:	4938      	ldr	r1, [pc, #224]	; (8004dcc <CAM_delay+0x454>)
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4419      	add	r1, r3
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9c1 2300 	strd	r2, r3, [r1]
                    number_processing_edges_CAM_delay[cam_id]--;
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	; (8004dc4 <CAM_delay+0x44c>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	492b      	ldr	r1, [pc, #172]	; (8004dc4 <CAM_delay+0x44c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (cam_id == 0) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d114      	bne.n	8004d4c <CAM_delay+0x3d4>
                        if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_RESET) {
 8004d22:	210b      	movs	r1, #11
 8004d24:	482e      	ldr	r0, [pc, #184]	; (8004de0 <CAM_delay+0x468>)
 8004d26:	f7fd fd19 	bl	800275c <HAL_GPIO_ReadPin>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <CAM_delay+0x3c6>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d36:	482a      	ldr	r0, [pc, #168]	; (8004de0 <CAM_delay+0x468>)
 8004d38:	f7fd fd27 	bl	800278a <HAL_GPIO_WritePin>
 8004d3c:	e01b      	b.n	8004d76 <CAM_delay+0x3fe>
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d44:	4826      	ldr	r0, [pc, #152]	; (8004de0 <CAM_delay+0x468>)
 8004d46:	f7fd fd20 	bl	800278a <HAL_GPIO_WritePin>
 8004d4a:	e014      	b.n	8004d76 <CAM_delay+0x3fe>
                        };
                    } else if (cam_id == 1) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d111      	bne.n	8004d76 <CAM_delay+0x3fe>
                        if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_RESET) {
 8004d52:	2106      	movs	r1, #6
 8004d54:	4822      	ldr	r0, [pc, #136]	; (8004de0 <CAM_delay+0x468>)
 8004d56:	f7fd fd01 	bl	800275c <HAL_GPIO_ReadPin>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <CAM_delay+0x3f4>
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	481e      	ldr	r0, [pc, #120]	; (8004de0 <CAM_delay+0x468>)
 8004d66:	f7fd fd10 	bl	800278a <HAL_GPIO_WritePin>
 8004d6a:	e004      	b.n	8004d76 <CAM_delay+0x3fe>
                        } else {
                            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2140      	movs	r1, #64	; 0x40
 8004d70:	481b      	ldr	r0, [pc, #108]	; (8004de0 <CAM_delay+0x468>)
 8004d72:	f7fd fd0a 	bl	800278a <HAL_GPIO_WritePin>
                        };
                    }

                    if (active_CAM_edges[cam_id] == 'r' || active_CAM_edges[cam_id] == 'f') {
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <CAM_delay+0x46c>)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b72      	cmp	r3, #114	; 0x72
 8004d80:	d005      	beq.n	8004d8e <CAM_delay+0x416>
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <CAM_delay+0x46c>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b66      	cmp	r3, #102	; 0x66
 8004d8c:	d113      	bne.n	8004db6 <CAM_delay+0x43e>
                        TIM_Soft_Start();
 8004d8e:	f002 fd47 	bl	8007820 <TIM_Soft_Start>
                    }

                    break;
 8004d92:	e010      	b.n	8004db6 <CAM_delay+0x43e>
                }

                count++;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	3301      	adds	r3, #1
 8004d98:	623b      	str	r3, [r7, #32]
        for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <CAM_delay+0x470>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da6:	429a      	cmp	r2, r3
 8004da8:	f6ff af26 	blt.w	8004bf8 <CAM_delay+0x280>
            }
        }
    }
}
 8004dac:	e004      	b.n	8004db8 <CAM_delay+0x440>
    if (timer_active_CAM_delay[cam_id] == true && number_processing_edges_CAM_delay[cam_id] == 0) {
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <CAM_delay+0x440>
                break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <CAM_delay+0x440>
                    break;
 8004db6:	bf00      	nop
}
 8004db8:	bf00      	nop
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000698 	.word	0x20000698
 8004dc8:	200006a0 	.word	0x200006a0
 8004dcc:	200006d0 	.word	0x200006d0
 8004dd0:	2000026c 	.word	0x2000026c
 8004dd4:	20000298 	.word	0x20000298
 8004dd8:	20000730 	.word	0x20000730
 8004ddc:	20000018 	.word	0x20000018
 8004de0:	40010800 	.word	0x40010800
 8004de4:	200005d8 	.word	0x200005d8
 8004de8:	0800b770 	.word	0x0800b770

08004dec <CAM_delay_counter>:

//## CAM_delay_counter: CAM_TOOTH_OFF / CAM_REF_CRK / CAM_SYN / CAM_SYN_CRK
void CAM_delay_counter(int cam_id) {
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b089      	sub	sp, #36	; 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    if ((failure_identify == '9') && CRK_signal == false) {
 8004df4:	4ba4      	ldr	r3, [pc, #656]	; (8005088 <CAM_delay_counter+0x29c>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b39      	cmp	r3, #57	; 0x39
 8004dfa:	f040 8140 	bne.w	800507e <CAM_delay_counter+0x292>
 8004dfe:	4ba3      	ldr	r3, [pc, #652]	; (800508c <CAM_delay_counter+0x2a0>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f083 0301 	eor.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8138 	beq.w	800507e <CAM_delay_counter+0x292>
        interrupt_check_CAM_delay[cam_id] = true;
 8004e0e:	4aa0      	ldr	r2, [pc, #640]	; (8005090 <CAM_delay_counter+0x2a4>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]

        if (timer_active_CAM_delay[cam_id] == true) {
 8004e18:	4a9e      	ldr	r2, [pc, #632]	; (8005094 <CAM_delay_counter+0x2a8>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80cb 	beq.w	8004fbc <CAM_delay_counter+0x1d0>
            int i = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
            int count = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]

            if (number_processing_edges_CAM_delay[cam_id] != 0) {
 8004e2e:	4a9a      	ldr	r2, [pc, #616]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d056      	beq.n	8004ee8 <CAM_delay_counter+0xfc>
                for (i = 0; i < edges_beetween_shift_CAM_delay; i++)  // edges_beetween_shift_CAM_delay = 6
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e04c      	b.n	8004eda <CAM_delay_counter+0xee>
                {
                    if (count == number_processing_edges_CAM_delay[cam_id]) {
 8004e40:	4a95      	ldr	r2, [pc, #596]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d04b      	beq.n	8004ee6 <CAM_delay_counter+0xfa>
                        break;
                    }

                    if (shift_counter_CAM_delay[cam_id][i] != 0) {
 8004e4e:	4993      	ldr	r1, [pc, #588]	; (800509c <CAM_delay_counter+0x2b0>)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d036      	beq.n	8004ed4 <CAM_delay_counter+0xe8>
                        if (teeth_count_CRK == number_teeth_between_gaps) {
 8004e66:	4b8e      	ldr	r3, [pc, #568]	; (80050a0 <CAM_delay_counter+0x2b4>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8e      	ldr	r3, [pc, #568]	; (80050a4 <CAM_delay_counter+0x2b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d118      	bne.n	8004ea4 <CAM_delay_counter+0xb8>
                            shift_counter_CAM_delay[cam_id][i] =
                                shift_counter_CAM_delay[cam_id][i] + number_miss_teeth + 1;
 8004e72:	498a      	ldr	r1, [pc, #552]	; (800509c <CAM_delay_counter+0x2b0>)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e86:	4a88      	ldr	r2, [pc, #544]	; (80050a8 <CAM_delay_counter+0x2bc>)
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	1c59      	adds	r1, r3, #1
                            shift_counter_CAM_delay[cam_id][i] =
 8004e8e:	4883      	ldr	r0, [pc, #524]	; (800509c <CAM_delay_counter+0x2b0>)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8004ea2:	e014      	b.n	8004ece <CAM_delay_counter+0xe2>
                        } else {
                            shift_counter_CAM_delay[cam_id][i]++;
 8004ea4:	497d      	ldr	r1, [pc, #500]	; (800509c <CAM_delay_counter+0x2b0>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eb8:	1c59      	adds	r1, r3, #1
 8004eba:	4878      	ldr	r0, [pc, #480]	; (800509c <CAM_delay_counter+0x2b0>)
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        }

                        count++;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61bb      	str	r3, [r7, #24]
                for (i = 0; i < edges_beetween_shift_CAM_delay; i++)  // edges_beetween_shift_CAM_delay = 6
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	4b74      	ldr	r3, [pc, #464]	; (80050ac <CAM_delay_counter+0x2c0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	dbad      	blt.n	8004e40 <CAM_delay_counter+0x54>
 8004ee4:	e000      	b.n	8004ee8 <CAM_delay_counter+0xfc>
                        break;
 8004ee6:	bf00      	nop
                    }
                }
            }

            i = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]

            double former_teeth_time;
            former_teeth_time = former_teeth_time_calculation_output(
 8004eec:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <CAM_delay_counter+0x2c4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	4b6b      	ldr	r3, [pc, #428]	; (80050a0 <CAM_delay_counter+0x2b4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6c      	ldr	r2, [pc, #432]	; (80050a8 <CAM_delay_counter+0x2bc>)
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	f000 feb2 	bl	8005c64 <former_teeth_time_calculation_output>
 8004f00:	e9c7 0102 	strd	r0, r1, [r7, #8]
                T_TOOTH_RAW, teeth_count_CRK, number_miss_teeth);

            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e052      	b.n	8004fb0 <CAM_delay_counter+0x1c4>
                if (shift_counter_CAM_delay[cam_id][i] == 0) {
 8004f0a:	4964      	ldr	r1, [pc, #400]	; (800509c <CAM_delay_counter+0x2b0>)
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d143      	bne.n	8004faa <CAM_delay_counter+0x1be>
                    shift_counter_CAM_delay[cam_id][i] = 1;
 8004f22:	495e      	ldr	r1, [pc, #376]	; (800509c <CAM_delay_counter+0x2b0>)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	2201      	movs	r2, #1
 8004f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    angle_to_edge_CAM_delay[cam_id][i] =
                        ((double)(__HAL_TIM_GET_COUNTER(&htim1)) / former_teeth_time) * revolution_CRK;
 8004f38:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <CAM_delay_counter+0x2c8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb fa50 	bl	80003e4 <__aeabi_ui2d>
 8004f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f48:	f7fb fbf0 	bl	800072c <__aeabi_ddiv>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <CAM_delay_counter+0x2cc>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb fabd 	bl	80004d8 <__aeabi_dmul>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
                    angle_to_edge_CAM_delay[cam_id][i] =
 8004f66:	4c55      	ldr	r4, [pc, #340]	; (80050bc <CAM_delay_counter+0x2d0>)
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4423      	add	r3, r4
 8004f7a:	e9c3 0100 	strd	r0, r1, [r3]
                    HAL_TIM_Base_Stop(&htim1);
 8004f7e:	484d      	ldr	r0, [pc, #308]	; (80050b4 <CAM_delay_counter+0x2c8>)
 8004f80:	f7fe f8e8 	bl	8003154 <HAL_TIM_Base_Stop>
                    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8004f84:	4b4b      	ldr	r3, [pc, #300]	; (80050b4 <CAM_delay_counter+0x2c8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
                    timer_active_CAM_delay[cam_id] = false;
 8004f8c:	4a41      	ldr	r2, [pc, #260]	; (8005094 <CAM_delay_counter+0x2a8>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
                    number_processing_edges_CAM_delay[cam_id]++;
 8004f96:	4a40      	ldr	r2, [pc, #256]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	493d      	ldr	r1, [pc, #244]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    break;
 8004fa8:	e069      	b.n	800507e <CAM_delay_counter+0x292>
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <CAM_delay_counter+0x2c0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	dba7      	blt.n	8004f0a <CAM_delay_counter+0x11e>
                    count++;
                }
            }
        }
    }
}
 8004fba:	e060      	b.n	800507e <CAM_delay_counter+0x292>
        } else if (number_processing_edges_CAM_delay[cam_id] != 0) {
 8004fbc:	4a36      	ldr	r2, [pc, #216]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05a      	beq.n	800507e <CAM_delay_counter+0x292>
            int count = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
            int i = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e04c      	b.n	8005070 <CAM_delay_counter+0x284>
                if (count == number_processing_edges_CAM_delay[cam_id]) {
 8004fd6:	4a30      	ldr	r2, [pc, #192]	; (8005098 <CAM_delay_counter+0x2ac>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d04b      	beq.n	800507c <CAM_delay_counter+0x290>
                if (shift_counter_CAM_delay[cam_id][i] != 0) {
 8004fe4:	492d      	ldr	r1, [pc, #180]	; (800509c <CAM_delay_counter+0x2b0>)
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d036      	beq.n	800506a <CAM_delay_counter+0x27e>
                    if (teeth_count_CRK == number_teeth_between_gaps) {
 8004ffc:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <CAM_delay_counter+0x2b4>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <CAM_delay_counter+0x2b8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d118      	bne.n	800503a <CAM_delay_counter+0x24e>
                            shift_counter_CAM_delay[cam_id][i] + number_miss_teeth + 1;
 8005008:	4924      	ldr	r1, [pc, #144]	; (800509c <CAM_delay_counter+0x2b0>)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <CAM_delay_counter+0x2bc>)
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	4413      	add	r3, r2
 8005022:	1c59      	adds	r1, r3, #1
                        shift_counter_CAM_delay[cam_id][i] =
 8005024:	481d      	ldr	r0, [pc, #116]	; (800509c <CAM_delay_counter+0x2b0>)
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4413      	add	r3, r2
 8005034:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005038:	e014      	b.n	8005064 <CAM_delay_counter+0x278>
                        shift_counter_CAM_delay[cam_id][i]++;
 800503a:	4918      	ldr	r1, [pc, #96]	; (800509c <CAM_delay_counter+0x2b0>)
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	4812      	ldr	r0, [pc, #72]	; (800509c <CAM_delay_counter+0x2b0>)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    count++;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
            for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3301      	adds	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <CAM_delay_counter+0x2c0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	dbad      	blt.n	8004fd6 <CAM_delay_counter+0x1ea>
}
 800507a:	e000      	b.n	800507e <CAM_delay_counter+0x292>
                    break;
 800507c:	bf00      	nop
}
 800507e:	bf00      	nop
 8005080:	3724      	adds	r7, #36	; 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c
 800508c:	200002a3 	.word	0x200002a3
 8005090:	2000073c 	.word	0x2000073c
 8005094:	20000738 	.word	0x20000738
 8005098:	20000698 	.word	0x20000698
 800509c:	200006a0 	.word	0x200006a0
 80050a0:	20000270 	.word	0x20000270
 80050a4:	20000280 	.word	0x20000280
 80050a8:	20000230 	.word	0x20000230
 80050ac:	0800b770 	.word	0x0800b770
 80050b0:	20000264 	.word	0x20000264
 80050b4:	20000990 	.word	0x20000990
 80050b8:	20000298 	.word	0x20000298
 80050bc:	200006d0 	.word	0x200006d0

080050c0 <CAM_delay_reset>:

//## CAM_delay reset
void CAM_delay_reset(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
    failure_active = false;
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <CAM_delay_reset+0xc0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    failure_set = false;
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <CAM_delay_reset+0xc4>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop(&htim1);  // disable tim1
 80050d2:	482d      	ldr	r0, [pc, #180]	; (8005188 <CAM_delay_reset+0xc8>)
 80050d4:	f7fe f83e 	bl	8003154 <HAL_TIM_Base_Stop>
    __HAL_TIM_SET_COUNTER(&htim1, 0);          // clear tim1 counter
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <CAM_delay_reset+0xc8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	625a      	str	r2, [r3, #36]	; 0x24
    TIM_Soft_Stop();
 80050e0:	f002 fbb4 	bl	800784c <TIM_Soft_Stop>
    TIM_Soft_Reset();
 80050e4:	f002 fbf0 	bl	80078c8 <TIM_Soft_Reset>

    number_processing_edges_CAM_delay[0] = 0;
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <CAM_delay_reset+0xcc>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
    number_processing_edges_CAM_delay[1] = 0;
 80050ee:	4b27      	ldr	r3, [pc, #156]	; (800518c <CAM_delay_reset+0xcc>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]
    timer_active_CAM_delay[0] = false;
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <CAM_delay_reset+0xd0>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
    timer_active_CAM_delay[1] = false;
 80050fa:	4b25      	ldr	r3, [pc, #148]	; (8005190 <CAM_delay_reset+0xd0>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	705a      	strb	r2, [r3, #1]
    delay_counter_CAM_REF_CRK = 0;
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <CAM_delay_reset+0xd4>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

    int i;

    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e00d      	b.n	8005128 <CAM_delay_reset+0x68>
        shift_counter_CAM_delay[0][i] = 0;
 800510c:	4a22      	ldr	r2, [pc, #136]	; (8005198 <CAM_delay_reset+0xd8>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2100      	movs	r1, #0
 8005112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        shift_counter_CAM_delay[1][i] = 0;
 8005116:	4a20      	ldr	r2, [pc, #128]	; (8005198 <CAM_delay_reset+0xd8>)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3306      	adds	r3, #6
 800511c:	2100      	movs	r1, #0
 800511e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3301      	adds	r3, #1
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <CAM_delay_reset+0xdc>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	dbec      	blt.n	800510c <CAM_delay_reset+0x4c>
    }

    i = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]

    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e017      	b.n	800516c <CAM_delay_reset+0xac>
        angle_to_edge_CAM_delay[0][i] = 0;
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <CAM_delay_reset+0xe0>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	18d1      	adds	r1, r2, r3
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9c1 2300 	strd	r2, r3, [r1]
        angle_to_edge_CAM_delay[1][i] = 0;
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <CAM_delay_reset+0xe0>)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3306      	adds	r3, #6
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	18d1      	adds	r1, r2, r3
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < edges_beetween_shift_CAM_delay; i++) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3301      	adds	r3, #1
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <CAM_delay_reset+0xdc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	dbe2      	blt.n	800513c <CAM_delay_reset+0x7c>
    }
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	2000066c 	.word	0x2000066c
 8005184:	2000066e 	.word	0x2000066e
 8005188:	20000990 	.word	0x20000990
 800518c:	20000698 	.word	0x20000698
 8005190:	20000738 	.word	0x20000738
 8005194:	20000740 	.word	0x20000740
 8005198:	200006a0 	.word	0x200006a0
 800519c:	0800b770 	.word	0x0800b770
 80051a0:	200006d0 	.word	0x200006d0

080051a4 <output_CRK_TOOTH_OFF>:

//##Output_CRK_TOOTH_OFF
void output_CRK_TOOTH_OFF(void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
    number_teeth_between_tooth_off = number_teeth_between_gaps / number_tooth_off;
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <output_CRK_TOOTH_OFF+0x134>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <output_CRK_TOOTH_OFF+0x138>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	4a4a      	ldr	r2, [pc, #296]	; (80052e0 <output_CRK_TOOTH_OFF+0x13c>)
 80051b6:	6013      	str	r3, [r2, #0]

    // only count a tooth when CRK rising edge
    if (CRK_signal == true) {
 80051b8:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <output_CRK_TOOTH_OFF+0x140>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d025      	beq.n	800520c <output_CRK_TOOTH_OFF+0x68>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 80051c0:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <output_CRK_TOOTH_OFF+0x144>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <output_CRK_TOOTH_OFF+0x134>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d005      	beq.n	80051d8 <output_CRK_TOOTH_OFF+0x34>
            teeth_counter_CRK_TOOTH_OFF = teeth_count_CRK + 1;
 80051cc:	4b46      	ldr	r3, [pc, #280]	; (80052e8 <output_CRK_TOOTH_OFF+0x144>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	4a46      	ldr	r2, [pc, #280]	; (80052ec <output_CRK_TOOTH_OFF+0x148>)
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e019      	b.n	800520c <output_CRK_TOOTH_OFF+0x68>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <output_CRK_TOOTH_OFF+0x144>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <output_CRK_TOOTH_OFF+0x134>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d113      	bne.n	800520c <output_CRK_TOOTH_OFF+0x68>
            teeth_counter_CRK_TOOTH_OFF = 1;
 80051e4:	4b41      	ldr	r3, [pc, #260]	; (80052ec <output_CRK_TOOTH_OFF+0x148>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
            counter_gap_left_CRK_TOOTH_OFF++;
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <output_CRK_TOOTH_OFF+0x14c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <output_CRK_TOOTH_OFF+0x14c>)
 80051f2:	6013      	str	r3, [r2, #0]
            counter_tooth_off = 0;  // reset at every gap
 80051f4:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <output_CRK_TOOTH_OFF+0x150>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

            if (counter_gap_left_CRK_TOOTH_OFF == number_gap) {  // if we made a full rotation
 80051fa:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <output_CRK_TOOTH_OFF+0x14c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3e      	ldr	r2, [pc, #248]	; (80052f8 <output_CRK_TOOTH_OFF+0x154>)
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	4293      	cmp	r3, r2
 8005204:	d102      	bne.n	800520c <output_CRK_TOOTH_OFF+0x68>
                counter_gap_left_CRK_TOOTH_OFF = 0;
 8005206:	4b3a      	ldr	r3, [pc, #232]	; (80052f0 <output_CRK_TOOTH_OFF+0x14c>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
            }
        }
    }

    if (failure_active == true) {
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <output_CRK_TOOTH_OFF+0x158>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <output_CRK_TOOTH_OFF+0xb0>
        if (CRK_signal == false) {  // if failure active and the Crk is set to 0 set Crk output at 1 to miss a tooth
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <output_CRK_TOOTH_OFF+0x140>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f083 0301 	eor.w	r3, r3, #1
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <output_CRK_TOOTH_OFF+0x90>
            failure_passed = true;
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <output_CRK_TOOTH_OFF+0x15c>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005228:	2201      	movs	r2, #1
 800522a:	2110      	movs	r1, #16
 800522c:	4835      	ldr	r0, [pc, #212]	; (8005304 <output_CRK_TOOTH_OFF+0x160>)
 800522e:	f7fd faac 	bl	800278a <HAL_GPIO_WritePin>
            }

        } else {
        }
    }
}
 8005232:	e04e      	b.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
        } else if (failure_passed == true) {  // a tooth has been skiped
 8005234:	4b32      	ldr	r3, [pc, #200]	; (8005300 <output_CRK_TOOTH_OFF+0x15c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d04a      	beq.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
            failure_passed = false;
 800523c:	4b30      	ldr	r3, [pc, #192]	; (8005300 <output_CRK_TOOTH_OFF+0x15c>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
            failure_active = false;
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <output_CRK_TOOTH_OFF+0x158>)
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
            counter_tooth_off++;
 8005248:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <output_CRK_TOOTH_OFF+0x150>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <output_CRK_TOOTH_OFF+0x150>)
 8005250:	6013      	str	r3, [r2, #0]
}
 8005252:	e03e      	b.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
        if (((teeth_counter_CRK_TOOTH_OFF % number_teeth_between_tooth_off) == ((number_teeth_between_tooth_off / 2) + 1)) && (CRK_signal == true)) {  // if we passed a tooth and this tooth is separated by the number_teeth_between_tooth_off
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <output_CRK_TOOTH_OFF+0x148>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <output_CRK_TOOTH_OFF+0x13c>)
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005260:	fb01 f202 	mul.w	r2, r1, r2
 8005264:	1a9a      	subs	r2, r3, r2
 8005266:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <output_CRK_TOOTH_OFF+0x13c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	3301      	adds	r3, #1
 800526e:	429a      	cmp	r2, r3
 8005270:	d12f      	bne.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <output_CRK_TOOTH_OFF+0x140>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d02b      	beq.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
            if ((counter_gap_left_CRK_TOOTH_OFF == 0) && (counter_tooth_off < ((number_tooth_off / number_gap) + (number_tooth_off % number_gap)))) {
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <output_CRK_TOOTH_OFF+0x14c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d117      	bne.n	80052b2 <output_CRK_TOOTH_OFF+0x10e>
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <output_CRK_TOOTH_OFF+0x138>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <output_CRK_TOOTH_OFF+0x154>)
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	fbb3 f1f2 	udiv	r1, r3, r2
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <output_CRK_TOOTH_OFF+0x138>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <output_CRK_TOOTH_OFF+0x154>)
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	fbb3 f0f2 	udiv	r0, r3, r2
 800529a:	fb00 f202 	mul.w	r2, r0, r2
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	18ca      	adds	r2, r1, r3
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <output_CRK_TOOTH_OFF+0x150>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d903      	bls.n	80052b2 <output_CRK_TOOTH_OFF+0x10e>
                failure_active = true;
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <output_CRK_TOOTH_OFF+0x158>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
}
 80052b0:	e00f      	b.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
            } else if (counter_tooth_off < (number_tooth_off / number_gap)) {
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <output_CRK_TOOTH_OFF+0x138>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <output_CRK_TOOTH_OFF+0x154>)
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <output_CRK_TOOTH_OFF+0x150>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d903      	bls.n	80052ce <output_CRK_TOOTH_OFF+0x12a>
                failure_active = true;
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <output_CRK_TOOTH_OFF+0x158>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
}
 80052cc:	e001      	b.n	80052d2 <output_CRK_TOOTH_OFF+0x12e>
                output_CRK_no_failure();
 80052ce:	f7fe fe7b 	bl	8003fc8 <output_CRK_no_failure>
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000280 	.word	0x20000280
 80052dc:	20000744 	.word	0x20000744
 80052e0:	20000748 	.word	0x20000748
 80052e4:	200002a3 	.word	0x200002a3
 80052e8:	20000270 	.word	0x20000270
 80052ec:	20000750 	.word	0x20000750
 80052f0:	20000754 	.word	0x20000754
 80052f4:	2000074c 	.word	0x2000074c
 80052f8:	20000234 	.word	0x20000234
 80052fc:	2000066c 	.word	0x2000066c
 8005300:	2000066f 	.word	0x2000066f
 8005304:	40010800 	.word	0x40010800

08005308 <CRK_TOOTH_OFF_reset>:

//##CRK_TOOTH_OFF_reset
void CRK_TOOTH_OFF_reset(void) {
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
    failure_active = false;
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <CRK_TOOTH_OFF_reset+0x18>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
    number_teeth_between_tooth_off = 0;
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <CRK_TOOTH_OFF_reset+0x1c>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr
 8005320:	2000066c 	.word	0x2000066c
 8005324:	20000748 	.word	0x20000748

08005328 <output_CRK_GAP_NOT_DET>:

//##Output_CRK_GAP_NOT_DET
void output_CRK_GAP_NOT_DET(void) {
 8005328:	b598      	push	{r3, r4, r7, lr}
 800532a:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <output_CRK_GAP_NOT_DET+0xe8>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d014      	beq.n	800535e <output_CRK_GAP_NOT_DET+0x36>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 8005334:	4b37      	ldr	r3, [pc, #220]	; (8005414 <output_CRK_GAP_NOT_DET+0xec>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b37      	ldr	r3, [pc, #220]	; (8005418 <output_CRK_GAP_NOT_DET+0xf0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d005      	beq.n	800534c <output_CRK_GAP_NOT_DET+0x24>
            teeth_counter_CRK_GAP_NOT_DET = teeth_count_CRK + 1;
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <output_CRK_GAP_NOT_DET+0xec>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <output_CRK_GAP_NOT_DET+0xf4>)
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e008      	b.n	800535e <output_CRK_GAP_NOT_DET+0x36>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <output_CRK_GAP_NOT_DET+0xec>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <output_CRK_GAP_NOT_DET+0xf0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <output_CRK_GAP_NOT_DET+0x36>
            teeth_counter_CRK_GAP_NOT_DET = 1;
 8005358:	4b30      	ldr	r3, [pc, #192]	; (800541c <output_CRK_GAP_NOT_DET+0xf4>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]
        }
    }

    if (CRK_synch == false) {
 800535e:	4b30      	ldr	r3, [pc, #192]	; (8005420 <output_CRK_GAP_NOT_DET+0xf8>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f083 0301 	eor.w	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <output_CRK_GAP_NOT_DET+0x50>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800536c:	2201      	movs	r2, #1
 800536e:	2110      	movs	r1, #16
 8005370:	482c      	ldr	r0, [pc, #176]	; (8005424 <output_CRK_GAP_NOT_DET+0xfc>)
 8005372:	f7fd fa0a 	bl	800278a <HAL_GPIO_WritePin>

        } else if ((failure_active == true) && (CRK_signal == true)) {
            HAL_TIM_Base_Start(&htim1);
        }
    }
}
 8005376:	e048      	b.n	800540a <output_CRK_GAP_NOT_DET+0xe2>
    } else if (CRK_synch == true) {
 8005378:	4b29      	ldr	r3, [pc, #164]	; (8005420 <output_CRK_GAP_NOT_DET+0xf8>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d044      	beq.n	800540a <output_CRK_GAP_NOT_DET+0xe2>
        output_CRK_no_failure();
 8005380:	f7fe fe22 	bl	8003fc8 <output_CRK_no_failure>
        if ((teeth_counter_CRK_GAP_NOT_DET == number_teeth_between_gaps) && failure_active == false) {
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <output_CRK_GAP_NOT_DET+0xf4>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b23      	ldr	r3, [pc, #140]	; (8005418 <output_CRK_GAP_NOT_DET+0xf0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d131      	bne.n	80053f4 <output_CRK_GAP_NOT_DET+0xcc>
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <output_CRK_GAP_NOT_DET+0x100>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f083 0301 	eor.w	r3, r3, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <output_CRK_GAP_NOT_DET+0xcc>
            failure_active = true;
 800539e:	4b22      	ldr	r3, [pc, #136]	; (8005428 <output_CRK_GAP_NOT_DET+0x100>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&htim1, T_TOOTH_RAW * 1.5); // to be in the midle of the gap
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <output_CRK_GAP_NOT_DET+0x104>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fb f81b 	bl	80003e4 <__aeabi_ui2d>
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <output_CRK_GAP_NOT_DET+0x108>)
 80053b4:	f7fb f890 	bl	80004d8 <__aeabi_dmul>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	491d      	ldr	r1, [pc, #116]	; (8005434 <output_CRK_GAP_NOT_DET+0x10c>)
 80053be:	680c      	ldr	r4, [r1, #0]
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	f7fb fb4a 	bl	8000a5c <__aeabi_d2uiz>
 80053c8:	4603      	mov	r3, r0
 80053ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <output_CRK_GAP_NOT_DET+0x104>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f807 	bl	80003e4 <__aeabi_ui2d>
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <output_CRK_GAP_NOT_DET+0x108>)
 80053dc:	f7fb f87c 	bl	80004d8 <__aeabi_dmul>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f7fb fb38 	bl	8000a5c <__aeabi_d2uiz>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <output_CRK_GAP_NOT_DET+0x10c>)
 80053f0:	60d3      	str	r3, [r2, #12]
}
 80053f2:	e00a      	b.n	800540a <output_CRK_GAP_NOT_DET+0xe2>
        } else if ((failure_active == true) && (CRK_signal == true)) {
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <output_CRK_GAP_NOT_DET+0x100>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <output_CRK_GAP_NOT_DET+0xe2>
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <output_CRK_GAP_NOT_DET+0xe8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <output_CRK_GAP_NOT_DET+0xe2>
            HAL_TIM_Base_Start(&htim1);
 8005404:	480b      	ldr	r0, [pc, #44]	; (8005434 <output_CRK_GAP_NOT_DET+0x10c>)
 8005406:	f7fd fe5b 	bl	80030c0 <HAL_TIM_Base_Start>
}
 800540a:	bf00      	nop
 800540c:	bd98      	pop	{r3, r4, r7, pc}
 800540e:	bf00      	nop
 8005410:	200002a3 	.word	0x200002a3
 8005414:	20000270 	.word	0x20000270
 8005418:	20000280 	.word	0x20000280
 800541c:	20000758 	.word	0x20000758
 8005420:	200002a0 	.word	0x200002a0
 8005424:	40010800 	.word	0x40010800
 8005428:	2000066c 	.word	0x2000066c
 800542c:	20000264 	.word	0x20000264
 8005430:	3ff80000 	.word	0x3ff80000
 8005434:	20000990 	.word	0x20000990

08005438 <CRK_GAP_NOT_DET_reset>:

//## CRK_GAP_NOT_DET_reset
void CRK_GAP_NOT_DET_reset(void) {
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
    failure_active_CAM_blank_out = false;
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <CRK_GAP_NOT_DET_reset+0x18>)
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
    failure_active = false;
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <CRK_GAP_NOT_DET_reset+0x1c>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	2000066d 	.word	0x2000066d
 8005454:	2000066c 	.word	0x2000066c

08005458 <output_SEG_ADP_ER_LIM>:

//## Output_SEG_ADP_ER_LIM
void output_SEG_ADP_ER_LIM(void) {
 8005458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
    if (CRK_signal == true) {
 8005460:	4b8b      	ldr	r3, [pc, #556]	; (8005690 <output_SEG_ADP_ER_LIM+0x238>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d014      	beq.n	8005492 <output_SEG_ADP_ER_LIM+0x3a>
        if (teeth_count_CRK != number_teeth_between_gaps) {
 8005468:	4b8a      	ldr	r3, [pc, #552]	; (8005694 <output_SEG_ADP_ER_LIM+0x23c>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b8a      	ldr	r3, [pc, #552]	; (8005698 <output_SEG_ADP_ER_LIM+0x240>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d005      	beq.n	8005480 <output_SEG_ADP_ER_LIM+0x28>
            teeth_counter_SEG_ADP_ER_LIM = teeth_count_CRK + 1;
 8005474:	4b87      	ldr	r3, [pc, #540]	; (8005694 <output_SEG_ADP_ER_LIM+0x23c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	4a88      	ldr	r2, [pc, #544]	; (800569c <output_SEG_ADP_ER_LIM+0x244>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e008      	b.n	8005492 <output_SEG_ADP_ER_LIM+0x3a>
        } else if (teeth_count_CRK == number_teeth_between_gaps) {
 8005480:	4b84      	ldr	r3, [pc, #528]	; (8005694 <output_SEG_ADP_ER_LIM+0x23c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b84      	ldr	r3, [pc, #528]	; (8005698 <output_SEG_ADP_ER_LIM+0x240>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d102      	bne.n	8005492 <output_SEG_ADP_ER_LIM+0x3a>
            teeth_counter_SEG_ADP_ER_LIM = 1;
 800548c:	4b83      	ldr	r3, [pc, #524]	; (800569c <output_SEG_ADP_ER_LIM+0x244>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]
        }
    }

    if ((failure_active == true) && (CRK_signal == false)) {  // on the falling edge of the CRK start the delay timer
 8005492:	4b83      	ldr	r3, [pc, #524]	; (80056a0 <output_SEG_ADP_ER_LIM+0x248>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00f      	beq.n	80054ba <output_SEG_ADP_ER_LIM+0x62>
 800549a:	4b7d      	ldr	r3, [pc, #500]	; (8005690 <output_SEG_ADP_ER_LIM+0x238>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <output_SEG_ADP_ER_LIM+0x62>
        HAL_TIM_Base_Start(&htim4);
 80054a8:	487e      	ldr	r0, [pc, #504]	; (80056a4 <output_SEG_ADP_ER_LIM+0x24c>)
 80054aa:	f7fd fe09 	bl	80030c0 <HAL_TIM_Base_Start>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80054ae:	2201      	movs	r2, #1
 80054b0:	2110      	movs	r1, #16
 80054b2:	487d      	ldr	r0, [pc, #500]	; (80056a8 <output_SEG_ADP_ER_LIM+0x250>)
 80054b4:	f7fd f969 	bl	800278a <HAL_GPIO_WritePin>
 80054b8:	e01b      	b.n	80054f2 <output_SEG_ADP_ER_LIM+0x9a>
    } else if ((failure_active == true) && (CRK_signal == true)) {
 80054ba:	4b79      	ldr	r3, [pc, #484]	; (80056a0 <output_SEG_ADP_ER_LIM+0x248>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d015      	beq.n	80054ee <output_SEG_ADP_ER_LIM+0x96>
 80054c2:	4b73      	ldr	r3, [pc, #460]	; (8005690 <output_SEG_ADP_ER_LIM+0x238>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <output_SEG_ADP_ER_LIM+0x96>
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 80054ca:	4b78      	ldr	r3, [pc, #480]	; (80056ac <output_SEG_ADP_ER_LIM+0x254>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <output_SEG_ADP_ER_LIM+0x8e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80054d2:	2200      	movs	r2, #0
 80054d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054d8:	4873      	ldr	r0, [pc, #460]	; (80056a8 <output_SEG_ADP_ER_LIM+0x250>)
 80054da:	f7fd f956 	bl	800278a <HAL_GPIO_WritePin>
            HAL_TIM_Base_Start(&htim4);
 80054de:	4871      	ldr	r0, [pc, #452]	; (80056a4 <output_SEG_ADP_ER_LIM+0x24c>)
 80054e0:	f7fd fdee 	bl	80030c0 <HAL_TIM_Base_Start>
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 80054e4:	e005      	b.n	80054f2 <output_SEG_ADP_ER_LIM+0x9a>
        } else {  // if failure on the falling edge of the CRK is still not set, this happens a lot on lower frquency
            failure_waiting = true;
 80054e6:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <output_SEG_ADP_ER_LIM+0x258>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
        if (failure_passed == true) {  // if failure on the falling edge of the CRK is already set
 80054ec:	e001      	b.n	80054f2 <output_SEG_ADP_ER_LIM+0x9a>
        }
    } else {
        output_CRK_no_failure();
 80054ee:	f7fe fd6b 	bl	8003fc8 <output_CRK_no_failure>
    }

    if (teeth_counter_SEG_ADP_ER_LIM == (((720 / (number_segments_CRK * revolution_CRK)) + (first_seg_angle / revolution_CRK) + (int)(tdc_to_gap / revolution_CRK) + 1))) {  // if we are one tooth befor the end of the first segment
 80054f2:	4b6a      	ldr	r3, [pc, #424]	; (800569c <output_SEG_ADP_ER_LIM+0x244>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fa ff74 	bl	80003e4 <__aeabi_ui2d>
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	4b6c      	ldr	r3, [pc, #432]	; (80056b4 <output_SEG_ADP_ER_LIM+0x25c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fa ff6d 	bl	80003e4 <__aeabi_ui2d>
 800550a:	4b6b      	ldr	r3, [pc, #428]	; (80056b8 <output_SEG_ADP_ER_LIM+0x260>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fa ffe2 	bl	80004d8 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	4967      	ldr	r1, [pc, #412]	; (80056bc <output_SEG_ADP_ER_LIM+0x264>)
 800551e:	f7fb f905 	bl	800072c <__aeabi_ddiv>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4690      	mov	r8, r2
 8005528:	4699      	mov	r9, r3
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <output_SEG_ADP_ER_LIM+0x268>)
 800552c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005530:	4b61      	ldr	r3, [pc, #388]	; (80056b8 <output_SEG_ADP_ER_LIM+0x260>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb f8f9 	bl	800072c <__aeabi_ddiv>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f7fa fe13 	bl	800016c <__adddf3>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4690      	mov	r8, r2
 800554c:	4699      	mov	r9, r3
 800554e:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <output_SEG_ADP_ER_LIM+0x26c>)
 8005550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005554:	4b58      	ldr	r3, [pc, #352]	; (80056b8 <output_SEG_ADP_ER_LIM+0x260>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f7fb f8e7 	bl	800072c <__aeabi_ddiv>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4610      	mov	r0, r2
 8005564:	4619      	mov	r1, r3
 8005566:	f7fb fa51 	bl	8000a0c <__aeabi_d2iz>
 800556a:	4603      	mov	r3, r0
 800556c:	4618      	mov	r0, r3
 800556e:	f7fa ff49 	bl	8000404 <__aeabi_i2d>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4640      	mov	r0, r8
 8005578:	4649      	mov	r1, r9
 800557a:	f7fa fdf7 	bl	800016c <__adddf3>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	4b4f      	ldr	r3, [pc, #316]	; (80056c8 <output_SEG_ADP_ER_LIM+0x270>)
 800558c:	f7fa fdee 	bl	800016c <__adddf3>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4620      	mov	r0, r4
 8005596:	4629      	mov	r1, r5
 8005598:	f7fb fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d100      	bne.n	80055a4 <output_SEG_ADP_ER_LIM+0x14c>
        double delayTimer = crk_delay_SEG_ADP_ER_LIM * (T_TOOTH_RAW / revolution_CRK);
        __HAL_TIM_SET_AUTORELOAD(&htim4, 18 * ((delayTimer * 8) + 1) - 1); // PR7 =  delayTimer * 8
        // set de delay for the timer, times 8 because the timer 7 has a prescale of 1:8 and T_TOOTH_RAW has 1:64
        failure_active = true;
    }
}
 80055a2:	e070      	b.n	8005686 <output_SEG_ADP_ER_LIM+0x22e>
        double delayTimer = crk_delay_SEG_ADP_ER_LIM * (T_TOOTH_RAW / revolution_CRK);
 80055a4:	4b49      	ldr	r3, [pc, #292]	; (80056cc <output_SEG_ADP_ER_LIM+0x274>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa ff1b 	bl	80003e4 <__aeabi_ui2d>
 80055ae:	4b42      	ldr	r3, [pc, #264]	; (80056b8 <output_SEG_ADP_ER_LIM+0x260>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fb f8ba 	bl	800072c <__aeabi_ddiv>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <output_SEG_ADP_ER_LIM+0x278>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fa ff87 	bl	80004d8 <__aeabi_dmul>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9c7 2300 	strd	r2, r3, [r7]
        __HAL_TIM_SET_AUTORELOAD(&htim4, 18 * ((delayTimer * 8) + 1) - 1); // PR7 =  delayTimer * 8
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <output_SEG_ADP_ER_LIM+0x27c>)
 80055d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <output_SEG_ADP_ER_LIM+0x270>)
 80055ee:	f7fa fdbd 	bl	800016c <__adddf3>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <output_SEG_ADP_ER_LIM+0x280>)
 8005600:	f7fa ff6a 	bl	80004d8 <__aeabi_dmul>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <output_SEG_ADP_ER_LIM+0x270>)
 8005612:	f7fa fda9 	bl	8000168 <__aeabi_dsub>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4922      	ldr	r1, [pc, #136]	; (80056a4 <output_SEG_ADP_ER_LIM+0x24c>)
 800561c:	680c      	ldr	r4, [r1, #0]
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	f7fb fa1b 	bl	8000a5c <__aeabi_d2uiz>
 8005626:	4603      	mov	r3, r0
 8005628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <output_SEG_ADP_ER_LIM+0x27c>)
 8005630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <output_SEG_ADP_ER_LIM+0x270>)
 8005646:	f7fa fd91 	bl	800016c <__adddf3>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4610      	mov	r0, r2
 8005650:	4619      	mov	r1, r3
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	4b20      	ldr	r3, [pc, #128]	; (80056d8 <output_SEG_ADP_ER_LIM+0x280>)
 8005658:	f7fa ff3e 	bl	80004d8 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <output_SEG_ADP_ER_LIM+0x270>)
 800566a:	f7fa fd7d 	bl	8000168 <__aeabi_dsub>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4610      	mov	r0, r2
 8005674:	4619      	mov	r1, r3
 8005676:	f7fb f9f1 	bl	8000a5c <__aeabi_d2uiz>
 800567a:	4603      	mov	r3, r0
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <output_SEG_ADP_ER_LIM+0x24c>)
 800567e:	60d3      	str	r3, [r2, #12]
        failure_active = true;
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <output_SEG_ADP_ER_LIM+0x248>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005690:	200002a3 	.word	0x200002a3
 8005694:	20000270 	.word	0x20000270
 8005698:	20000280 	.word	0x20000280
 800569c:	2000075c 	.word	0x2000075c
 80056a0:	2000066c 	.word	0x2000066c
 80056a4:	20000a68 	.word	0x20000a68
 80056a8:	40010800 	.word	0x40010800
 80056ac:	2000066f 	.word	0x2000066f
 80056b0:	20000670 	.word	0x20000670
 80056b4:	2000028c 	.word	0x2000028c
 80056b8:	20000298 	.word	0x20000298
 80056bc:	40868000 	.word	0x40868000
 80056c0:	20000240 	.word	0x20000240
 80056c4:	20000238 	.word	0x20000238
 80056c8:	3ff00000 	.word	0x3ff00000
 80056cc:	20000264 	.word	0x20000264
 80056d0:	20000768 	.word	0x20000768
 80056d4:	40200000 	.word	0x40200000
 80056d8:	40320000 	.word	0x40320000

080056dc <SEG_ADP_ER_LIM_reset>:

//## SEG_ADP_ER_LIM_reset
void SEG_ADP_ER_LIM_reset(void) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
    failure_active = false;
 80056e0:	4b08      	ldr	r3, [pc, #32]	; (8005704 <SEG_ADP_ER_LIM_reset+0x28>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
    failure_passed = false;
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <SEG_ADP_ER_LIM_reset+0x2c>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
    failure_waiting = false;
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <SEG_ADP_ER_LIM_reset+0x30>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
    MX_TIM4_Init();
 80056f2:	f7fc fbcd 	bl	8001e90 <MX_TIM4_Init>
    MX_TIM1_Init();
 80056f6:	f7fc fadf 	bl	8001cb8 <MX_TIM1_Init>
    timer_Counter_SEG_ADP_ER_LIM = 0;
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <SEG_ADP_ER_LIM_reset+0x34>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
}
 8005700:	bf00      	nop
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2000066c 	.word	0x2000066c
 8005708:	2000066f 	.word	0x2000066f
 800570c:	20000670 	.word	0x20000670
 8005710:	20000760 	.word	0x20000760

08005714 <output_CRK_pulse_duration>:

//## Output_CRK_pulse_duration
void output_CRK_pulse_duration(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
    if (CRK_signal == false) {
 8005718:	4b08      	ldr	r3, [pc, #32]	; (800573c <output_CRK_pulse_duration+0x28>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <output_CRK_pulse_duration+0x22>
        HAL_TIM_Base_Start(&htim4); // start the timer4 (formerly TIM7 on microchip)
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <output_CRK_pulse_duration+0x2c>)
 8005728:	f7fd fcca 	bl	80030c0 <HAL_TIM_Base_Start>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800572c:	2200      	movs	r2, #0
 800572e:	2110      	movs	r1, #16
 8005730:	4804      	ldr	r0, [pc, #16]	; (8005744 <output_CRK_pulse_duration+0x30>)
 8005732:	f7fd f82a 	bl	800278a <HAL_GPIO_WritePin>
    }
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200002a3 	.word	0x200002a3
 8005740:	20000a68 	.word	0x20000a68
 8005744:	40010800 	.word	0x40010800

08005748 <CRK_pulse_duration_reset>:

//## CRK_PLS_ORNG_reset
void CRK_pulse_duration_reset(void) {
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
    MX_TIM3_Init();
 800574c:	f7fc fb52 	bl	8001df4 <MX_TIM3_Init>
    failure_active = false;
 8005750:	4b02      	ldr	r3, [pc, #8]	; (800575c <CRK_pulse_duration_reset+0x14>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000066c 	.word	0x2000066c

08005760 <output_POSN_ENG_STST>:

//## Output_POSN_ENG_STST
void output_POSN_ENG_STST(void) {
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
    if ((CRK_signal == false) && (failure_active == true)) {
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <output_POSN_ENG_STST+0x60>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f083 0301 	eor.w	r3, r3, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <output_POSN_ENG_STST+0x48>
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <output_POSN_ENG_STST+0x64>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <output_POSN_ENG_STST+0x48>
        counter_POSN_ENG_STST++;  // counte the teeth'
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <output_POSN_ENG_STST+0x68>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <output_POSN_ENG_STST+0x68>)
 8005782:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // skip the tooth
 8005784:	2201      	movs	r2, #1
 8005786:	2110      	movs	r1, #16
 8005788:	4810      	ldr	r0, [pc, #64]	; (80057cc <output_POSN_ENG_STST+0x6c>)
 800578a:	f7fc fffe 	bl	800278a <HAL_GPIO_WritePin>

        if (counter_POSN_ENG_STST >= crk_teeth_off_POSN_ENG_STST) {  // if number of teeth skip is done stop failure
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <output_POSN_ENG_STST+0x68>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <output_POSN_ENG_STST+0x70>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d310      	bcc.n	80057bc <output_POSN_ENG_STST+0x5c>
            failure_active = false;
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <output_POSN_ENG_STST+0x64>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
            counter_POSN_ENG_STST = 0;
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <output_POSN_ENG_STST+0x68>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
        if (counter_POSN_ENG_STST >= crk_teeth_off_POSN_ENG_STST) {  // if number of teeth skip is done stop failure
 80057a6:	e009      	b.n	80057bc <output_POSN_ENG_STST+0x5c>
        }
    } else if (failure_active == false) {
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <output_POSN_ENG_STST+0x64>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f083 0301 	eor.w	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <output_POSN_ENG_STST+0x5c>
        output_CRK_no_failure();
 80057b6:	f7fe fc07 	bl	8003fc8 <output_CRK_no_failure>
    }
}
 80057ba:	e7ff      	b.n	80057bc <output_POSN_ENG_STST+0x5c>
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200002a3 	.word	0x200002a3
 80057c4:	2000066c 	.word	0x2000066c
 80057c8:	2000077c 	.word	0x2000077c
 80057cc:	40010800 	.word	0x40010800
 80057d0:	20000778 	.word	0x20000778

080057d4 <POSN_ENG_STST_reset>:

//## POSN_ENG_STST_LOSS_reset
void POSN_ENG_STST_reset(void) {
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
    failure_active = false;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <POSN_ENG_STST_reset+0x14>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	2000066c 	.word	0x2000066c

080057ec <output_CAM_PAT_ERR>:

//## Output_CAM_PAT_ERR

void output_CAM_PAT_ERR(int cam_id) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    switch (active_CAM_edges[cam_id]) {
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <output_CAM_PAT_ERR+0x180>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b72      	cmp	r3, #114	; 0x72
 80057fe:	d07f      	beq.n	8005900 <output_CAM_PAT_ERR+0x114>
 8005800:	2b72      	cmp	r3, #114	; 0x72
 8005802:	f300 80ae 	bgt.w	8005962 <output_CAM_PAT_ERR+0x176>
 8005806:	2b62      	cmp	r3, #98	; 0x62
 8005808:	d002      	beq.n	8005810 <output_CAM_PAT_ERR+0x24>
 800580a:	2b66      	cmp	r3, #102	; 0x66
 800580c:	d047      	beq.n	800589e <output_CAM_PAT_ERR+0xb2>
                }
            }
            break;
        }
    }
}
 800580e:	e0a8      	b.n	8005962 <output_CAM_PAT_ERR+0x176>
            active_CAM_edges_counter[cam_id]++;
 8005810:	4a57      	ldr	r2, [pc, #348]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	4955      	ldr	r1, [pc, #340]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip the next falling edge to generate the failure
 8005822:	4a53      	ldr	r2, [pc, #332]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	2b06      	cmp	r3, #6
 800582c:	d933      	bls.n	8005896 <output_CAM_PAT_ERR+0xaa>
                if (CAM_signal[cam_id] == false) {
 800582e:	4a51      	ldr	r2, [pc, #324]	; (8005974 <output_CAM_PAT_ERR+0x188>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f083 0301 	eor.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00f      	beq.n	8005860 <output_CAM_PAT_ERR+0x74>
                    if (cam_id == 0) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <output_CAM_PAT_ERR+0x68>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005846:	2201      	movs	r2, #1
 8005848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800584c:	484a      	ldr	r0, [pc, #296]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 800584e:	f7fc ff9c 	bl	800278a <HAL_GPIO_WritePin>
 8005852:	e01a      	b.n	800588a <output_CAM_PAT_ERR+0x9e>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005854:	2201      	movs	r2, #1
 8005856:	2140      	movs	r1, #64	; 0x40
 8005858:	4847      	ldr	r0, [pc, #284]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 800585a:	f7fc ff96 	bl	800278a <HAL_GPIO_WritePin>
 800585e:	e014      	b.n	800588a <output_CAM_PAT_ERR+0x9e>
                } else if (CAM_signal[cam_id] == true) {
 8005860:	4a44      	ldr	r2, [pc, #272]	; (8005974 <output_CAM_PAT_ERR+0x188>)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <output_CAM_PAT_ERR+0x9e>
                    if (cam_id == 0) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <output_CAM_PAT_ERR+0x94>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005872:	2200      	movs	r2, #0
 8005874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005878:	483f      	ldr	r0, [pc, #252]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 800587a:	f7fc ff86 	bl	800278a <HAL_GPIO_WritePin>
 800587e:	e004      	b.n	800588a <output_CAM_PAT_ERR+0x9e>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	483c      	ldr	r0, [pc, #240]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 8005886:	f7fc ff80 	bl	800278a <HAL_GPIO_WritePin>
                active_CAM_edges_counter[cam_id] = 0;
 800588a:	4a39      	ldr	r2, [pc, #228]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2100      	movs	r1, #0
 8005890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8005894:	e065      	b.n	8005962 <output_CAM_PAT_ERR+0x176>
                output_CAM_no_failure(cam_id);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fe fbae 	bl	8003ff8 <output_CAM_no_failure>
            break;
 800589c:	e061      	b.n	8005962 <output_CAM_PAT_ERR+0x176>
            if (CAM_signal[cam_id] == false) {
 800589e:	4a35      	ldr	r2, [pc, #212]	; (8005974 <output_CAM_PAT_ERR+0x188>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f083 0301 	eor.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d055      	beq.n	800595c <output_CAM_PAT_ERR+0x170>
                active_CAM_edges_counter[cam_id]++;
 80058b0:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	492d      	ldr	r1, [pc, #180]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip this edge in output to generate the failure
 80058c2:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d914      	bls.n	80058f8 <output_CAM_PAT_ERR+0x10c>
                    active_CAM_edges_counter[cam_id] = 0;
 80058ce:	4a28      	ldr	r2, [pc, #160]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2100      	movs	r1, #0
 80058d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (cam_id == 0) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <output_CAM_PAT_ERR+0x100>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80058de:	2201      	movs	r2, #1
 80058e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058e4:	4824      	ldr	r0, [pc, #144]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 80058e6:	f7fc ff50 	bl	800278a <HAL_GPIO_WritePin>
            break;
 80058ea:	e037      	b.n	800595c <output_CAM_PAT_ERR+0x170>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	4821      	ldr	r0, [pc, #132]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 80058f2:	f7fc ff4a 	bl	800278a <HAL_GPIO_WritePin>
            break;
 80058f6:	e031      	b.n	800595c <output_CAM_PAT_ERR+0x170>
                    output_CAM_no_failure(cam_id);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fe fb7d 	bl	8003ff8 <output_CAM_no_failure>
            break;
 80058fe:	e02d      	b.n	800595c <output_CAM_PAT_ERR+0x170>
            if (CAM_signal[cam_id] == true) {
 8005900:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <output_CAM_PAT_ERR+0x188>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d029      	beq.n	8005960 <output_CAM_PAT_ERR+0x174>
                active_CAM_edges_counter[cam_id]++;
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	4916      	ldr	r1, [pc, #88]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (active_CAM_edges_counter[cam_id] >= 7) {  // after an abitrary number of CAM edges skip this edge in output to generate the failure
 800591e:	4a14      	ldr	r2, [pc, #80]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005926:	2b06      	cmp	r3, #6
 8005928:	d914      	bls.n	8005954 <output_CAM_PAT_ERR+0x168>
                    active_CAM_edges_counter[cam_id] = 0;
 800592a:	4a11      	ldr	r2, [pc, #68]	; (8005970 <output_CAM_PAT_ERR+0x184>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2100      	movs	r1, #0
 8005930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (cam_id == 0) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <output_CAM_PAT_ERR+0x15c>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800593a:	2200      	movs	r2, #0
 800593c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005940:	480d      	ldr	r0, [pc, #52]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 8005942:	f7fc ff22 	bl	800278a <HAL_GPIO_WritePin>
            break;
 8005946:	e00b      	b.n	8005960 <output_CAM_PAT_ERR+0x174>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8005948:	2200      	movs	r2, #0
 800594a:	2140      	movs	r1, #64	; 0x40
 800594c:	480a      	ldr	r0, [pc, #40]	; (8005978 <output_CAM_PAT_ERR+0x18c>)
 800594e:	f7fc ff1c 	bl	800278a <HAL_GPIO_WritePin>
            break;
 8005952:	e005      	b.n	8005960 <output_CAM_PAT_ERR+0x174>
                    output_CAM_no_failure(cam_id);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fe fb4f 	bl	8003ff8 <output_CAM_no_failure>
            break;
 800595a:	e001      	b.n	8005960 <output_CAM_PAT_ERR+0x174>
            break;
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <output_CAM_PAT_ERR+0x176>
            break;
 8005960:	bf00      	nop
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200005d8 	.word	0x200005d8
 8005970:	20000780 	.word	0x20000780
 8005974:	20000658 	.word	0x20000658
 8005978:	40010800 	.word	0x40010800

0800597c <CAM_PAT_ERR_reset>:

//## CAM_PAT_ERR_reset

void CAM_PAT_ERR_reset() {
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
    active_CAM_edges_counter[0] = 0;  // reset counter for CAM1
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <CAM_PAT_ERR_reset+0x20>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
    active_CAM_edges_counter[1] = 0;  // reset counter for CAM2
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <CAM_PAT_ERR_reset+0x20>)
 8005988:	2200      	movs	r2, #0
 800598a:	605a      	str	r2, [r3, #4]
    output_CAM_no_failure(0);         // reset CAM1
 800598c:	2000      	movs	r0, #0
 800598e:	f7fe fb33 	bl	8003ff8 <output_CAM_no_failure>
    output_CAM_no_failure(1);         // reset CAM2
 8005992:	2001      	movs	r0, #1
 8005994:	f7fe fb30 	bl	8003ff8 <output_CAM_no_failure>
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000780 	.word	0x20000780

080059a0 <output_SC_CAM_CRK>:

//## Output_SC_CAM_CRK
void output_SC_CAM_CRK(int cam_id) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
    if (failure_active == true) {
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <output_SC_CAM_CRK+0xc0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d046      	beq.n	8005a3e <output_SC_CAM_CRK+0x9e>
        switch (sc_type_SC_CAM_CRK) {
 80059b0:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <output_SC_CAM_CRK+0xc4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d84e      	bhi.n	8005a58 <output_SC_CAM_CRK+0xb8>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <output_SC_CAM_CRK+0x20>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059e5 	.word	0x080059e5
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	08005a1b 	.word	0x08005a1b
            case (1):  // CrkScg
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059d6:	4824      	ldr	r0, [pc, #144]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 80059d8:	f7fc fed7 	bl	800278a <HAL_GPIO_WritePin>
                output_CAM_no_failure(cam_id);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fe fb0b 	bl	8003ff8 <output_CAM_no_failure>
                break;
 80059e2:	e039      	b.n	8005a58 <output_SC_CAM_CRK+0xb8>
            }
            case (2):  // CrkScb
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80059e4:	2201      	movs	r2, #1
 80059e6:	2110      	movs	r1, #16
 80059e8:	481f      	ldr	r0, [pc, #124]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 80059ea:	f7fc fece 	bl	800278a <HAL_GPIO_WritePin>
                output_CAM_no_failure(cam_id);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fe fb02 	bl	8003ff8 <output_CAM_no_failure>
                break;
 80059f4:	e030      	b.n	8005a58 <output_SC_CAM_CRK+0xb8>
            }
            case (3):  // CamScg
            {
                if (cam_id == 0) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <output_SC_CAM_CRK+0x6a>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a02:	4819      	ldr	r0, [pc, #100]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 8005a04:	f7fc fec1 	bl	800278a <HAL_GPIO_WritePin>
 8005a08:	e004      	b.n	8005a14 <output_SC_CAM_CRK+0x74>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	4816      	ldr	r0, [pc, #88]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 8005a10:	f7fc febb 	bl	800278a <HAL_GPIO_WritePin>
                }
                output_CRK_no_failure();
 8005a14:	f7fe fad8 	bl	8003fc8 <output_CRK_no_failure>
                break;
 8005a18:	e01e      	b.n	8005a58 <output_SC_CAM_CRK+0xb8>
            }
            case (4):  // CamScb
            {
                if (cam_id == 0) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <output_SC_CAM_CRK+0x8e>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005a20:	2201      	movs	r2, #1
 8005a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a26:	4810      	ldr	r0, [pc, #64]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 8005a28:	f7fc feaf 	bl	800278a <HAL_GPIO_WritePin>
 8005a2c:	e004      	b.n	8005a38 <output_SC_CAM_CRK+0x98>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	480d      	ldr	r0, [pc, #52]	; (8005a68 <output_SC_CAM_CRK+0xc8>)
 8005a34:	f7fc fea9 	bl	800278a <HAL_GPIO_WritePin>
                }
                output_CRK_no_failure();
 8005a38:	f7fe fac6 	bl	8003fc8 <output_CRK_no_failure>
                break;
 8005a3c:	e00c      	b.n	8005a58 <output_SC_CAM_CRK+0xb8>
            }
        }
    } else if (failure_active == false) {
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <output_SC_CAM_CRK+0xc0>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <output_SC_CAM_CRK+0xb8>
        output_CRK_no_failure();
 8005a4c:	f7fe fabc 	bl	8003fc8 <output_CRK_no_failure>
        output_CAM_no_failure(cam_id);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fe fad1 	bl	8003ff8 <output_CAM_no_failure>
    }
}
 8005a56:	e7ff      	b.n	8005a58 <output_SC_CAM_CRK+0xb8>
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	2000066c 	.word	0x2000066c
 8005a64:	20000788 	.word	0x20000788
 8005a68:	40010800 	.word	0x40010800

08005a6c <SC_CAM_CRK_reset>:

//## POSN_ENG_STST_LOSS_reset
void SC_CAM_CRK_reset(void) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
    failure_active = false;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <SC_CAM_CRK_reset+0x20>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
    output_CRK_no_failure();
 8005a76:	f7fe faa7 	bl	8003fc8 <output_CRK_no_failure>
    output_CAM_no_failure(0);  // reset CAM1
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f7fe fabc 	bl	8003ff8 <output_CAM_no_failure>
    output_CAM_no_failure(1);  // reset CAM2
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7fe fab9 	bl	8003ff8 <output_CAM_no_failure>
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2000066c 	.word	0x2000066c

08005a90 <failure_processing>:

//### Failure Processing ###
void failure_processing(char failure_ident) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	3b31      	subs	r3, #49	; 0x31
 8005a9e:	2b3c      	cmp	r3, #60	; 0x3c
 8005aa0:	f200 8095 	bhi.w	8005bce <failure_processing+0x13e>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <failure_processing+0x1c>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005bcf 	.word	0x08005bcf
 8005ab0:	08005bcf 	.word	0x08005bcf
 8005ab4:	08005bcf 	.word	0x08005bcf
 8005ab8:	08005bcf 	.word	0x08005bcf
 8005abc:	08005bcf 	.word	0x08005bcf
 8005ac0:	08005bcf 	.word	0x08005bcf
 8005ac4:	08005bcf 	.word	0x08005bcf
 8005ac8:	08005bcf 	.word	0x08005bcf
 8005acc:	08005ba1 	.word	0x08005ba1
 8005ad0:	08005bcf 	.word	0x08005bcf
 8005ad4:	08005bcf 	.word	0x08005bcf
 8005ad8:	08005bcf 	.word	0x08005bcf
 8005adc:	08005bcf 	.word	0x08005bcf
 8005ae0:	08005bcf 	.word	0x08005bcf
 8005ae4:	08005bcf 	.word	0x08005bcf
 8005ae8:	08005bcf 	.word	0x08005bcf
 8005aec:	08005bcf 	.word	0x08005bcf
 8005af0:	08005bcf 	.word	0x08005bcf
 8005af4:	08005bcf 	.word	0x08005bcf
 8005af8:	08005bcf 	.word	0x08005bcf
 8005afc:	08005bcf 	.word	0x08005bcf
 8005b00:	08005bcf 	.word	0x08005bcf
 8005b04:	08005bcf 	.word	0x08005bcf
 8005b08:	08005bcf 	.word	0x08005bcf
 8005b0c:	08005bcf 	.word	0x08005bcf
 8005b10:	08005bcf 	.word	0x08005bcf
 8005b14:	08005bcf 	.word	0x08005bcf
 8005b18:	08005bcf 	.word	0x08005bcf
 8005b1c:	08005bcf 	.word	0x08005bcf
 8005b20:	08005bcf 	.word	0x08005bcf
 8005b24:	08005bcf 	.word	0x08005bcf
 8005b28:	08005bcf 	.word	0x08005bcf
 8005b2c:	08005bcf 	.word	0x08005bcf
 8005b30:	08005bcf 	.word	0x08005bcf
 8005b34:	08005bcf 	.word	0x08005bcf
 8005b38:	08005bcf 	.word	0x08005bcf
 8005b3c:	08005bcf 	.word	0x08005bcf
 8005b40:	08005bcf 	.word	0x08005bcf
 8005b44:	08005bcf 	.word	0x08005bcf
 8005b48:	08005bcf 	.word	0x08005bcf
 8005b4c:	08005bcf 	.word	0x08005bcf
 8005b50:	08005bcf 	.word	0x08005bcf
 8005b54:	08005bcf 	.word	0x08005bcf
 8005b58:	08005bcf 	.word	0x08005bcf
 8005b5c:	08005bcf 	.word	0x08005bcf
 8005b60:	08005bcf 	.word	0x08005bcf
 8005b64:	08005bcf 	.word	0x08005bcf
 8005b68:	08005bcf 	.word	0x08005bcf
 8005b6c:	08005bcf 	.word	0x08005bcf
 8005b70:	08005bcf 	.word	0x08005bcf
 8005b74:	08005bcf 	.word	0x08005bcf
 8005b78:	08005bcf 	.word	0x08005bcf
 8005b7c:	08005bcf 	.word	0x08005bcf
 8005b80:	08005bcf 	.word	0x08005bcf
 8005b84:	08005bcf 	.word	0x08005bcf
 8005b88:	08005bcf 	.word	0x08005bcf
 8005b8c:	08005bcf 	.word	0x08005bcf
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bcf 	.word	0x08005bcf
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bcf 	.word	0x08005bcf
        case '8': {
            break;
        }
        case '9':  // Cam delay
        {
            if (active_cam_failure == 2) {
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <failure_processing+0x148>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d106      	bne.n	8005bb6 <failure_processing+0x126>
                CAM_delay(0);  // for CAM1
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f7fe fee5 	bl	8004978 <CAM_delay>
                CAM_delay(1);  // for CAM2
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7fe fee2 	bl	8004978 <CAM_delay>
            } else if (active_cam_failure == 1) {
                CAM_delay(1);  // for CAM2
            } else {
                CAM_delay(0);  // for CAM1
            }
            break;
 8005bb4:	e00c      	b.n	8005bd0 <failure_processing+0x140>
            } else if (active_cam_failure == 1) {
 8005bb6:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <failure_processing+0x148>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d103      	bne.n	8005bc6 <failure_processing+0x136>
                CAM_delay(1);  // for CAM2
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7fe feda 	bl	8004978 <CAM_delay>
            break;
 8005bc4:	e004      	b.n	8005bd0 <failure_processing+0x140>
                CAM_delay(0);  // for CAM1
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fe fed6 	bl	8004978 <CAM_delay>
            break;
 8005bcc:	e000      	b.n	8005bd0 <failure_processing+0x140>
        }
        case 'm': {
            break;
        }
        default: {
            break;
 8005bce:	bf00      	nop
        }
    }
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000668 	.word	0x20000668

08005bdc <failure_synch_reset>:

//### Failure Synchronization Reset ###
void failure_synch_reset(char failure_ident) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]
    switch (failure_ident) {
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	2b37      	cmp	r3, #55	; 0x37
 8005bea:	d00c      	beq.n	8005c06 <failure_synch_reset+0x2a>
 8005bec:	2b37      	cmp	r3, #55	; 0x37
 8005bee:	dc0d      	bgt.n	8005c0c <failure_synch_reset+0x30>
 8005bf0:	2b34      	cmp	r3, #52	; 0x34
 8005bf2:	d002      	beq.n	8005bfa <failure_synch_reset+0x1e>
 8005bf4:	2b36      	cmp	r3, #54	; 0x36
 8005bf6:	d003      	beq.n	8005c00 <failure_synch_reset+0x24>
            // CAM_DELAY(CAM_TOOTH_OFF)
            CAM_delay_reset();
            break;
        }
        default:
            break;
 8005bf8:	e008      	b.n	8005c0c <failure_synch_reset+0x30>
            CRK_RUN_OUT_reset();
 8005bfa:	f7fe faf3 	bl	80041e4 <CRK_RUN_OUT_reset>
            break;
 8005bfe:	e006      	b.n	8005c0e <failure_synch_reset+0x32>
            CRK_TOOTH_PER_reset();
 8005c00:	f7fe fd86 	bl	8004710 <CRK_TOOTH_PER_reset>
            break;
 8005c04:	e003      	b.n	8005c0e <failure_synch_reset+0x32>
            CAM_delay_reset();
 8005c06:	f7ff fa5b 	bl	80050c0 <CAM_delay_reset>
            break;
 8005c0a:	e000      	b.n	8005c0e <failure_synch_reset+0x32>
            break;
 8005c0c:	bf00      	nop
    }
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <former_teeth_time_calculation>:

//### Former teeth time calculation ###
double former_teeth_time_calculation(long t_tooth, unsigned int teeth_count,
                                     int numb_miss_teeth) {
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
    double form_teeth_time;

    form_teeth_time = (double)t_tooth;
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fa fbee 	bl	8000404 <__aeabi_i2d>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (teeth_count == 1) {
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10e      	bne.n	8005c54 <former_teeth_time_calculation+0x3e>
        form_teeth_time = form_teeth_time / (double)(numb_miss_teeth + 1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fa fbe2 	bl	8000404 <__aeabi_i2d>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c48:	f7fa fd70 	bl	800072c <__aeabi_ddiv>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return (form_teeth_time);
 8005c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <former_teeth_time_calculation_output>:

//### Former teeth time calculation output ###
double former_teeth_time_calculation_output(long t_tooth,
                                            unsigned int teeth_count, int numb_miss_teeth) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
    double form_teeth_time;

    form_teeth_time = (double)t_tooth;
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7fa fbc7 	bl	8000404 <__aeabi_i2d>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (teeth_count == number_teeth_between_gaps) {
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <former_teeth_time_calculation_output+0x50>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d10e      	bne.n	8005ca6 <former_teeth_time_calculation_output+0x42>
        form_teeth_time = form_teeth_time / (double)(numb_miss_teeth + 1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa fbb9 	bl	8000404 <__aeabi_i2d>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c9a:	f7fa fd47 	bl	800072c <__aeabi_ddiv>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return (form_teeth_time);
 8005ca6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000280 	.word	0x20000280

08005cb8 <timestamp_to_digit_array>:
    print_signal(crk_array, crk_index);
    printf("\n---CAM---\n");
    print_signal(cam_array, cam_index);
}

void timestamp_to_digit_array(uint32_t timestamp, uint8_t *array) {
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
    array[3] = timestamp & 0xffU;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
    array[2] = (timestamp & 0xff00U) >> 8;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0a1a      	lsrs	r2, r3, #8
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
    array[1] = (timestamp & 0xff0000U) >> 16;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	0c1a      	lsrs	r2, r3, #16
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
    array[0] = (timestamp & 0xff000000U) >> 24;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0e1b      	lsrs	r3, r3, #24
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <CRK_save>:

uint8_t CRK_save(uint32_t timestamp, uint8_t value) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
    if (crk_array == NULL) {
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <CRK_save+0x7c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <CRK_save+0x26>
        crk_array = malloc(sizeof(uint8_t) * CRK_MAX_SIZE); // 60 KB array for CRK signal
 8005d0c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005d10:	f002 fdfc 	bl	800890c <malloc>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <CRK_save+0x7c>)
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e007      	b.n	8005d2e <CRK_save+0x36>
    } else if (crk_index >= CRK_MAX_SIZE) {
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <CRK_save+0x80>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d26:	4293      	cmp	r3, r2
 8005d28:	dd01      	ble.n	8005d2e <CRK_save+0x36>
        return 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e01e      	b.n	8005d6c <CRK_save+0x74>
    }

    crk_array[crk_index] = value;
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <CRK_save+0x7c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <CRK_save+0x80>)
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	4413      	add	r3, r2
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	701a      	strb	r2, [r3, #0]
    timestamp_to_digit_array(timestamp, crk_array + crk_index + 1);
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <CRK_save+0x7c>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <CRK_save+0x80>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffb4 	bl	8005cb8 <timestamp_to_digit_array>

    crk_index += 5;
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <CRK_save+0x80>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3305      	adds	r3, #5
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <CRK_save+0x80>)
 8005d58:	6013      	str	r3, [r2, #0]
    if (crk_index >= CRK_MAX_SIZE) {
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <CRK_save+0x80>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d62:	4293      	cmp	r3, r2
 8005d64:	dd01      	ble.n	8005d6a <CRK_save+0x72>
        return 1;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <CRK_save+0x74>
    } else {
        return 0;
 8005d6a:	2300      	movs	r3, #0
    }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000af8 	.word	0x20000af8
 8005d78:	20000afc 	.word	0x20000afc

08005d7c <CAM_save>:

uint8_t CAM_save(uint32_t timestamp, uint8_t value) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
    if (cam_array == NULL) {
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <CAM_save+0x7c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <CAM_save+0x26>
        cam_array = malloc(sizeof(uint8_t) * CAM_MAX_SIZE); // 40 KB array for CAM signal
 8005d90:	f649 4040 	movw	r0, #40000	; 0x9c40
 8005d94:	f002 fdba 	bl	800890c <malloc>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <CAM_save+0x7c>)
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e007      	b.n	8005db2 <CAM_save+0x36>
    } else if (cam_index >= CAM_MAX_SIZE) {
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <CAM_save+0x80>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8005daa:	4293      	cmp	r3, r2
 8005dac:	dd01      	ble.n	8005db2 <CAM_save+0x36>
        return 1;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e01e      	b.n	8005df0 <CAM_save+0x74>
    }

    cam_array[cam_index] = value;
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <CAM_save+0x7c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <CAM_save+0x80>)
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	4413      	add	r3, r2
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	701a      	strb	r2, [r3, #0]
    timestamp_to_digit_array(timestamp, cam_array + cam_index + 1);
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <CAM_save+0x7c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <CAM_save+0x80>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff72 	bl	8005cb8 <timestamp_to_digit_array>

    cam_index += 5;
 8005dd4:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <CAM_save+0x80>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3305      	adds	r3, #5
 8005dda:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <CAM_save+0x80>)
 8005ddc:	6013      	str	r3, [r2, #0]
    if (cam_index >= CAM_MAX_SIZE) {
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <CAM_save+0x80>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8005de6:	4293      	cmp	r3, r2
 8005de8:	dd01      	ble.n	8005dee <CAM_save+0x72>
        return 1;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <CAM_save+0x74>
    } else {
        return 0;
 8005dee:	2300      	movs	r3, #0
    }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000b00 	.word	0x20000b00
 8005dfc:	20000b04 	.word	0x20000b04

08005e00 <sync_CRK>:

//### Functions ###

// ## CRK Synchronisation
void sync_CRK(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
    // Set label that indicates engine start
    if (engine_start_counter < engine_start_counter_limit && engine_start == false)
 8005e06:	4b8b      	ldr	r3, [pc, #556]	; (8006034 <sync_CRK+0x234>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b8b      	ldr	r3, [pc, #556]	; (8006038 <sync_CRK+0x238>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d20c      	bcs.n	8005e2c <sync_CRK+0x2c>
 8005e12:	4b8a      	ldr	r3, [pc, #552]	; (800603c <sync_CRK+0x23c>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f083 0301 	eor.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <sync_CRK+0x2c>
    {
        engine_start_counter++;
 8005e20:	4b84      	ldr	r3, [pc, #528]	; (8006034 <sync_CRK+0x234>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	4a83      	ldr	r2, [pc, #524]	; (8006034 <sync_CRK+0x234>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e00c      	b.n	8005e46 <sync_CRK+0x46>
    }
    else if (engine_start == false)
 8005e2c:	4b83      	ldr	r3, [pc, #524]	; (800603c <sync_CRK+0x23c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <sync_CRK+0x46>
    {
        engine_start_counter = 0;
 8005e3a:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <sync_CRK+0x234>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
        engine_start = true;
 8005e40:	4b7e      	ldr	r3, [pc, #504]	; (800603c <sync_CRK+0x23c>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
    }
    teeth_count_overall++;
 8005e46:	4b7e      	ldr	r3, [pc, #504]	; (8006040 <sync_CRK+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	4a7c      	ldr	r2, [pc, #496]	; (8006040 <sync_CRK+0x240>)
 8005e4e:	6013      	str	r3, [r2, #0]

    // Wait for completed start delay
    if ((delay_counter_CRK < start_delay) && delay_off == false)
 8005e50:	4b7c      	ldr	r3, [pc, #496]	; (8006044 <sync_CRK+0x244>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b7c      	ldr	r3, [pc, #496]	; (8006048 <sync_CRK+0x248>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d20c      	bcs.n	8005e76 <sync_CRK+0x76>
 8005e5c:	4b7b      	ldr	r3, [pc, #492]	; (800604c <sync_CRK+0x24c>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <sync_CRK+0x76>
    {
        delay_counter_CRK++;
 8005e6a:	4b76      	ldr	r3, [pc, #472]	; (8006044 <sync_CRK+0x244>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	4a74      	ldr	r2, [pc, #464]	; (8006044 <sync_CRK+0x244>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e00c      	b.n	8005e90 <sync_CRK+0x90>
    }
    else if (delay_off == false)
 8005e76:	4b75      	ldr	r3, [pc, #468]	; (800604c <sync_CRK+0x24c>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f083 0301 	eor.w	r3, r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <sync_CRK+0x90>
    {
        delay_off = true;
 8005e84:	4b71      	ldr	r3, [pc, #452]	; (800604c <sync_CRK+0x24c>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
        delay_counter_CRK = 0;
 8005e8a:	4b6e      	ldr	r3, [pc, #440]	; (8006044 <sync_CRK+0x244>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
    }

    if (delay_off == true)
 8005e90:	4b6e      	ldr	r3, [pc, #440]	; (800604c <sync_CRK+0x24c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 81b4 	beq.w	8006202 <sync_CRK+0x402>
    {
        if (CRK_synch == true)
 8005e9a:	4b6d      	ldr	r3, [pc, #436]	; (8006050 <sync_CRK+0x250>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 8162 	beq.w	8006168 <sync_CRK+0x368>
        {
            // Teeth Counter CRK
            if ((teeth_count_CRK < number_teeth_between_gaps))
 8005ea4:	4b6b      	ldr	r3, [pc, #428]	; (8006054 <sync_CRK+0x254>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b6b      	ldr	r3, [pc, #428]	; (8006058 <sync_CRK+0x258>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d20a      	bcs.n	8005ec6 <sync_CRK+0xc6>
                // 360�CRK for one gap; 180� for two gaps; 120� for three gaps
                // test
                // teeth_count_CRK++;

                // 720�CRK for CAM CRK synchronization
                teeth_count_CAM_CRK_synch++;
 8005eb0:	4b6a      	ldr	r3, [pc, #424]	; (800605c <sync_CRK+0x25c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	4a69      	ldr	r2, [pc, #420]	; (800605c <sync_CRK+0x25c>)
 8005eb8:	6013      	str	r3, [r2, #0]
                teeth_count_CAM_CRK_synch_ahead++;
 8005eba:	4b69      	ldr	r3, [pc, #420]	; (8006060 <sync_CRK+0x260>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	4a67      	ldr	r2, [pc, #412]	; (8006060 <sync_CRK+0x260>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e0e3      	b.n	800608e <sync_CRK+0x28e>
            else
            {
                // test
                // teeth_count_CRK = 1;

                if (segment_counter_CRK == number_segments_CRK && (CAM_CRK_synch_status == true && CAM_CRK_synch_status_ahead == true))
 8005ec6:	4b67      	ldr	r3, [pc, #412]	; (8006064 <sync_CRK+0x264>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b67      	ldr	r3, [pc, #412]	; (8006068 <sync_CRK+0x268>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d163      	bne.n	8005f9a <sync_CRK+0x19a>
 8005ed2:	4b66      	ldr	r3, [pc, #408]	; (800606c <sync_CRK+0x26c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d05f      	beq.n	8005f9a <sync_CRK+0x19a>
 8005eda:	4b65      	ldr	r3, [pc, #404]	; (8006070 <sync_CRK+0x270>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d05b      	beq.n	8005f9a <sync_CRK+0x19a>
                {

                    if (shift_counter_CRK == number_gap - 1)
 8005ee2:	4b64      	ldr	r3, [pc, #400]	; (8006074 <sync_CRK+0x274>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b63      	ldr	r3, [pc, #396]	; (8006078 <sync_CRK+0x278>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10e      	bne.n	8005f10 <sync_CRK+0x110>
                    {
                        shift_counter_CRK = 0;
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <sync_CRK+0x278>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

                        teeth_count_CAM_CRK_synch = 1;
 8005ef8:	4b58      	ldr	r3, [pc, #352]	; (800605c <sync_CRK+0x25c>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
                        teeth_count_CAM_CRK_synch_ahead = 1 + number_teeth_between_gaps + number_miss_teeth;
 8005efe:	4b56      	ldr	r3, [pc, #344]	; (8006058 <sync_CRK+0x258>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a5e      	ldr	r2, [pc, #376]	; (800607c <sync_CRK+0x27c>)
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	4413      	add	r3, r2
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a55      	ldr	r2, [pc, #340]	; (8006060 <sync_CRK+0x260>)
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e004      	b.n	8005f1a <sync_CRK+0x11a>
                    }
                    else
                    {
                        shift_counter_CRK++;
 8005f10:	4b59      	ldr	r3, [pc, #356]	; (8006078 <sync_CRK+0x278>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	4a58      	ldr	r2, [pc, #352]	; (8006078 <sync_CRK+0x278>)
 8005f18:	6013      	str	r3, [r2, #0]
                    }

                    if (shift_counter_CRK == 1)
 8005f1a:	4b57      	ldr	r3, [pc, #348]	; (8006078 <sync_CRK+0x278>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d118      	bne.n	8005f54 <sync_CRK+0x154>
                    {
                        teeth_count_CAM_CRK_synch = 2 * number_teeth_between_gaps + 2 * number_miss_teeth + 1;
 8005f22:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <sync_CRK+0x258>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4a54      	ldr	r2, [pc, #336]	; (800607c <sync_CRK+0x27c>)
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	0052      	lsls	r2, r2, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a4a      	ldr	r2, [pc, #296]	; (800605c <sync_CRK+0x25c>)
 8005f34:	6013      	str	r3, [r2, #0]
                        teeth_count_CAM_CRK_synch_ahead = 3 * number_teeth_between_gaps + 3 * number_miss_teeth + 1;
 8005f36:	4b48      	ldr	r3, [pc, #288]	; (8006058 <sync_CRK+0x258>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	1899      	adds	r1, r3, r2
 8005f40:	4b4e      	ldr	r3, [pc, #312]	; (800607c <sync_CRK+0x27c>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a44      	ldr	r2, [pc, #272]	; (8006060 <sync_CRK+0x260>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e01b      	b.n	8005f8c <sync_CRK+0x18c>
                    }
                    else if (shift_counter_CRK == 2)
 8005f54:	4b48      	ldr	r3, [pc, #288]	; (8006078 <sync_CRK+0x278>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d117      	bne.n	8005f8c <sync_CRK+0x18c>
                    {
                        teeth_count_CAM_CRK_synch = 4 * number_teeth_between_gaps + 4 * number_miss_teeth + 1;
 8005f5c:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <sync_CRK+0x258>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4a46      	ldr	r2, [pc, #280]	; (800607c <sync_CRK+0x27c>)
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	0092      	lsls	r2, r2, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	4a3b      	ldr	r2, [pc, #236]	; (800605c <sync_CRK+0x25c>)
 8005f6e:	6013      	str	r3, [r2, #0]
                        teeth_count_CAM_CRK_synch_ahead = 5 * number_teeth_between_gaps + 5 * number_miss_teeth + 1;
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <sync_CRK+0x258>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	1899      	adds	r1, r3, r2
 8005f7a:	4b40      	ldr	r3, [pc, #256]	; (800607c <sync_CRK+0x27c>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	440b      	add	r3, r1
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a35      	ldr	r2, [pc, #212]	; (8006060 <sync_CRK+0x260>)
 8005f8a:	6013      	str	r3, [r2, #0]
                    }

                    CAM_CRK_synch_status = false;
 8005f8c:	4b37      	ldr	r3, [pc, #220]	; (800606c <sync_CRK+0x26c>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_status_ahead = false;
 8005f92:	4b37      	ldr	r3, [pc, #220]	; (8006070 <sync_CRK+0x270>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e03f      	b.n	800601a <sync_CRK+0x21a>
                }
                else
                {
                    // counter 1
                    if (teeth_count_CAM_CRK_synch == (number_teeth_CRK + number_real_teeth))
 8005f9a:	4b39      	ldr	r3, [pc, #228]	; (8006080 <sync_CRK+0x280>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4b38      	ldr	r3, [pc, #224]	; (8006084 <sync_CRK+0x284>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	; (800605c <sync_CRK+0x25c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d103      	bne.n	8005fb6 <sync_CRK+0x1b6>
                    {
                        teeth_count_CAM_CRK_synch = 1;
 8005fae:	4b2b      	ldr	r3, [pc, #172]	; (800605c <sync_CRK+0x25c>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e011      	b.n	8005fda <sync_CRK+0x1da>
                    }
                    else if (teeth_count_CAM_CRK_synch < (number_teeth_CRK + number_real_teeth))
 8005fb6:	4b32      	ldr	r3, [pc, #200]	; (8006080 <sync_CRK+0x280>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4b31      	ldr	r3, [pc, #196]	; (8006084 <sync_CRK+0x284>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <sync_CRK+0x25c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d907      	bls.n	8005fda <sync_CRK+0x1da>
                    {
                        teeth_count_CAM_CRK_synch = teeth_count_CAM_CRK_synch + number_miss_teeth + 1;
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <sync_CRK+0x25c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2b      	ldr	r2, [pc, #172]	; (800607c <sync_CRK+0x27c>)
 8005fd0:	6812      	ldr	r2, [r2, #0]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <sync_CRK+0x25c>)
 8005fd8:	6013      	str	r3, [r2, #0]
                    }

                    // counter 2
                    if (teeth_count_CAM_CRK_synch_ahead == (number_teeth_CRK + number_real_teeth))
 8005fda:	4b29      	ldr	r3, [pc, #164]	; (8006080 <sync_CRK+0x280>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <sync_CRK+0x284>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <sync_CRK+0x260>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d103      	bne.n	8005ff6 <sync_CRK+0x1f6>
                    {
                        teeth_count_CAM_CRK_synch_ahead = 1;
 8005fee:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <sync_CRK+0x260>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e011      	b.n	800601a <sync_CRK+0x21a>
                    }
                    else if (teeth_count_CAM_CRK_synch_ahead < (number_teeth_CRK + number_real_teeth))
 8005ff6:	4b22      	ldr	r3, [pc, #136]	; (8006080 <sync_CRK+0x280>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <sync_CRK+0x284>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	441a      	add	r2, r3
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <sync_CRK+0x260>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d907      	bls.n	800601a <sync_CRK+0x21a>
                    {
                        teeth_count_CAM_CRK_synch_ahead = teeth_count_CAM_CRK_synch_ahead + number_miss_teeth + 1;
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <sync_CRK+0x260>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1b      	ldr	r2, [pc, #108]	; (800607c <sync_CRK+0x27c>)
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	4413      	add	r3, r2
 8006014:	3301      	adds	r3, #1
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <sync_CRK+0x260>)
 8006018:	6013      	str	r3, [r2, #0]
                    }
                }

                if (segment_counter_CRK < number_segments_CRK)
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <sync_CRK+0x264>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <sync_CRK+0x268>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d230      	bcs.n	8006088 <sync_CRK+0x288>
                {
                    segment_counter_CRK++;
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <sync_CRK+0x264>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <sync_CRK+0x264>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e02d      	b.n	800608e <sync_CRK+0x28e>
 8006032:	bf00      	nop
 8006034:	20000294 	.word	0x20000294
 8006038:	20000004 	.word	0x20000004
 800603c:	200002a5 	.word	0x200002a5
 8006040:	20000660 	.word	0x20000660
 8006044:	20000284 	.word	0x20000284
 8006048:	20000000 	.word	0x20000000
 800604c:	200002a2 	.word	0x200002a2
 8006050:	200002a0 	.word	0x200002a0
 8006054:	20000270 	.word	0x20000270
 8006058:	20000280 	.word	0x20000280
 800605c:	20000274 	.word	0x20000274
 8006060:	20000278 	.word	0x20000278
 8006064:	20000288 	.word	0x20000288
 8006068:	2000028c 	.word	0x2000028c
 800606c:	20000652 	.word	0x20000652
 8006070:	20000653 	.word	0x20000653
 8006074:	20000234 	.word	0x20000234
 8006078:	20000290 	.word	0x20000290
 800607c:	20000230 	.word	0x20000230
 8006080:	2000022c 	.word	0x2000022c
 8006084:	2000027c 	.word	0x2000027c
                }
                else
                {
                    segment_counter_CRK = 1;
 8006088:	4b60      	ldr	r3, [pc, #384]	; (800620c <sync_CRK+0x40c>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
                }
            }

            // Check reference gap in specified range
            if (teeth_count_CRK == 2)
 800608e:	4b60      	ldr	r3, [pc, #384]	; (8006210 <sync_CRK+0x410>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	f040 80a3 	bne.w	80061de <sync_CRK+0x3de>
            {
                // if(!(gap_ratio_CRK_VLD < ((double)(T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(double)(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                // if(!(3 < ((T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                if (T_TOOTH_RAW_1 < T_TOOTH_RAW * 2)
 8006098:	4b5e      	ldr	r3, [pc, #376]	; (8006214 <sync_CRK+0x414>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	005a      	lsls	r2, r3, #1
 800609e:	4b5e      	ldr	r3, [pc, #376]	; (8006218 <sync_CRK+0x418>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f240 809b 	bls.w	80061de <sync_CRK+0x3de>
                // if(!(3 < ((pow(T_TOOTH_RAW_1))/(T_TOOTH_RAW_2 * T_TOOTH_RAW))))
                {
                    CRK_synch = false;
 80060a8:	4b5c      	ldr	r3, [pc, #368]	; (800621c <sync_CRK+0x41c>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]

                    CRK_synch_temp = false;
 80060ae:	4b5c      	ldr	r3, [pc, #368]	; (8006220 <sync_CRK+0x420>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]

                    // Send CRK-sycnhronization status
                    uint8_t msg_CRK_synchronisation_lost = message[4];
 80060b4:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <sync_CRK+0x424>)
 80060b6:	791b      	ldrb	r3, [r3, #4]
 80060b8:	71fb      	strb	r3, [r7, #7]
                    HAL_USART_Transmit_IT(&husart1, &msg_CRK_synchronisation_lost, 1);
 80060ba:	1dfb      	adds	r3, r7, #7
 80060bc:	2201      	movs	r2, #1
 80060be:	4619      	mov	r1, r3
 80060c0:	4859      	ldr	r0, [pc, #356]	; (8006228 <sync_CRK+0x428>)
 80060c2:	f7fd fc94 	bl	80039ee <HAL_USART_Transmit_IT>

                    CRK_CAM_synch[0] = false;
 80060c6:	4b59      	ldr	r3, [pc, #356]	; (800622c <sync_CRK+0x42c>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
                    CRK_CAM_synch[1] = false;
 80060cc:	4b57      	ldr	r3, [pc, #348]	; (800622c <sync_CRK+0x42c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	705a      	strb	r2, [r3, #1]

                    // Send CRK_CAM-sycnhronization status
                    uint8_t msg_CAM_CRK_synchronisation_lost = message[6];
 80060d2:	4b54      	ldr	r3, [pc, #336]	; (8006224 <sync_CRK+0x424>)
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	71bb      	strb	r3, [r7, #6]
                    HAL_USART_Transmit_IT(&husart1, &msg_CAM_CRK_synchronisation_lost , 1);
 80060d8:	1dbb      	adds	r3, r7, #6
 80060da:	2201      	movs	r2, #1
 80060dc:	4619      	mov	r1, r3
 80060de:	4852      	ldr	r0, [pc, #328]	; (8006228 <sync_CRK+0x428>)
 80060e0:	f7fd fc85 	bl	80039ee <HAL_USART_Transmit_IT>

                    // Reset actual failure scenarios
                    failure_synch_reset(failure_identify);
 80060e4:	4b52      	ldr	r3, [pc, #328]	; (8006230 <sync_CRK+0x430>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff fd77 	bl	8005bdc <failure_synch_reset>

                    edge_position_counter_CAM[0] = 0;
 80060ee:	4b51      	ldr	r3, [pc, #324]	; (8006234 <sync_CRK+0x434>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
                    edge_validation_counter_CAM[0] = 0;
 80060f4:	4b50      	ldr	r3, [pc, #320]	; (8006238 <sync_CRK+0x438>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
                    former_edge_position_CAM[0] = 0;
 80060fa:	4b50      	ldr	r3, [pc, #320]	; (800623c <sync_CRK+0x43c>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
                    edge_position_counter_CAM_ahead[0] = 0;
 8006100:	4b4f      	ldr	r3, [pc, #316]	; (8006240 <sync_CRK+0x440>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
                    edge_validation_counter_CAM_ahead[0] = 0;
 8006106:	4b4f      	ldr	r3, [pc, #316]	; (8006244 <sync_CRK+0x444>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
                    former_edge_position_CAM_ahead[0] = 0;
 800610c:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <sync_CRK+0x448>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

                    edge_position_counter_CAM[1] = 0;
 8006112:	4b48      	ldr	r3, [pc, #288]	; (8006234 <sync_CRK+0x434>)
 8006114:	2200      	movs	r2, #0
 8006116:	605a      	str	r2, [r3, #4]
                    edge_validation_counter_CAM[1] = 0;
 8006118:	4b47      	ldr	r3, [pc, #284]	; (8006238 <sync_CRK+0x438>)
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
                    former_edge_position_CAM[1] = 0;
 800611e:	4b47      	ldr	r3, [pc, #284]	; (800623c <sync_CRK+0x43c>)
 8006120:	2200      	movs	r2, #0
 8006122:	605a      	str	r2, [r3, #4]
                    edge_position_counter_CAM_ahead[1] = 0;
 8006124:	4b46      	ldr	r3, [pc, #280]	; (8006240 <sync_CRK+0x440>)
 8006126:	2200      	movs	r2, #0
 8006128:	605a      	str	r2, [r3, #4]
                    edge_validation_counter_CAM_ahead[1] = 0;
 800612a:	4b46      	ldr	r3, [pc, #280]	; (8006244 <sync_CRK+0x444>)
 800612c:	2200      	movs	r2, #0
 800612e:	605a      	str	r2, [r3, #4]
                    former_edge_position_CAM_ahead[1] = 0;
 8006130:	4b45      	ldr	r3, [pc, #276]	; (8006248 <sync_CRK+0x448>)
 8006132:	2200      	movs	r2, #0
 8006134:	605a      	str	r2, [r3, #4]

                    CAM_CRK_synch_status = false;
 8006136:	4b45      	ldr	r3, [pc, #276]	; (800624c <sync_CRK+0x44c>)
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_status_ahead = false;
 800613c:	4b44      	ldr	r3, [pc, #272]	; (8006250 <sync_CRK+0x450>)
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_ahead[0] = false;
 8006142:	4b44      	ldr	r3, [pc, #272]	; (8006254 <sync_CRK+0x454>)
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
                    CAM_CRK_synch_ahead[1] = false;
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <sync_CRK+0x454>)
 800614a:	2200      	movs	r2, #0
 800614c:	705a      	strb	r2, [r3, #1]
                    shift_counter_CRK = 0;
 800614e:	4b42      	ldr	r3, [pc, #264]	; (8006258 <sync_CRK+0x458>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
                    teeth_count_CRK = 0;
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <sync_CRK+0x410>)
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch = 0;
 800615a:	4b40      	ldr	r3, [pc, #256]	; (800625c <sync_CRK+0x45c>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch_ahead = 0;
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <sync_CRK+0x460>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e03a      	b.n	80061de <sync_CRK+0x3de>
            }
        } // CRK_synch == true - END
        else
        {
            // Check reference gap for the first time
            if (synch_times_valid)
 8006168:	4b3e      	ldr	r3, [pc, #248]	; (8006264 <sync_CRK+0x464>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d036      	beq.n	80061de <sync_CRK+0x3de>
            {
                // if(CRK_synch_temp == true && gap_ratio_CRK_VLD < ((double)(T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(double)(T_TOOTH_RAW_2 * T_TOOTH_RAW)))
                // if(CRK_synch_temp == true && 3 < ((T_TOOTH_RAW_1 * T_TOOTH_RAW_1)/(T_TOOTH_RAW_2 * T_TOOTH_RAW)))
                if (CRK_synch_temp == true && (T_TOOTH_RAW_2 < T_TOOTH_RAW_1 * 2))
 8006170:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <sync_CRK+0x420>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d024      	beq.n	80061c2 <sync_CRK+0x3c2>
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <sync_CRK+0x418>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	005a      	lsls	r2, r3, #1
 800617e:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <sync_CRK+0x468>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d91d      	bls.n	80061c2 <sync_CRK+0x3c2>
                {
                    teeth_count_CRK = 2;
 8006186:	4b22      	ldr	r3, [pc, #136]	; (8006210 <sync_CRK+0x410>)
 8006188:	2202      	movs	r2, #2
 800618a:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch = 2;
 800618c:	4b33      	ldr	r3, [pc, #204]	; (800625c <sync_CRK+0x45c>)
 800618e:	2202      	movs	r2, #2
 8006190:	601a      	str	r2, [r3, #0]
                    teeth_count_CAM_CRK_synch_ahead = 2 + number_teeth_between_gaps + number_miss_teeth;
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <sync_CRK+0x46c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	; (8006270 <sync_CRK+0x470>)
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	4413      	add	r3, r2
 800619c:	3302      	adds	r3, #2
 800619e:	4a30      	ldr	r2, [pc, #192]	; (8006260 <sync_CRK+0x460>)
 80061a0:	6013      	str	r3, [r2, #0]
                    segment_counter_CRK = 1;
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <sync_CRK+0x40c>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
                    CRK_synch = true;
 80061a8:	4b1c      	ldr	r3, [pc, #112]	; (800621c <sync_CRK+0x41c>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]

                    // Send CRK-sycnhronization status
                    uint8_t msg_CRK_synchronisation_ready = message[3];
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <sync_CRK+0x424>)
 80061b0:	78db      	ldrb	r3, [r3, #3]
 80061b2:	717b      	strb	r3, [r7, #5]
                    HAL_USART_Transmit_IT(&husart1, &msg_CRK_synchronisation_ready, 1);
 80061b4:	1d7b      	adds	r3, r7, #5
 80061b6:	2201      	movs	r2, #1
 80061b8:	4619      	mov	r1, r3
 80061ba:	481b      	ldr	r0, [pc, #108]	; (8006228 <sync_CRK+0x428>)
 80061bc:	f7fd fc17 	bl	80039ee <HAL_USART_Transmit_IT>
                {
 80061c0:	e002      	b.n	80061c8 <sync_CRK+0x3c8>
                }
                else
                {
                    CRK_synch_temp = false;
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <sync_CRK+0x420>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
                }

                // if(gap_ratio_CRK_DET < ((double)(T_TOOTH_RAW/T_TOOTH_RAW_1)))
                if (2 < ((T_TOOTH_RAW / T_TOOTH_RAW_1)))
 80061c8:	4b12      	ldr	r3, [pc, #72]	; (8006214 <sync_CRK+0x414>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <sync_CRK+0x418>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d902      	bls.n	80061de <sync_CRK+0x3de>
                {
                    CRK_synch_temp = true;
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <sync_CRK+0x420>)
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        // set former tooth times
        T_TOOTH_RAW_2 = T_TOOTH_RAW_1;
 80061de:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <sync_CRK+0x418>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <sync_CRK+0x468>)
 80061e4:	6013      	str	r3, [r2, #0]
        T_TOOTH_RAW_1 = T_TOOTH_RAW;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <sync_CRK+0x414>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <sync_CRK+0x418>)
 80061ec:	6013      	str	r3, [r2, #0]

        if (synch_times_valid == false)
 80061ee:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <sync_CRK+0x464>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f083 0301 	eor.w	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <sync_CRK+0x402>
        {
            synch_times_valid = true;
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <sync_CRK+0x464>)
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
        }

    } // delay_off == true - END
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000288 	.word	0x20000288
 8006210:	20000270 	.word	0x20000270
 8006214:	20000264 	.word	0x20000264
 8006218:	20000260 	.word	0x20000260
 800621c:	200002a0 	.word	0x200002a0
 8006220:	200002a1 	.word	0x200002a1
 8006224:	20000020 	.word	0x20000020
 8006228:	20000ab0 	.word	0x20000ab0
 800622c:	2000065c 	.word	0x2000065c
 8006230:	2000000c 	.word	0x2000000c
 8006234:	200005f8 	.word	0x200005f8
 8006238:	200005f0 	.word	0x200005f0
 800623c:	20000600 	.word	0x20000600
 8006240:	20000610 	.word	0x20000610
 8006244:	20000608 	.word	0x20000608
 8006248:	20000618 	.word	0x20000618
 800624c:	20000652 	.word	0x20000652
 8006250:	20000653 	.word	0x20000653
 8006254:	20000654 	.word	0x20000654
 8006258:	20000290 	.word	0x20000290
 800625c:	20000274 	.word	0x20000274
 8006260:	20000278 	.word	0x20000278
 8006264:	200002a6 	.word	0x200002a6
 8006268:	2000025c 	.word	0x2000025c
 800626c:	20000280 	.word	0x20000280
 8006270:	20000230 	.word	0x20000230

08006274 <sync_CAM_CRK>:

// ## CAM_CRK Synchronisation
void sync_CAM_CRK(int camId)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b096      	sub	sp, #88	; 0x58
 800627a:	af00      	add	r7, sp, #0
 800627c:	6178      	str	r0, [r7, #20]
    // increase CAM edges counter
    if (CAM_tolerance_switch[camId] == false)
 800627e:	4a89      	ldr	r2, [pc, #548]	; (80064a4 <sync_CAM_CRK+0x230>)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4413      	add	r3, r2
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f083 0301 	eor.w	r3, r3, #1
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <sync_CAM_CRK+0x2e>
    {
        edge_count_CAM[camId]++;
 8006290:	4a85      	ldr	r2, [pc, #532]	; (80064a8 <sync_CAM_CRK+0x234>)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	4983      	ldr	r1, [pc, #524]	; (80064a8 <sync_CAM_CRK+0x234>)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // change tolerance window for CAM/CRK synchronization when the edge counter has achieved the defined maximum(10)
    if (edge_count_CAM[camId] > 10)
 80062a2:	4a81      	ldr	r2, [pc, #516]	; (80064a8 <sync_CAM_CRK+0x234>)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062aa:	2b0a      	cmp	r3, #10
 80062ac:	d91a      	bls.n	80062e4 <sync_CAM_CRK+0x70>
    {
        CAM_tolerance_switch[camId] = true;
 80062ae:	4a7d      	ldr	r2, [pc, #500]	; (80064a4 <sync_CAM_CRK+0x230>)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	2201      	movs	r2, #1
 80062b6:	701a      	strb	r2, [r3, #0]
        edge_count_CAM[camId] = 0;
 80062b8:	4a7b      	ldr	r2, [pc, #492]	; (80064a8 <sync_CAM_CRK+0x234>)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2100      	movs	r1, #0
 80062be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        tolerance_window_CAM[camId] = 2.0 * revolution_CRK; // was 1
 80062c2:	4b7a      	ldr	r3, [pc, #488]	; (80064ac <sync_CAM_CRK+0x238>)
 80062c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	f7f9 ff4e 	bl	800016c <__adddf3>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	4a75      	ldr	r2, [pc, #468]	; (80064b0 <sync_CAM_CRK+0x23c>)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4413      	add	r3, r2
 80062e0:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // execute CAM_CRK synchronization if CRK synchronization is done
    if (CRK_synch == true)
 80062e4:	4b73      	ldr	r3, [pc, #460]	; (80064b4 <sync_CAM_CRK+0x240>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 838a 	beq.w	8006a02 <sync_CAM_CRK+0x78e>
    {
        if (CRK_CAM_synch[camId] == false) // CAM_CRK synchronization
 80062ee:	4a72      	ldr	r2, [pc, #456]	; (80064b8 <sync_CAM_CRK+0x244>)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f083 0301 	eor.w	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8380 	beq.w	8006a02 <sync_CAM_CRK+0x78e>
        {
            // CAM_CRK_synch_ahead[camId] = true;
            // CAM_CRK_synch_set(camId);

            // CAM_CRK synchronization for both active edges(falling edge)
            if (CAM_signal[camId] == false && active_CAM_edges[camId] == 'b')
 8006302:	4a6e      	ldr	r2, [pc, #440]	; (80064bc <sync_CAM_CRK+0x248>)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f083 0301 	eor.w	r3, r3, #1
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8193 	beq.w	800663c <sync_CAM_CRK+0x3c8>
 8006316:	4a6a      	ldr	r2, [pc, #424]	; (80064c0 <sync_CAM_CRK+0x24c>)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b62      	cmp	r3, #98	; 0x62
 8006320:	f040 818c 	bne.w	800663c <sync_CAM_CRK+0x3c8>
            {
                gap_to_edge_calculation();
 8006324:	f000 fe10 	bl	8006f48 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 0; j < number_teeth_CAM[camId] * 2; j += 2)
 8006328:	2300      	movs	r3, #0
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	e0a3      	b.n	8006476 <sync_CAM_CRK+0x202>
                {

                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 800632e:	4965      	ldr	r1, [pc, #404]	; (80064c4 <sync_CAM_CRK+0x250>)
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4613      	mov	r3, r2
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	4413      	add	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	440b      	add	r3, r1
 8006342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006346:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <sync_CAM_CRK+0x254>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff0c 	bl	8000168 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 8006358:	4a55      	ldr	r2, [pc, #340]	; (80064b0 <sync_CAM_CRK+0x23c>)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4413      	add	r3, r2
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006368:	f7fa fb28 	bl	80009bc <__aeabi_dcmplt>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d072      	beq.n	8006458 <sync_CAM_CRK+0x1e4>
 8006372:	4a4f      	ldr	r2, [pc, #316]	; (80064b0 <sync_CAM_CRK+0x23c>)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	4614      	mov	r4, r2
 8006380:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006384:	4622      	mov	r2, r4
 8006386:	462b      	mov	r3, r5
 8006388:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800638c:	f7fa fb34 	bl	80009f8 <__aeabi_dcmpgt>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d060      	beq.n	8006458 <sync_CAM_CRK+0x1e4>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	3301      	adds	r3, #1
 800639a:	4619      	mov	r1, r3
 800639c:	4a4b      	ldr	r2, [pc, #300]	; (80064cc <sync_CAM_CRK+0x258>)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if ((edge_validation_counter_CAM_ahead[camId] == number_teeth_CAM[camId] * 2) && (edge_position_counter_CAM_ahead[camId] == 1) && (former_edge_position_CAM_ahead[camId] == (number_teeth_CAM[camId] * 2)))
 80063a4:	4a4a      	ldr	r2, [pc, #296]	; (80064d0 <sync_CAM_CRK+0x25c>)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ac:	4949      	ldr	r1, [pc, #292]	; (80064d4 <sync_CAM_CRK+0x260>)
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d119      	bne.n	80063ee <sync_CAM_CRK+0x17a>
 80063ba:	4a44      	ldr	r2, [pc, #272]	; (80064cc <sync_CAM_CRK+0x258>)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d113      	bne.n	80063ee <sync_CAM_CRK+0x17a>
 80063c6:	4a44      	ldr	r2, [pc, #272]	; (80064d8 <sync_CAM_CRK+0x264>)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ce:	4941      	ldr	r1, [pc, #260]	; (80064d4 <sync_CAM_CRK+0x260>)
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80063d6:	0052      	lsls	r2, r2, #1
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <sync_CAM_CRK+0x17a>
                        {
                            CAM_CRK_synch_ahead[camId] = true;
 80063dc:	4a3f      	ldr	r2, [pc, #252]	; (80064dc <sync_CAM_CRK+0x268>)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4413      	add	r3, r2
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]

                            CAM_CRK_synch_set(camId);
 80063e6:	6978      	ldr	r0, [r7, #20]
 80063e8:	f000 fe74 	bl	80070d4 <CAM_CRK_synch_set>

                            break;
 80063ec:	e04c      	b.n	8006488 <sync_CAM_CRK+0x214>
                        }

                        if (edge_position_counter_CAM_ahead[camId] == 1)
 80063ee:	4a37      	ldr	r2, [pc, #220]	; (80064cc <sync_CAM_CRK+0x258>)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <sync_CAM_CRK+0x192>
                        {
                            edge_validation_counter_CAM_ahead[camId] = 1;
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <sync_CAM_CRK+0x25c>)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2101      	movs	r1, #1
 8006400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006404:	e01f      	b.n	8006446 <sync_CAM_CRK+0x1d2>
                        }
                        else if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1) && (edge_validation_counter_CAM_ahead[camId] != 1))
 8006406:	4a32      	ldr	r2, [pc, #200]	; (80064d0 <sync_CAM_CRK+0x25c>)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d019      	beq.n	8006446 <sync_CAM_CRK+0x1d2>
 8006412:	4a31      	ldr	r2, [pc, #196]	; (80064d8 <sync_CAM_CRK+0x264>)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800641a:	492c      	ldr	r1, [pc, #176]	; (80064cc <sync_CAM_CRK+0x258>)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006422:	3b01      	subs	r3, #1
 8006424:	429a      	cmp	r2, r3
 8006426:	d10e      	bne.n	8006446 <sync_CAM_CRK+0x1d2>
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <sync_CAM_CRK+0x25c>)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d008      	beq.n	8006446 <sync_CAM_CRK+0x1d2>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 8006434:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <sync_CAM_CRK+0x25c>)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	4924      	ldr	r1, [pc, #144]	; (80064d0 <sync_CAM_CRK+0x25c>)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 8006446:	4a21      	ldr	r2, [pc, #132]	; (80064cc <sync_CAM_CRK+0x258>)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800644e:	4922      	ldr	r1, [pc, #136]	; (80064d8 <sync_CAM_CRK+0x264>)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 8006456:	e017      	b.n	8006488 <sync_CAM_CRK+0x214>
                    }

                    else if (j == (number_teeth_CAM[camId] * 2 - 2))
 8006458:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <sync_CAM_CRK+0x260>)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006460:	3b01      	subs	r3, #1
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006466:	429a      	cmp	r2, r3
 8006468:	d102      	bne.n	8006470 <sync_CAM_CRK+0x1fc>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f000 fe0e 	bl	800708c <CAM_CRK_synch_ahead_reset>
                for (j = 0; j < number_teeth_CAM[camId] * 2; j += 2)
 8006470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006472:	3302      	adds	r3, #2
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006476:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <sync_CAM_CRK+0x260>)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006482:	429a      	cmp	r2, r3
 8006484:	f6ff af53 	blt.w	800632e <sync_CAM_CRK+0xba>
                    }
                }

                // counter 1
                if (CRK_CAM_synch[camId] == false)
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <sync_CAM_CRK+0x244>)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f083 0301 	eor.w	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80d0 	beq.w	800663c <sync_CAM_CRK+0x3c8>
                {

                    for (i = 0; i < number_teeth_CAM[camId] * 2; i += 2)
 800649c:	2300      	movs	r3, #0
 800649e:	647b      	str	r3, [r7, #68]	; 0x44
 80064a0:	e0c3      	b.n	800662a <sync_CAM_CRK+0x3b6>
 80064a2:	bf00      	nop
 80064a4:	20000650 	.word	0x20000650
 80064a8:	200005e8 	.word	0x200005e8
 80064ac:	20000298 	.word	0x20000298
 80064b0:	20000640 	.word	0x20000640
 80064b4:	200002a0 	.word	0x200002a0
 80064b8:	2000065c 	.word	0x2000065c
 80064bc:	20000658 	.word	0x20000658
 80064c0:	200005d8 	.word	0x200005d8
 80064c4:	20000448 	.word	0x20000448
 80064c8:	20000628 	.word	0x20000628
 80064cc:	20000610 	.word	0x20000610
 80064d0:	20000608 	.word	0x20000608
 80064d4:	200002b0 	.word	0x200002b0
 80064d8:	20000618 	.word	0x20000618
 80064dc:	20000654 	.word	0x20000654
                    {
                        difference = distance_gap_to_CAM_edge[camId][i] - gap_to_edge;
 80064e0:	499c      	ldr	r1, [pc, #624]	; (8006754 <sync_CAM_CRK+0x4e0>)
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064f8:	4b97      	ldr	r3, [pc, #604]	; (8006758 <sync_CAM_CRK+0x4e4>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7f9 fe33 	bl	8000168 <__aeabi_dsub>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

                        if ((difference < tolerance_window_CAM[camId]) && (difference > -tolerance_window_CAM[camId]))
 800650a:	4a94      	ldr	r2, [pc, #592]	; (800675c <sync_CAM_CRK+0x4e8>)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800651a:	f7fa fa4f 	bl	80009bc <__aeabi_dcmplt>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d073      	beq.n	800660c <sync_CAM_CRK+0x398>
 8006524:	4a8d      	ldr	r2, [pc, #564]	; (800675c <sync_CAM_CRK+0x4e8>)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	60ba      	str	r2, [r7, #8]
 8006532:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006540:	f7fa fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d060      	beq.n	800660c <sync_CAM_CRK+0x398>
                        {
                            edge_position_counter_CAM[camId] = i + 1;
 800654a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654c:	3301      	adds	r3, #1
 800654e:	4619      	mov	r1, r3
 8006550:	4a83      	ldr	r2, [pc, #524]	; (8006760 <sync_CAM_CRK+0x4ec>)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                            if ((edge_validation_counter_CAM[camId] == number_teeth_CAM[camId] * 2) && (edge_position_counter_CAM[camId] == 1) && (former_edge_position_CAM[camId] == (number_teeth_CAM[camId] * 2)))
 8006558:	4a82      	ldr	r2, [pc, #520]	; (8006764 <sync_CAM_CRK+0x4f0>)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006560:	4981      	ldr	r1, [pc, #516]	; (8006768 <sync_CAM_CRK+0x4f4>)
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006568:	0052      	lsls	r2, r2, #1
 800656a:	4293      	cmp	r3, r2
 800656c:	d119      	bne.n	80065a2 <sync_CAM_CRK+0x32e>
 800656e:	4a7c      	ldr	r2, [pc, #496]	; (8006760 <sync_CAM_CRK+0x4ec>)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d113      	bne.n	80065a2 <sync_CAM_CRK+0x32e>
 800657a:	4a7c      	ldr	r2, [pc, #496]	; (800676c <sync_CAM_CRK+0x4f8>)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006582:	4979      	ldr	r1, [pc, #484]	; (8006768 <sync_CAM_CRK+0x4f4>)
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800658a:	0052      	lsls	r2, r2, #1
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <sync_CAM_CRK+0x32e>
                            {
                                CAM_CRK_synch_ahead[camId] = false;
 8006590:	4a77      	ldr	r2, [pc, #476]	; (8006770 <sync_CAM_CRK+0x4fc>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]

                                CAM_CRK_synch_set(camId);
 800659a:	6978      	ldr	r0, [r7, #20]
 800659c:	f000 fd9a 	bl	80070d4 <CAM_CRK_synch_set>

                                break;
 80065a0:	e04c      	b.n	800663c <sync_CAM_CRK+0x3c8>
                            }

                            if (edge_position_counter_CAM[camId] == 1)
 80065a2:	4a6f      	ldr	r2, [pc, #444]	; (8006760 <sync_CAM_CRK+0x4ec>)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <sync_CAM_CRK+0x346>
                            {
                                edge_validation_counter_CAM[camId] = 1;
 80065ae:	4a6d      	ldr	r2, [pc, #436]	; (8006764 <sync_CAM_CRK+0x4f0>)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2101      	movs	r1, #1
 80065b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80065b8:	e01f      	b.n	80065fa <sync_CAM_CRK+0x386>
                            }
                            else if (edge_validation_counter_CAM[camId] > 0 && (former_edge_position_CAM[camId] == edge_position_counter_CAM[camId] - 1) && (edge_validation_counter_CAM[camId] != 1))
 80065ba:	4a6a      	ldr	r2, [pc, #424]	; (8006764 <sync_CAM_CRK+0x4f0>)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d019      	beq.n	80065fa <sync_CAM_CRK+0x386>
 80065c6:	4a69      	ldr	r2, [pc, #420]	; (800676c <sync_CAM_CRK+0x4f8>)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065ce:	4964      	ldr	r1, [pc, #400]	; (8006760 <sync_CAM_CRK+0x4ec>)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	429a      	cmp	r2, r3
 80065da:	d10e      	bne.n	80065fa <sync_CAM_CRK+0x386>
 80065dc:	4a61      	ldr	r2, [pc, #388]	; (8006764 <sync_CAM_CRK+0x4f0>)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d008      	beq.n	80065fa <sync_CAM_CRK+0x386>
                            {
                                edge_validation_counter_CAM[camId]++;
 80065e8:	4a5e      	ldr	r2, [pc, #376]	; (8006764 <sync_CAM_CRK+0x4f0>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	495c      	ldr	r1, [pc, #368]	; (8006764 <sync_CAM_CRK+0x4f0>)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                            }

                            former_edge_position_CAM[camId] = edge_position_counter_CAM[camId];
 80065fa:	4a59      	ldr	r2, [pc, #356]	; (8006760 <sync_CAM_CRK+0x4ec>)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006602:	495a      	ldr	r1, [pc, #360]	; (800676c <sync_CAM_CRK+0x4f8>)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                            break;
 800660a:	e017      	b.n	800663c <sync_CAM_CRK+0x3c8>
                        }

                        else if (i == (number_teeth_CAM[camId] * 2 - 2))
 800660c:	4a56      	ldr	r2, [pc, #344]	; (8006768 <sync_CAM_CRK+0x4f4>)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006614:	3b01      	subs	r3, #1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661a:	429a      	cmp	r2, r3
 800661c:	d102      	bne.n	8006624 <sync_CAM_CRK+0x3b0>
                        {
                            CAM_CRK_synch_reset(camId);
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f000 fd10 	bl	8007044 <CAM_CRK_synch_reset>
                    for (i = 0; i < number_teeth_CAM[camId] * 2; i += 2)
 8006624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006626:	3302      	adds	r3, #2
 8006628:	647b      	str	r3, [r7, #68]	; 0x44
 800662a:	4a4f      	ldr	r2, [pc, #316]	; (8006768 <sync_CAM_CRK+0x4f4>)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006636:	429a      	cmp	r2, r3
 8006638:	f6ff af52 	blt.w	80064e0 <sync_CAM_CRK+0x26c>
                    }
                }
            }

            // CAM CRK synchronization for both active edges(rising edge)
            if (CAM_signal[camId] == true && active_CAM_edges[camId] == 'b')
 800663c:	4a4d      	ldr	r2, [pc, #308]	; (8006774 <sync_CAM_CRK+0x500>)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8116 	beq.w	8006876 <sync_CAM_CRK+0x602>
 800664a:	4a4b      	ldr	r2, [pc, #300]	; (8006778 <sync_CAM_CRK+0x504>)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4413      	add	r3, r2
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b62      	cmp	r3, #98	; 0x62
 8006654:	f040 810f 	bne.w	8006876 <sync_CAM_CRK+0x602>
            {
                gap_to_edge_calculation();
 8006658:	f000 fc76 	bl	8006f48 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 1; j < number_teeth_CAM[camId] * 2; j += 2)
 800665c:	2301      	movs	r3, #1
 800665e:	653b      	str	r3, [r7, #80]	; 0x50
 8006660:	e06d      	b.n	800673e <sync_CAM_CRK+0x4ca>
                {
                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 8006662:	493c      	ldr	r1, [pc, #240]	; (8006754 <sync_CAM_CRK+0x4e0>)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4613      	mov	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4413      	add	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006670:	4413      	add	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	440b      	add	r3, r1
 8006676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800667a:	4b40      	ldr	r3, [pc, #256]	; (800677c <sync_CAM_CRK+0x508>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 fd72 	bl	8000168 <__aeabi_dsub>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 800668c:	4a33      	ldr	r2, [pc, #204]	; (800675c <sync_CAM_CRK+0x4e8>)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800669c:	f7fa f98e 	bl	80009bc <__aeabi_dcmplt>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03c      	beq.n	8006720 <sync_CAM_CRK+0x4ac>
 80066a6:	4a2d      	ldr	r2, [pc, #180]	; (800675c <sync_CAM_CRK+0x4e8>)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	4413      	add	r3, r2
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	603a      	str	r2, [r7, #0]
 80066b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066c2:	f7fa f999 	bl	80009f8 <__aeabi_dcmpgt>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d029      	beq.n	8006720 <sync_CAM_CRK+0x4ac>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 80066cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ce:	3301      	adds	r3, #1
 80066d0:	4619      	mov	r1, r3
 80066d2:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <sync_CAM_CRK+0x50c>)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1))
 80066da:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <sync_CAM_CRK+0x510>)
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <sync_CAM_CRK+0x49a>
 80066e6:	4a28      	ldr	r2, [pc, #160]	; (8006788 <sync_CAM_CRK+0x514>)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066ee:	4924      	ldr	r1, [pc, #144]	; (8006780 <sync_CAM_CRK+0x50c>)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d108      	bne.n	800670e <sync_CAM_CRK+0x49a>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 80066fc:	4a21      	ldr	r2, [pc, #132]	; (8006784 <sync_CAM_CRK+0x510>)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	491f      	ldr	r1, [pc, #124]	; (8006784 <sync_CAM_CRK+0x510>)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <sync_CAM_CRK+0x50c>)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006716:	491c      	ldr	r1, [pc, #112]	; (8006788 <sync_CAM_CRK+0x514>)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 800671e:	e016      	b.n	800674e <sync_CAM_CRK+0x4da>
                    }
                    else if (j > (number_teeth_CAM[camId] * 2 - 2))
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <sync_CAM_CRK+0x4f4>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006728:	3b01      	subs	r3, #1
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800672e:	429a      	cmp	r2, r3
 8006730:	dd02      	ble.n	8006738 <sync_CAM_CRK+0x4c4>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 8006732:	6978      	ldr	r0, [r7, #20]
 8006734:	f000 fcaa 	bl	800708c <CAM_CRK_synch_ahead_reset>
                for (j = 1; j < number_teeth_CAM[camId] * 2; j += 2)
 8006738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673a:	3302      	adds	r3, #2
 800673c:	653b      	str	r3, [r7, #80]	; 0x50
 800673e:	4a0a      	ldr	r2, [pc, #40]	; (8006768 <sync_CAM_CRK+0x4f4>)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800674a:	429a      	cmp	r2, r3
 800674c:	db89      	blt.n	8006662 <sync_CAM_CRK+0x3ee>
                    }
                }

                // counter 1
                for (i = 1; i < number_teeth_CAM[camId] * 2; i += 2)
 800674e:	2301      	movs	r3, #1
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
 8006752:	e088      	b.n	8006866 <sync_CAM_CRK+0x5f2>
 8006754:	20000448 	.word	0x20000448
 8006758:	20000620 	.word	0x20000620
 800675c:	20000640 	.word	0x20000640
 8006760:	200005f8 	.word	0x200005f8
 8006764:	200005f0 	.word	0x200005f0
 8006768:	200002b0 	.word	0x200002b0
 800676c:	20000600 	.word	0x20000600
 8006770:	20000654 	.word	0x20000654
 8006774:	20000658 	.word	0x20000658
 8006778:	200005d8 	.word	0x200005d8
 800677c:	20000628 	.word	0x20000628
 8006780:	20000610 	.word	0x20000610
 8006784:	20000608 	.word	0x20000608
 8006788:	20000618 	.word	0x20000618
                {
                    difference = distance_gap_to_CAM_edge[camId][i] - gap_to_edge;
 800678c:	499f      	ldr	r1, [pc, #636]	; (8006a0c <sync_CAM_CRK+0x798>)
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679a:	4413      	add	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	440b      	add	r3, r1
 80067a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067a4:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <sync_CAM_CRK+0x79c>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fcdd 	bl	8000168 <__aeabi_dsub>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	e9c7 2308 	strd	r2, r3, [r7, #32]

                    if ((difference < tolerance_window_CAM[camId]) && (difference > -tolerance_window_CAM[camId]))
 80067b6:	4a97      	ldr	r2, [pc, #604]	; (8006a14 <sync_CAM_CRK+0x7a0>)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80067c6:	f7fa f8f9 	bl	80009bc <__aeabi_dcmplt>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03b      	beq.n	8006848 <sync_CAM_CRK+0x5d4>
 80067d0:	4a90      	ldr	r2, [pc, #576]	; (8006a14 <sync_CAM_CRK+0x7a0>)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	4692      	mov	sl, r2
 80067de:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80067e2:	4652      	mov	r2, sl
 80067e4:	465b      	mov	r3, fp
 80067e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80067ea:	f7fa f905 	bl	80009f8 <__aeabi_dcmpgt>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d029      	beq.n	8006848 <sync_CAM_CRK+0x5d4>
                    {
                        edge_position_counter_CAM[camId] = i + 1;
 80067f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f6:	3301      	adds	r3, #1
 80067f8:	4619      	mov	r1, r3
 80067fa:	4a87      	ldr	r2, [pc, #540]	; (8006a18 <sync_CAM_CRK+0x7a4>)
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if (edge_validation_counter_CAM[camId] > 0 && (former_edge_position_CAM[camId] == edge_position_counter_CAM[camId] - 1))
 8006802:	4a86      	ldr	r2, [pc, #536]	; (8006a1c <sync_CAM_CRK+0x7a8>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d013      	beq.n	8006836 <sync_CAM_CRK+0x5c2>
 800680e:	4a84      	ldr	r2, [pc, #528]	; (8006a20 <sync_CAM_CRK+0x7ac>)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006816:	4980      	ldr	r1, [pc, #512]	; (8006a18 <sync_CAM_CRK+0x7a4>)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800681e:	3b01      	subs	r3, #1
 8006820:	429a      	cmp	r2, r3
 8006822:	d108      	bne.n	8006836 <sync_CAM_CRK+0x5c2>
                        {
                            edge_validation_counter_CAM[camId]++;
 8006824:	4a7d      	ldr	r2, [pc, #500]	; (8006a1c <sync_CAM_CRK+0x7a8>)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	497b      	ldr	r1, [pc, #492]	; (8006a1c <sync_CAM_CRK+0x7a8>)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM[camId] = edge_position_counter_CAM[camId];
 8006836:	4a78      	ldr	r2, [pc, #480]	; (8006a18 <sync_CAM_CRK+0x7a4>)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800683e:	4978      	ldr	r1, [pc, #480]	; (8006a20 <sync_CAM_CRK+0x7ac>)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 8006846:	e016      	b.n	8006876 <sync_CAM_CRK+0x602>
                    }

                    else if (i > (number_teeth_CAM[camId] * 2 - 2))
 8006848:	4a76      	ldr	r2, [pc, #472]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	3b01      	subs	r3, #1
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006856:	429a      	cmp	r2, r3
 8006858:	dd02      	ble.n	8006860 <sync_CAM_CRK+0x5ec>
                    {
                        CAM_CRK_synch_reset(camId);
 800685a:	6978      	ldr	r0, [r7, #20]
 800685c:	f000 fbf2 	bl	8007044 <CAM_CRK_synch_reset>
                for (i = 1; i < number_teeth_CAM[camId] * 2; i += 2)
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	3302      	adds	r3, #2
 8006864:	64bb      	str	r3, [r7, #72]	; 0x48
 8006866:	4a6f      	ldr	r2, [pc, #444]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006872:	429a      	cmp	r2, r3
 8006874:	db8a      	blt.n	800678c <sync_CAM_CRK+0x518>
                    }
                }
            }

            // CAM CRK synchronization for either falling or rising active edges
            if ((CAM_signal[camId] == true && active_CAM_edges[camId] == 'r') || (CAM_signal[camId] == false && active_CAM_edges[camId] == 'f'))
 8006876:	4a6c      	ldr	r2, [pc, #432]	; (8006a28 <sync_CAM_CRK+0x7b4>)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <sync_CAM_CRK+0x61a>
 8006882:	4a6a      	ldr	r2, [pc, #424]	; (8006a2c <sync_CAM_CRK+0x7b8>)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b72      	cmp	r3, #114	; 0x72
 800688c:	d010      	beq.n	80068b0 <sync_CAM_CRK+0x63c>
 800688e:	4a66      	ldr	r2, [pc, #408]	; (8006a28 <sync_CAM_CRK+0x7b4>)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f083 0301 	eor.w	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80b0 	beq.w	8006a02 <sync_CAM_CRK+0x78e>
 80068a2:	4a62      	ldr	r2, [pc, #392]	; (8006a2c <sync_CAM_CRK+0x7b8>)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b66      	cmp	r3, #102	; 0x66
 80068ac:	f040 80a9 	bne.w	8006a02 <sync_CAM_CRK+0x78e>
            {
                gap_to_edge_calculation();
 80068b0:	f000 fb4a 	bl	8006f48 <gap_to_edge_calculation>

                double difference;
                double difference_ahead;

                // counter 2
                for (j = 0; j < number_teeth_CAM[camId]; j++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	657b      	str	r3, [r7, #84]	; 0x54
 80068b8:	e09a      	b.n	80069f0 <sync_CAM_CRK+0x77c>
                {
                    difference_ahead = distance_gap_to_CAM_edge[camId][j] - gap_to_edge_ahead;
 80068ba:	4954      	ldr	r1, [pc, #336]	; (8006a0c <sync_CAM_CRK+0x798>)
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068c8:	4413      	add	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	440b      	add	r3, r1
 80068ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068d2:	4b57      	ldr	r3, [pc, #348]	; (8006a30 <sync_CAM_CRK+0x7bc>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9c7 2306 	strd	r2, r3, [r7, #24]

                    if ((difference_ahead < tolerance_window_CAM[camId]) && (difference_ahead > -tolerance_window_CAM[camId]))
 80068e4:	4a4b      	ldr	r2, [pc, #300]	; (8006a14 <sync_CAM_CRK+0x7a0>)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068f4:	f7fa f862 	bl	80009bc <__aeabi_dcmplt>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d06a      	beq.n	80069d4 <sync_CAM_CRK+0x760>
 80068fe:	4a45      	ldr	r2, [pc, #276]	; (8006a14 <sync_CAM_CRK+0x7a0>)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	4690      	mov	r8, r2
 800690c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006910:	4642      	mov	r2, r8
 8006912:	464b      	mov	r3, r9
 8006914:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006918:	f7fa f86e 	bl	80009f8 <__aeabi_dcmpgt>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d058      	beq.n	80069d4 <sync_CAM_CRK+0x760>
                    {
                        edge_position_counter_CAM_ahead[camId] = j + 1;
 8006922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006924:	3301      	adds	r3, #1
 8006926:	4619      	mov	r1, r3
 8006928:	4a42      	ldr	r2, [pc, #264]	; (8006a34 <sync_CAM_CRK+0x7c0>)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                        if ((edge_validation_counter_CAM_ahead[camId] == number_teeth_CAM[camId]) && (edge_position_counter_CAM_ahead[camId] == 1) && (former_edge_position_CAM_ahead[camId] == number_teeth_CAM[camId]))
 8006930:	4a41      	ldr	r2, [pc, #260]	; (8006a38 <sync_CAM_CRK+0x7c4>)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006938:	493a      	ldr	r1, [pc, #232]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006940:	4293      	cmp	r3, r2
 8006942:	d118      	bne.n	8006976 <sync_CAM_CRK+0x702>
 8006944:	4a3b      	ldr	r2, [pc, #236]	; (8006a34 <sync_CAM_CRK+0x7c0>)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d112      	bne.n	8006976 <sync_CAM_CRK+0x702>
 8006950:	4a3a      	ldr	r2, [pc, #232]	; (8006a3c <sync_CAM_CRK+0x7c8>)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006958:	4932      	ldr	r1, [pc, #200]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <sync_CAM_CRK+0x702>
                        {
                            CAM_CRK_synch_ahead[camId] = true;
 8006964:	4a36      	ldr	r2, [pc, #216]	; (8006a40 <sync_CAM_CRK+0x7cc>)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	2201      	movs	r2, #1
 800696c:	701a      	strb	r2, [r3, #0]

                            CAM_CRK_synch_set(camId);
 800696e:	6978      	ldr	r0, [r7, #20]
 8006970:	f000 fbb0 	bl	80070d4 <CAM_CRK_synch_set>

                            break;
 8006974:	e045      	b.n	8006a02 <sync_CAM_CRK+0x78e>
                        }

                        if (edge_position_counter_CAM_ahead[camId] == 1)
 8006976:	4a2f      	ldr	r2, [pc, #188]	; (8006a34 <sync_CAM_CRK+0x7c0>)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <sync_CAM_CRK+0x71a>
                        {
                            edge_validation_counter_CAM_ahead[camId] = 1;
 8006982:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <sync_CAM_CRK+0x7c4>)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2101      	movs	r1, #1
 8006988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800698c:	e019      	b.n	80069c2 <sync_CAM_CRK+0x74e>
                        }
                        else if (edge_validation_counter_CAM_ahead[camId] > 0 && (former_edge_position_CAM_ahead[camId] == edge_position_counter_CAM_ahead[camId] - 1))
 800698e:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <sync_CAM_CRK+0x7c4>)
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d013      	beq.n	80069c2 <sync_CAM_CRK+0x74e>
 800699a:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <sync_CAM_CRK+0x7c8>)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069a2:	4924      	ldr	r1, [pc, #144]	; (8006a34 <sync_CAM_CRK+0x7c0>)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d108      	bne.n	80069c2 <sync_CAM_CRK+0x74e>
                        {
                            edge_validation_counter_CAM_ahead[camId]++;
 80069b0:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <sync_CAM_CRK+0x7c4>)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	491f      	ldr	r1, [pc, #124]	; (8006a38 <sync_CAM_CRK+0x7c4>)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        }

                        former_edge_position_CAM_ahead[camId] = edge_position_counter_CAM_ahead[camId];
 80069c2:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <sync_CAM_CRK+0x7c0>)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069ca:	491c      	ldr	r1, [pc, #112]	; (8006a3c <sync_CAM_CRK+0x7c8>)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                        break;
 80069d2:	e016      	b.n	8006a02 <sync_CAM_CRK+0x78e>
                    }

                    else if (j == (number_teeth_CAM[camId] - 1))
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069dc:	3b01      	subs	r3, #1
 80069de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d102      	bne.n	80069ea <sync_CAM_CRK+0x776>
                    {
                        CAM_CRK_synch_ahead_reset(camId);
 80069e4:	6978      	ldr	r0, [r7, #20]
 80069e6:	f000 fb51 	bl	800708c <CAM_CRK_synch_ahead_reset>
                for (j = 0; j < number_teeth_CAM[camId]; j++)
 80069ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ec:	3301      	adds	r3, #1
 80069ee:	657b      	str	r3, [r7, #84]	; 0x54
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <sync_CAM_CRK+0x7b0>)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069fa:	429a      	cmp	r2, r3
 80069fc:	f6ff af5d 	blt.w	80068ba <sync_CAM_CRK+0x646>
                }
            }

        } // CRK_CAM_synch[camId] == false - END
    }     // CRK_synch == true - END
}
 8006a00:	e7ff      	b.n	8006a02 <sync_CAM_CRK+0x78e>
 8006a02:	bf00      	nop
 8006a04:	3758      	adds	r7, #88	; 0x58
 8006a06:	46bd      	mov	sp, r7
 8006a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0c:	20000448 	.word	0x20000448
 8006a10:	20000620 	.word	0x20000620
 8006a14:	20000640 	.word	0x20000640
 8006a18:	200005f8 	.word	0x200005f8
 8006a1c:	200005f0 	.word	0x200005f0
 8006a20:	20000600 	.word	0x20000600
 8006a24:	200002b0 	.word	0x200002b0
 8006a28:	20000658 	.word	0x20000658
 8006a2c:	200005d8 	.word	0x200005d8
 8006a30:	20000628 	.word	0x20000628
 8006a34:	20000610 	.word	0x20000610
 8006a38:	20000608 	.word	0x20000608
 8006a3c:	20000618 	.word	0x20000618
 8006a40:	20000654 	.word	0x20000654

08006a44 <Stalling_detection>:

// ## Stalling Detection Function
void Stalling_detection(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
    SysTick->VAL = (2 ^ 24) - 1;
 8006a4a:	4b63      	ldr	r3, [pc, #396]	; (8006bd8 <Stalling_detection+0x194>)
 8006a4c:	2219      	movs	r2, #25
 8006a4e:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 8006a50:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <Stalling_detection+0x198>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
    TIM2_Reset();
 8006a56:	f000 fecd 	bl	80077f4 <TIM2_Reset>
    TIM_Soft_Reset();
 8006a5a:	f000 ff35 	bl	80078c8 <TIM_Soft_Reset>

    // check all IC-buffers for overflow
    IC_overflow_check();
 8006a5e:	f000 fb65 	bl	800712c <IC_overflow_check>

    T_TOOTH_RAW_2 = 0;
 8006a62:	4b5f      	ldr	r3, [pc, #380]	; (8006be0 <Stalling_detection+0x19c>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW_1 = 0;
 8006a68:	4b5e      	ldr	r3, [pc, #376]	; (8006be4 <Stalling_detection+0x1a0>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW = 0;
 8006a6e:	4b5e      	ldr	r3, [pc, #376]	; (8006be8 <Stalling_detection+0x1a4>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
    synch_times_valid = false;
 8006a74:	4b5d      	ldr	r3, [pc, #372]	; (8006bec <Stalling_detection+0x1a8>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]

    low_time_CRK = 0;
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	; (8006bf0 <Stalling_detection+0x1ac>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

    delay_off = false;
 8006a80:	4b5c      	ldr	r3, [pc, #368]	; (8006bf4 <Stalling_detection+0x1b0>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
    delay_counter_CRK = 0;
 8006a86:	4b5c      	ldr	r3, [pc, #368]	; (8006bf8 <Stalling_detection+0x1b4>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    teeth_count_CRK = 0;
 8006a8c:	4b5b      	ldr	r3, [pc, #364]	; (8006bfc <Stalling_detection+0x1b8>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch = 0;
 8006a92:	4b5b      	ldr	r3, [pc, #364]	; (8006c00 <Stalling_detection+0x1bc>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch_ahead = 0;
 8006a98:	4b5a      	ldr	r3, [pc, #360]	; (8006c04 <Stalling_detection+0x1c0>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    edge_count_CAM[0] = 0;
 8006a9e:	4b5a      	ldr	r3, [pc, #360]	; (8006c08 <Stalling_detection+0x1c4>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
    edge_count_CAM[1] = 0;
 8006aa4:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <Stalling_detection+0x1c4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
    edge_validation_counter_CAM[0] = 0;
 8006aaa:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <Stalling_detection+0x1c8>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
    edge_validation_counter_CAM[1] = 0;
 8006ab0:	4b56      	ldr	r3, [pc, #344]	; (8006c0c <Stalling_detection+0x1c8>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	605a      	str	r2, [r3, #4]
    edge_position_counter_CAM[0] = 0;
 8006ab6:	4b56      	ldr	r3, [pc, #344]	; (8006c10 <Stalling_detection+0x1cc>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
    edge_position_counter_CAM[1] = 0;
 8006abc:	4b54      	ldr	r3, [pc, #336]	; (8006c10 <Stalling_detection+0x1cc>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	605a      	str	r2, [r3, #4]
    former_edge_position_CAM[0] = 0;
 8006ac2:	4b54      	ldr	r3, [pc, #336]	; (8006c14 <Stalling_detection+0x1d0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]
    former_edge_position_CAM[1] = 0;
 8006ac8:	4b52      	ldr	r3, [pc, #328]	; (8006c14 <Stalling_detection+0x1d0>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	605a      	str	r2, [r3, #4]
    edge_validation_counter_CAM_ahead[0] = 0;
 8006ace:	4b52      	ldr	r3, [pc, #328]	; (8006c18 <Stalling_detection+0x1d4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
    edge_validation_counter_CAM_ahead[1] = 0;
 8006ad4:	4b50      	ldr	r3, [pc, #320]	; (8006c18 <Stalling_detection+0x1d4>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	605a      	str	r2, [r3, #4]
    edge_position_counter_CAM_ahead[0] = 0;
 8006ada:	4b50      	ldr	r3, [pc, #320]	; (8006c1c <Stalling_detection+0x1d8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
    edge_position_counter_CAM_ahead[1] = 0;
 8006ae0:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <Stalling_detection+0x1d8>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
    former_edge_position_CAM_ahead[0] = 0;
 8006ae6:	4b4e      	ldr	r3, [pc, #312]	; (8006c20 <Stalling_detection+0x1dc>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
    former_edge_position_CAM_ahead[1] = 0;
 8006aec:	4b4c      	ldr	r3, [pc, #304]	; (8006c20 <Stalling_detection+0x1dc>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	605a      	str	r2, [r3, #4]
    segment_counter_CRK = 0;
 8006af2:	4b4c      	ldr	r3, [pc, #304]	; (8006c24 <Stalling_detection+0x1e0>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]
    shift_counter_CRK = 0;
 8006af8:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <Stalling_detection+0x1e4>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
    CAM_tolerance_switch[0] = false;
 8006afe:	4b4b      	ldr	r3, [pc, #300]	; (8006c2c <Stalling_detection+0x1e8>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
    CAM_tolerance_switch[1] = false;
 8006b04:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <Stalling_detection+0x1e8>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	705a      	strb	r2, [r3, #1]
    CAM_CRK_synch_status = false;
 8006b0a:	4b49      	ldr	r3, [pc, #292]	; (8006c30 <Stalling_detection+0x1ec>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 8006b10:	4b48      	ldr	r3, [pc, #288]	; (8006c34 <Stalling_detection+0x1f0>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[0] = false;
 8006b16:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <Stalling_detection+0x1f4>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[1] = false;
 8006b1c:	4b46      	ldr	r3, [pc, #280]	; (8006c38 <Stalling_detection+0x1f4>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	705a      	strb	r2, [r3, #1]
    tolerance_window_CAM[0] = 2.0 * revolution_CRK;
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <Stalling_detection+0x1f8>)
 8006b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	f7f9 fb1e 	bl	800016c <__adddf3>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4942      	ldr	r1, [pc, #264]	; (8006c40 <Stalling_detection+0x1fc>)
 8006b36:	e9c1 2300 	strd	r2, r3, [r1]
    tolerance_window_CAM[1] = 2.0 * revolution_CRK;
 8006b3a:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <Stalling_detection+0x1f8>)
 8006b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	f7f9 fb12 	bl	800016c <__adddf3>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	493c      	ldr	r1, [pc, #240]	; (8006c40 <Stalling_detection+0x1fc>)
 8006b4e:	e9c1 2302 	strd	r2, r3, [r1, #8]

    // Reset CRK and CAM_CRK synchronization
    if (CRK_synch == true)
 8006b52:	4b3c      	ldr	r3, [pc, #240]	; (8006c44 <Stalling_detection+0x200>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <Stalling_detection+0x128>
    {
        uint8_t CRK_synchronisation_lost = message[4];
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <Stalling_detection+0x204>)
 8006b5c:	791b      	ldrb	r3, [r3, #4]
 8006b5e:	71fb      	strb	r3, [r7, #7]
        HAL_USART_Transmit_IT(&husart1, &CRK_synchronisation_lost, 1);  // CRK synchronization lost
 8006b60:	1dfb      	adds	r3, r7, #7
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	4839      	ldr	r0, [pc, #228]	; (8006c4c <Stalling_detection+0x208>)
 8006b68:	f7fc ff41 	bl	80039ee <HAL_USART_Transmit_IT>

    }

    if (CRK_CAM_synch[0] == true)
 8006b6c:	4b38      	ldr	r3, [pc, #224]	; (8006c50 <Stalling_detection+0x20c>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <Stalling_detection+0x142>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 8006b74:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <Stalling_detection+0x204>)
 8006b76:	799b      	ldrb	r3, [r3, #6]
 8006b78:	71bb      	strb	r3, [r7, #6]
         HAL_USART_Transmit_IT(&husart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 8006b7a:	1dbb      	adds	r3, r7, #6
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4832      	ldr	r0, [pc, #200]	; (8006c4c <Stalling_detection+0x208>)
 8006b82:	f7fc ff34 	bl	80039ee <HAL_USART_Transmit_IT>
    }
    if (CRK_CAM_synch[1] == true)
 8006b86:	4b32      	ldr	r3, [pc, #200]	; (8006c50 <Stalling_detection+0x20c>)
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <Stalling_detection+0x15c>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 8006b8e:	4b2e      	ldr	r3, [pc, #184]	; (8006c48 <Stalling_detection+0x204>)
 8006b90:	799b      	ldrb	r3, [r3, #6]
 8006b92:	717b      	strb	r3, [r7, #5]
         HAL_USART_Transmit_IT(&husart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 8006b94:	1d7b      	adds	r3, r7, #5
 8006b96:	2201      	movs	r2, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	482c      	ldr	r0, [pc, #176]	; (8006c4c <Stalling_detection+0x208>)
 8006b9c:	f7fc ff27 	bl	80039ee <HAL_USART_Transmit_IT>
    }

    CRK_synch = false;
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <Stalling_detection+0x200>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
    CRK_synch_temp = false;
 8006ba6:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <Stalling_detection+0x210>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
    CRK_CAM_synch[0] = false;
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <Stalling_detection+0x20c>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
    CRK_CAM_synch[1] = false;
 8006bb2:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <Stalling_detection+0x20c>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	705a      	strb	r2, [r3, #1]
    teeth_count_overall = 0;
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <Stalling_detection+0x214>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <Stalling_detection+0x218>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 8006bc4:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <Stalling_detection+0x21c>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 8006bca:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <Stalling_detection+0x220>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000e010 	.word	0xe000e010
 8006bdc:	2000026c 	.word	0x2000026c
 8006be0:	2000025c 	.word	0x2000025c
 8006be4:	20000260 	.word	0x20000260
 8006be8:	20000264 	.word	0x20000264
 8006bec:	200002a6 	.word	0x200002a6
 8006bf0:	20000268 	.word	0x20000268
 8006bf4:	200002a2 	.word	0x200002a2
 8006bf8:	20000284 	.word	0x20000284
 8006bfc:	20000270 	.word	0x20000270
 8006c00:	20000274 	.word	0x20000274
 8006c04:	20000278 	.word	0x20000278
 8006c08:	200005e8 	.word	0x200005e8
 8006c0c:	200005f0 	.word	0x200005f0
 8006c10:	200005f8 	.word	0x200005f8
 8006c14:	20000600 	.word	0x20000600
 8006c18:	20000608 	.word	0x20000608
 8006c1c:	20000610 	.word	0x20000610
 8006c20:	20000618 	.word	0x20000618
 8006c24:	20000288 	.word	0x20000288
 8006c28:	20000290 	.word	0x20000290
 8006c2c:	20000650 	.word	0x20000650
 8006c30:	20000652 	.word	0x20000652
 8006c34:	20000653 	.word	0x20000653
 8006c38:	20000654 	.word	0x20000654
 8006c3c:	20000298 	.word	0x20000298
 8006c40:	20000640 	.word	0x20000640
 8006c44:	200002a0 	.word	0x200002a0
 8006c48:	20000020 	.word	0x20000020
 8006c4c:	20000ab0 	.word	0x20000ab0
 8006c50:	2000065c 	.word	0x2000065c
 8006c54:	200002a1 	.word	0x200002a1
 8006c58:	20000660 	.word	0x20000660
 8006c5c:	200005e1 	.word	0x200005e1
 8006c60:	200002a5 	.word	0x200002a5
 8006c64:	20000294 	.word	0x20000294

08006c68 <Stalling_detection_CRK>:

// ## Stalling Detection Function
void Stalling_detection_CRK(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
    SysTick->VAL = (2 ^ 24) - 1;
 8006c6e:	4b30      	ldr	r3, [pc, #192]	; (8006d30 <Stalling_detection_CRK+0xc8>)
 8006c70:	2219      	movs	r2, #25
 8006c72:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 8006c74:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <Stalling_detection_CRK+0xcc>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
    //		Timer4Reset();	// Is this necessary as well?

    // check all IC-buffers for overflow
    IC_overflow_check();
 8006c7a:	f000 fa57 	bl	800712c <IC_overflow_check>

    T_TOOTH_RAW_2 = 0;
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <Stalling_detection_CRK+0xd0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW_1 = 0;
 8006c84:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <Stalling_detection_CRK+0xd4>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    T_TOOTH_RAW = 0;
 8006c8a:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <Stalling_detection_CRK+0xd8>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
    synch_times_valid = false;
 8006c90:	4b2c      	ldr	r3, [pc, #176]	; (8006d44 <Stalling_detection_CRK+0xdc>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]

    low_time_CRK = 0;
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <Stalling_detection_CRK+0xe0>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

    delay_off = false;
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <Stalling_detection_CRK+0xe4>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
    delay_counter_CRK = 0;
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <Stalling_detection_CRK+0xe8>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
    teeth_count_CRK = 0;
 8006ca8:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <Stalling_detection_CRK+0xec>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    segment_counter_CRK = 0;
 8006cae:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <Stalling_detection_CRK+0xf0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
    shift_counter_CRK = 0;
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <Stalling_detection_CRK+0xf4>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
    tolerance_window_CAM[0] = 2.0 * revolution_CRK;
 8006cba:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <Stalling_detection_CRK+0xf8>)
 8006cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	f7f9 fa52 	bl	800016c <__adddf3>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4925      	ldr	r1, [pc, #148]	; (8006d64 <Stalling_detection_CRK+0xfc>)
 8006cce:	e9c1 2300 	strd	r2, r3, [r1]
    tolerance_window_CAM[1] = 2.0 * revolution_CRK;
 8006cd2:	4b23      	ldr	r3, [pc, #140]	; (8006d60 <Stalling_detection_CRK+0xf8>)
 8006cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	f7f9 fa46 	bl	800016c <__adddf3>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	491f      	ldr	r1, [pc, #124]	; (8006d64 <Stalling_detection_CRK+0xfc>)
 8006ce6:	e9c1 2302 	strd	r2, r3, [r1, #8]

    // Reset CRK and CAM_CRK synchronization
    if (CRK_synch == true)
 8006cea:	4b1f      	ldr	r3, [pc, #124]	; (8006d68 <Stalling_detection_CRK+0x100>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <Stalling_detection_CRK+0x9c>
    {
        uint8_t CRK_synchronisation_lost = message[4];
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	; (8006d6c <Stalling_detection_CRK+0x104>)
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	71fb      	strb	r3, [r7, #7]
         HAL_USART_Transmit_IT(&husart1, &CRK_synchronisation_lost, 1); // CRK synchronization lost
 8006cf8:	1dfb      	adds	r3, r7, #7
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	481c      	ldr	r0, [pc, #112]	; (8006d70 <Stalling_detection_CRK+0x108>)
 8006d00:	f7fc fe75 	bl	80039ee <HAL_USART_Transmit_IT>
    }

    CRK_synch = false;
 8006d04:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <Stalling_detection_CRK+0x100>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
    CRK_synch_temp = false;
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <Stalling_detection_CRK+0x10c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
    teeth_count_overall = 0;
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <Stalling_detection_CRK+0x110>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 8006d16:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <Stalling_detection_CRK+0x114>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 8006d1c:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <Stalling_detection_CRK+0x118>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 8006d22:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <Stalling_detection_CRK+0x11c>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	2000026c 	.word	0x2000026c
 8006d38:	2000025c 	.word	0x2000025c
 8006d3c:	20000260 	.word	0x20000260
 8006d40:	20000264 	.word	0x20000264
 8006d44:	200002a6 	.word	0x200002a6
 8006d48:	20000268 	.word	0x20000268
 8006d4c:	200002a2 	.word	0x200002a2
 8006d50:	20000284 	.word	0x20000284
 8006d54:	20000270 	.word	0x20000270
 8006d58:	20000288 	.word	0x20000288
 8006d5c:	20000290 	.word	0x20000290
 8006d60:	20000298 	.word	0x20000298
 8006d64:	20000640 	.word	0x20000640
 8006d68:	200002a0 	.word	0x200002a0
 8006d6c:	20000020 	.word	0x20000020
 8006d70:	20000ab0 	.word	0x20000ab0
 8006d74:	200002a1 	.word	0x200002a1
 8006d78:	20000660 	.word	0x20000660
 8006d7c:	200005e1 	.word	0x200005e1
 8006d80:	200002a5 	.word	0x200002a5
 8006d84:	20000294 	.word	0x20000294

08006d88 <Stalling_detection_CAM>:

// ## Stalling Detection Function
void Stalling_detection_CAM(int camId)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
    TIM2_Reset();
 8006d90:	f000 fd30 	bl	80077f4 <TIM2_Reset>
    // Timer5Reset(); // TODO: Is this reset warranted?
    // check all IC-buffers for overflow
    IC_overflow_check();
 8006d94:	f000 f9ca 	bl	800712c <IC_overflow_check>

    teeth_count_CAM_CRK_synch = 0;
 8006d98:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <Stalling_detection_CAM+0xe4>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    teeth_count_CAM_CRK_synch_ahead = 0;
 8006d9e:	4b34      	ldr	r3, [pc, #208]	; (8006e70 <Stalling_detection_CAM+0xe8>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
    edge_count_CAM[camId] = 0;
 8006da4:	4a33      	ldr	r2, [pc, #204]	; (8006e74 <Stalling_detection_CAM+0xec>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2100      	movs	r1, #0
 8006daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM[camId] = 0;
 8006dae:	4a32      	ldr	r2, [pc, #200]	; (8006e78 <Stalling_detection_CAM+0xf0>)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2100      	movs	r1, #0
 8006db4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_position_counter_CAM[camId] = 0;
 8006db8:	4a30      	ldr	r2, [pc, #192]	; (8006e7c <Stalling_detection_CAM+0xf4>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM[camId] = 0;
 8006dc2:	4a2f      	ldr	r2, [pc, #188]	; (8006e80 <Stalling_detection_CAM+0xf8>)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM_ahead[camId] = 0;
 8006dcc:	4a2d      	ldr	r2, [pc, #180]	; (8006e84 <Stalling_detection_CAM+0xfc>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_position_counter_CAM_ahead[camId] = 0;
 8006dd6:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <Stalling_detection_CAM+0x100>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM_ahead[camId] = 0;
 8006de0:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <Stalling_detection_CAM+0x104>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2100      	movs	r1, #0
 8006de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CAM_tolerance_switch[camId] = false;
 8006dea:	4a29      	ldr	r2, [pc, #164]	; (8006e90 <Stalling_detection_CAM+0x108>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4413      	add	r3, r2
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status = false;
 8006df4:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <Stalling_detection_CAM+0x10c>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 8006dfa:	4b27      	ldr	r3, [pc, #156]	; (8006e98 <Stalling_detection_CAM+0x110>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_ahead[camId] = false;
 8006e00:	4a26      	ldr	r2, [pc, #152]	; (8006e9c <Stalling_detection_CAM+0x114>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
    tolerance_window_CAM[camId] = 2.0 * revolution_CRK;
 8006e0a:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <Stalling_detection_CAM+0x118>)
 8006e0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	f7f9 f9aa 	bl	800016c <__adddf3>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4821      	ldr	r0, [pc, #132]	; (8006ea4 <Stalling_detection_CAM+0x11c>)
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	00c9      	lsls	r1, r1, #3
 8006e22:	4401      	add	r1, r0
 8006e24:	e9c1 2300 	strd	r2, r3, [r1]

    if (CRK_CAM_synch[camId] == true)
 8006e28:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <Stalling_detection_CAM+0x120>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <Stalling_detection_CAM+0xc0>
    {
        uint8_t CAM_CRK_synchronisation_lost = message[6];
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <Stalling_detection_CAM+0x124>)
 8006e36:	799b      	ldrb	r3, [r3, #6]
 8006e38:	73fb      	strb	r3, [r7, #15]
         HAL_USART_Transmit_IT(&husart1, &CAM_CRK_synchronisation_lost, 1); // CAM_CRK synchronization lost
 8006e3a:	f107 030f 	add.w	r3, r7, #15
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4619      	mov	r1, r3
 8006e42:	481b      	ldr	r0, [pc, #108]	; (8006eb0 <Stalling_detection_CAM+0x128>)
 8006e44:	f7fc fdd3 	bl	80039ee <HAL_USART_Transmit_IT>
    }

    CRK_CAM_synch[camId] = false;
 8006e48:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <Stalling_detection_CAM+0x120>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]

    // Output signal level treatment
    output_level_setting = false;
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <Stalling_detection_CAM+0x12c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]

    engine_start = false;
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <Stalling_detection_CAM+0x130>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
    engine_start_counter = 0;
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <Stalling_detection_CAM+0x134>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000274 	.word	0x20000274
 8006e70:	20000278 	.word	0x20000278
 8006e74:	200005e8 	.word	0x200005e8
 8006e78:	200005f0 	.word	0x200005f0
 8006e7c:	200005f8 	.word	0x200005f8
 8006e80:	20000600 	.word	0x20000600
 8006e84:	20000608 	.word	0x20000608
 8006e88:	20000610 	.word	0x20000610
 8006e8c:	20000618 	.word	0x20000618
 8006e90:	20000650 	.word	0x20000650
 8006e94:	20000652 	.word	0x20000652
 8006e98:	20000653 	.word	0x20000653
 8006e9c:	20000654 	.word	0x20000654
 8006ea0:	20000298 	.word	0x20000298
 8006ea4:	20000640 	.word	0x20000640
 8006ea8:	2000065c 	.word	0x2000065c
 8006eac:	20000020 	.word	0x20000020
 8006eb0:	20000ab0 	.word	0x20000ab0
 8006eb4:	200005e1 	.word	0x200005e1
 8006eb8:	200002a5 	.word	0x200002a5
 8006ebc:	20000294 	.word	0x20000294

08006ec0 <sync_CRK_preparation>:

// ## CRK synchronisation preparation
void sync_CRK_preparation(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
    // Read Timer value from IC3-buffer
    T_TOOTH_RAW = IC2BUF;
 8006ec4:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <sync_CRK_preparation+0x64>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <sync_CRK_preparation+0x68>)
 8006eca:	6013      	str	r3, [r2, #0]

    // Calculate tooth time
    T_TOOTH_RAW = T_TOOTH_RAW + timer_overflow_CRK * htim2.Init.Period;
 8006ecc:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <sync_CRK_preparation+0x6c>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <sync_CRK_preparation+0x70>)
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	fb03 f202 	mul.w	r2, r3, r2
 8006ed8:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <sync_CRK_preparation+0x68>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	4a12      	ldr	r2, [pc, #72]	; (8006f28 <sync_CRK_preparation+0x68>)
 8006ee0:	6013      	str	r3, [r2, #0]

    // test
    if (delay_off == true)
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <sync_CRK_preparation+0x74>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d012      	beq.n	8006f10 <sync_CRK_preparation+0x50>
    {
        if (CRK_synch == true)
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <sync_CRK_preparation+0x78>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00e      	beq.n	8006f10 <sync_CRK_preparation+0x50>
        {
            // Teeth Counter CRK
            if ((teeth_count_CRK < number_teeth_between_gaps))
 8006ef2:	4b12      	ldr	r3, [pc, #72]	; (8006f3c <sync_CRK_preparation+0x7c>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <sync_CRK_preparation+0x80>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d205      	bcs.n	8006f0a <sync_CRK_preparation+0x4a>
            {
                // 360�CRK for one gap; 180� for two gaps; 120� for three gaps
                teeth_count_CRK++;
 8006efe:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <sync_CRK_preparation+0x7c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <sync_CRK_preparation+0x7c>)
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e002      	b.n	8006f10 <sync_CRK_preparation+0x50>
            }
            else
            {
                teeth_count_CRK = 1;
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <sync_CRK_preparation+0x7c>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // reset timer 
    SysTick->VAL = (2 ^ 24) - 1;
 8006f10:	4b0c      	ldr	r3, [pc, #48]	; (8006f44 <sync_CRK_preparation+0x84>)
 8006f12:	2219      	movs	r2, #25
 8006f14:	609a      	str	r2, [r3, #8]
    timer_overflow_CRK = 0;
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <sync_CRK_preparation+0x70>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr
 8006f24:	20000258 	.word	0x20000258
 8006f28:	20000264 	.word	0x20000264
 8006f2c:	200009d8 	.word	0x200009d8
 8006f30:	2000026c 	.word	0x2000026c
 8006f34:	200002a2 	.word	0x200002a2
 8006f38:	200002a0 	.word	0x200002a0
 8006f3c:	20000270 	.word	0x20000270
 8006f40:	20000280 	.word	0x20000280
 8006f44:	e000e010 	.word	0xe000e010

08006f48 <gap_to_edge_calculation>:
    TIM2_Reset();
}

// ## Gap to edge calculation
void gap_to_edge_calculation(void)
{
 8006f48:	b5b0      	push	{r4, r5, r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
    // calculate angles between reference gap and CAM-edges when synchronization is not yet done PR2: Timer periode value, TMR2 TMR counter at that moment
    gap_to_edge = (((double)teeth_count_CAM_CRK_synch - 1.0) + (double)(((unsigned long)(__HAL_TIM_GET_COUNTER(&htim2)) + timer_overflow_CRK * __HAL_TIM_GET_AUTORELOAD(&htim2)) / T_TOOTH_RAW)) * revolution_CRK;
 8006f4c:	4b34      	ldr	r3, [pc, #208]	; (8007020 <gap_to_edge_calculation+0xd8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 fa47 	bl	80003e4 <__aeabi_ui2d>
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	4b32      	ldr	r3, [pc, #200]	; (8007024 <gap_to_edge_calculation+0xdc>)
 8006f5c:	f7f9 f904 	bl	8000168 <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <gap_to_edge_calculation+0xe0>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6e:	4b2e      	ldr	r3, [pc, #184]	; (8007028 <gap_to_edge_calculation+0xe0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	492d      	ldr	r1, [pc, #180]	; (800702c <gap_to_edge_calculation+0xe4>)
 8006f76:	6809      	ldr	r1, [r1, #0]
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	441a      	add	r2, r3
 8006f7e:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <gap_to_edge_calculation+0xe8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7f9 fa2c 	bl	80003e4 <__aeabi_ui2d>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f8ea 	bl	800016c <__adddf3>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4b24      	ldr	r3, [pc, #144]	; (8007034 <gap_to_edge_calculation+0xec>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fa97 	bl	80004d8 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4922      	ldr	r1, [pc, #136]	; (8007038 <gap_to_edge_calculation+0xf0>)
 8006fb0:	e9c1 2300 	strd	r2, r3, [r1]

    gap_to_edge_ahead = (((double)teeth_count_CAM_CRK_synch_ahead - 1.0) + (double)(((unsigned long)(__HAL_TIM_GET_COUNTER(&htim2)) + timer_overflow_CRK * __HAL_TIM_GET_AUTORELOAD(&htim2)) / T_TOOTH_RAW)) * revolution_CRK;
 8006fb4:	4b21      	ldr	r3, [pc, #132]	; (800703c <gap_to_edge_calculation+0xf4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7f9 fa13 	bl	80003e4 <__aeabi_ui2d>
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <gap_to_edge_calculation+0xdc>)
 8006fc4:	f7f9 f8d0 	bl	8000168 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4614      	mov	r4, r2
 8006fce:	461d      	mov	r5, r3
 8006fd0:	4b15      	ldr	r3, [pc, #84]	; (8007028 <gap_to_edge_calculation+0xe0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <gap_to_edge_calculation+0xe0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4913      	ldr	r1, [pc, #76]	; (800702c <gap_to_edge_calculation+0xe4>)
 8006fde:	6809      	ldr	r1, [r1, #0]
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	441a      	add	r2, r3
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <gap_to_edge_calculation+0xe8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7f9 f9f8 	bl	80003e4 <__aeabi_ui2d>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	f7f9 f8b6 	bl	800016c <__adddf3>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4610      	mov	r0, r2
 8007006:	4619      	mov	r1, r3
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <gap_to_edge_calculation+0xec>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	490a      	ldr	r1, [pc, #40]	; (8007040 <gap_to_edge_calculation+0xf8>)
 8007018:	e9c1 2300 	strd	r2, r3, [r1]
}
 800701c:	bf00      	nop
 800701e:	bdb0      	pop	{r4, r5, r7, pc}
 8007020:	20000274 	.word	0x20000274
 8007024:	3ff00000 	.word	0x3ff00000
 8007028:	200009d8 	.word	0x200009d8
 800702c:	2000026c 	.word	0x2000026c
 8007030:	20000264 	.word	0x20000264
 8007034:	20000298 	.word	0x20000298
 8007038:	20000620 	.word	0x20000620
 800703c:	20000278 	.word	0x20000278
 8007040:	20000628 	.word	0x20000628

08007044 <CAM_CRK_synch_reset>:

// ## Reset CAM_CRK_synch
void CAM_CRK_synch_reset(int camId)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
    edge_position_counter_CAM[camId] = 0;
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <CAM_CRK_synch_reset+0x38>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2100      	movs	r1, #0
 8007052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM[camId] = 0;
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <CAM_CRK_synch_reset+0x3c>)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2100      	movs	r1, #0
 800705c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM[camId] = 0;
 8007060:	4a08      	ldr	r2, [pc, #32]	; (8007084 <CAM_CRK_synch_reset+0x40>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // set teeth_count_CAM_CRK_synch to one after the next reference gap
    CAM_CRK_synch_status = true;
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <CAM_CRK_synch_reset+0x44>)
 800706c:	2201      	movs	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	200005f8 	.word	0x200005f8
 8007080:	200005f0 	.word	0x200005f0
 8007084:	20000600 	.word	0x20000600
 8007088:	20000652 	.word	0x20000652

0800708c <CAM_CRK_synch_ahead_reset>:

// ## Reset CAM_CRK_synch_ahead
void CAM_CRK_synch_ahead_reset(int camId)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
    edge_position_counter_CAM_ahead[camId] = 0;
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <CAM_CRK_synch_ahead_reset+0x38>)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2100      	movs	r1, #0
 800709a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    edge_validation_counter_CAM_ahead[camId] = 0;
 800709e:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <CAM_CRK_synch_ahead_reset+0x3c>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2100      	movs	r1, #0
 80070a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    former_edge_position_CAM_ahead[camId] = 0;
 80070a8:	4a08      	ldr	r2, [pc, #32]	; (80070cc <CAM_CRK_synch_ahead_reset+0x40>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2100      	movs	r1, #0
 80070ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // set teeth_count_CAM_CRK_synch to one after the next reference gap
    CAM_CRK_synch_status_ahead = true;
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <CAM_CRK_synch_ahead_reset+0x44>)
 80070b4:	2201      	movs	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000610 	.word	0x20000610
 80070c8:	20000608 	.word	0x20000608
 80070cc:	20000618 	.word	0x20000618
 80070d0:	20000653 	.word	0x20000653

080070d4 <CAM_CRK_synch_set>:

// ## Set CAM_CRK_synch
void CAM_CRK_synch_set(int camId)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    CRK_CAM_synch[camId] = true;
 80070dc:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <CAM_CRK_synch_set+0x40>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]

    // Send CRK_CAM-sycnhronization status
    uint8_t CRK_CAM_synchronisation_lost = message[6];
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <CAM_CRK_synch_set+0x44>)
 80070e8:	799b      	ldrb	r3, [r3, #6]
 80070ea:	73fb      	strb	r3, [r7, #15]
     HAL_USART_Transmit_IT(&husart1, &CRK_CAM_synchronisation_lost, 1); // CRK_CAM synchronization lost
 80070ec:	f107 030f 	add.w	r3, r7, #15
 80070f0:	2201      	movs	r2, #1
 80070f2:	4619      	mov	r1, r3
 80070f4:	4809      	ldr	r0, [pc, #36]	; (800711c <CAM_CRK_synch_set+0x48>)
 80070f6:	f7fc fc7a 	bl	80039ee <HAL_USART_Transmit_IT>
    CAM_CRK_synch_status = false;
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <CAM_CRK_synch_set+0x4c>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
    CAM_CRK_synch_status_ahead = false;
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <CAM_CRK_synch_set+0x50>)
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
    shift_counter_CRK = 0;
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <CAM_CRK_synch_set+0x54>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	2000065c 	.word	0x2000065c
 8007118:	20000020 	.word	0x20000020
 800711c:	20000ab0 	.word	0x20000ab0
 8007120:	20000652 	.word	0x20000652
 8007124:	20000653 	.word	0x20000653
 8007128:	20000290 	.word	0x20000290

0800712c <IC_overflow_check>:

// ## IC overflow check
void IC_overflow_check()
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
    IC1BUF = 0;
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <IC_overflow_check+0x18>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
    IC2BUF = 0;
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <IC_overflow_check+0x1c>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	20000254 	.word	0x20000254
 8007148:	20000258 	.word	0x20000258

0800714c <CRK_configuration>:

//### Functions ###

// ## CRK Configuration
void CRK_configuration(void)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
	// Number of teeth between two gaps
	number_teeth_between_gaps = (number_teeth_CRK / number_gap)
 8007152:	4b51      	ldr	r3, [pc, #324]	; (8007298 <CRK_configuration+0x14c>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b51      	ldr	r3, [pc, #324]	; (800729c <CRK_configuration+0x150>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	fbb2 f2f3 	udiv	r2, r2, r3
			- number_miss_teeth;
 800715e:	4b50      	ldr	r3, [pc, #320]	; (80072a0 <CRK_configuration+0x154>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	1ad3      	subs	r3, r2, r3
	number_teeth_between_gaps = (number_teeth_CRK / number_gap)
 8007164:	4a4f      	ldr	r2, [pc, #316]	; (80072a4 <CRK_configuration+0x158>)
 8007166:	6013      	str	r3, [r2, #0]

	// Number of remaining teeth
	number_real_teeth = number_teeth_CRK - number_miss_teeth;
 8007168:	4b4b      	ldr	r3, [pc, #300]	; (8007298 <CRK_configuration+0x14c>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b4c      	ldr	r3, [pc, #304]	; (80072a0 <CRK_configuration+0x154>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4a4d      	ldr	r2, [pc, #308]	; (80072a8 <CRK_configuration+0x15c>)
 8007174:	6013      	str	r3, [r2, #0]

	// Revolution of one tooth time
	revolution_CRK = (double) (360.0 / number_teeth_CRK);
 8007176:	4b48      	ldr	r3, [pc, #288]	; (8007298 <CRK_configuration+0x14c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 f932 	bl	80003e4 <__aeabi_ui2d>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	4948      	ldr	r1, [pc, #288]	; (80072ac <CRK_configuration+0x160>)
 800718a:	f7f9 facf 	bl	800072c <__aeabi_ddiv>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4947      	ldr	r1, [pc, #284]	; (80072b0 <CRK_configuration+0x164>)
 8007194:	e9c1 2300 	strd	r2, r3, [r1]

	// Set number of segments
	number_segments_CRK = number_cylinder;
 8007198:	4b46      	ldr	r3, [pc, #280]	; (80072b4 <CRK_configuration+0x168>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a46      	ldr	r2, [pc, #280]	; (80072b8 <CRK_configuration+0x16c>)
 800719e:	6013      	str	r3, [r2, #0]

	int first_tooth_angle = 720 - tdc_to_gap;
 80071a0:	4b46      	ldr	r3, [pc, #280]	; (80072bc <CRK_configuration+0x170>)
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f04f 0000 	mov.w	r0, #0
 80071aa:	4945      	ldr	r1, [pc, #276]	; (80072c0 <CRK_configuration+0x174>)
 80071ac:	f7f8 ffdc 	bl	8000168 <__aeabi_dsub>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4610      	mov	r0, r2
 80071b6:	4619      	mov	r1, r3
 80071b8:	f7f9 fc28 	bl	8000a0c <__aeabi_d2iz>
 80071bc:	4603      	mov	r3, r0
 80071be:	607b      	str	r3, [r7, #4]

	if (first_seg_angle >= first_tooth_angle)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7f9 f91f 	bl	8000404 <__aeabi_i2d>
 80071c6:	4b3f      	ldr	r3, [pc, #252]	; (80072c4 <CRK_configuration+0x178>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 fc00 	bl	80009d0 <__aeabi_dcmple>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01e      	beq.n	8007214 <CRK_configuration+0xc8>
	{
		first_seg_start_tooth = (first_seg_angle - first_tooth_angle)
 80071d6:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <CRK_configuration+0x178>)
 80071d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7f9 f911 	bl	8000404 <__aeabi_i2d>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f8 ffbd 	bl	8000168 <__aeabi_dsub>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
				/ revolution_CRK;
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <CRK_configuration+0x164>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 fa96 	bl	800072c <__aeabi_ddiv>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
		first_seg_start_tooth = (first_seg_angle - first_tooth_angle)
 8007204:	4610      	mov	r0, r2
 8007206:	4619      	mov	r1, r3
 8007208:	f7f9 fc28 	bl	8000a5c <__aeabi_d2uiz>
 800720c:	4603      	mov	r3, r0
 800720e:	4a2e      	ldr	r2, [pc, #184]	; (80072c8 <CRK_configuration+0x17c>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e026      	b.n	8007262 <CRK_configuration+0x116>
	}
	else
	{
		first_seg_start_tooth = number_teeth_CRK
				- ((first_tooth_angle - first_seg_angle) / revolution_CRK);
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <CRK_configuration+0x14c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f7f9 f8e3 	bl	80003e4 <__aeabi_ui2d>
 800721e:	4604      	mov	r4, r0
 8007220:	460d      	mov	r5, r1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7f9 f8ee 	bl	8000404 <__aeabi_i2d>
 8007228:	4b26      	ldr	r3, [pc, #152]	; (80072c4 <CRK_configuration+0x178>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f7f8 ff9b 	bl	8000168 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <CRK_configuration+0x164>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 fa74 	bl	800072c <__aeabi_ddiv>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f8 ff8c 	bl	8000168 <__aeabi_dsub>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
		first_seg_start_tooth = number_teeth_CRK
 8007254:	4610      	mov	r0, r2
 8007256:	4619      	mov	r1, r3
 8007258:	f7f9 fc00 	bl	8000a5c <__aeabi_d2uiz>
 800725c:	4603      	mov	r3, r0
 800725e:	4a1a      	ldr	r2, [pc, #104]	; (80072c8 <CRK_configuration+0x17c>)
 8007260:	6013      	str	r3, [r2, #0]
	}

	// Set configuration status
	CRK_config = true;
 8007262:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <CRK_configuration+0x180>)
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]

	// Complete configuration
	if ((CRK_config == true) && (CAM_config == true))
 8007268:	4b18      	ldr	r3, [pc, #96]	; (80072cc <CRK_configuration+0x180>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <CRK_configuration+0x130>
 8007270:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <CRK_configuration+0x184>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <CRK_configuration+0x130>
	{
		CAM_CRK_configuration();
 8007278:	f000 f8ee 	bl	8007458 <CAM_CRK_configuration>
	}

	// Send configuration status
	uint8_t msg_CRK_configuration_ready = message[1];
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <CRK_configuration+0x188>)
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	70fb      	strb	r3, [r7, #3]
	 HAL_USART_Transmit_IT(&husart1, &msg_CRK_configuration_ready, 1);
 8007282:	1cfb      	adds	r3, r7, #3
 8007284:	2201      	movs	r2, #1
 8007286:	4619      	mov	r1, r3
 8007288:	4813      	ldr	r0, [pc, #76]	; (80072d8 <CRK_configuration+0x18c>)
 800728a:	f7fc fbb0 	bl	80039ee <HAL_USART_Transmit_IT>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bdb0      	pop	{r4, r5, r7, pc}
 8007296:	bf00      	nop
 8007298:	2000022c 	.word	0x2000022c
 800729c:	20000234 	.word	0x20000234
 80072a0:	20000230 	.word	0x20000230
 80072a4:	20000280 	.word	0x20000280
 80072a8:	2000027c 	.word	0x2000027c
 80072ac:	40768000 	.word	0x40768000
 80072b0:	20000298 	.word	0x20000298
 80072b4:	20000248 	.word	0x20000248
 80072b8:	2000028c 	.word	0x2000028c
 80072bc:	20000238 	.word	0x20000238
 80072c0:	40868000 	.word	0x40868000
 80072c4:	20000240 	.word	0x20000240
 80072c8:	2000024c 	.word	0x2000024c
 80072cc:	200002a4 	.word	0x200002a4
 80072d0:	2000065e 	.word	0x2000065e
 80072d4:	20000020 	.word	0x20000020
 80072d8:	20000ab0 	.word	0x20000ab0

080072dc <CAM_configuration>:

// ## CAM Configuration
void CAM_configuration(void)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
	int camId = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]

	for (camId = 0; camId < number_of_CAM; camId++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e07d      	b.n	80073e8 <CAM_configuration+0x10c>
	{
		// Set counter to calculate the distances of the CAM edges to the gap in the for-loop
		int i;

		// Set number of CAM edges
		if (active_CAM_edges[camId] == 'b')
 80072ec:	4a4e      	ldr	r2, [pc, #312]	; (8007428 <CAM_configuration+0x14c>)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b62      	cmp	r3, #98	; 0x62
 80072f6:	d109      	bne.n	800730c <CAM_configuration+0x30>
		{
			number_teeth_CAM[camId] = number_active_edges_CAM[camId] / 2;
 80072f8:	4a4c      	ldr	r2, [pc, #304]	; (800742c <CAM_configuration+0x150>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007300:	085a      	lsrs	r2, r3, #1
 8007302:	494b      	ldr	r1, [pc, #300]	; (8007430 <CAM_configuration+0x154>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800730a:	e007      	b.n	800731c <CAM_configuration+0x40>
		}
		else
		{
			number_teeth_CAM[camId] = number_active_edges_CAM[camId];
 800730c:	4a47      	ldr	r2, [pc, #284]	; (800742c <CAM_configuration+0x150>)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007314:	4946      	ldr	r1, [pc, #280]	; (8007430 <CAM_configuration+0x154>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		// Calculate distance from gap to CAM edges
		for (i = 0; i < number_active_edges_CAM[camId]; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	e058      	b.n	80073d4 <CAM_configuration+0xf8>
		{
			distance_gap_to_CAM_edge[camId][i] = CAM_edges[camId][i]
 8007322:	4944      	ldr	r1, [pc, #272]	; (8007434 <CAM_configuration+0x158>)
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4613      	mov	r3, r2
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	440b      	add	r3, r1
 8007336:	e9d3 0100 	ldrd	r0, r1, [r3]
					+ tdc_to_gap;
 800733a:	4b3f      	ldr	r3, [pc, #252]	; (8007438 <CAM_configuration+0x15c>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f7f8 ff14 	bl	800016c <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4610      	mov	r0, r2
 800734a:	4619      	mov	r1, r3
			distance_gap_to_CAM_edge[camId][i] = CAM_edges[camId][i]
 800734c:	4c3b      	ldr	r4, [pc, #236]	; (800743c <CAM_configuration+0x160>)
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	4413      	add	r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	4423      	add	r3, r4
 8007360:	e9c3 0100 	strd	r0, r1, [r3]

			if (distance_gap_to_CAM_edge[camId][i] >= 720.0)
 8007364:	4935      	ldr	r1, [pc, #212]	; (800743c <CAM_configuration+0x160>)
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4413      	add	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	440b      	add	r3, r1
 8007378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <CAM_configuration+0x164>)
 8007382:	f7f9 fb2f 	bl	80009e4 <__aeabi_dcmpge>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d020      	beq.n	80073ce <CAM_configuration+0xf2>
			{
				distance_gap_to_CAM_edge[camId][i] =
						distance_gap_to_CAM_edge[camId][i] - 720.0;
 800738c:	492b      	ldr	r1, [pc, #172]	; (800743c <CAM_configuration+0x160>)
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	4413      	add	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	440b      	add	r3, r1
 80073a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <CAM_configuration+0x164>)
 80073aa:	f7f8 fedd 	bl	8000168 <__aeabi_dsub>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
				distance_gap_to_CAM_edge[camId][i] =
 80073b6:	4c21      	ldr	r4, [pc, #132]	; (800743c <CAM_configuration+0x160>)
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4613      	mov	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4413      	add	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	4413      	add	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4423      	add	r3, r4
 80073ca:	e9c3 0100 	strd	r0, r1, [r3]
		for (i = 0; i < number_active_edges_CAM[camId]; i++)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60bb      	str	r3, [r7, #8]
 80073d4:	4a15      	ldr	r2, [pc, #84]	; (800742c <CAM_configuration+0x150>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d89f      	bhi.n	8007322 <CAM_configuration+0x46>
	for (camId = 0; camId < number_of_CAM; camId++)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <CAM_configuration+0x168>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f6ff af7c 	blt.w	80072ec <CAM_configuration+0x10>
			}
		}
	}

	// Set configuration status
	CAM_config = true;
 80073f4:	4b14      	ldr	r3, [pc, #80]	; (8007448 <CAM_configuration+0x16c>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]

	// Complete configuration
	if (CRK_config == true && CAM_config == true)
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <CAM_configuration+0x170>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <CAM_configuration+0x132>
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <CAM_configuration+0x16c>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <CAM_configuration+0x132>
	{
		CAM_CRK_configuration();
 800740a:	f000 f825 	bl	8007458 <CAM_CRK_configuration>
	}

	// Send configuration status
	uint8_t msg_CAM_configuration_ready = message[2];
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <CAM_configuration+0x174>)
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	71fb      	strb	r3, [r7, #7]
	 HAL_USART_Transmit_IT(&husart1, &msg_CAM_configuration_ready, 1);
 8007414:	1dfb      	adds	r3, r7, #7
 8007416:	2201      	movs	r2, #1
 8007418:	4619      	mov	r1, r3
 800741a:	480e      	ldr	r0, [pc, #56]	; (8007454 <CAM_configuration+0x178>)
 800741c:	f7fc fae7 	bl	80039ee <HAL_USART_Transmit_IT>
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}
 8007428:	200005d8 	.word	0x200005d8
 800742c:	200002a8 	.word	0x200002a8
 8007430:	200002b0 	.word	0x200002b0
 8007434:	200002c8 	.word	0x200002c8
 8007438:	20000238 	.word	0x20000238
 800743c:	20000448 	.word	0x20000448
 8007440:	40868000 	.word	0x40868000
 8007444:	20000008 	.word	0x20000008
 8007448:	2000065e 	.word	0x2000065e
 800744c:	200002a4 	.word	0x200002a4
 8007450:	20000020 	.word	0x20000020
 8007454:	20000ab0 	.word	0x20000ab0

08007458 <CAM_CRK_configuration>:

// ## CAM_CRK Configuration
void CAM_CRK_configuration(void)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
	int camId = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]

	for (camId = 0; camId < number_of_CAM; camId++)
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	e055      	b.n	8007514 <CAM_CRK_configuration+0xbc>
	{
		// Set first falling(rising, when active_edges = 'r') CAM edge after TDC0
		first_edge_to_tdc0[camId] = CAM_edges[camId][0];
 8007468:	4931      	ldr	r1, [pc, #196]	; (8007530 <CAM_CRK_configuration+0xd8>)
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4413      	add	r3, r2
 8007472:	019b      	lsls	r3, r3, #6
 8007474:	440b      	add	r3, r1
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	482e      	ldr	r0, [pc, #184]	; (8007534 <CAM_CRK_configuration+0xdc>)
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	00c9      	lsls	r1, r1, #3
 8007480:	4401      	add	r1, r0
 8007482:	e9c1 2300 	strd	r2, r3, [r1]

		// Distance from gap to first falling CAM-edge
		gap_to_first_edge[camId] = first_edge_to_tdc0[camId] + tdc_to_gap;
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <CAM_CRK_configuration+0xdc>)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007492:	4b29      	ldr	r3, [pc, #164]	; (8007538 <CAM_CRK_configuration+0xe0>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f8 fe68 	bl	800016c <__adddf3>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4826      	ldr	r0, [pc, #152]	; (800753c <CAM_CRK_configuration+0xe4>)
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	00c9      	lsls	r1, r1, #3
 80074a6:	4401      	add	r1, r0
 80074a8:	e9c1 2300 	strd	r2, r3, [r1]

		if ((long) tdc_to_gap % (long) revolution_CRK == 0)
 80074ac:	4b22      	ldr	r3, [pc, #136]	; (8007538 <CAM_CRK_configuration+0xe0>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	f7f9 faa9 	bl	8000a0c <__aeabi_d2iz>
 80074ba:	4604      	mov	r4, r0
 80074bc:	4b20      	ldr	r3, [pc, #128]	; (8007540 <CAM_CRK_configuration+0xe8>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7f9 faa1 	bl	8000a0c <__aeabi_d2iz>
 80074ca:	4603      	mov	r3, r0
 80074cc:	fb94 f2f3 	sdiv	r2, r4, r3
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	1ae3      	subs	r3, r4, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <CAM_CRK_configuration+0x8e>
		{
			TDC_on_edge[camId] = true;
 80074da:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <CAM_CRK_configuration+0xec>)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	e004      	b.n	80074f0 <CAM_CRK_configuration+0x98>
		}
		else
		{
			TDC_on_edge[camId] = false;
 80074e6:	4a17      	ldr	r2, [pc, #92]	; (8007544 <CAM_CRK_configuration+0xec>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
		}

		// Set tolerance window for CAM_CRK synchronization in case of start
		tolerance_window_CAM[camId] = 2.0 * revolution_CRK;
 80074f0:	4b13      	ldr	r3, [pc, #76]	; (8007540 <CAM_CRK_configuration+0xe8>)
 80074f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	f7f8 fe37 	bl	800016c <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4811      	ldr	r0, [pc, #68]	; (8007548 <CAM_CRK_configuration+0xf0>)
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	00c9      	lsls	r1, r1, #3
 8007508:	4401      	add	r1, r0
 800750a:	e9c1 2300 	strd	r2, r3, [r1]
	for (camId = 0; camId < number_of_CAM; camId++)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3301      	adds	r3, #1
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <CAM_CRK_configuration+0xf4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	dba4      	blt.n	8007468 <CAM_CRK_configuration+0x10>
	}
	Stalling_detection();
 800751e:	f7ff fa91 	bl	8006a44 <Stalling_detection>

	configuration_complete = true;
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <CAM_CRK_configuration+0xf8>)
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bd90      	pop	{r4, r7, pc}
 8007530:	200002c8 	.word	0x200002c8
 8007534:	200005c8 	.word	0x200005c8
 8007538:	20000238 	.word	0x20000238
 800753c:	20000630 	.word	0x20000630
 8007540:	20000298 	.word	0x20000298
 8007544:	20000684 	.word	0x20000684
 8007548:	20000640 	.word	0x20000640
 800754c:	20000008 	.word	0x20000008
 8007550:	200005e0 	.word	0x200005e0

08007554 <Input_signal_observe>:

//### Input Signal Observation ###
void Input_signal_observe(bool output_set)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
	if (!output_set)
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	f083 0301 	eor.w	r3, r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d077      	beq.n	800765a <Input_signal_observe+0x106>
	{
		// Check CRK input signal level
		if (HAL_GPIO_ReadPin(GPIOB, 8) != HAL_GPIO_ReadPin(GPIOA, 4))
 800756a:	2108      	movs	r1, #8
 800756c:	483d      	ldr	r0, [pc, #244]	; (8007664 <Input_signal_observe+0x110>)
 800756e:	f7fb f8f5 	bl	800275c <HAL_GPIO_ReadPin>
 8007572:	4603      	mov	r3, r0
 8007574:	461c      	mov	r4, r3
 8007576:	2104      	movs	r1, #4
 8007578:	483b      	ldr	r0, [pc, #236]	; (8007668 <Input_signal_observe+0x114>)
 800757a:	f7fb f8ef 	bl	800275c <HAL_GPIO_ReadPin>
 800757e:	4603      	mov	r3, r0
 8007580:	429c      	cmp	r4, r3
 8007582:	d01d      	beq.n	80075c0 <Input_signal_observe+0x6c>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 4) == GPIO_PIN_SET)
 8007584:	2104      	movs	r1, #4
 8007586:	4838      	ldr	r0, [pc, #224]	; (8007668 <Input_signal_observe+0x114>)
 8007588:	f7fb f8e8 	bl	800275c <HAL_GPIO_ReadPin>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d104      	bne.n	800759c <Input_signal_observe+0x48>
			{
				HAL_GPIO_WritePin(GPIOA, 4, GPIO_PIN_RESET);
 8007592:	2200      	movs	r2, #0
 8007594:	2104      	movs	r1, #4
 8007596:	4834      	ldr	r0, [pc, #208]	; (8007668 <Input_signal_observe+0x114>)
 8007598:	f7fb f8f7 	bl	800278a <HAL_GPIO_WritePin>
			}
	
			// Check CAM input signal level
			if(HAL_GPIO_ReadPin(GPIOB,14) != HAL_GPIO_ReadPin(GPIOA,11))
 800759c:	210e      	movs	r1, #14
 800759e:	4831      	ldr	r0, [pc, #196]	; (8007664 <Input_signal_observe+0x110>)
 80075a0:	f7fb f8dc 	bl	800275c <HAL_GPIO_ReadPin>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461c      	mov	r4, r3
 80075a8:	210b      	movs	r1, #11
 80075aa:	482f      	ldr	r0, [pc, #188]	; (8007668 <Input_signal_observe+0x114>)
 80075ac:	f7fb f8d6 	bl	800275c <HAL_GPIO_ReadPin>
 80075b0:	4603      	mov	r3, r0
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d004      	beq.n	80075c0 <Input_signal_observe+0x6c>
			{
				HAL_GPIO_WritePin(GPIOA, 4, GPIO_PIN_SET);
 80075b6:	2201      	movs	r2, #1
 80075b8:	2104      	movs	r1, #4
 80075ba:	482b      	ldr	r0, [pc, #172]	; (8007668 <Input_signal_observe+0x114>)
 80075bc:	f7fb f8e5 	bl	800278a <HAL_GPIO_WritePin>
			};
		}

		// Check CAM input signal level
		if (HAL_GPIO_ReadPin(GPIOB, 14) != HAL_GPIO_ReadPin(GPIOA, 11))
 80075c0:	210e      	movs	r1, #14
 80075c2:	4828      	ldr	r0, [pc, #160]	; (8007664 <Input_signal_observe+0x110>)
 80075c4:	f7fb f8ca 	bl	800275c <HAL_GPIO_ReadPin>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461c      	mov	r4, r3
 80075cc:	210b      	movs	r1, #11
 80075ce:	4826      	ldr	r0, [pc, #152]	; (8007668 <Input_signal_observe+0x114>)
 80075d0:	f7fb f8c4 	bl	800275c <HAL_GPIO_ReadPin>
 80075d4:	4603      	mov	r3, r0
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d01d      	beq.n	8007616 <Input_signal_observe+0xc2>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 11) == GPIO_PIN_SET)
 80075da:	210b      	movs	r1, #11
 80075dc:	4822      	ldr	r0, [pc, #136]	; (8007668 <Input_signal_observe+0x114>)
 80075de:	f7fb f8bd 	bl	800275c <HAL_GPIO_ReadPin>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d104      	bne.n	80075f2 <Input_signal_observe+0x9e>
			{
				HAL_GPIO_WritePin(GPIOA, 11, GPIO_PIN_RESET);
 80075e8:	2200      	movs	r2, #0
 80075ea:	210b      	movs	r1, #11
 80075ec:	481e      	ldr	r0, [pc, #120]	; (8007668 <Input_signal_observe+0x114>)
 80075ee:	f7fb f8cc 	bl	800278a <HAL_GPIO_WritePin>
			}
            
            if(HAL_GPIO_ReadPin(GPIOB,12) != HAL_GPIO_ReadPin(GPIOA,6))
 80075f2:	210c      	movs	r1, #12
 80075f4:	481b      	ldr	r0, [pc, #108]	; (8007664 <Input_signal_observe+0x110>)
 80075f6:	f7fb f8b1 	bl	800275c <HAL_GPIO_ReadPin>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461c      	mov	r4, r3
 80075fe:	2106      	movs	r1, #6
 8007600:	4819      	ldr	r0, [pc, #100]	; (8007668 <Input_signal_observe+0x114>)
 8007602:	f7fb f8ab 	bl	800275c <HAL_GPIO_ReadPin>
 8007606:	4603      	mov	r3, r0
 8007608:	429c      	cmp	r4, r3
 800760a:	d004      	beq.n	8007616 <Input_signal_observe+0xc2>
			{
				HAL_GPIO_WritePin(GPIOA, 11, GPIO_PIN_SET);
 800760c:	2201      	movs	r2, #1
 800760e:	210b      	movs	r1, #11
 8007610:	4815      	ldr	r0, [pc, #84]	; (8007668 <Input_signal_observe+0x114>)
 8007612:	f7fb f8ba 	bl	800278a <HAL_GPIO_WritePin>
			};
		}

		if (HAL_GPIO_ReadPin(GPIOB, 12) != HAL_GPIO_ReadPin(GPIOA, 6))
 8007616:	210c      	movs	r1, #12
 8007618:	4812      	ldr	r0, [pc, #72]	; (8007664 <Input_signal_observe+0x110>)
 800761a:	f7fb f89f 	bl	800275c <HAL_GPIO_ReadPin>
 800761e:	4603      	mov	r3, r0
 8007620:	461c      	mov	r4, r3
 8007622:	2106      	movs	r1, #6
 8007624:	4810      	ldr	r0, [pc, #64]	; (8007668 <Input_signal_observe+0x114>)
 8007626:	f7fb f899 	bl	800275c <HAL_GPIO_ReadPin>
 800762a:	4603      	mov	r3, r0
 800762c:	429c      	cmp	r4, r3
 800762e:	d011      	beq.n	8007654 <Input_signal_observe+0x100>
		{
			if (HAL_GPIO_ReadPin(GPIOA, 6) == GPIO_PIN_SET)
 8007630:	2106      	movs	r1, #6
 8007632:	480d      	ldr	r0, [pc, #52]	; (8007668 <Input_signal_observe+0x114>)
 8007634:	f7fb f892 	bl	800275c <HAL_GPIO_ReadPin>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d105      	bne.n	800764a <Input_signal_observe+0xf6>
			{
				HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_RESET);
 800763e:	2200      	movs	r2, #0
 8007640:	2106      	movs	r1, #6
 8007642:	4809      	ldr	r0, [pc, #36]	; (8007668 <Input_signal_observe+0x114>)
 8007644:	f7fb f8a1 	bl	800278a <HAL_GPIO_WritePin>
 8007648:	e004      	b.n	8007654 <Input_signal_observe+0x100>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, 6, GPIO_PIN_SET);
 800764a:	2201      	movs	r2, #1
 800764c:	2106      	movs	r1, #6
 800764e:	4806      	ldr	r0, [pc, #24]	; (8007668 <Input_signal_observe+0x114>)
 8007650:	f7fb f89b 	bl	800278a <HAL_GPIO_WritePin>
			};
		}

		output_level_setting = true;
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <Input_signal_observe+0x118>)
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
	}
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	bf00      	nop
 8007664:	40010c00 	.word	0x40010c00
 8007668:	40010800 	.word	0x40010800
 800766c:	200005e1 	.word	0x200005e1

08007670 <__NVIC_SetPriority>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800767c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007680:	2b00      	cmp	r3, #0
 8007682:	db0a      	blt.n	800769a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	490c      	ldr	r1, [pc, #48]	; (80076bc <__NVIC_SetPriority+0x4c>)
 800768a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768e:	0112      	lsls	r2, r2, #4
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	440b      	add	r3, r1
 8007694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007698:	e00a      	b.n	80076b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	4908      	ldr	r1, [pc, #32]	; (80076c0 <__NVIC_SetPriority+0x50>)
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	3b04      	subs	r3, #4
 80076a8:	0112      	lsls	r2, r2, #4
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	440b      	add	r3, r1
 80076ae:	761a      	strb	r2, [r3, #24]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	e000e100 	.word	0xe000e100
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <Systick_SetPeriod>:
/* Private functions --------------------------------------------------------*/

// Returns the computed value, 0 if impossible
// TODO: #129 Check if operations on SysTick indeed is allowed
void Systick_SetPeriod(float Duration_us)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	uint32_t Nb_Reload;
	float Nb_Reload_Float;
	float Real_Duration_us;
	float In_Freq;

	In_Freq = SystemCoreClock;
 80076cc:	4b34      	ldr	r3, [pc, #208]	; (80077a0 <Systick_SetPeriod+0xdc>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f9 fa99 	bl	8000c08 <__aeabi_ui2f>
 80076d6:	4603      	mov	r3, r0
 80076d8:	60fb      	str	r3, [r7, #12]

	Nb_Reload_Float = Duration_us * In_Freq / 1000000.0;
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7f9 faeb 	bl	8000cb8 <__aeabi_fmul>
 80076e2:	4603      	mov	r3, r0
 80076e4:	492f      	ldr	r1, [pc, #188]	; (80077a4 <Systick_SetPeriod+0xe0>)
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7f9 fb9a 	bl	8000e20 <__aeabi_fdiv>
 80076ec:	4603      	mov	r3, r0
 80076ee:	613b      	str	r3, [r7, #16]
	Nb_Reload = (float) Nb_Reload_Float;
 80076f0:	6938      	ldr	r0, [r7, #16]
 80076f2:	f7f9 fca7 	bl	8001044 <__aeabi_f2uiz>
 80076f6:	4603      	mov	r3, r0
 80076f8:	617b      	str	r3, [r7, #20]
	Real_Duration_us = ((float) Nb_Reload) / In_Freq * 1000000.0;
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f7f9 fa84 	bl	8000c08 <__aeabi_ui2f>
 8007700:	4603      	mov	r3, r0
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	4618      	mov	r0, r3
 8007706:	f7f9 fb8b 	bl	8000e20 <__aeabi_fdiv>
 800770a:	4603      	mov	r3, r0
 800770c:	4925      	ldr	r1, [pc, #148]	; (80077a4 <Systick_SetPeriod+0xe0>)
 800770e:	4618      	mov	r0, r3
 8007710:	f7f9 fad2 	bl	8000cb8 <__aeabi_fmul>
 8007714:	4603      	mov	r3, r0
 8007716:	60bb      	str	r3, [r7, #8]

	// Limit testing
	// No prescaler
	SysTick->CTRL = (SysTick->CTRL) | 1 << 2;
 8007718:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <Systick_SetPeriod+0xe4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a22      	ldr	r2, [pc, #136]	; (80077a8 <Systick_SetPeriod+0xe4>)
 800771e:	f043 0304 	orr.w	r3, r3, #4
 8007722:	6013      	str	r3, [r2, #0]
	if (Nb_Reload_Float >= 16777215.0)  // 2^24-1 max
 8007724:	4921      	ldr	r1, [pc, #132]	; (80077ac <Systick_SetPeriod+0xe8>)
 8007726:	6938      	ldr	r0, [r7, #16]
 8007728:	f7f9 fc78 	bl	800101c <__aeabi_fcmpge>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d024      	beq.n	800777c <Systick_SetPeriod+0xb8>
	{
		// Fix the prescaler to 8
		SysTick->CTRL = (SysTick->CTRL) & ~(1 << 2);
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <Systick_SetPeriod+0xe4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <Systick_SetPeriod+0xe4>)
 8007738:	f023 0304 	bic.w	r3, r3, #4
 800773c:	6013      	str	r3, [r2, #0]
		Nb_Reload_Float = Duration_us * In_Freq / 8000000.0;
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7f9 fab9 	bl	8000cb8 <__aeabi_fmul>
 8007746:	4603      	mov	r3, r0
 8007748:	4919      	ldr	r1, [pc, #100]	; (80077b0 <Systick_SetPeriod+0xec>)
 800774a:	4618      	mov	r0, r3
 800774c:	f7f9 fb68 	bl	8000e20 <__aeabi_fdiv>
 8007750:	4603      	mov	r3, r0
 8007752:	613b      	str	r3, [r7, #16]
		Nb_Reload = (float) Nb_Reload_Float;
 8007754:	6938      	ldr	r0, [r7, #16]
 8007756:	f7f9 fc75 	bl	8001044 <__aeabi_f2uiz>
 800775a:	4603      	mov	r3, r0
 800775c:	617b      	str	r3, [r7, #20]
		Real_Duration_us = ((float) Nb_Reload) / In_Freq * 8000000.0;
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	f7f9 fa52 	bl	8000c08 <__aeabi_ui2f>
 8007764:	4603      	mov	r3, r0
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	4618      	mov	r0, r3
 800776a:	f7f9 fb59 	bl	8000e20 <__aeabi_fdiv>
 800776e:	4603      	mov	r3, r0
 8007770:	490f      	ldr	r1, [pc, #60]	; (80077b0 <Systick_SetPeriod+0xec>)
 8007772:	4618      	mov	r0, r3
 8007774:	f7f9 faa0 	bl	8000cb8 <__aeabi_fmul>
 8007778:	4603      	mov	r3, r0
 800777a:	60bb      	str	r3, [r7, #8]
	}

	if (Nb_Reload_Float >= 16777215.0)  // 2^24-1 max
 800777c:	490b      	ldr	r1, [pc, #44]	; (80077ac <Systick_SetPeriod+0xe8>)
 800777e:	6938      	ldr	r0, [r7, #16]
 8007780:	f7f9 fc4c 	bl	800101c <__aeabi_fcmpge>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <Systick_SetPeriod+0xcc>
	{
		Real_Duration_us = 0.0;
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	60bb      	str	r3, [r7, #8]
	}

	SysTick->LOAD = Nb_Reload;
 8007790:	4a05      	ldr	r2, [pc, #20]	; (80077a8 <Systick_SetPeriod+0xe4>)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	6053      	str	r3, [r2, #4]
}
 8007796:	bf00      	nop
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000030 	.word	0x20000030
 80077a4:	49742400 	.word	0x49742400
 80077a8:	e000e010 	.word	0xe000e010
 80077ac:	4b7fffff 	.word	0x4b7fffff
 80077b0:	4af42400 	.word	0x4af42400

080077b4 <SysTickInit>:

// ## SysTick Timer Init **Prescaler: 64; CRK_RUN_OUT/CAM_delay**
void SysTickInit(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
	// FCPU with PLL = 73,7 MHz
	// Fcy: 36,85 MHz
	// 36,85 Mhz/ 64 = 575,78 kHz = 1.73 µs

	// Disable timer
	SysTick->CTRL &= ~1;
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <SysTickInit+0x38>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <SysTickInit+0x38>)
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	6013      	str	r3, [r2, #0]
	// Systick is not subject to any idle mode
	SysTick->VAL = (2 ^ 24) - 1; // Clear Systick count (Systick is count down and on 24 bits)
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <SysTickInit+0x38>)
 80077c6:	2219      	movs	r2, #25
 80077c8:	609a      	str	r2, [r3, #8]
	// Set to a 105ms period
	Systick_SetPeriod(105000.0);
 80077ca:	4809      	ldr	r0, [pc, #36]	; (80077f0 <SysTickInit+0x3c>)
 80077cc:	f7ff ff7a 	bl	80076c4 <Systick_SetPeriod>
	NVIC_SetPriority(SysTick_IRQn, 2);  // Set Systick interrupt priority
 80077d0:	2102      	movs	r1, #2
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295
 80077d6:	f7ff ff4b 	bl	8007670 <__NVIC_SetPriority>
	// No need to reset flag in systick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;  // Enable Systick interrupt
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <SysTickInit+0x38>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a03      	ldr	r2, [pc, #12]	; (80077ec <SysTickInit+0x38>)
 80077e0:	f043 0302 	orr.w	r3, r3, #2
 80077e4:	6013      	str	r3, [r2, #0]
}
 80077e6:	bf00      	nop
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	e000e010 	.word	0xe000e010
 80077f0:	47cd1400 	.word	0x47cd1400

080077f4 <TIM2_Reset>:
	
}

//## TIM2_Reset **Prescaler: 256; CAM Synchronization; segment time**
void TIM2_Reset(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80077f8:	4807      	ldr	r0, [pc, #28]	; (8007818 <TIM2_Reset+0x24>)
 80077fa:	f7fb fd23 	bl	8003244 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0); // Reset TIM2 counter value
 80077fe:	4b06      	ldr	r3, [pc, #24]	; (8007818 <TIM2_Reset+0x24>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2200      	movs	r2, #0
 8007804:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8007806:	4804      	ldr	r0, [pc, #16]	; (8007818 <TIM2_Reset+0x24>)
 8007808:	f7fb fcca 	bl	80031a0 <HAL_TIM_Base_Start_IT>
	timer_overflow_CAM = 0;
 800780c:	4b03      	ldr	r3, [pc, #12]	; (800781c <TIM2_Reset+0x28>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200009d8 	.word	0x200009d8
 800781c:	200005e4 	.word	0x200005e4

08007820 <TIM_Soft_Start>:

void TIM_Soft_Start(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting == false)
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <TIM_Soft_Start+0x24>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d108      	bne.n	800783e <TIM_Soft_Start+0x1e>
	{
		TIM_Soft_StartTick = HAL_GetTick(); // Systick is used as based
 800782c:	f7fa fcec 	bl	8002208 <HAL_GetTick>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <TIM_Soft_Start+0x28>)
 8007836:	601a      	str	r2, [r3, #0]
		// for the software-encoded timer
		TIM_Soft_Counting = 1;
 8007838:	4b02      	ldr	r3, [pc, #8]	; (8007844 <TIM_Soft_Start+0x24>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
	}
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000b14 	.word	0x20000b14
 8007848:	20000b08 	.word	0x20000b08

0800784c <TIM_Soft_Stop>:

void TIM_Soft_Stop(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting)
 8007850:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <TIM_Soft_Stop+0x64>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d028      	beq.n	80078aa <TIM_Soft_Stop+0x5e>
	{
		TIM_Soft_Counting = 0;
 8007858:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <TIM_Soft_Stop+0x64>)
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
		TIM_Soft_StopTick =  HAL_GetTick();
 800785e:	f7fa fcd3 	bl	8002208 <HAL_GetTick>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <TIM_Soft_Stop+0x68>)
 8007868:	601a      	str	r2, [r3, #0]
		TIM_Soft_TicksCounted += ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <TIM_Soft_Stop+0x68>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <TIM_Soft_Stop+0x6c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	1ad2      	subs	r2, r2, r3
				+ TIM_Soft_CounterOverflow * 62999)
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <TIM_Soft_Stop+0x70>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f24f 6117 	movw	r1, #62999	; 0xf617
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	4413      	add	r3, r2
				% 62999;
 8007882:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <TIM_Soft_Stop+0x74>)
 8007884:	fb82 1203 	smull	r1, r2, r2, r3
 8007888:	441a      	add	r2, r3
 800788a:	13d1      	asrs	r1, r2, #15
 800788c:	17da      	asrs	r2, r3, #31
 800788e:	1a8a      	subs	r2, r1, r2
 8007890:	f24f 6117 	movw	r1, #62999	; 0xf617
 8007894:	fb01 f202 	mul.w	r2, r1, r2
 8007898:	1a9a      	subs	r2, r3, r2
		TIM_Soft_TicksCounted += ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <TIM_Soft_Stop+0x78>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4413      	add	r3, r2
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <TIM_Soft_Stop+0x78>)
 80078a2:	6013      	str	r3, [r2, #0]
		TIM_Soft_CounterOverflow = 0;
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <TIM_Soft_Stop+0x70>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
	}
}
 80078aa:	bf00      	nop
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000b14 	.word	0x20000b14
 80078b4:	20000b0c 	.word	0x20000b0c
 80078b8:	20000b08 	.word	0x20000b08
 80078bc:	20000b10 	.word	0x20000b10
 80078c0:	85279547 	.word	0x85279547
 80078c4:	20000b18 	.word	0x20000b18

080078c8 <TIM_Soft_Reset>:

void TIM_Soft_Reset(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
	TIM_Soft_StartTick = 0;
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <TIM_Soft_Reset+0x24>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
	TIM_Soft_StopTick = 0;
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <TIM_Soft_Reset+0x28>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
	TIM_Soft_TicksCounted = 0;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <TIM_Soft_Reset+0x2c>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
	TIM_Soft_CounterOverflow = 0;
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <TIM_Soft_Reset+0x30>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr
 80078ec:	20000b08 	.word	0x20000b08
 80078f0:	20000b0c 	.word	0x20000b0c
 80078f4:	20000b18 	.word	0x20000b18
 80078f8:	20000b10 	.word	0x20000b10

080078fc <TIM_Soft_GetCounter>:

int TIM_Soft_GetCounter(void)
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
	if (TIM_Soft_Counting)
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <TIM_Soft_GetCounter+0x4c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d018      	beq.n	800793a <TIM_Soft_GetCounter+0x3e>
	{
		return ((TIM_Soft_StopTick - TIM_Soft_StartTick)
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <TIM_Soft_GetCounter+0x50>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <TIM_Soft_GetCounter+0x54>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	1ad2      	subs	r2, r2, r3
				+ TIM_Soft_CounterOverflow * 62999)
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <TIM_Soft_GetCounter+0x58>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f24f 6117 	movw	r1, #62999	; 0xf617
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
				% 62999;
 8007920:	4a0d      	ldr	r2, [pc, #52]	; (8007958 <TIM_Soft_GetCounter+0x5c>)
 8007922:	fb82 1203 	smull	r1, r2, r2, r3
 8007926:	441a      	add	r2, r3
 8007928:	13d1      	asrs	r1, r2, #15
 800792a:	17da      	asrs	r2, r3, #31
 800792c:	1a8a      	subs	r2, r1, r2
 800792e:	f24f 6117 	movw	r1, #62999	; 0xf617
 8007932:	fb01 f202 	mul.w	r2, r1, r2
 8007936:	1a9a      	subs	r2, r3, r2
 8007938:	e001      	b.n	800793e <TIM_Soft_GetCounter+0x42>
	}
	else
	{
		return TIM_Soft_TicksCounted;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <TIM_Soft_GetCounter+0x60>)
 800793c:	681a      	ldr	r2, [r3, #0]
	}
}
 800793e:	4613      	mov	r3, r2
 8007940:	4618      	mov	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr
 8007948:	20000b14 	.word	0x20000b14
 800794c:	20000b0c 	.word	0x20000b0c
 8007950:	20000b08 	.word	0x20000b08
 8007954:	20000b10 	.word	0x20000b10
 8007958:	85279547 	.word	0x85279547
 800795c:	20000b18 	.word	0x20000b18

08007960 <GetTimestamp>:

// Returns a timestamp in microseconds
int GetTimestamp(void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
    uint32_t nb_of_periods;
    uint32_t val;
    uint32_t load;

	nb_of_periods = HAL_GetTick();
 8007966:	f7fa fc4f 	bl	8002208 <HAL_GetTick>
 800796a:	60f8      	str	r0, [r7, #12]
	val = SysTick->VAL;
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <GetTimestamp+0x40>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	60bb      	str	r3, [r7, #8]
	load = SysTick->LOAD;
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <GetTimestamp+0x40>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	607b      	str	r3, [r7, #4]

    // Do not factorize for precision purposes
    return nb_of_periods * SYSTICK_US_PERIOD + (load + 1 - val) * SYSTICK_US_PERIOD / (load + 1);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <GetTimestamp+0x44>)
 800797c:	fb03 f202 	mul.w	r2, r3, r2
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	1acb      	subs	r3, r1, r3
 8007986:	3301      	adds	r3, #1
 8007988:	4906      	ldr	r1, [pc, #24]	; (80079a4 <GetTimestamp+0x44>)
 800798a:	fb03 f101 	mul.w	r1, r3, r1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3301      	adds	r3, #1
 8007992:	fbb1 f3f3 	udiv	r3, r1, r3
 8007996:	4413      	add	r3, r2
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	0001d4c0 	.word	0x0001d4c0

080079a8 <USART_ProcessMessage>:
extern volatile bool should_record;

/* Public functions ----------------------------------------------------------*/

void USART_ProcessMessage(void)
{
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0

	data_counter = 0; //Set data counter to 0
 80079ae:	4b9f      	ldr	r3, [pc, #636]	; (8007c2c <USART_ProcessMessage+0x284>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

	input_char_counter = 0; //Set input char counter to 0
 80079b4:	4b9e      	ldr	r3, [pc, #632]	; (8007c30 <USART_ProcessMessage+0x288>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]

	message_identify = input_chars[0]; //Read message identifier
 80079ba:	4b9e      	ldr	r3, [pc, #632]	; (8007c34 <USART_ProcessMessage+0x28c>)
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	4b9e      	ldr	r3, [pc, #632]	; (8007c38 <USART_ProcessMessage+0x290>)
 80079c0:	701a      	strb	r2, [r3, #0]

	int i; //Set counter variable to read received message in for-loop

	if (message_identify == '2' && CAM_config == false)
 80079c2:	4b9d      	ldr	r3, [pc, #628]	; (8007c38 <USART_ProcessMessage+0x290>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b32      	cmp	r3, #50	; 0x32
 80079c8:	f040 80ca 	bne.w	8007b60 <USART_ProcessMessage+0x1b8>
 80079cc:	4b9b      	ldr	r3, [pc, #620]	; (8007c3c <USART_ProcessMessage+0x294>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f083 0301 	eor.w	r3, r3, #1
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80c2 	beq.w	8007b60 <USART_ProcessMessage+0x1b8>
	{
		for (i = 1; i < strlen(input_chars); i++)
 80079dc:	2301      	movs	r3, #1
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	e0ab      	b.n	8007b3a <USART_ProcessMessage+0x192>
		{
			char temp = input_chars[i];
 80079e2:	4a94      	ldr	r2, [pc, #592]	; (8007c34 <USART_ProcessMessage+0x28c>)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	70fb      	strb	r3, [r7, #3]

			if (temp == '/')
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	2b2f      	cmp	r3, #47	; 0x2f
 80079f0:	d121      	bne.n	8007a36 <USART_ProcessMessage+0x8e>
			{
				if (data_counter > 4)
 80079f2:	4b8e      	ldr	r3, [pc, #568]	; (8007c2c <USART_ProcessMessage+0x284>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	dd14      	ble.n	8007a24 <USART_ProcessMessage+0x7c>
				{
					CAM_edges[cam_setup_counter][data_counter - 5] = atof(
 80079fa:	4b91      	ldr	r3, [pc, #580]	; (8007c40 <USART_ProcessMessage+0x298>)
 80079fc:	681c      	ldr	r4, [r3, #0]
 80079fe:	4b8b      	ldr	r3, [pc, #556]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	1f5d      	subs	r5, r3, #5
 8007a04:	488f      	ldr	r0, [pc, #572]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007a06:	f000 ff4f 	bl	80088a8 <atof>
 8007a0a:	4a8f      	ldr	r2, [pc, #572]	; (8007c48 <USART_ProcessMessage+0x2a0>)
 8007a0c:	4623      	mov	r3, r4
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4423      	add	r3, r4
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	442b      	add	r3, r5
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	e9c3 0100 	strd	r0, r1, [r3]
							temp_chars_5);
					temp_chars_5[0] = '\0';
 8007a1e:	4b89      	ldr	r3, [pc, #548]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
				}

				data_counter++;
 8007a24:	4b81      	ldr	r3, [pc, #516]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	4a80      	ldr	r2, [pc, #512]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a2c:	6013      	str	r3, [r2, #0]
				input_char_counter = 0;
 8007a2e:	4b80      	ldr	r3, [pc, #512]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e05e      	b.n	8007af4 <USART_ProcessMessage+0x14c>
			}
			else if (data_counter > 0 && data_counter < 5)
 8007a36:	4b7d      	ldr	r3, [pc, #500]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dd4a      	ble.n	8007ad4 <USART_ProcessMessage+0x12c>
 8007a3e:	4b7b      	ldr	r3, [pc, #492]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	dc46      	bgt.n	8007ad4 <USART_ProcessMessage+0x12c>
			{
				switch (data_counter)
 8007a46:	4b79      	ldr	r3, [pc, #484]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d83b      	bhi.n	8007ac8 <USART_ProcessMessage+0x120>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <USART_ProcessMessage+0xb0>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007ab1 	.word	0x08007ab1
				{

				case 1:
				{
					temp_chars_1[input_char_counter] = temp;
 8007a68:	4b71      	ldr	r3, [pc, #452]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4977      	ldr	r1, [pc, #476]	; (8007c4c <USART_ProcessMessage+0x2a4>)
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	54ca      	strb	r2, [r1, r3]

					temp_chars_1[input_char_counter + 1] = '\0';
 8007a72:	4b6f      	ldr	r3, [pc, #444]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a74      	ldr	r2, [pc, #464]	; (8007c4c <USART_ProcessMessage+0x2a4>)
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	54d1      	strb	r1, [r2, r3]

					break;
 8007a7e:	e023      	b.n	8007ac8 <USART_ProcessMessage+0x120>
				}
				case 2:
				{
					temp_chars_2[input_char_counter] = temp;
 8007a80:	4b6b      	ldr	r3, [pc, #428]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4972      	ldr	r1, [pc, #456]	; (8007c50 <USART_ProcessMessage+0x2a8>)
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	54ca      	strb	r2, [r1, r3]

					temp_chars_2[input_char_counter + 1] = '\0';
 8007a8a:	4b69      	ldr	r3, [pc, #420]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a6f      	ldr	r2, [pc, #444]	; (8007c50 <USART_ProcessMessage+0x2a8>)
 8007a92:	2100      	movs	r1, #0
 8007a94:	54d1      	strb	r1, [r2, r3]

					break;
 8007a96:	e017      	b.n	8007ac8 <USART_ProcessMessage+0x120>
				}
				case 3:
				{
					temp_chars_3[input_char_counter] = temp;
 8007a98:	4b65      	ldr	r3, [pc, #404]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	496d      	ldr	r1, [pc, #436]	; (8007c54 <USART_ProcessMessage+0x2ac>)
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	54ca      	strb	r2, [r1, r3]

					temp_chars_3[input_char_counter + 1] = '\0';
 8007aa2:	4b63      	ldr	r3, [pc, #396]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4a6a      	ldr	r2, [pc, #424]	; (8007c54 <USART_ProcessMessage+0x2ac>)
 8007aaa:	2100      	movs	r1, #0
 8007aac:	54d1      	strb	r1, [r2, r3]

					break;
 8007aae:	e00b      	b.n	8007ac8 <USART_ProcessMessage+0x120>
				}
				case 4:
				{
					temp_chars_4[input_char_counter] = temp;
 8007ab0:	4b5f      	ldr	r3, [pc, #380]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4968      	ldr	r1, [pc, #416]	; (8007c58 <USART_ProcessMessage+0x2b0>)
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	54ca      	strb	r2, [r1, r3]

					temp_chars_4[input_char_counter + 1] = '\0';
 8007aba:	4b5d      	ldr	r3, [pc, #372]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <USART_ProcessMessage+0x2b0>)
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	54d1      	strb	r1, [r2, r3]

					break;
 8007ac6:	bf00      	nop
				}

				}

				input_char_counter++;
 8007ac8:	4b59      	ldr	r3, [pc, #356]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a58      	ldr	r2, [pc, #352]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e00f      	b.n	8007af4 <USART_ProcessMessage+0x14c>
			}
			else
			{
				temp_chars_5[input_char_counter] = temp;
 8007ad4:	4b56      	ldr	r3, [pc, #344]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	495a      	ldr	r1, [pc, #360]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	54ca      	strb	r2, [r1, r3]

				temp_chars_5[input_char_counter + 1] = '\0';
 8007ade:	4b54      	ldr	r3, [pc, #336]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a57      	ldr	r2, [pc, #348]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	54d1      	strb	r1, [r2, r3]

				input_char_counter++;
 8007aea:	4b51      	ldr	r3, [pc, #324]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3301      	adds	r3, #1
 8007af0:	4a4f      	ldr	r2, [pc, #316]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007af2:	6013      	str	r3, [r2, #0]

			}

			if (i == strlen(input_chars) - 1)
 8007af4:	484f      	ldr	r0, [pc, #316]	; (8007c34 <USART_ProcessMessage+0x28c>)
 8007af6:	f7f8 fb2b 	bl	8000150 <strlen>
 8007afa:	4603      	mov	r3, r0
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d117      	bne.n	8007b34 <USART_ProcessMessage+0x18c>
			{
				CAM_edges[cam_setup_counter][data_counter - 5] = atof(
 8007b04:	4b4e      	ldr	r3, [pc, #312]	; (8007c40 <USART_ProcessMessage+0x298>)
 8007b06:	681c      	ldr	r4, [r3, #0]
 8007b08:	4b48      	ldr	r3, [pc, #288]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	1f5d      	subs	r5, r3, #5
 8007b0e:	484d      	ldr	r0, [pc, #308]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007b10:	f000 feca 	bl	80088a8 <atof>
 8007b14:	4a4c      	ldr	r2, [pc, #304]	; (8007c48 <USART_ProcessMessage+0x2a0>)
 8007b16:	4623      	mov	r3, r4
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4423      	add	r3, r4
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	442b      	add	r3, r5
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4413      	add	r3, r2
 8007b24:	e9c3 0100 	strd	r0, r1, [r3]
						temp_chars_5);
				temp_chars_5[0] = '\0';
 8007b28:	4b46      	ldr	r3, [pc, #280]	; (8007c44 <USART_ProcessMessage+0x29c>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]

				input_char_counter = 0;
 8007b2e:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
		for (i = 1; i < strlen(input_chars); i++)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	483e      	ldr	r0, [pc, #248]	; (8007c34 <USART_ProcessMessage+0x28c>)
 8007b3c:	f7f8 fb08 	bl	8000150 <strlen>
 8007b40:	4602      	mov	r2, r0
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f63f af4c 	bhi.w	80079e2 <USART_ProcessMessage+0x3a>
			}

		}

		number_active_edges_CAM[cam_setup_counter] = atoi(temp_chars_1);
 8007b4a:	4840      	ldr	r0, [pc, #256]	; (8007c4c <USART_ProcessMessage+0x2a4>)
 8007b4c:	f000 feaf 	bl	80088ae <atoi>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b3b      	ldr	r3, [pc, #236]	; (8007c40 <USART_ProcessMessage+0x298>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4611      	mov	r1, r2
 8007b58:	4a40      	ldr	r2, [pc, #256]	; (8007c5c <USART_ProcessMessage+0x2b4>)
 8007b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007b5e:	e0d7      	b.n	8007d10 <USART_ProcessMessage+0x368>

	}
	else
	{
		for (i = 1; i < strlen(input_chars); i++)
 8007b60:	2301      	movs	r3, #1
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e0cc      	b.n	8007d00 <USART_ProcessMessage+0x358>
		{
			char temp = input_chars[i];
 8007b66:	4a33      	ldr	r2, [pc, #204]	; (8007c34 <USART_ProcessMessage+0x28c>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	70bb      	strb	r3, [r7, #2]

			if (temp == '/')
 8007b70:	78bb      	ldrb	r3, [r7, #2]
 8007b72:	2b2f      	cmp	r3, #47	; 0x2f
 8007b74:	d108      	bne.n	8007b88 <USART_ProcessMessage+0x1e0>
			{
				data_counter++;
 8007b76:	4b2d      	ldr	r3, [pc, #180]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	4a2b      	ldr	r2, [pc, #172]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007b7e:	6013      	str	r3, [r2, #0]
				input_char_counter = 0;
 8007b80:	4b2b      	ldr	r3, [pc, #172]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e0b8      	b.n	8007cfa <USART_ProcessMessage+0x352>
			}
			else if (data_counter > 0)
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f340 80b4 	ble.w	8007cfa <USART_ProcessMessage+0x352>
			{
				switch (data_counter)
 8007b92:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <USART_ProcessMessage+0x284>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	f200 80a9 	bhi.w	8007cf0 <USART_ProcessMessage+0x348>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USART_ProcessMessage+0x1fc>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007be5 	.word	0x08007be5
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007c15 	.word	0x08007c15
 8007bb4:	08007c61 	.word	0x08007c61
 8007bb8:	08007c79 	.word	0x08007c79
 8007bbc:	08007c91 	.word	0x08007c91
 8007bc0:	08007ca9 	.word	0x08007ca9
 8007bc4:	08007cc1 	.word	0x08007cc1
 8007bc8:	08007cd9 	.word	0x08007cd9
				{

				case 1:
				{
					temp_chars_1[input_char_counter] = temp;
 8007bcc:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	491e      	ldr	r1, [pc, #120]	; (8007c4c <USART_ProcessMessage+0x2a4>)
 8007bd2:	78ba      	ldrb	r2, [r7, #2]
 8007bd4:	54ca      	strb	r2, [r1, r3]

					temp_chars_1[input_char_counter + 1] = '\0';
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <USART_ProcessMessage+0x2a4>)
 8007bde:	2100      	movs	r1, #0
 8007be0:	54d1      	strb	r1, [r2, r3]

					break;
 8007be2:	e085      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 2:
				{
					temp_chars_2[input_char_counter] = temp;
 8007be4:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4919      	ldr	r1, [pc, #100]	; (8007c50 <USART_ProcessMessage+0x2a8>)
 8007bea:	78ba      	ldrb	r2, [r7, #2]
 8007bec:	54ca      	strb	r2, [r1, r3]

					temp_chars_2[input_char_counter + 1] = '\0';
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <USART_ProcessMessage+0x2a8>)
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	54d1      	strb	r1, [r2, r3]

					break;
 8007bfa:	e079      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 3:
				{
					temp_chars_3[input_char_counter] = temp;
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4914      	ldr	r1, [pc, #80]	; (8007c54 <USART_ProcessMessage+0x2ac>)
 8007c02:	78ba      	ldrb	r2, [r7, #2]
 8007c04:	54ca      	strb	r2, [r1, r3]

					temp_chars_3[input_char_counter + 1] = '\0';
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	4a11      	ldr	r2, [pc, #68]	; (8007c54 <USART_ProcessMessage+0x2ac>)
 8007c0e:	2100      	movs	r1, #0
 8007c10:	54d1      	strb	r1, [r2, r3]

					break;
 8007c12:	e06d      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 4:
				{
					temp_chars_4[input_char_counter] = temp;
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	490f      	ldr	r1, [pc, #60]	; (8007c58 <USART_ProcessMessage+0x2b0>)
 8007c1a:	78ba      	ldrb	r2, [r7, #2]
 8007c1c:	54ca      	strb	r2, [r1, r3]

					temp_chars_4[input_char_counter + 1] = '\0';
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <USART_ProcessMessage+0x288>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	4a0c      	ldr	r2, [pc, #48]	; (8007c58 <USART_ProcessMessage+0x2b0>)
 8007c26:	2100      	movs	r1, #0
 8007c28:	54d1      	strb	r1, [r2, r3]

					break;
 8007c2a:	e061      	b.n	8007cf0 <USART_ProcessMessage+0x348>
 8007c2c:	20000794 	.word	0x20000794
 8007c30:	20000894 	.word	0x20000894
 8007c34:	20000798 	.word	0x20000798
 8007c38:	20000988 	.word	0x20000988
 8007c3c:	2000065e 	.word	0x2000065e
 8007c40:	200005dc 	.word	0x200005dc
 8007c44:	200008f8 	.word	0x200008f8
 8007c48:	200002c8 	.word	0x200002c8
 8007c4c:	20000898 	.word	0x20000898
 8007c50:	200008b0 	.word	0x200008b0
 8007c54:	200008c8 	.word	0x200008c8
 8007c58:	200008e0 	.word	0x200008e0
 8007c5c:	200002a8 	.word	0x200002a8
				}
				case 5:
				{
					temp_chars_5[input_char_counter] = temp;
 8007c60:	4b7a      	ldr	r3, [pc, #488]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	497a      	ldr	r1, [pc, #488]	; (8007e50 <USART_ProcessMessage+0x4a8>)
 8007c66:	78ba      	ldrb	r2, [r7, #2]
 8007c68:	54ca      	strb	r2, [r1, r3]

					temp_chars_5[input_char_counter + 1] = '\0';
 8007c6a:	4b78      	ldr	r3, [pc, #480]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	4a77      	ldr	r2, [pc, #476]	; (8007e50 <USART_ProcessMessage+0x4a8>)
 8007c72:	2100      	movs	r1, #0
 8007c74:	54d1      	strb	r1, [r2, r3]

					break;
 8007c76:	e03b      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 6:
				{
					temp_chars_6[input_char_counter] = temp;
 8007c78:	4b74      	ldr	r3, [pc, #464]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4975      	ldr	r1, [pc, #468]	; (8007e54 <USART_ProcessMessage+0x4ac>)
 8007c7e:	78ba      	ldrb	r2, [r7, #2]
 8007c80:	54ca      	strb	r2, [r1, r3]

					temp_chars_6[input_char_counter + 1] = '\0';
 8007c82:	4b72      	ldr	r3, [pc, #456]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	4a72      	ldr	r2, [pc, #456]	; (8007e54 <USART_ProcessMessage+0x4ac>)
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	54d1      	strb	r1, [r2, r3]
					break;
 8007c8e:	e02f      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 7:
				{
					temp_chars_7[input_char_counter] = temp;
 8007c90:	4b6e      	ldr	r3, [pc, #440]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4970      	ldr	r1, [pc, #448]	; (8007e58 <USART_ProcessMessage+0x4b0>)
 8007c96:	78ba      	ldrb	r2, [r7, #2]
 8007c98:	54ca      	strb	r2, [r1, r3]

					temp_chars_7[input_char_counter + 1] = '\0';
 8007c9a:	4b6c      	ldr	r3, [pc, #432]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	4a6d      	ldr	r2, [pc, #436]	; (8007e58 <USART_ProcessMessage+0x4b0>)
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	54d1      	strb	r1, [r2, r3]

					break;
 8007ca6:	e023      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 8:
				{
					temp_chars_8[input_char_counter] = temp;
 8007ca8:	4b68      	ldr	r3, [pc, #416]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	496b      	ldr	r1, [pc, #428]	; (8007e5c <USART_ProcessMessage+0x4b4>)
 8007cae:	78ba      	ldrb	r2, [r7, #2]
 8007cb0:	54ca      	strb	r2, [r1, r3]

					temp_chars_8[input_char_counter + 1] = '\0';
 8007cb2:	4b66      	ldr	r3, [pc, #408]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	4a68      	ldr	r2, [pc, #416]	; (8007e5c <USART_ProcessMessage+0x4b4>)
 8007cba:	2100      	movs	r1, #0
 8007cbc:	54d1      	strb	r1, [r2, r3]

					break;
 8007cbe:	e017      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 9:
				{
					temp_chars_9[input_char_counter] = temp;
 8007cc0:	4b62      	ldr	r3, [pc, #392]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4966      	ldr	r1, [pc, #408]	; (8007e60 <USART_ProcessMessage+0x4b8>)
 8007cc6:	78ba      	ldrb	r2, [r7, #2]
 8007cc8:	54ca      	strb	r2, [r1, r3]

					temp_chars_9[input_char_counter + 1] = '\0';
 8007cca:	4b60      	ldr	r3, [pc, #384]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	4a63      	ldr	r2, [pc, #396]	; (8007e60 <USART_ProcessMessage+0x4b8>)
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	54d1      	strb	r1, [r2, r3]

					break;
 8007cd6:	e00b      	b.n	8007cf0 <USART_ProcessMessage+0x348>
				}
				case 10:
				{
					temp_chars_10[input_char_counter] = temp;
 8007cd8:	4b5c      	ldr	r3, [pc, #368]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4961      	ldr	r1, [pc, #388]	; (8007e64 <USART_ProcessMessage+0x4bc>)
 8007cde:	78ba      	ldrb	r2, [r7, #2]
 8007ce0:	54ca      	strb	r2, [r1, r3]

					temp_chars_10[input_char_counter + 1] = '\0';
 8007ce2:	4b5a      	ldr	r3, [pc, #360]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	4a5e      	ldr	r2, [pc, #376]	; (8007e64 <USART_ProcessMessage+0x4bc>)
 8007cea:	2100      	movs	r1, #0
 8007cec:	54d1      	strb	r1, [r2, r3]

					break;
 8007cee:	bf00      	nop
				}

				}

				input_char_counter++;
 8007cf0:	4b56      	ldr	r3, [pc, #344]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a55      	ldr	r2, [pc, #340]	; (8007e4c <USART_ProcessMessage+0x4a4>)
 8007cf8:	6013      	str	r3, [r2, #0]
		for (i = 1; i < strlen(input_chars); i++)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	607b      	str	r3, [r7, #4]
 8007d00:	4859      	ldr	r0, [pc, #356]	; (8007e68 <USART_ProcessMessage+0x4c0>)
 8007d02:	f7f8 fa25 	bl	8000150 <strlen>
 8007d06:	4602      	mov	r2, r0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f63f af2b 	bhi.w	8007b66 <USART_ProcessMessage+0x1be>
			}
		}
	}

	//set specific variables of actual message
	switch (message_identify)
 8007d10:	4b56      	ldr	r3, [pc, #344]	; (8007e6c <USART_ProcessMessage+0x4c4>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	3b31      	subs	r3, #49	; 0x31
 8007d16:	2b49      	cmp	r3, #73	; 0x49
 8007d18:	f200 8496 	bhi.w	8008648 <USART_ProcessMessage+0xca0>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USART_ProcessMessage+0x37c>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007e71 	.word	0x08007e71
 8007d28:	08007f91 	.word	0x08007f91
 8007d2c:	08008075 	.word	0x08008075
 8007d30:	080080af 	.word	0x080080af
 8007d34:	08008165 	.word	0x08008165
 8007d38:	0800865d 	.word	0x0800865d
 8007d3c:	0800818d 	.word	0x0800818d
 8007d40:	080081ef 	.word	0x080081ef
 8007d44:	08008243 	.word	0x08008243
 8007d48:	08008649 	.word	0x08008649
 8007d4c:	08008649 	.word	0x08008649
 8007d50:	08008649 	.word	0x08008649
 8007d54:	08008649 	.word	0x08008649
 8007d58:	08008649 	.word	0x08008649
 8007d5c:	08008649 	.word	0x08008649
 8007d60:	08008649 	.word	0x08008649
 8007d64:	08008649 	.word	0x08008649
 8007d68:	08008649 	.word	0x08008649
 8007d6c:	08008649 	.word	0x08008649
 8007d70:	08008649 	.word	0x08008649
 8007d74:	08008649 	.word	0x08008649
 8007d78:	08008649 	.word	0x08008649
 8007d7c:	08008649 	.word	0x08008649
 8007d80:	08008649 	.word	0x08008649
 8007d84:	08008649 	.word	0x08008649
 8007d88:	08008649 	.word	0x08008649
 8007d8c:	08008649 	.word	0x08008649
 8007d90:	08008649 	.word	0x08008649
 8007d94:	08008649 	.word	0x08008649
 8007d98:	08008649 	.word	0x08008649
 8007d9c:	08008649 	.word	0x08008649
 8007da0:	08008649 	.word	0x08008649
 8007da4:	08008649 	.word	0x08008649
 8007da8:	08008649 	.word	0x08008649
 8007dac:	08008649 	.word	0x08008649
 8007db0:	08008649 	.word	0x08008649
 8007db4:	08008649 	.word	0x08008649
 8007db8:	08008649 	.word	0x08008649
 8007dbc:	08008649 	.word	0x08008649
 8007dc0:	08008649 	.word	0x08008649
 8007dc4:	08008649 	.word	0x08008649
 8007dc8:	08008649 	.word	0x08008649
 8007dcc:	08008649 	.word	0x08008649
 8007dd0:	08008649 	.word	0x08008649
 8007dd4:	08008649 	.word	0x08008649
 8007dd8:	08008649 	.word	0x08008649
 8007ddc:	08008649 	.word	0x08008649
 8007de0:	08008649 	.word	0x08008649
 8007de4:	0800865d 	.word	0x0800865d
 8007de8:	0800828f 	.word	0x0800828f
 8007dec:	080082cd 	.word	0x080082cd
 8007df0:	0800865d 	.word	0x0800865d
 8007df4:	08008649 	.word	0x08008649
 8007df8:	0800865d 	.word	0x0800865d
 8007dfc:	0800865d 	.word	0x0800865d
 8007e00:	08008327 	.word	0x08008327
 8007e04:	08008373 	.word	0x08008373
 8007e08:	080083f5 	.word	0x080083f5
 8007e0c:	08008443 	.word	0x08008443
 8007e10:	08008549 	.word	0x08008549
 8007e14:	0800859b 	.word	0x0800859b
 8007e18:	080085ed 	.word	0x080085ed
 8007e1c:	08008649 	.word	0x08008649
 8007e20:	08008649 	.word	0x08008649
 8007e24:	08008649 	.word	0x08008649
 8007e28:	08008649 	.word	0x08008649
 8007e2c:	08008649 	.word	0x08008649
 8007e30:	08008649 	.word	0x08008649
 8007e34:	08008649 	.word	0x08008649
 8007e38:	08008649 	.word	0x08008649
 8007e3c:	08008649 	.word	0x08008649
 8007e40:	08008649 	.word	0x08008649
 8007e44:	08008649 	.word	0x08008649
 8007e48:	080085f5 	.word	0x080085f5
 8007e4c:	20000894 	.word	0x20000894
 8007e50:	200008f8 	.word	0x200008f8
 8007e54:	20000910 	.word	0x20000910
 8007e58:	20000928 	.word	0x20000928
 8007e5c:	20000940 	.word	0x20000940
 8007e60:	20000958 	.word	0x20000958
 8007e64:	20000970 	.word	0x20000970
 8007e68:	20000798 	.word	0x20000798
 8007e6c:	20000988 	.word	0x20000988
	{
	case ('1'): // CRK configuration
	{
		if (CRK_config == false)
 8007e70:	4b9f      	ldr	r3, [pc, #636]	; (80080f0 <USART_ProcessMessage+0x748>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f083 0301 	eor.w	r3, r3, #1
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8085 	beq.w	8007f8a <USART_ProcessMessage+0x5e2>
		{
			if (data_counter == 7)
 8007e80:	4b9c      	ldr	r3, [pc, #624]	; (80080f4 <USART_ProcessMessage+0x74c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b07      	cmp	r3, #7
 8007e86:	d17e      	bne.n	8007f86 <USART_ProcessMessage+0x5de>
			{
				number_teeth_CRK = atoi(temp_chars_1);
 8007e88:	489b      	ldr	r0, [pc, #620]	; (80080f8 <USART_ProcessMessage+0x750>)
 8007e8a:	f000 fd10 	bl	80088ae <atoi>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4a9a      	ldr	r2, [pc, #616]	; (80080fc <USART_ProcessMessage+0x754>)
 8007e92:	6013      	str	r3, [r2, #0]
				number_miss_teeth = atoi(temp_chars_2);
 8007e94:	489a      	ldr	r0, [pc, #616]	; (8008100 <USART_ProcessMessage+0x758>)
 8007e96:	f000 fd0a 	bl	80088ae <atoi>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4a99      	ldr	r2, [pc, #612]	; (8008104 <USART_ProcessMessage+0x75c>)
 8007e9e:	6013      	str	r3, [r2, #0]
				number_gap = atoi(temp_chars_3);
 8007ea0:	4899      	ldr	r0, [pc, #612]	; (8008108 <USART_ProcessMessage+0x760>)
 8007ea2:	f000 fd04 	bl	80088ae <atoi>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4a98      	ldr	r2, [pc, #608]	; (800810c <USART_ProcessMessage+0x764>)
 8007eaa:	6013      	str	r3, [r2, #0]
				tdc_to_gap = atof(temp_chars_4);
 8007eac:	4898      	ldr	r0, [pc, #608]	; (8008110 <USART_ProcessMessage+0x768>)
 8007eae:	f000 fcfb 	bl	80088a8 <atof>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4997      	ldr	r1, [pc, #604]	; (8008114 <USART_ProcessMessage+0x76c>)
 8007eb8:	e9c1 2300 	strd	r2, r3, [r1]
				first_seg_angle = atof(temp_chars_5);
 8007ebc:	4896      	ldr	r0, [pc, #600]	; (8008118 <USART_ProcessMessage+0x770>)
 8007ebe:	f000 fcf3 	bl	80088a8 <atof>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4995      	ldr	r1, [pc, #596]	; (800811c <USART_ProcessMessage+0x774>)
 8007ec8:	e9c1 2300 	strd	r2, r3, [r1]
				number_cylinder = atoi(temp_chars_6);
 8007ecc:	4894      	ldr	r0, [pc, #592]	; (8008120 <USART_ProcessMessage+0x778>)
 8007ece:	f000 fcee 	bl	80088ae <atoi>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a93      	ldr	r2, [pc, #588]	; (8008124 <USART_ProcessMessage+0x77c>)
 8007ed6:	6013      	str	r3, [r2, #0]
				sensortype_CRK = temp_chars_7[0];
 8007ed8:	4b93      	ldr	r3, [pc, #588]	; (8008128 <USART_ProcessMessage+0x780>)
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	4b93      	ldr	r3, [pc, #588]	; (800812c <USART_ProcessMessage+0x784>)
 8007ede:	701a      	strb	r2, [r3, #0]

				if (number_teeth_CRK > 255 || number_miss_teeth > 2
 8007ee0:	4b86      	ldr	r3, [pc, #536]	; (80080fc <USART_ProcessMessage+0x754>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2bff      	cmp	r3, #255	; 0xff
 8007ee6:	dc42      	bgt.n	8007f6e <USART_ProcessMessage+0x5c6>
 8007ee8:	4b86      	ldr	r3, [pc, #536]	; (8008104 <USART_ProcessMessage+0x75c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	dc3e      	bgt.n	8007f6e <USART_ProcessMessage+0x5c6>
						|| number_gap > 3 || tdc_to_gap > 360.0
 8007ef0:	4b86      	ldr	r3, [pc, #536]	; (800810c <USART_ProcessMessage+0x764>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	dc3a      	bgt.n	8007f6e <USART_ProcessMessage+0x5c6>
 8007ef8:	4b86      	ldr	r3, [pc, #536]	; (8008114 <USART_ProcessMessage+0x76c>)
 8007efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	4b8b      	ldr	r3, [pc, #556]	; (8008130 <USART_ProcessMessage+0x788>)
 8007f04:	f7f8 fd78 	bl	80009f8 <__aeabi_dcmpgt>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d12f      	bne.n	8007f6e <USART_ProcessMessage+0x5c6>
						|| number_teeth_CRK <= 0 || number_miss_teeth <= 0
 8007f0e:	4b7b      	ldr	r3, [pc, #492]	; (80080fc <USART_ProcessMessage+0x754>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd2b      	ble.n	8007f6e <USART_ProcessMessage+0x5c6>
 8007f16:	4b7b      	ldr	r3, [pc, #492]	; (8008104 <USART_ProcessMessage+0x75c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd27      	ble.n	8007f6e <USART_ProcessMessage+0x5c6>
						|| number_gap <= 0 || tdc_to_gap <= 0
 8007f1e:	4b7b      	ldr	r3, [pc, #492]	; (800810c <USART_ProcessMessage+0x764>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd23      	ble.n	8007f6e <USART_ProcessMessage+0x5c6>
 8007f26:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <USART_ProcessMessage+0x76c>)
 8007f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	f7f8 fd4c 	bl	80009d0 <__aeabi_dcmple>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d117      	bne.n	8007f6e <USART_ProcessMessage+0x5c6>
						|| first_seg_angle <= 0 || number_cylinder <= 0
 8007f3e:	4b77      	ldr	r3, [pc, #476]	; (800811c <USART_ProcessMessage+0x774>)
 8007f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	f7f8 fd40 	bl	80009d0 <__aeabi_dcmple>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10b      	bne.n	8007f6e <USART_ProcessMessage+0x5c6>
 8007f56:	4b73      	ldr	r3, [pc, #460]	; (8008124 <USART_ProcessMessage+0x77c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dd07      	ble.n	8007f6e <USART_ProcessMessage+0x5c6>
						|| (sensortype_CRK != 'c' && sensortype_CRK != 'h'))
 8007f5e:	4b73      	ldr	r3, [pc, #460]	; (800812c <USART_ProcessMessage+0x784>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b63      	cmp	r3, #99	; 0x63
 8007f64:	d005      	beq.n	8007f72 <USART_ProcessMessage+0x5ca>
 8007f66:	4b71      	ldr	r3, [pc, #452]	; (800812c <USART_ProcessMessage+0x784>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b68      	cmp	r3, #104	; 0x68
 8007f6c:	d001      	beq.n	8007f72 <USART_ProcessMessage+0x5ca>
				{
					USART_COM_error();
 8007f6e:	f000 fbb9 	bl	80086e4 <USART_COM_error>
				}

				//configure CRK if no communication error is present
				if (com_error == false)
 8007f72:	4b70      	ldr	r3, [pc, #448]	; (8008134 <USART_ProcessMessage+0x78c>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f083 0301 	eor.w	r3, r3, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <USART_ProcessMessage+0x5e2>
				{
					CRK_configuration();
 8007f80:	f7ff f8e4 	bl	800714c <CRK_configuration>
 8007f84:	e001      	b.n	8007f8a <USART_ProcessMessage+0x5e2>
				}

			}
			else
			{
				USART_COM_error();
 8007f86:	f000 fbad 	bl	80086e4 <USART_COM_error>
			}
		}
		// Delete temporary character arrays
		Reset_temp_arrays();
 8007f8a:	f000 fc55 	bl	8008838 <Reset_temp_arrays>

		break;
 8007f8e:	e368      	b.n	8008662 <USART_ProcessMessage+0xcba>

	}

	case ('2'): // CAM configuration
	{
		if (CAM_config == false)
 8007f90:	4b69      	ldr	r3, [pc, #420]	; (8008138 <USART_ProcessMessage+0x790>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f083 0301 	eor.w	r3, r3, #1
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d067      	beq.n	800806e <USART_ProcessMessage+0x6c6>
		{
			if (data_counter
					== (4 + number_active_edges_CAM[cam_setup_counter]))
 8007f9e:	4b67      	ldr	r3, [pc, #412]	; (800813c <USART_ProcessMessage+0x794>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a67      	ldr	r2, [pc, #412]	; (8008140 <USART_ProcessMessage+0x798>)
 8007fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4a52      	ldr	r2, [pc, #328]	; (80080f4 <USART_ProcessMessage+0x74c>)
 8007fac:	6812      	ldr	r2, [r2, #0]
			if (data_counter
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d15b      	bne.n	800806a <USART_ProcessMessage+0x6c2>
			{
				number_of_CAM = atoi(temp_chars_2);
 8007fb2:	4853      	ldr	r0, [pc, #332]	; (8008100 <USART_ProcessMessage+0x758>)
 8007fb4:	f000 fc7b 	bl	80088ae <atoi>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4a62      	ldr	r2, [pc, #392]	; (8008144 <USART_ProcessMessage+0x79c>)
 8007fbc:	6013      	str	r3, [r2, #0]
				active_CAM_edges[cam_setup_counter] = temp_chars_3[0];
 8007fbe:	4b5f      	ldr	r3, [pc, #380]	; (800813c <USART_ProcessMessage+0x794>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a51      	ldr	r2, [pc, #324]	; (8008108 <USART_ProcessMessage+0x760>)
 8007fc4:	7811      	ldrb	r1, [r2, #0]
 8007fc6:	4a60      	ldr	r2, [pc, #384]	; (8008148 <USART_ProcessMessage+0x7a0>)
 8007fc8:	54d1      	strb	r1, [r2, r3]
				filter_time_CAM[cam_setup_counter] = atof(temp_chars_4);
 8007fca:	4b5c      	ldr	r3, [pc, #368]	; (800813c <USART_ProcessMessage+0x794>)
 8007fcc:	681c      	ldr	r4, [r3, #0]
 8007fce:	4850      	ldr	r0, [pc, #320]	; (8008110 <USART_ProcessMessage+0x768>)
 8007fd0:	f000 fc6a 	bl	80088a8 <atof>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	485c      	ldr	r0, [pc, #368]	; (800814c <USART_ProcessMessage+0x7a4>)
 8007fda:	00e1      	lsls	r1, r4, #3
 8007fdc:	4401      	add	r1, r0
 8007fde:	e9c1 2300 	strd	r2, r3, [r1]

				if (filter_time_CAM[cam_setup_counter] <= 0
 8007fe2:	4b56      	ldr	r3, [pc, #344]	; (800813c <USART_ProcessMessage+0x794>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a59      	ldr	r2, [pc, #356]	; (800814c <USART_ProcessMessage+0x7a4>)
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	f7f8 fcea 	bl	80009d0 <__aeabi_dcmple>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d119      	bne.n	8008036 <USART_ProcessMessage+0x68e>
						|| number_active_edges_CAM[cam_setup_counter] <= 0
 8008002:	4b4e      	ldr	r3, [pc, #312]	; (800813c <USART_ProcessMessage+0x794>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a4e      	ldr	r2, [pc, #312]	; (8008140 <USART_ProcessMessage+0x798>)
 8008008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d012      	beq.n	8008036 <USART_ProcessMessage+0x68e>
						|| CAM_edges[cam_setup_counter][0] <= 0)
 8008010:	4b4a      	ldr	r3, [pc, #296]	; (800813c <USART_ProcessMessage+0x794>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	494e      	ldr	r1, [pc, #312]	; (8008150 <USART_ProcessMessage+0x7a8>)
 8008016:	4613      	mov	r3, r2
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	4413      	add	r3, r2
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	440b      	add	r3, r1
 8008020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	f7f8 fcd0 	bl	80009d0 <__aeabi_dcmple>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <USART_ProcessMessage+0x692>
				{
					USART_COM_error();
 8008036:	f000 fb55 	bl	80086e4 <USART_COM_error>
				}

				cam_setup_counter++;
 800803a:	4b40      	ldr	r3, [pc, #256]	; (800813c <USART_ProcessMessage+0x794>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	4a3e      	ldr	r2, [pc, #248]	; (800813c <USART_ProcessMessage+0x794>)
 8008042:	6013      	str	r3, [r2, #0]
				//configure CAM if no communication error is present
				if (com_error == false && (cam_setup_counter == number_of_CAM))
 8008044:	4b3b      	ldr	r3, [pc, #236]	; (8008134 <USART_ProcessMessage+0x78c>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f083 0301 	eor.w	r3, r3, #1
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <USART_ProcessMessage+0x6c6>
 8008052:	4b3a      	ldr	r3, [pc, #232]	; (800813c <USART_ProcessMessage+0x794>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b3b      	ldr	r3, [pc, #236]	; (8008144 <USART_ProcessMessage+0x79c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d107      	bne.n	800806e <USART_ProcessMessage+0x6c6>
				{
					cam_setup_counter = 0;
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <USART_ProcessMessage+0x794>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
					CAM_configuration();
 8008064:	f7ff f93a 	bl	80072dc <CAM_configuration>
 8008068:	e001      	b.n	800806e <USART_ProcessMessage+0x6c6>
				}
			}
			else
			{
				USART_COM_error();
 800806a:	f000 fb3b 	bl	80086e4 <USART_COM_error>
			}
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 800806e:	f000 fbe3 	bl	8008838 <Reset_temp_arrays>

		break;
 8008072:	e2f6      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('3'): // CRK configuration delete
	{
		if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008074:	4b1f      	ldr	r3, [pc, #124]	; (80080f4 <USART_ProcessMessage+0x74c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d113      	bne.n	80080a4 <USART_ProcessMessage+0x6fc>
 800807c:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <USART_ProcessMessage+0x750>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b53      	cmp	r3, #83	; 0x53
 8008082:	d10f      	bne.n	80080a4 <USART_ProcessMessage+0x6fc>
		{
			CRK_config = false;
 8008084:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <USART_ProcessMessage+0x748>)
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]

			configuration_complete = false;
 800808a:	4b32      	ldr	r3, [pc, #200]	; (8008154 <USART_ProcessMessage+0x7ac>)
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
			CRK_synch = false;
 8008090:	4b31      	ldr	r3, [pc, #196]	; (8008158 <USART_ProcessMessage+0x7b0>)
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
			CRK_CAM_synch = false;
 8008096:	4b31      	ldr	r3, [pc, #196]	; (800815c <USART_ProcessMessage+0x7b4>)
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
			//CRK_CAM_synch[1] = false;
			CRK_synch_temp = false;
 800809c:	4b30      	ldr	r3, [pc, #192]	; (8008160 <USART_ProcessMessage+0x7b8>)
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	e001      	b.n	80080a8 <USART_ProcessMessage+0x700>
		}
		else
		{
			USART_COM_error();
 80080a4:	f000 fb1e 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80080a8:	f000 fbc6 	bl	8008838 <Reset_temp_arrays>

		break;
 80080ac:	e2d9      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('4'): // CAM configuration delete
	{
		if (data_counter == 1 && temp_chars_1[0] == 'S')
 80080ae:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <USART_ProcessMessage+0x74c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d116      	bne.n	80080e4 <USART_ProcessMessage+0x73c>
 80080b6:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <USART_ProcessMessage+0x750>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b53      	cmp	r3, #83	; 0x53
 80080bc:	d112      	bne.n	80080e4 <USART_ProcessMessage+0x73c>
		{
			CAM_config = false;
 80080be:	4b1e      	ldr	r3, [pc, #120]	; (8008138 <USART_ProcessMessage+0x790>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]

			cam_setup_counter = 0;
 80080c4:	4b1d      	ldr	r3, [pc, #116]	; (800813c <USART_ProcessMessage+0x794>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]

			configuration_complete = false;
 80080ca:	4b22      	ldr	r3, [pc, #136]	; (8008154 <USART_ProcessMessage+0x7ac>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
			CRK_synch = false;
 80080d0:	4b21      	ldr	r3, [pc, #132]	; (8008158 <USART_ProcessMessage+0x7b0>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
			CRK_CAM_synch = false;
 80080d6:	4b21      	ldr	r3, [pc, #132]	; (800815c <USART_ProcessMessage+0x7b4>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
			//CRK_CAM_synch[1] = false;
			CRK_synch_temp = false;
 80080dc:	4b20      	ldr	r3, [pc, #128]	; (8008160 <USART_ProcessMessage+0x7b8>)
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e001      	b.n	80080e8 <USART_ProcessMessage+0x740>
		}
		else
		{
			USART_COM_error();
 80080e4:	f000 fafe 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80080e8:	f000 fba6 	bl	8008838 <Reset_temp_arrays>

		break;
 80080ec:	e2b9      	b.n	8008662 <USART_ProcessMessage+0xcba>
 80080ee:	bf00      	nop
 80080f0:	200002a4 	.word	0x200002a4
 80080f4:	20000794 	.word	0x20000794
 80080f8:	20000898 	.word	0x20000898
 80080fc:	2000022c 	.word	0x2000022c
 8008100:	200008b0 	.word	0x200008b0
 8008104:	20000230 	.word	0x20000230
 8008108:	200008c8 	.word	0x200008c8
 800810c:	20000234 	.word	0x20000234
 8008110:	200008e0 	.word	0x200008e0
 8008114:	20000238 	.word	0x20000238
 8008118:	200008f8 	.word	0x200008f8
 800811c:	20000240 	.word	0x20000240
 8008120:	20000910 	.word	0x20000910
 8008124:	20000248 	.word	0x20000248
 8008128:	20000928 	.word	0x20000928
 800812c:	20000250 	.word	0x20000250
 8008130:	40768000 	.word	0x40768000
 8008134:	20000987 	.word	0x20000987
 8008138:	2000065e 	.word	0x2000065e
 800813c:	200005dc 	.word	0x200005dc
 8008140:	200002a8 	.word	0x200002a8
 8008144:	20000008 	.word	0x20000008
 8008148:	200005d8 	.word	0x200005d8
 800814c:	200002b8 	.word	0x200002b8
 8008150:	200002c8 	.word	0x200002c8
 8008154:	200005e0 	.word	0x200005e0
 8008158:	200002a0 	.word	0x200002a0
 800815c:	2000065c 	.word	0x2000065c
 8008160:	200002a1 	.word	0x200002a1
	}

	case ('5'): // active_cam_failure init
	{
		if (data_counter == 1 && (atoi(temp_chars_1) <= 2))
 8008164:	4b92      	ldr	r3, [pc, #584]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10c      	bne.n	8008186 <USART_ProcessMessage+0x7de>
 800816c:	4891      	ldr	r0, [pc, #580]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 800816e:	f000 fb9e 	bl	80088ae <atoi>
 8008172:	4603      	mov	r3, r0
 8008174:	2b02      	cmp	r3, #2
 8008176:	dc06      	bgt.n	8008186 <USART_ProcessMessage+0x7de>
		{
			active_cam_failure = atoi(temp_chars_1);
 8008178:	488e      	ldr	r0, [pc, #568]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 800817a:	f000 fb98 	bl	80088ae <atoi>
 800817e:	4603      	mov	r3, r0
 8008180:	4a8d      	ldr	r2, [pc, #564]	; (80083b8 <USART_ProcessMessage+0xa10>)
 8008182:	6013      	str	r3, [r2, #0]
		}
		else
		{
			USART_COM_error();
		}
		break;
 8008184:	e26d      	b.n	8008662 <USART_ProcessMessage+0xcba>
			USART_COM_error();
 8008186:	f000 faad 	bl	80086e4 <USART_COM_error>
		break;
 800818a:	e26a      	b.n	8008662 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('7'): // CRK_RUN_OUT(START or STOP)
	{
		if (data_counter == 4 && temp_chars_1[0] == 'B')
 800818c:	4b88      	ldr	r3, [pc, #544]	; (80083b0 <USART_ProcessMessage+0xa08>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d119      	bne.n	80081c8 <USART_ProcessMessage+0x820>
 8008194:	4b87      	ldr	r3, [pc, #540]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b42      	cmp	r3, #66	; 0x42
 800819a:	d115      	bne.n	80081c8 <USART_ProcessMessage+0x820>
		{
			angle_to_start_failure_CRK_RUN_OUT = atoi(temp_chars_2);
 800819c:	4887      	ldr	r0, [pc, #540]	; (80083bc <USART_ProcessMessage+0xa14>)
 800819e:	f000 fb86 	bl	80088ae <atoi>
 80081a2:	4603      	mov	r3, r0
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b86      	ldr	r3, [pc, #536]	; (80083c0 <USART_ProcessMessage+0xa18>)
 80081a8:	601a      	str	r2, [r3, #0]
			sc_type_CRK_RUN_OUT = temp_chars_3[0];
 80081aa:	4b86      	ldr	r3, [pc, #536]	; (80083c4 <USART_ProcessMessage+0xa1c>)
 80081ac:	781a      	ldrb	r2, [r3, #0]
 80081ae:	4b86      	ldr	r3, [pc, #536]	; (80083c8 <USART_ProcessMessage+0xa20>)
 80081b0:	701a      	strb	r2, [r3, #0]
			failure_period_CRK_RUN_OUT = atoi(temp_chars_4);
 80081b2:	4886      	ldr	r0, [pc, #536]	; (80083cc <USART_ProcessMessage+0xa24>)
 80081b4:	f000 fb7b 	bl	80088ae <atoi>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	4b84      	ldr	r3, [pc, #528]	; (80083d0 <USART_ProcessMessage+0xa28>)
 80081be:	601a      	str	r2, [r3, #0]

			failure_identify = '4';
 80081c0:	4b84      	ldr	r3, [pc, #528]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 80081c2:	2234      	movs	r2, #52	; 0x34
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	e00f      	b.n	80081e8 <USART_ProcessMessage+0x840>
		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 80081c8:	4b79      	ldr	r3, [pc, #484]	; (80083b0 <USART_ProcessMessage+0xa08>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d109      	bne.n	80081e4 <USART_ProcessMessage+0x83c>
 80081d0:	4b78      	ldr	r3, [pc, #480]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b53      	cmp	r3, #83	; 0x53
 80081d6:	d105      	bne.n	80081e4 <USART_ProcessMessage+0x83c>
		{
			failure_identify = '0';
 80081d8:	4b7e      	ldr	r3, [pc, #504]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 80081da:	2230      	movs	r2, #48	; 0x30
 80081dc:	701a      	strb	r2, [r3, #0]

			CRK_RUN_OUT_reset();
 80081de:	f7fc f801 	bl	80041e4 <CRK_RUN_OUT_reset>
 80081e2:	e001      	b.n	80081e8 <USART_ProcessMessage+0x840>
		}
		else
		{
			USART_COM_error();
 80081e4:	f000 fa7e 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80081e8:	f000 fb26 	bl	8008838 <Reset_temp_arrays>

		break;
 80081ec:	e239      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('8'): // CAM_PER(START or STOP)
	{
		if (data_counter == 3 && temp_chars_1[0] == 'B')
 80081ee:	4b70      	ldr	r3, [pc, #448]	; (80083b0 <USART_ProcessMessage+0xa08>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d112      	bne.n	800821c <USART_ProcessMessage+0x874>
 80081f6:	4b6f      	ldr	r3, [pc, #444]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b42      	cmp	r3, #66	; 0x42
 80081fc:	d10e      	bne.n	800821c <USART_ProcessMessage+0x874>
		{
			active_edges_CAM_PER = temp_chars_2[0];
 80081fe:	4b6f      	ldr	r3, [pc, #444]	; (80083bc <USART_ProcessMessage+0xa14>)
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	4b75      	ldr	r3, [pc, #468]	; (80083d8 <USART_ProcessMessage+0xa30>)
 8008204:	701a      	strb	r2, [r3, #0]
			number_edges_CAM_PER = atoi(temp_chars_3);
 8008206:	486f      	ldr	r0, [pc, #444]	; (80083c4 <USART_ProcessMessage+0xa1c>)
 8008208:	f000 fb51 	bl	80088ae <atoi>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	4b72      	ldr	r3, [pc, #456]	; (80083dc <USART_ProcessMessage+0xa34>)
 8008212:	601a      	str	r2, [r3, #0]

			failure_identify = '5';
 8008214:	4b6f      	ldr	r3, [pc, #444]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 8008216:	2235      	movs	r2, #53	; 0x35
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e00f      	b.n	800823c <USART_ProcessMessage+0x894>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 800821c:	4b64      	ldr	r3, [pc, #400]	; (80083b0 <USART_ProcessMessage+0xa08>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d109      	bne.n	8008238 <USART_ProcessMessage+0x890>
 8008224:	4b63      	ldr	r3, [pc, #396]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b53      	cmp	r3, #83	; 0x53
 800822a:	d105      	bne.n	8008238 <USART_ProcessMessage+0x890>
		{
			failure_identify = '0';
 800822c:	4b69      	ldr	r3, [pc, #420]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 800822e:	2230      	movs	r2, #48	; 0x30
 8008230:	701a      	strb	r2, [r3, #0]
			CAM_PER_reset();
 8008232:	f7fc fa2d 	bl	8004690 <CAM_PER_reset>
 8008236:	e001      	b.n	800823c <USART_ProcessMessage+0x894>

		}
		else
		{
			USART_COM_error();
 8008238:	f000 fa54 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 800823c:	f000 fafc 	bl	8008838 <Reset_temp_arrays>

		break;
 8008240:	e20f      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('9'): // CRK_TOOTH_PER(START or STOP)
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 8008242:	4b5b      	ldr	r3, [pc, #364]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d10e      	bne.n	8008268 <USART_ProcessMessage+0x8c0>
 800824a:	4b5a      	ldr	r3, [pc, #360]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b42      	cmp	r3, #66	; 0x42
 8008250:	d10a      	bne.n	8008268 <USART_ProcessMessage+0x8c0>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim3, 17);
 8008252:	4b63      	ldr	r3, [pc, #396]	; (80083e0 <USART_ProcessMessage+0xa38>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2211      	movs	r2, #17
 8008258:	62da      	str	r2, [r3, #44]	; 0x2c
 800825a:	4b61      	ldr	r3, [pc, #388]	; (80083e0 <USART_ProcessMessage+0xa38>)
 800825c:	2211      	movs	r2, #17
 800825e:	60da      	str	r2, [r3, #12]
			failure_identify = '6';
 8008260:	4b5c      	ldr	r3, [pc, #368]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 8008262:	2236      	movs	r2, #54	; 0x36
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e00f      	b.n	8008288 <USART_ProcessMessage+0x8e0>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008268:	4b51      	ldr	r3, [pc, #324]	; (80083b0 <USART_ProcessMessage+0xa08>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d109      	bne.n	8008284 <USART_ProcessMessage+0x8dc>
 8008270:	4b50      	ldr	r3, [pc, #320]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b53      	cmp	r3, #83	; 0x53
 8008276:	d105      	bne.n	8008284 <USART_ProcessMessage+0x8dc>
		{
			failure_identify = '0';
 8008278:	4b56      	ldr	r3, [pc, #344]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 800827a:	2230      	movs	r2, #48	; 0x30
 800827c:	701a      	strb	r2, [r3, #0]

			CRK_TOOTH_PER_reset();
 800827e:	f7fc fa47 	bl	8004710 <CRK_TOOTH_PER_reset>
 8008282:	e001      	b.n	8008288 <USART_ProcessMessage+0x8e0>
		}
		else
		{
			USART_COM_error();
 8008284:	f000 fa2e 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008288:	f000 fad6 	bl	8008838 <Reset_temp_arrays>

		break;
 800828c:	e1e9      	b.n	8008662 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('b'): // CAM_Pat_Err(START or STOP)
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 800828e:	4b48      	ldr	r3, [pc, #288]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d107      	bne.n	80082a6 <USART_ProcessMessage+0x8fe>
 8008296:	4b47      	ldr	r3, [pc, #284]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b42      	cmp	r3, #66	; 0x42
 800829c:	d103      	bne.n	80082a6 <USART_ProcessMessage+0x8fe>
		{
			failure_identify = '8';
 800829e:	4b4d      	ldr	r3, [pc, #308]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 80082a0:	2238      	movs	r2, #56	; 0x38
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e00f      	b.n	80082c6 <USART_ProcessMessage+0x91e>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 80082a6:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <USART_ProcessMessage+0xa08>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d109      	bne.n	80082c2 <USART_ProcessMessage+0x91a>
 80082ae:	4b41      	ldr	r3, [pc, #260]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b53      	cmp	r3, #83	; 0x53
 80082b4:	d105      	bne.n	80082c2 <USART_ProcessMessage+0x91a>
		{
			failure_identify = '0';
 80082b6:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 80082b8:	2230      	movs	r2, #48	; 0x30
 80082ba:	701a      	strb	r2, [r3, #0]
			CAM_PAT_ERR_reset();
 80082bc:	f7fd fb5e 	bl	800597c <CAM_PAT_ERR_reset>
 80082c0:	e001      	b.n	80082c6 <USART_ProcessMessage+0x91e>
		}
		else
		{
			USART_COM_error();
 80082c2:	f000 fa0f 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80082c6:	f000 fab7 	bl	8008838 <Reset_temp_arrays>

		break;
 80082ca:	e1ca      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('c'): // CAM_SYN_CRK(START or STOP)
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 80082cc:	4b38      	ldr	r3, [pc, #224]	; (80083b0 <USART_ProcessMessage+0xa08>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d115      	bne.n	8008300 <USART_ProcessMessage+0x958>
 80082d4:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b42      	cmp	r3, #66	; 0x42
 80082da:	d111      	bne.n	8008300 <USART_ProcessMessage+0x958>
		{
			delay_angle_CAM_delay = atof(temp_chars_2);
 80082dc:	4837      	ldr	r0, [pc, #220]	; (80083bc <USART_ProcessMessage+0xa14>)
 80082de:	f000 fae3 	bl	80088a8 <atof>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	493f      	ldr	r1, [pc, #252]	; (80083e4 <USART_ProcessMessage+0xa3c>)
 80082e8:	e9c1 2300 	strd	r2, r3, [r1]

			delay_factor_CAM_delay = 1;
 80082ec:	493e      	ldr	r1, [pc, #248]	; (80083e8 <USART_ProcessMessage+0xa40>)
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	4b3e      	ldr	r3, [pc, #248]	; (80083ec <USART_ProcessMessage+0xa44>)
 80082f4:	e9c1 2300 	strd	r2, r3, [r1]

			failure_identify = '9';
 80082f8:	4b36      	ldr	r3, [pc, #216]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 80082fa:	2239      	movs	r2, #57	; 0x39
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e00f      	b.n	8008320 <USART_ProcessMessage+0x978>
		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008300:	4b2b      	ldr	r3, [pc, #172]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d109      	bne.n	800831c <USART_ProcessMessage+0x974>
 8008308:	4b2a      	ldr	r3, [pc, #168]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b53      	cmp	r3, #83	; 0x53
 800830e:	d105      	bne.n	800831c <USART_ProcessMessage+0x974>
		{
			failure_identify = '0';
 8008310:	4b30      	ldr	r3, [pc, #192]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 8008312:	2230      	movs	r2, #48	; 0x30
 8008314:	701a      	strb	r2, [r3, #0]
			CAM_delay_reset();
 8008316:	f7fc fed3 	bl	80050c0 <CAM_delay_reset>
 800831a:	e001      	b.n	8008320 <USART_ProcessMessage+0x978>
		}
		else
		{
			USART_COM_error();
 800831c:	f000 f9e2 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008320:	f000 fa8a 	bl	8008838 <Reset_temp_arrays>

		break;
 8008324:	e19d      	b.n	8008662 <USART_ProcessMessage+0xcba>
		break;
	}

	case ('h'): // CRK_TOOTH_OFF
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008326:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d10e      	bne.n	800834c <USART_ProcessMessage+0x9a4>
 800832e:	4b21      	ldr	r3, [pc, #132]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b42      	cmp	r3, #66	; 0x42
 8008334:	d10a      	bne.n	800834c <USART_ProcessMessage+0x9a4>
		{

			number_tooth_off = atoi(temp_chars_2);
 8008336:	4821      	ldr	r0, [pc, #132]	; (80083bc <USART_ProcessMessage+0xa14>)
 8008338:	f000 fab9 	bl	80088ae <atoi>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	4b2b      	ldr	r3, [pc, #172]	; (80083f0 <USART_ProcessMessage+0xa48>)
 8008342:	601a      	str	r2, [r3, #0]
			failure_identify = 'h';
 8008344:	4b23      	ldr	r3, [pc, #140]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 8008346:	2268      	movs	r2, #104	; 0x68
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	e00f      	b.n	800836c <USART_ProcessMessage+0x9c4>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 800834c:	4b18      	ldr	r3, [pc, #96]	; (80083b0 <USART_ProcessMessage+0xa08>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d109      	bne.n	8008368 <USART_ProcessMessage+0x9c0>
 8008354:	4b17      	ldr	r3, [pc, #92]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b53      	cmp	r3, #83	; 0x53
 800835a:	d105      	bne.n	8008368 <USART_ProcessMessage+0x9c0>
		{
			failure_identify = '0';
 800835c:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 800835e:	2230      	movs	r2, #48	; 0x30
 8008360:	701a      	strb	r2, [r3, #0]
			CRK_TOOTH_OFF_reset();
 8008362:	f7fc ffd1 	bl	8005308 <CRK_TOOTH_OFF_reset>
 8008366:	e001      	b.n	800836c <USART_ProcessMessage+0x9c4>
		}
		else
		{
			USART_COM_error();
 8008368:	f000 f9bc 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 800836c:	f000 fa64 	bl	8008838 <Reset_temp_arrays>

		break;
 8008370:	e177      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('i'): // CRK_GAP_NOT_DET
	{
		if (data_counter == 1 && temp_chars_1[0] == 'B')
 8008372:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <USART_ProcessMessage+0xa08>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d107      	bne.n	800838a <USART_ProcessMessage+0x9e2>
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b42      	cmp	r3, #66	; 0x42
 8008380:	d103      	bne.n	800838a <USART_ProcessMessage+0x9e2>
		{

			failure_identify = 'i';
 8008382:	4b14      	ldr	r3, [pc, #80]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 8008384:	2269      	movs	r2, #105	; 0x69
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e00f      	b.n	80083aa <USART_ProcessMessage+0xa02>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 800838a:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <USART_ProcessMessage+0xa08>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d109      	bne.n	80083a6 <USART_ProcessMessage+0x9fe>
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <USART_ProcessMessage+0xa0c>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b53      	cmp	r3, #83	; 0x53
 8008398:	d105      	bne.n	80083a6 <USART_ProcessMessage+0x9fe>
		{
			failure_identify = '0';
 800839a:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <USART_ProcessMessage+0xa2c>)
 800839c:	2230      	movs	r2, #48	; 0x30
 800839e:	701a      	strb	r2, [r3, #0]
			CRK_GAP_NOT_DET_reset();
 80083a0:	f7fd f84a 	bl	8005438 <CRK_GAP_NOT_DET_reset>
 80083a4:	e001      	b.n	80083aa <USART_ProcessMessage+0xa02>
		}
		else
		{
			USART_COM_error();
 80083a6:	f000 f99d 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80083aa:	f000 fa45 	bl	8008838 <Reset_temp_arrays>

		break;
 80083ae:	e158      	b.n	8008662 <USART_ProcessMessage+0xcba>
 80083b0:	20000794 	.word	0x20000794
 80083b4:	20000898 	.word	0x20000898
 80083b8:	20000668 	.word	0x20000668
 80083bc:	200008b0 	.word	0x200008b0
 80083c0:	20000678 	.word	0x20000678
 80083c4:	200008c8 	.word	0x200008c8
 80083c8:	20000673 	.word	0x20000673
 80083cc:	200008e0 	.word	0x200008e0
 80083d0:	2000067c 	.word	0x2000067c
 80083d4:	2000000c 	.word	0x2000000c
 80083d8:	20000694 	.word	0x20000694
 80083dc:	20000690 	.word	0x20000690
 80083e0:	20000a20 	.word	0x20000a20
 80083e4:	20000730 	.word	0x20000730
 80083e8:	20000018 	.word	0x20000018
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	20000744 	.word	0x20000744
	}

	case ('j'): // SEG_ADP_ER_LIM
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 80083f4:	4ba6      	ldr	r3, [pc, #664]	; (8008690 <USART_ProcessMessage+0xce8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d10f      	bne.n	800841c <USART_ProcessMessage+0xa74>
 80083fc:	4ba5      	ldr	r3, [pc, #660]	; (8008694 <USART_ProcessMessage+0xcec>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b42      	cmp	r3, #66	; 0x42
 8008402:	d10b      	bne.n	800841c <USART_ProcessMessage+0xa74>
		{
			crk_delay_SEG_ADP_ER_LIM = atof(temp_chars_2);
 8008404:	48a4      	ldr	r0, [pc, #656]	; (8008698 <USART_ProcessMessage+0xcf0>)
 8008406:	f000 fa4f 	bl	80088a8 <atof>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	49a3      	ldr	r1, [pc, #652]	; (800869c <USART_ProcessMessage+0xcf4>)
 8008410:	e9c1 2300 	strd	r2, r3, [r1]
			failure_identify = 'j';
 8008414:	4ba2      	ldr	r3, [pc, #648]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 8008416:	226a      	movs	r2, #106	; 0x6a
 8008418:	701a      	strb	r2, [r3, #0]
 800841a:	e00f      	b.n	800843c <USART_ProcessMessage+0xa94>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 800841c:	4b9c      	ldr	r3, [pc, #624]	; (8008690 <USART_ProcessMessage+0xce8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d109      	bne.n	8008438 <USART_ProcessMessage+0xa90>
 8008424:	4b9b      	ldr	r3, [pc, #620]	; (8008694 <USART_ProcessMessage+0xcec>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b53      	cmp	r3, #83	; 0x53
 800842a:	d105      	bne.n	8008438 <USART_ProcessMessage+0xa90>
		{
			failure_identify = '0';
 800842c:	4b9c      	ldr	r3, [pc, #624]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 800842e:	2230      	movs	r2, #48	; 0x30
 8008430:	701a      	strb	r2, [r3, #0]
			SEG_ADP_ER_LIM_reset();
 8008432:	f7fd f953 	bl	80056dc <SEG_ADP_ER_LIM_reset>
 8008436:	e001      	b.n	800843c <USART_ProcessMessage+0xa94>
		}
		else
		{
			USART_COM_error();
 8008438:	f000 f954 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 800843c:	f000 f9fc 	bl	8008838 <Reset_temp_arrays>

		break;
 8008440:	e10f      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('k'): // CrkPlsOrng wrong pulse duration
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008442:	4b93      	ldr	r3, [pc, #588]	; (8008690 <USART_ProcessMessage+0xce8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d16b      	bne.n	8008522 <USART_ProcessMessage+0xb7a>
 800844a:	4b92      	ldr	r3, [pc, #584]	; (8008694 <USART_ProcessMessage+0xcec>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b42      	cmp	r3, #66	; 0x42
 8008450:	d167      	bne.n	8008522 <USART_ProcessMessage+0xb7a>
		{
			crk_pulse_duration_CRK_PLS_ORNG = atof(temp_chars_2);
 8008452:	4891      	ldr	r0, [pc, #580]	; (8008698 <USART_ProcessMessage+0xcf0>)
 8008454:	f000 fa28 	bl	80088a8 <atof>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4991      	ldr	r1, [pc, #580]	; (80086a4 <USART_ProcessMessage+0xcfc>)
 800845e:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_AUTORELOAD(&htim4,
 8008462:	4b90      	ldr	r3, [pc, #576]	; (80086a4 <USART_ProcessMessage+0xcfc>)
 8008464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008468:	a387      	add	r3, pc, #540	; (adr r3, 8008688 <USART_ProcessMessage+0xce0>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f95d 	bl	800072c <__aeabi_ddiv>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	f04f 0200 	mov.w	r2, #0
 800847e:	4b8a      	ldr	r3, [pc, #552]	; (80086a8 <USART_ProcessMessage+0xd00>)
 8008480:	f7f7 fe74 	bl	800016c <__adddf3>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4610      	mov	r0, r2
 800848a:	4619      	mov	r1, r3
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	4b86      	ldr	r3, [pc, #536]	; (80086ac <USART_ProcessMessage+0xd04>)
 8008492:	f7f8 f821 	bl	80004d8 <__aeabi_dmul>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 0200 	mov.w	r2, #0
 80084a2:	4b81      	ldr	r3, [pc, #516]	; (80086a8 <USART_ProcessMessage+0xd00>)
 80084a4:	f7f7 fe60 	bl	8000168 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4980      	ldr	r1, [pc, #512]	; (80086b0 <USART_ProcessMessage+0xd08>)
 80084ae:	680c      	ldr	r4, [r1, #0]
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f7f8 fad2 	bl	8000a5c <__aeabi_d2uiz>
 80084b8:	4603      	mov	r3, r0
 80084ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084bc:	4b79      	ldr	r3, [pc, #484]	; (80086a4 <USART_ProcessMessage+0xcfc>)
 80084be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084c2:	a371      	add	r3, pc, #452	; (adr r3, 8008688 <USART_ProcessMessage+0xce0>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f8 f930 	bl	800072c <__aeabi_ddiv>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	4b73      	ldr	r3, [pc, #460]	; (80086a8 <USART_ProcessMessage+0xd00>)
 80084da:	f7f7 fe47 	bl	800016c <__adddf3>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	4b70      	ldr	r3, [pc, #448]	; (80086ac <USART_ProcessMessage+0xd04>)
 80084ec:	f7f7 fff4 	bl	80004d8 <__aeabi_dmul>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4610      	mov	r0, r2
 80084f6:	4619      	mov	r1, r3
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	4b6a      	ldr	r3, [pc, #424]	; (80086a8 <USART_ProcessMessage+0xd00>)
 80084fe:	f7f7 fe33 	bl	8000168 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4610      	mov	r0, r2
 8008508:	4619      	mov	r1, r3
 800850a:	f7f8 faa7 	bl	8000a5c <__aeabi_d2uiz>
 800850e:	4603      	mov	r3, r0
 8008510:	4a67      	ldr	r2, [pc, #412]	; (80086b0 <USART_ProcessMessage+0xd08>)
 8008512:	60d3      	str	r3, [r2, #12]
					18 * ((crk_pulse_duration_CRK_PLS_ORNG / 0.217) + 1) - 1);
			failure_identify = 'k';
 8008514:	4b62      	ldr	r3, [pc, #392]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 8008516:	226b      	movs	r2, #107	; 0x6b
 8008518:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 800851a:	4b66      	ldr	r3, [pc, #408]	; (80086b4 <USART_ProcessMessage+0xd0c>)
 800851c:	2201      	movs	r2, #1
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e00f      	b.n	8008542 <USART_ProcessMessage+0xb9a>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008522:	4b5b      	ldr	r3, [pc, #364]	; (8008690 <USART_ProcessMessage+0xce8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d109      	bne.n	800853e <USART_ProcessMessage+0xb96>
 800852a:	4b5a      	ldr	r3, [pc, #360]	; (8008694 <USART_ProcessMessage+0xcec>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b53      	cmp	r3, #83	; 0x53
 8008530:	d105      	bne.n	800853e <USART_ProcessMessage+0xb96>
		{
			failure_identify = '0';
 8008532:	4b5b      	ldr	r3, [pc, #364]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 8008534:	2230      	movs	r2, #48	; 0x30
 8008536:	701a      	strb	r2, [r3, #0]
			CRK_pulse_duration_reset();
 8008538:	f7fd f906 	bl	8005748 <CRK_pulse_duration_reset>
 800853c:	e001      	b.n	8008542 <USART_ProcessMessage+0xb9a>
		}
		else
		{
			USART_COM_error();
 800853e:	f000 f8d1 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008542:	f000 f979 	bl	8008838 <Reset_temp_arrays>

		break;
 8008546:	e08c      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	case ('l'): // PosnEngStst Wrong engine position at synchronized start
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 8008548:	4b51      	ldr	r3, [pc, #324]	; (8008690 <USART_ProcessMessage+0xce8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d111      	bne.n	8008574 <USART_ProcessMessage+0xbcc>
 8008550:	4b50      	ldr	r3, [pc, #320]	; (8008694 <USART_ProcessMessage+0xcec>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b42      	cmp	r3, #66	; 0x42
 8008556:	d10d      	bne.n	8008574 <USART_ProcessMessage+0xbcc>
		{
			crk_teeth_off_POSN_ENG_STST = atoi(temp_chars_2);
 8008558:	484f      	ldr	r0, [pc, #316]	; (8008698 <USART_ProcessMessage+0xcf0>)
 800855a:	f000 f9a8 	bl	80088ae <atoi>
 800855e:	4603      	mov	r3, r0
 8008560:	461a      	mov	r2, r3
 8008562:	4b55      	ldr	r3, [pc, #340]	; (80086b8 <USART_ProcessMessage+0xd10>)
 8008564:	601a      	str	r2, [r3, #0]
			failure_identify = 'l';
 8008566:	4b4e      	ldr	r3, [pc, #312]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 8008568:	226c      	movs	r2, #108	; 0x6c
 800856a:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 800856c:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <USART_ProcessMessage+0xd0c>)
 800856e:	2201      	movs	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e00f      	b.n	8008594 <USART_ProcessMessage+0xbec>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 8008574:	4b46      	ldr	r3, [pc, #280]	; (8008690 <USART_ProcessMessage+0xce8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d109      	bne.n	8008590 <USART_ProcessMessage+0xbe8>
 800857c:	4b45      	ldr	r3, [pc, #276]	; (8008694 <USART_ProcessMessage+0xcec>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b53      	cmp	r3, #83	; 0x53
 8008582:	d105      	bne.n	8008590 <USART_ProcessMessage+0xbe8>
		{
			failure_identify = '0';
 8008584:	4b46      	ldr	r3, [pc, #280]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 8008586:	2230      	movs	r2, #48	; 0x30
 8008588:	701a      	strb	r2, [r3, #0]
			POSN_ENG_STST_reset();
 800858a:	f7fd f923 	bl	80057d4 <POSN_ENG_STST_reset>
 800858e:	e001      	b.n	8008594 <USART_ProcessMessage+0xbec>
		}
		else
		{
			USART_COM_error();
 8008590:	f000 f8a8 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 8008594:	f000 f950 	bl	8008838 <Reset_temp_arrays>

		break;
 8008598:	e063      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}
	case ('m'): // SC_CAM_CRK set a short circuit to ground or battery, to CAM or CRK
	{
		if (data_counter == 2 && temp_chars_1[0] == 'B')
 800859a:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <USART_ProcessMessage+0xce8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d111      	bne.n	80085c6 <USART_ProcessMessage+0xc1e>
 80085a2:	4b3c      	ldr	r3, [pc, #240]	; (8008694 <USART_ProcessMessage+0xcec>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b42      	cmp	r3, #66	; 0x42
 80085a8:	d10d      	bne.n	80085c6 <USART_ProcessMessage+0xc1e>
		{
			sc_type_SC_CAM_CRK = atoi(temp_chars_2);
 80085aa:	483b      	ldr	r0, [pc, #236]	; (8008698 <USART_ProcessMessage+0xcf0>)
 80085ac:	f000 f97f 	bl	80088ae <atoi>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	4b41      	ldr	r3, [pc, #260]	; (80086bc <USART_ProcessMessage+0xd14>)
 80085b6:	601a      	str	r2, [r3, #0]
			failure_identify = 'm';
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 80085ba:	226d      	movs	r2, #109	; 0x6d
 80085bc:	701a      	strb	r2, [r3, #0]
			failure_active = true;
 80085be:	4b3d      	ldr	r3, [pc, #244]	; (80086b4 <USART_ProcessMessage+0xd0c>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e00f      	b.n	80085e6 <USART_ProcessMessage+0xc3e>

		}
		else if (data_counter == 1 && temp_chars_1[0] == 'S')
 80085c6:	4b32      	ldr	r3, [pc, #200]	; (8008690 <USART_ProcessMessage+0xce8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d109      	bne.n	80085e2 <USART_ProcessMessage+0xc3a>
 80085ce:	4b31      	ldr	r3, [pc, #196]	; (8008694 <USART_ProcessMessage+0xcec>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b53      	cmp	r3, #83	; 0x53
 80085d4:	d105      	bne.n	80085e2 <USART_ProcessMessage+0xc3a>
		{
			failure_identify = '0';
 80085d6:	4b32      	ldr	r3, [pc, #200]	; (80086a0 <USART_ProcessMessage+0xcf8>)
 80085d8:	2230      	movs	r2, #48	; 0x30
 80085da:	701a      	strb	r2, [r3, #0]
			SC_CAM_CRK_reset();
 80085dc:	f7fd fa46 	bl	8005a6c <SC_CAM_CRK_reset>
 80085e0:	e001      	b.n	80085e6 <USART_ProcessMessage+0xc3e>
		}
		else
		{
			USART_COM_error();
 80085e2:	f000 f87f 	bl	80086e4 <USART_COM_error>
		}

		// Delete temporary character arrays
		Reset_temp_arrays();
 80085e6:	f000 f927 	bl	8008838 <Reset_temp_arrays>

		break;
 80085ea:	e03a      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}
	case ('n'):
	{
		should_record = true;
 80085ec:	4b34      	ldr	r3, [pc, #208]	; (80086c0 <USART_ProcessMessage+0xd18>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
		break;
 80085f2:	e036      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}
	case ('z'): // communication validation
	{
		if (data_counter == 0)
 80085f4:	4b26      	ldr	r3, [pc, #152]	; (8008690 <USART_ProcessMessage+0xce8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d120      	bne.n	800863e <USART_ProcessMessage+0xc96>
		{
			if (communication_active == false)
 80085fc:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <USART_ProcessMessage+0xd1c>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f083 0301 	eor.w	r3, r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d015      	beq.n	8008636 <USART_ProcessMessage+0xc8e>
			{
				communication_active = true;
 800860a:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <USART_ProcessMessage+0xd1c>)
 800860c:	2201      	movs	r2, #1
 800860e:	701a      	strb	r2, [r3, #0]
				communication_ready = true;
 8008610:	4b2d      	ldr	r3, [pc, #180]	; (80086c8 <USART_ProcessMessage+0xd20>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]

				SysTick->CTRL &= ~(1); //disable systick
 8008616:	4b2d      	ldr	r3, [pc, #180]	; (80086cc <USART_ProcessMessage+0xd24>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <USART_ProcessMessage+0xd24>)
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	6013      	str	r3, [r2, #0]
				uint8_t msg11 = message[11];
 8008622:	4b2b      	ldr	r3, [pc, #172]	; (80086d0 <USART_ProcessMessage+0xd28>)
 8008624:	7adb      	ldrb	r3, [r3, #11]
 8008626:	703b      	strb	r3, [r7, #0]
				HAL_USART_Transmit_IT(&husart1, &msg11, 1);
 8008628:	463b      	mov	r3, r7
 800862a:	2201      	movs	r2, #1
 800862c:	4619      	mov	r1, r3
 800862e:	4829      	ldr	r0, [pc, #164]	; (80086d4 <USART_ProcessMessage+0xd2c>)
 8008630:	f7fb f9dd 	bl	80039ee <HAL_USART_Transmit_IT>
 8008634:	e005      	b.n	8008642 <USART_ProcessMessage+0xc9a>
			}
			else
			{
				communication_ready = true;
 8008636:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <USART_ProcessMessage+0xd20>)
 8008638:	2201      	movs	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	e001      	b.n	8008642 <USART_ProcessMessage+0xc9a>
			}
		}
		else
		{
			USART_COM_error();
 800863e:	f000 f851 	bl	80086e4 <USART_COM_error>
		}

		Reset_temp_arrays();
 8008642:	f000 f8f9 	bl	8008838 <Reset_temp_arrays>

		break;
 8008646:	e00c      	b.n	8008662 <USART_ProcessMessage+0xcba>
	}

	default:
	{
		if (com_error == false)
 8008648:	4b23      	ldr	r3, [pc, #140]	; (80086d8 <USART_ProcessMessage+0xd30>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f083 0301 	eor.w	r3, r3, #1
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <USART_ProcessMessage+0xcb8>
		{
			USART_COM_error();
 8008656:	f000 f845 	bl	80086e4 <USART_COM_error>
		}

		break;
 800865a:	e001      	b.n	8008660 <USART_ProcessMessage+0xcb8>
		break;
 800865c:	bf00      	nop
 800865e:	e000      	b.n	8008662 <USART_ProcessMessage+0xcba>
		break;
 8008660:	bf00      	nop
	}

	}

	input_chars[0] = '\0';
 8008662:	4b1e      	ldr	r3, [pc, #120]	; (80086dc <USART_ProcessMessage+0xd34>)
 8008664:	2200      	movs	r2, #0
 8008666:	701a      	strb	r2, [r3, #0]

	message_received = false;
 8008668:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <USART_ProcessMessage+0xd38>)
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]

	//communication receive status
	uint8_t msg_communication_receive_ready = message[12];
 800866e:	4b18      	ldr	r3, [pc, #96]	; (80086d0 <USART_ProcessMessage+0xd28>)
 8008670:	7b1b      	ldrb	r3, [r3, #12]
 8008672:	707b      	strb	r3, [r7, #1]
	HAL_USART_Transmit_IT(&husart1, &msg_communication_receive_ready, 1);
 8008674:	1c7b      	adds	r3, r7, #1
 8008676:	2201      	movs	r2, #1
 8008678:	4619      	mov	r1, r3
 800867a:	4816      	ldr	r0, [pc, #88]	; (80086d4 <USART_ProcessMessage+0xd2c>)
 800867c:	f7fb f9b7 	bl	80039ee <HAL_USART_Transmit_IT>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bdb0      	pop	{r4, r5, r7, pc}
 8008688:	ef9db22d 	.word	0xef9db22d
 800868c:	3fcbc6a7 	.word	0x3fcbc6a7
 8008690:	20000794 	.word	0x20000794
 8008694:	20000898 	.word	0x20000898
 8008698:	200008b0 	.word	0x200008b0
 800869c:	20000768 	.word	0x20000768
 80086a0:	2000000c 	.word	0x2000000c
 80086a4:	20000770 	.word	0x20000770
 80086a8:	3ff00000 	.word	0x3ff00000
 80086ac:	40320000 	.word	0x40320000
 80086b0:	20000a68 	.word	0x20000a68
 80086b4:	2000066c 	.word	0x2000066c
 80086b8:	20000778 	.word	0x20000778
 80086bc:	20000788 	.word	0x20000788
 80086c0:	2000078c 	.word	0x2000078c
 80086c4:	20000664 	.word	0x20000664
 80086c8:	20000665 	.word	0x20000665
 80086cc:	e000e010 	.word	0xe000e010
 80086d0:	20000020 	.word	0x20000020
 80086d4:	20000ab0 	.word	0x20000ab0
 80086d8:	20000987 	.word	0x20000987
 80086dc:	20000798 	.word	0x20000798
 80086e0:	20000986 	.word	0x20000986

080086e4 <USART_COM_error>:

//## USART COM Error Function

void USART_COM_error(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
	if (com_error == false)
 80086ea:	4b11      	ldr	r3, [pc, #68]	; (8008730 <USART_COM_error+0x4c>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f083 0301 	eor.w	r3, r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d017      	beq.n	8008728 <USART_COM_error+0x44>
	{
		com_error = true;
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <USART_COM_error+0x4c>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]

		input_chars[0] = '\0';
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <USART_COM_error+0x50>)
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]

		char_counter = 0;
 8008704:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <USART_COM_error+0x54>)
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]

		receiving = false;
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <USART_COM_error+0x58>)
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]

		message_received = false;
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <USART_COM_error+0x5c>)
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]

		//communication error treatment
		uint8_t msg_COM_error = message[0];
 8008716:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <USART_COM_error+0x60>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
		HAL_USART_Transmit_IT(&husart1, &msg_COM_error, 1);
 800871c:	1dfb      	adds	r3, r7, #7
 800871e:	2201      	movs	r2, #1
 8008720:	4619      	mov	r1, r3
 8008722:	4809      	ldr	r0, [pc, #36]	; (8008748 <USART_COM_error+0x64>)
 8008724:	f7fb f963 	bl	80039ee <HAL_USART_Transmit_IT>
	}
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20000987 	.word	0x20000987
 8008734:	20000798 	.word	0x20000798
 8008738:	20000790 	.word	0x20000790
 800873c:	20000985 	.word	0x20000985
 8008740:	20000986 	.word	0x20000986
 8008744:	20000020 	.word	0x20000020
 8008748:	20000ab0 	.word	0x20000ab0

0800874c <USART_send_failure_configuration_status>:

//## USART Send Failure Configuration Status Function

void USART_send_failure_configuration_status(char failure_ident,
		bool failure_conf, bool failure_conf_CAM_blank_out)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	71fb      	strb	r3, [r7, #7]
 8008756:	460b      	mov	r3, r1
 8008758:	71bb      	strb	r3, [r7, #6]
 800875a:	4613      	mov	r3, r2
 800875c:	717b      	strb	r3, [r7, #5]
	if ((failure_ident == '0' || failure_ident == '2') && failure_conf == true)
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	2b30      	cmp	r3, #48	; 0x30
 8008762:	d002      	beq.n	800876a <USART_send_failure_configuration_status+0x1e>
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	2b32      	cmp	r3, #50	; 0x32
 8008768:	d110      	bne.n	800878c <USART_send_failure_configuration_status+0x40>
 800876a:	79bb      	ldrb	r3, [r7, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <USART_send_failure_configuration_status+0x40>
	{
		uint8_t msg_failure_passive = message[8];
 8008770:	4b2d      	ldr	r3, [pc, #180]	; (8008828 <USART_send_failure_configuration_status+0xdc>)
 8008772:	7a1b      	ldrb	r3, [r3, #8]
 8008774:	73fb      	strb	r3, [r7, #15]
		HAL_USART_Transmit_IT(&husart1, &msg_failure_passive, 1);
 8008776:	f107 030f 	add.w	r3, r7, #15
 800877a:	2201      	movs	r2, #1
 800877c:	4619      	mov	r1, r3
 800877e:	482b      	ldr	r0, [pc, #172]	; (800882c <USART_send_failure_configuration_status+0xe0>)
 8008780:	f7fb f935 	bl	80039ee <HAL_USART_Transmit_IT>
		failure_configured = false;
 8008784:	4b2a      	ldr	r3, [pc, #168]	; (8008830 <USART_send_failure_configuration_status+0xe4>)
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
	{
 800878a:	e018      	b.n	80087be <USART_send_failure_configuration_status+0x72>
	}
	else if ((failure_ident != '0' && failure_ident != '2')
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b30      	cmp	r3, #48	; 0x30
 8008790:	d015      	beq.n	80087be <USART_send_failure_configuration_status+0x72>
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	2b32      	cmp	r3, #50	; 0x32
 8008796:	d012      	beq.n	80087be <USART_send_failure_configuration_status+0x72>
			&& failure_conf == false)
 8008798:	79bb      	ldrb	r3, [r7, #6]
 800879a:	f083 0301 	eor.w	r3, r3, #1
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00c      	beq.n	80087be <USART_send_failure_configuration_status+0x72>
	{
		uint8_t msg_failure_active = message[7];
 80087a4:	4b20      	ldr	r3, [pc, #128]	; (8008828 <USART_send_failure_configuration_status+0xdc>)
 80087a6:	79db      	ldrb	r3, [r3, #7]
 80087a8:	73bb      	strb	r3, [r7, #14]
		HAL_USART_Transmit_IT(&husart1, &msg_failure_active, 1);
 80087aa:	f107 030e 	add.w	r3, r7, #14
 80087ae:	2201      	movs	r2, #1
 80087b0:	4619      	mov	r1, r3
 80087b2:	481e      	ldr	r0, [pc, #120]	; (800882c <USART_send_failure_configuration_status+0xe0>)
 80087b4:	f7fb f91b 	bl	80039ee <HAL_USART_Transmit_IT>
		failure_configured = true;
 80087b8:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <USART_send_failure_configuration_status+0xe4>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
	}

	if ((failure_ident != '2' && failure_ident != '3')
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b32      	cmp	r3, #50	; 0x32
 80087c2:	d014      	beq.n	80087ee <USART_send_failure_configuration_status+0xa2>
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b33      	cmp	r3, #51	; 0x33
 80087c8:	d011      	beq.n	80087ee <USART_send_failure_configuration_status+0xa2>
			&& failure_conf_CAM_blank_out == true)
 80087ca:	797b      	ldrb	r3, [r7, #5]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00e      	beq.n	80087ee <USART_send_failure_configuration_status+0xa2>
	{
		uint8_t msg_failure_cam_blank_out_passive = message[10];
 80087d0:	4b15      	ldr	r3, [pc, #84]	; (8008828 <USART_send_failure_configuration_status+0xdc>)
 80087d2:	7a9b      	ldrb	r3, [r3, #10]
 80087d4:	737b      	strb	r3, [r7, #13]
		HAL_USART_Transmit_IT(&husart1, &msg_failure_cam_blank_out_passive, 1);
 80087d6:	f107 030d 	add.w	r3, r7, #13
 80087da:	2201      	movs	r2, #1
 80087dc:	4619      	mov	r1, r3
 80087de:	4813      	ldr	r0, [pc, #76]	; (800882c <USART_send_failure_configuration_status+0xe0>)
 80087e0:	f7fb f905 	bl	80039ee <HAL_USART_Transmit_IT>
		failure_configured_CAM_blank_out = false;
 80087e4:	4b13      	ldr	r3, [pc, #76]	; (8008834 <USART_send_failure_configuration_status+0xe8>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]
	{
 80087ea:	bf00      	nop
	{
		uint8_t msg_failure_cam_blank_out_active = message[9];
		HAL_USART_Transmit_IT(&husart1, &msg_failure_cam_blank_out_active, 1);
		failure_configured_CAM_blank_out = true;
	}
}
 80087ec:	e018      	b.n	8008820 <USART_send_failure_configuration_status+0xd4>
	else if ((failure_ident == '2' || failure_ident == '3')
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b32      	cmp	r3, #50	; 0x32
 80087f2:	d002      	beq.n	80087fa <USART_send_failure_configuration_status+0xae>
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	2b33      	cmp	r3, #51	; 0x33
 80087f8:	d112      	bne.n	8008820 <USART_send_failure_configuration_status+0xd4>
			&& failure_conf_CAM_blank_out == false)
 80087fa:	797b      	ldrb	r3, [r7, #5]
 80087fc:	f083 0301 	eor.w	r3, r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <USART_send_failure_configuration_status+0xd4>
		uint8_t msg_failure_cam_blank_out_active = message[9];
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <USART_send_failure_configuration_status+0xdc>)
 8008808:	7a5b      	ldrb	r3, [r3, #9]
 800880a:	733b      	strb	r3, [r7, #12]
		HAL_USART_Transmit_IT(&husart1, &msg_failure_cam_blank_out_active, 1);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	2201      	movs	r2, #1
 8008812:	4619      	mov	r1, r3
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <USART_send_failure_configuration_status+0xe0>)
 8008816:	f7fb f8ea 	bl	80039ee <HAL_USART_Transmit_IT>
		failure_configured_CAM_blank_out = true;
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <USART_send_failure_configuration_status+0xe8>)
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]
}
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20000020 	.word	0x20000020
 800882c:	20000ab0 	.word	0x20000ab0
 8008830:	20000671 	.word	0x20000671
 8008834:	20000672 	.word	0x20000672

08008838 <Reset_temp_arrays>:

//## USART Reset temporary char-arrays

void Reset_temp_arrays(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
	temp_chars_1[0] = '\0';
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <Reset_temp_arrays+0x48>)
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
	temp_chars_2[0] = '\0';
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <Reset_temp_arrays+0x4c>)
 8008844:	2200      	movs	r2, #0
 8008846:	701a      	strb	r2, [r3, #0]
	temp_chars_3[0] = '\0';
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <Reset_temp_arrays+0x50>)
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
	temp_chars_4[0] = '\0';
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <Reset_temp_arrays+0x54>)
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
	temp_chars_5[0] = '\0';
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <Reset_temp_arrays+0x58>)
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
	temp_chars_6[0] = '\0';
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <Reset_temp_arrays+0x5c>)
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
	temp_chars_7[0] = '\0';
 8008860:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <Reset_temp_arrays+0x60>)
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
	temp_chars_8[0] = '\0';
 8008866:	4b0d      	ldr	r3, [pc, #52]	; (800889c <Reset_temp_arrays+0x64>)
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]
	temp_chars_9[0] = '\0';
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <Reset_temp_arrays+0x68>)
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
	temp_chars_10[0] = '\0';
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <Reset_temp_arrays+0x6c>)
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
}
 8008878:	bf00      	nop
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr
 8008880:	20000898 	.word	0x20000898
 8008884:	200008b0 	.word	0x200008b0
 8008888:	200008c8 	.word	0x200008c8
 800888c:	200008e0 	.word	0x200008e0
 8008890:	200008f8 	.word	0x200008f8
 8008894:	20000910 	.word	0x20000910
 8008898:	20000928 	.word	0x20000928
 800889c:	20000940 	.word	0x20000940
 80088a0:	20000958 	.word	0x20000958
 80088a4:	20000970 	.word	0x20000970

080088a8 <atof>:
 80088a8:	2100      	movs	r1, #0
 80088aa:	f000 bf35 	b.w	8009718 <strtod>

080088ae <atoi>:
 80088ae:	220a      	movs	r2, #10
 80088b0:	2100      	movs	r1, #0
 80088b2:	f000 bfb9 	b.w	8009828 <strtol>
	...

080088b8 <__errno>:
 80088b8:	4b01      	ldr	r3, [pc, #4]	; (80088c0 <__errno+0x8>)
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	2000003c 	.word	0x2000003c

080088c4 <__libc_init_array>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	2600      	movs	r6, #0
 80088c8:	4d0c      	ldr	r5, [pc, #48]	; (80088fc <__libc_init_array+0x38>)
 80088ca:	4c0d      	ldr	r4, [pc, #52]	; (8008900 <__libc_init_array+0x3c>)
 80088cc:	1b64      	subs	r4, r4, r5
 80088ce:	10a4      	asrs	r4, r4, #2
 80088d0:	42a6      	cmp	r6, r4
 80088d2:	d109      	bne.n	80088e8 <__libc_init_array+0x24>
 80088d4:	f002 ff36 	bl	800b744 <_init>
 80088d8:	2600      	movs	r6, #0
 80088da:	4d0a      	ldr	r5, [pc, #40]	; (8008904 <__libc_init_array+0x40>)
 80088dc:	4c0a      	ldr	r4, [pc, #40]	; (8008908 <__libc_init_array+0x44>)
 80088de:	1b64      	subs	r4, r4, r5
 80088e0:	10a4      	asrs	r4, r4, #2
 80088e2:	42a6      	cmp	r6, r4
 80088e4:	d105      	bne.n	80088f2 <__libc_init_array+0x2e>
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ec:	4798      	blx	r3
 80088ee:	3601      	adds	r6, #1
 80088f0:	e7ee      	b.n	80088d0 <__libc_init_array+0xc>
 80088f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f6:	4798      	blx	r3
 80088f8:	3601      	adds	r6, #1
 80088fa:	e7f2      	b.n	80088e2 <__libc_init_array+0x1e>
 80088fc:	0800bbc4 	.word	0x0800bbc4
 8008900:	0800bbc4 	.word	0x0800bbc4
 8008904:	0800bbc4 	.word	0x0800bbc4
 8008908:	0800bbc8 	.word	0x0800bbc8

0800890c <malloc>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <malloc+0xc>)
 800890e:	4601      	mov	r1, r0
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	f000 b873 	b.w	80089fc <_malloc_r>
 8008916:	bf00      	nop
 8008918:	2000003c 	.word	0x2000003c

0800891c <memset>:
 800891c:	4603      	mov	r3, r0
 800891e:	4402      	add	r2, r0
 8008920:	4293      	cmp	r3, r2
 8008922:	d100      	bne.n	8008926 <memset+0xa>
 8008924:	4770      	bx	lr
 8008926:	f803 1b01 	strb.w	r1, [r3], #1
 800892a:	e7f9      	b.n	8008920 <memset+0x4>

0800892c <_free_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4605      	mov	r5, r0
 8008930:	2900      	cmp	r1, #0
 8008932:	d040      	beq.n	80089b6 <_free_r+0x8a>
 8008934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008938:	1f0c      	subs	r4, r1, #4
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfb8      	it	lt
 800893e:	18e4      	addlt	r4, r4, r3
 8008940:	f001 fdde 	bl	800a500 <__malloc_lock>
 8008944:	4a1c      	ldr	r2, [pc, #112]	; (80089b8 <_free_r+0x8c>)
 8008946:	6813      	ldr	r3, [r2, #0]
 8008948:	b933      	cbnz	r3, 8008958 <_free_r+0x2c>
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	6014      	str	r4, [r2, #0]
 800894e:	4628      	mov	r0, r5
 8008950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008954:	f001 bdda 	b.w	800a50c <__malloc_unlock>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d908      	bls.n	800896e <_free_r+0x42>
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	1821      	adds	r1, r4, r0
 8008960:	428b      	cmp	r3, r1
 8008962:	bf01      	itttt	eq
 8008964:	6819      	ldreq	r1, [r3, #0]
 8008966:	685b      	ldreq	r3, [r3, #4]
 8008968:	1809      	addeq	r1, r1, r0
 800896a:	6021      	streq	r1, [r4, #0]
 800896c:	e7ed      	b.n	800894a <_free_r+0x1e>
 800896e:	461a      	mov	r2, r3
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	b10b      	cbz	r3, 8008978 <_free_r+0x4c>
 8008974:	42a3      	cmp	r3, r4
 8008976:	d9fa      	bls.n	800896e <_free_r+0x42>
 8008978:	6811      	ldr	r1, [r2, #0]
 800897a:	1850      	adds	r0, r2, r1
 800897c:	42a0      	cmp	r0, r4
 800897e:	d10b      	bne.n	8008998 <_free_r+0x6c>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	4401      	add	r1, r0
 8008984:	1850      	adds	r0, r2, r1
 8008986:	4283      	cmp	r3, r0
 8008988:	6011      	str	r1, [r2, #0]
 800898a:	d1e0      	bne.n	800894e <_free_r+0x22>
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	4401      	add	r1, r0
 8008992:	6011      	str	r1, [r2, #0]
 8008994:	6053      	str	r3, [r2, #4]
 8008996:	e7da      	b.n	800894e <_free_r+0x22>
 8008998:	d902      	bls.n	80089a0 <_free_r+0x74>
 800899a:	230c      	movs	r3, #12
 800899c:	602b      	str	r3, [r5, #0]
 800899e:	e7d6      	b.n	800894e <_free_r+0x22>
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	1821      	adds	r1, r4, r0
 80089a4:	428b      	cmp	r3, r1
 80089a6:	bf01      	itttt	eq
 80089a8:	6819      	ldreq	r1, [r3, #0]
 80089aa:	685b      	ldreq	r3, [r3, #4]
 80089ac:	1809      	addeq	r1, r1, r0
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	6054      	str	r4, [r2, #4]
 80089b4:	e7cb      	b.n	800894e <_free_r+0x22>
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000b1c 	.word	0x20000b1c

080089bc <sbrk_aligned>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4e0e      	ldr	r6, [pc, #56]	; (80089f8 <sbrk_aligned+0x3c>)
 80089c0:	460c      	mov	r4, r1
 80089c2:	6831      	ldr	r1, [r6, #0]
 80089c4:	4605      	mov	r5, r0
 80089c6:	b911      	cbnz	r1, 80089ce <sbrk_aligned+0x12>
 80089c8:	f000 f88c 	bl	8008ae4 <_sbrk_r>
 80089cc:	6030      	str	r0, [r6, #0]
 80089ce:	4621      	mov	r1, r4
 80089d0:	4628      	mov	r0, r5
 80089d2:	f000 f887 	bl	8008ae4 <_sbrk_r>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d00a      	beq.n	80089f0 <sbrk_aligned+0x34>
 80089da:	1cc4      	adds	r4, r0, #3
 80089dc:	f024 0403 	bic.w	r4, r4, #3
 80089e0:	42a0      	cmp	r0, r4
 80089e2:	d007      	beq.n	80089f4 <sbrk_aligned+0x38>
 80089e4:	1a21      	subs	r1, r4, r0
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 f87c 	bl	8008ae4 <_sbrk_r>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d101      	bne.n	80089f4 <sbrk_aligned+0x38>
 80089f0:	f04f 34ff 	mov.w	r4, #4294967295
 80089f4:	4620      	mov	r0, r4
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	20000b20 	.word	0x20000b20

080089fc <_malloc_r>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	1ccd      	adds	r5, r1, #3
 8008a02:	f025 0503 	bic.w	r5, r5, #3
 8008a06:	3508      	adds	r5, #8
 8008a08:	2d0c      	cmp	r5, #12
 8008a0a:	bf38      	it	cc
 8008a0c:	250c      	movcc	r5, #12
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	4607      	mov	r7, r0
 8008a12:	db01      	blt.n	8008a18 <_malloc_r+0x1c>
 8008a14:	42a9      	cmp	r1, r5
 8008a16:	d905      	bls.n	8008a24 <_malloc_r+0x28>
 8008a18:	230c      	movs	r3, #12
 8008a1a:	2600      	movs	r6, #0
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	4630      	mov	r0, r6
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	4e2e      	ldr	r6, [pc, #184]	; (8008ae0 <_malloc_r+0xe4>)
 8008a26:	f001 fd6b 	bl	800a500 <__malloc_lock>
 8008a2a:	6833      	ldr	r3, [r6, #0]
 8008a2c:	461c      	mov	r4, r3
 8008a2e:	bb34      	cbnz	r4, 8008a7e <_malloc_r+0x82>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4638      	mov	r0, r7
 8008a34:	f7ff ffc2 	bl	80089bc <sbrk_aligned>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	d14d      	bne.n	8008ada <_malloc_r+0xde>
 8008a3e:	6834      	ldr	r4, [r6, #0]
 8008a40:	4626      	mov	r6, r4
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d140      	bne.n	8008ac8 <_malloc_r+0xcc>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	eb04 0803 	add.w	r8, r4, r3
 8008a50:	f000 f848 	bl	8008ae4 <_sbrk_r>
 8008a54:	4580      	cmp	r8, r0
 8008a56:	d13a      	bne.n	8008ace <_malloc_r+0xd2>
 8008a58:	6821      	ldr	r1, [r4, #0]
 8008a5a:	3503      	adds	r5, #3
 8008a5c:	1a6d      	subs	r5, r5, r1
 8008a5e:	f025 0503 	bic.w	r5, r5, #3
 8008a62:	3508      	adds	r5, #8
 8008a64:	2d0c      	cmp	r5, #12
 8008a66:	bf38      	it	cc
 8008a68:	250c      	movcc	r5, #12
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7ff ffa5 	bl	80089bc <sbrk_aligned>
 8008a72:	3001      	adds	r0, #1
 8008a74:	d02b      	beq.n	8008ace <_malloc_r+0xd2>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	442b      	add	r3, r5
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	e00e      	b.n	8008a9c <_malloc_r+0xa0>
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	1b52      	subs	r2, r2, r5
 8008a82:	d41e      	bmi.n	8008ac2 <_malloc_r+0xc6>
 8008a84:	2a0b      	cmp	r2, #11
 8008a86:	d916      	bls.n	8008ab6 <_malloc_r+0xba>
 8008a88:	1961      	adds	r1, r4, r5
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	6025      	str	r5, [r4, #0]
 8008a8e:	bf18      	it	ne
 8008a90:	6059      	strne	r1, [r3, #4]
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	bf08      	it	eq
 8008a96:	6031      	streq	r1, [r6, #0]
 8008a98:	5162      	str	r2, [r4, r5]
 8008a9a:	604b      	str	r3, [r1, #4]
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f104 060b 	add.w	r6, r4, #11
 8008aa2:	f001 fd33 	bl	800a50c <__malloc_unlock>
 8008aa6:	f026 0607 	bic.w	r6, r6, #7
 8008aaa:	1d23      	adds	r3, r4, #4
 8008aac:	1af2      	subs	r2, r6, r3
 8008aae:	d0b6      	beq.n	8008a1e <_malloc_r+0x22>
 8008ab0:	1b9b      	subs	r3, r3, r6
 8008ab2:	50a3      	str	r3, [r4, r2]
 8008ab4:	e7b3      	b.n	8008a1e <_malloc_r+0x22>
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	bf0c      	ite	eq
 8008abc:	6032      	streq	r2, [r6, #0]
 8008abe:	605a      	strne	r2, [r3, #4]
 8008ac0:	e7ec      	b.n	8008a9c <_malloc_r+0xa0>
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	6864      	ldr	r4, [r4, #4]
 8008ac6:	e7b2      	b.n	8008a2e <_malloc_r+0x32>
 8008ac8:	4634      	mov	r4, r6
 8008aca:	6876      	ldr	r6, [r6, #4]
 8008acc:	e7b9      	b.n	8008a42 <_malloc_r+0x46>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	f001 fd1a 	bl	800a50c <__malloc_unlock>
 8008ad8:	e7a1      	b.n	8008a1e <_malloc_r+0x22>
 8008ada:	6025      	str	r5, [r4, #0]
 8008adc:	e7de      	b.n	8008a9c <_malloc_r+0xa0>
 8008ade:	bf00      	nop
 8008ae0:	20000b1c 	.word	0x20000b1c

08008ae4 <_sbrk_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4d05      	ldr	r5, [pc, #20]	; (8008b00 <_sbrk_r+0x1c>)
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f9 f8a6 	bl	8001c40 <_sbrk>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_sbrk_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_sbrk_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20000b28 	.word	0x20000b28

08008b04 <sulp>:
 8008b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	460f      	mov	r7, r1
 8008b0a:	4690      	mov	r8, r2
 8008b0c:	f002 f874 	bl	800abf8 <__ulp>
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	f1b8 0f00 	cmp.w	r8, #0
 8008b18:	d011      	beq.n	8008b3e <sulp+0x3a>
 8008b1a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008b1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dd0b      	ble.n	8008b3e <sulp+0x3a>
 8008b26:	2400      	movs	r4, #0
 8008b28:	051b      	lsls	r3, r3, #20
 8008b2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	f7f7 fccf 	bl	80004d8 <__aeabi_dmul>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	460d      	mov	r5, r1
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008b48 <_strtod_l>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	469b      	mov	fp, r3
 8008b4e:	2300      	movs	r3, #0
 8008b50:	b09f      	sub	sp, #124	; 0x7c
 8008b52:	931a      	str	r3, [sp, #104]	; 0x68
 8008b54:	4b9e      	ldr	r3, [pc, #632]	; (8008dd0 <_strtod_l+0x288>)
 8008b56:	4682      	mov	sl, r0
 8008b58:	681f      	ldr	r7, [r3, #0]
 8008b5a:	460e      	mov	r6, r1
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	9215      	str	r2, [sp, #84]	; 0x54
 8008b60:	f7f7 faf6 	bl	8000150 <strlen>
 8008b64:	f04f 0800 	mov.w	r8, #0
 8008b68:	4604      	mov	r4, r0
 8008b6a:	f04f 0900 	mov.w	r9, #0
 8008b6e:	9619      	str	r6, [sp, #100]	; 0x64
 8008b70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	2a2b      	cmp	r2, #43	; 0x2b
 8008b76:	d04c      	beq.n	8008c12 <_strtod_l+0xca>
 8008b78:	d83a      	bhi.n	8008bf0 <_strtod_l+0xa8>
 8008b7a:	2a0d      	cmp	r2, #13
 8008b7c:	d833      	bhi.n	8008be6 <_strtod_l+0x9e>
 8008b7e:	2a08      	cmp	r2, #8
 8008b80:	d833      	bhi.n	8008bea <_strtod_l+0xa2>
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	d03d      	beq.n	8008c02 <_strtod_l+0xba>
 8008b86:	2300      	movs	r3, #0
 8008b88:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008b8c:	782b      	ldrb	r3, [r5, #0]
 8008b8e:	2b30      	cmp	r3, #48	; 0x30
 8008b90:	f040 80aa 	bne.w	8008ce8 <_strtod_l+0x1a0>
 8008b94:	786b      	ldrb	r3, [r5, #1]
 8008b96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b9a:	2b58      	cmp	r3, #88	; 0x58
 8008b9c:	d166      	bne.n	8008c6c <_strtod_l+0x124>
 8008b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	ab1a      	add	r3, sp, #104	; 0x68
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4a8a      	ldr	r2, [pc, #552]	; (8008dd4 <_strtod_l+0x28c>)
 8008baa:	f8cd b008 	str.w	fp, [sp, #8]
 8008bae:	ab1b      	add	r3, sp, #108	; 0x6c
 8008bb0:	a919      	add	r1, sp, #100	; 0x64
 8008bb2:	f001 f91f 	bl	8009df4 <__gethex>
 8008bb6:	f010 0607 	ands.w	r6, r0, #7
 8008bba:	4604      	mov	r4, r0
 8008bbc:	d005      	beq.n	8008bca <_strtod_l+0x82>
 8008bbe:	2e06      	cmp	r6, #6
 8008bc0:	d129      	bne.n	8008c16 <_strtod_l+0xce>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	9519      	str	r5, [sp, #100]	; 0x64
 8008bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f040 858a 	bne.w	80096e6 <_strtod_l+0xb9e>
 8008bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd4:	b1d3      	cbz	r3, 8008c0c <_strtod_l+0xc4>
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4619      	mov	r1, r3
 8008be0:	b01f      	add	sp, #124	; 0x7c
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	2a20      	cmp	r2, #32
 8008be8:	d1cd      	bne.n	8008b86 <_strtod_l+0x3e>
 8008bea:	3301      	adds	r3, #1
 8008bec:	9319      	str	r3, [sp, #100]	; 0x64
 8008bee:	e7bf      	b.n	8008b70 <_strtod_l+0x28>
 8008bf0:	2a2d      	cmp	r2, #45	; 0x2d
 8008bf2:	d1c8      	bne.n	8008b86 <_strtod_l+0x3e>
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	9219      	str	r2, [sp, #100]	; 0x64
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1c3      	bne.n	8008b8a <_strtod_l+0x42>
 8008c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c04:	9619      	str	r6, [sp, #100]	; 0x64
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 856b 	bne.w	80096e2 <_strtod_l+0xb9a>
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	e7e4      	b.n	8008bdc <_strtod_l+0x94>
 8008c12:	2200      	movs	r2, #0
 8008c14:	e7ef      	b.n	8008bf6 <_strtod_l+0xae>
 8008c16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c18:	b13a      	cbz	r2, 8008c2a <_strtod_l+0xe2>
 8008c1a:	2135      	movs	r1, #53	; 0x35
 8008c1c:	a81c      	add	r0, sp, #112	; 0x70
 8008c1e:	f002 f8ef 	bl	800ae00 <__copybits>
 8008c22:	4650      	mov	r0, sl
 8008c24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c26:	f001 fcb7 	bl	800a598 <_Bfree>
 8008c2a:	3e01      	subs	r6, #1
 8008c2c:	2e04      	cmp	r6, #4
 8008c2e:	d806      	bhi.n	8008c3e <_strtod_l+0xf6>
 8008c30:	e8df f006 	tbb	[pc, r6]
 8008c34:	1714030a 	.word	0x1714030a
 8008c38:	0a          	.byte	0x0a
 8008c39:	00          	.byte	0x00
 8008c3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008c3e:	0721      	lsls	r1, r4, #28
 8008c40:	d5c3      	bpl.n	8008bca <_strtod_l+0x82>
 8008c42:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008c46:	e7c0      	b.n	8008bca <_strtod_l+0x82>
 8008c48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008c4a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008c4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008c5a:	e7f0      	b.n	8008c3e <_strtod_l+0xf6>
 8008c5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008dd8 <_strtod_l+0x290>
 8008c60:	e7ed      	b.n	8008c3e <_strtod_l+0xf6>
 8008c62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008c66:	f04f 38ff 	mov.w	r8, #4294967295
 8008c6a:	e7e8      	b.n	8008c3e <_strtod_l+0xf6>
 8008c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	9219      	str	r2, [sp, #100]	; 0x64
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b30      	cmp	r3, #48	; 0x30
 8008c76:	d0f9      	beq.n	8008c6c <_strtod_l+0x124>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0a6      	beq.n	8008bca <_strtod_l+0x82>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c82:	220a      	movs	r2, #10
 8008c84:	9308      	str	r3, [sp, #32]
 8008c86:	2300      	movs	r3, #0
 8008c88:	469b      	mov	fp, r3
 8008c8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008c8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008c90:	7805      	ldrb	r5, [r0, #0]
 8008c92:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008c96:	b2d9      	uxtb	r1, r3
 8008c98:	2909      	cmp	r1, #9
 8008c9a:	d927      	bls.n	8008cec <_strtod_l+0x1a4>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f002 fc3d 	bl	800b51e <strncmp>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d033      	beq.n	8008d10 <_strtod_l+0x1c8>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	462a      	mov	r2, r5
 8008cac:	465c      	mov	r4, fp
 8008cae:	4603      	mov	r3, r0
 8008cb0:	9004      	str	r0, [sp, #16]
 8008cb2:	2a65      	cmp	r2, #101	; 0x65
 8008cb4:	d001      	beq.n	8008cba <_strtod_l+0x172>
 8008cb6:	2a45      	cmp	r2, #69	; 0x45
 8008cb8:	d114      	bne.n	8008ce4 <_strtod_l+0x19c>
 8008cba:	b91c      	cbnz	r4, 8008cc4 <_strtod_l+0x17c>
 8008cbc:	9a07      	ldr	r2, [sp, #28]
 8008cbe:	4302      	orrs	r2, r0
 8008cc0:	d09f      	beq.n	8008c02 <_strtod_l+0xba>
 8008cc2:	2400      	movs	r4, #0
 8008cc4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008cc6:	1c72      	adds	r2, r6, #1
 8008cc8:	9219      	str	r2, [sp, #100]	; 0x64
 8008cca:	7872      	ldrb	r2, [r6, #1]
 8008ccc:	2a2b      	cmp	r2, #43	; 0x2b
 8008cce:	d079      	beq.n	8008dc4 <_strtod_l+0x27c>
 8008cd0:	2a2d      	cmp	r2, #45	; 0x2d
 8008cd2:	f000 8083 	beq.w	8008ddc <_strtod_l+0x294>
 8008cd6:	2700      	movs	r7, #0
 8008cd8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cdc:	2909      	cmp	r1, #9
 8008cde:	f240 8083 	bls.w	8008de8 <_strtod_l+0x2a0>
 8008ce2:	9619      	str	r6, [sp, #100]	; 0x64
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	e09f      	b.n	8008e28 <_strtod_l+0x2e0>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e7c8      	b.n	8008c7e <_strtod_l+0x136>
 8008cec:	f1bb 0f08 	cmp.w	fp, #8
 8008cf0:	bfd5      	itete	le
 8008cf2:	9906      	ldrle	r1, [sp, #24]
 8008cf4:	9905      	ldrgt	r1, [sp, #20]
 8008cf6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008cfa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008cfe:	f100 0001 	add.w	r0, r0, #1
 8008d02:	bfd4      	ite	le
 8008d04:	9306      	strle	r3, [sp, #24]
 8008d06:	9305      	strgt	r3, [sp, #20]
 8008d08:	f10b 0b01 	add.w	fp, fp, #1
 8008d0c:	9019      	str	r0, [sp, #100]	; 0x64
 8008d0e:	e7be      	b.n	8008c8e <_strtod_l+0x146>
 8008d10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d12:	191a      	adds	r2, r3, r4
 8008d14:	9219      	str	r2, [sp, #100]	; 0x64
 8008d16:	5d1a      	ldrb	r2, [r3, r4]
 8008d18:	f1bb 0f00 	cmp.w	fp, #0
 8008d1c:	d036      	beq.n	8008d8c <_strtod_l+0x244>
 8008d1e:	465c      	mov	r4, fp
 8008d20:	9004      	str	r0, [sp, #16]
 8008d22:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d912      	bls.n	8008d50 <_strtod_l+0x208>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7c1      	b.n	8008cb2 <_strtod_l+0x16a>
 8008d2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d30:	3001      	adds	r0, #1
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	9219      	str	r2, [sp, #100]	; 0x64
 8008d36:	785a      	ldrb	r2, [r3, #1]
 8008d38:	2a30      	cmp	r2, #48	; 0x30
 8008d3a:	d0f8      	beq.n	8008d2e <_strtod_l+0x1e6>
 8008d3c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	f200 84d5 	bhi.w	80096f0 <_strtod_l+0xba8>
 8008d46:	9004      	str	r0, [sp, #16]
 8008d48:	2000      	movs	r0, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	3a30      	subs	r2, #48	; 0x30
 8008d52:	f100 0301 	add.w	r3, r0, #1
 8008d56:	d013      	beq.n	8008d80 <_strtod_l+0x238>
 8008d58:	9904      	ldr	r1, [sp, #16]
 8008d5a:	1905      	adds	r5, r0, r4
 8008d5c:	4419      	add	r1, r3
 8008d5e:	9104      	str	r1, [sp, #16]
 8008d60:	4623      	mov	r3, r4
 8008d62:	210a      	movs	r1, #10
 8008d64:	42ab      	cmp	r3, r5
 8008d66:	d113      	bne.n	8008d90 <_strtod_l+0x248>
 8008d68:	1823      	adds	r3, r4, r0
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	f104 0401 	add.w	r4, r4, #1
 8008d70:	4404      	add	r4, r0
 8008d72:	dc1b      	bgt.n	8008dac <_strtod_l+0x264>
 8008d74:	230a      	movs	r3, #10
 8008d76:	9906      	ldr	r1, [sp, #24]
 8008d78:	fb03 2301 	mla	r3, r3, r1, r2
 8008d7c:	9306      	str	r3, [sp, #24]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d82:	4618      	mov	r0, r3
 8008d84:	1c51      	adds	r1, r2, #1
 8008d86:	9119      	str	r1, [sp, #100]	; 0x64
 8008d88:	7852      	ldrb	r2, [r2, #1]
 8008d8a:	e7ca      	b.n	8008d22 <_strtod_l+0x1da>
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	e7d3      	b.n	8008d38 <_strtod_l+0x1f0>
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	dc04      	bgt.n	8008d9e <_strtod_l+0x256>
 8008d94:	9f06      	ldr	r7, [sp, #24]
 8008d96:	434f      	muls	r7, r1
 8008d98:	9706      	str	r7, [sp, #24]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	e7e2      	b.n	8008d64 <_strtod_l+0x21c>
 8008d9e:	1c5f      	adds	r7, r3, #1
 8008da0:	2f10      	cmp	r7, #16
 8008da2:	bfde      	ittt	le
 8008da4:	9f05      	ldrle	r7, [sp, #20]
 8008da6:	434f      	mulle	r7, r1
 8008da8:	9705      	strle	r7, [sp, #20]
 8008daa:	e7f6      	b.n	8008d9a <_strtod_l+0x252>
 8008dac:	2c10      	cmp	r4, #16
 8008dae:	bfdf      	itttt	le
 8008db0:	230a      	movle	r3, #10
 8008db2:	9905      	ldrle	r1, [sp, #20]
 8008db4:	fb03 2301 	mlale	r3, r3, r1, r2
 8008db8:	9305      	strle	r3, [sp, #20]
 8008dba:	e7e0      	b.n	8008d7e <_strtod_l+0x236>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e77b      	b.n	8008cbc <_strtod_l+0x174>
 8008dc4:	2700      	movs	r7, #0
 8008dc6:	1cb2      	adds	r2, r6, #2
 8008dc8:	9219      	str	r2, [sp, #100]	; 0x64
 8008dca:	78b2      	ldrb	r2, [r6, #2]
 8008dcc:	e784      	b.n	8008cd8 <_strtod_l+0x190>
 8008dce:	bf00      	nop
 8008dd0:	0800b9cc 	.word	0x0800b9cc
 8008dd4:	0800b79c 	.word	0x0800b79c
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	2701      	movs	r7, #1
 8008dde:	e7f2      	b.n	8008dc6 <_strtod_l+0x27e>
 8008de0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008de2:	1c51      	adds	r1, r2, #1
 8008de4:	9119      	str	r1, [sp, #100]	; 0x64
 8008de6:	7852      	ldrb	r2, [r2, #1]
 8008de8:	2a30      	cmp	r2, #48	; 0x30
 8008dea:	d0f9      	beq.n	8008de0 <_strtod_l+0x298>
 8008dec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008df0:	2908      	cmp	r1, #8
 8008df2:	f63f af77 	bhi.w	8008ce4 <_strtod_l+0x19c>
 8008df6:	f04f 0e0a 	mov.w	lr, #10
 8008dfa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008dfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e00:	9209      	str	r2, [sp, #36]	; 0x24
 8008e02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e04:	1c51      	adds	r1, r2, #1
 8008e06:	9119      	str	r1, [sp, #100]	; 0x64
 8008e08:	7852      	ldrb	r2, [r2, #1]
 8008e0a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008e0e:	2d09      	cmp	r5, #9
 8008e10:	d935      	bls.n	8008e7e <_strtod_l+0x336>
 8008e12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e14:	1b49      	subs	r1, r1, r5
 8008e16:	2908      	cmp	r1, #8
 8008e18:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008e1c:	dc02      	bgt.n	8008e24 <_strtod_l+0x2dc>
 8008e1e:	4565      	cmp	r5, ip
 8008e20:	bfa8      	it	ge
 8008e22:	4665      	movge	r5, ip
 8008e24:	b107      	cbz	r7, 8008e28 <_strtod_l+0x2e0>
 8008e26:	426d      	negs	r5, r5
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	d14c      	bne.n	8008ec6 <_strtod_l+0x37e>
 8008e2c:	9907      	ldr	r1, [sp, #28]
 8008e2e:	4301      	orrs	r1, r0
 8008e30:	f47f aecb 	bne.w	8008bca <_strtod_l+0x82>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f aee4 	bne.w	8008c02 <_strtod_l+0xba>
 8008e3a:	2a69      	cmp	r2, #105	; 0x69
 8008e3c:	d026      	beq.n	8008e8c <_strtod_l+0x344>
 8008e3e:	dc23      	bgt.n	8008e88 <_strtod_l+0x340>
 8008e40:	2a49      	cmp	r2, #73	; 0x49
 8008e42:	d023      	beq.n	8008e8c <_strtod_l+0x344>
 8008e44:	2a4e      	cmp	r2, #78	; 0x4e
 8008e46:	f47f aedc 	bne.w	8008c02 <_strtod_l+0xba>
 8008e4a:	499d      	ldr	r1, [pc, #628]	; (80090c0 <_strtod_l+0x578>)
 8008e4c:	a819      	add	r0, sp, #100	; 0x64
 8008e4e:	f001 fa1f 	bl	800a290 <__match>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f43f aed5 	beq.w	8008c02 <_strtod_l+0xba>
 8008e58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b28      	cmp	r3, #40	; 0x28
 8008e5e:	d12c      	bne.n	8008eba <_strtod_l+0x372>
 8008e60:	4998      	ldr	r1, [pc, #608]	; (80090c4 <_strtod_l+0x57c>)
 8008e62:	aa1c      	add	r2, sp, #112	; 0x70
 8008e64:	a819      	add	r0, sp, #100	; 0x64
 8008e66:	f001 fa27 	bl	800a2b8 <__hexnan>
 8008e6a:	2805      	cmp	r0, #5
 8008e6c:	d125      	bne.n	8008eba <_strtod_l+0x372>
 8008e6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e70:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008e74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008e78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008e7c:	e6a5      	b.n	8008bca <_strtod_l+0x82>
 8008e7e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008e82:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008e86:	e7bc      	b.n	8008e02 <_strtod_l+0x2ba>
 8008e88:	2a6e      	cmp	r2, #110	; 0x6e
 8008e8a:	e7dc      	b.n	8008e46 <_strtod_l+0x2fe>
 8008e8c:	498e      	ldr	r1, [pc, #568]	; (80090c8 <_strtod_l+0x580>)
 8008e8e:	a819      	add	r0, sp, #100	; 0x64
 8008e90:	f001 f9fe 	bl	800a290 <__match>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f43f aeb4 	beq.w	8008c02 <_strtod_l+0xba>
 8008e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e9c:	498b      	ldr	r1, [pc, #556]	; (80090cc <_strtod_l+0x584>)
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	a819      	add	r0, sp, #100	; 0x64
 8008ea2:	9319      	str	r3, [sp, #100]	; 0x64
 8008ea4:	f001 f9f4 	bl	800a290 <__match>
 8008ea8:	b910      	cbnz	r0, 8008eb0 <_strtod_l+0x368>
 8008eaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eac:	3301      	adds	r3, #1
 8008eae:	9319      	str	r3, [sp, #100]	; 0x64
 8008eb0:	f04f 0800 	mov.w	r8, #0
 8008eb4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80090d0 <_strtod_l+0x588>
 8008eb8:	e687      	b.n	8008bca <_strtod_l+0x82>
 8008eba:	4886      	ldr	r0, [pc, #536]	; (80090d4 <_strtod_l+0x58c>)
 8008ebc:	f002 fae6 	bl	800b48c <nan>
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	e681      	b.n	8008bca <_strtod_l+0x82>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	bf08      	it	eq
 8008ece:	46a3      	moveq	fp, r4
 8008ed0:	1aeb      	subs	r3, r5, r3
 8008ed2:	2c10      	cmp	r4, #16
 8008ed4:	9806      	ldr	r0, [sp, #24]
 8008ed6:	4626      	mov	r6, r4
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	bfa8      	it	ge
 8008edc:	2610      	movge	r6, #16
 8008ede:	f7f7 fa81 	bl	80003e4 <__aeabi_ui2d>
 8008ee2:	2c09      	cmp	r4, #9
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	dd13      	ble.n	8008f12 <_strtod_l+0x3ca>
 8008eea:	4b7b      	ldr	r3, [pc, #492]	; (80090d8 <_strtod_l+0x590>)
 8008eec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ef0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ef4:	f7f7 faf0 	bl	80004d8 <__aeabi_dmul>
 8008ef8:	4680      	mov	r8, r0
 8008efa:	9805      	ldr	r0, [sp, #20]
 8008efc:	4689      	mov	r9, r1
 8008efe:	f7f7 fa71 	bl	80003e4 <__aeabi_ui2d>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4640      	mov	r0, r8
 8008f08:	4649      	mov	r1, r9
 8008f0a:	f7f7 f92f 	bl	800016c <__adddf3>
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4689      	mov	r9, r1
 8008f12:	2c0f      	cmp	r4, #15
 8008f14:	dc36      	bgt.n	8008f84 <_strtod_l+0x43c>
 8008f16:	9b07      	ldr	r3, [sp, #28]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f43f ae56 	beq.w	8008bca <_strtod_l+0x82>
 8008f1e:	dd22      	ble.n	8008f66 <_strtod_l+0x41e>
 8008f20:	2b16      	cmp	r3, #22
 8008f22:	dc09      	bgt.n	8008f38 <_strtod_l+0x3f0>
 8008f24:	496c      	ldr	r1, [pc, #432]	; (80090d8 <_strtod_l+0x590>)
 8008f26:	4642      	mov	r2, r8
 8008f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f32:	f7f7 fad1 	bl	80004d8 <__aeabi_dmul>
 8008f36:	e7c3      	b.n	8008ec0 <_strtod_l+0x378>
 8008f38:	9a07      	ldr	r2, [sp, #28]
 8008f3a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	db20      	blt.n	8008f84 <_strtod_l+0x43c>
 8008f42:	4d65      	ldr	r5, [pc, #404]	; (80090d8 <_strtod_l+0x590>)
 8008f44:	f1c4 040f 	rsb	r4, r4, #15
 8008f48:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f52:	464b      	mov	r3, r9
 8008f54:	f7f7 fac0 	bl	80004d8 <__aeabi_dmul>
 8008f58:	9b07      	ldr	r3, [sp, #28]
 8008f5a:	1b1c      	subs	r4, r3, r4
 8008f5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f64:	e7e5      	b.n	8008f32 <_strtod_l+0x3ea>
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	3316      	adds	r3, #22
 8008f6a:	db0b      	blt.n	8008f84 <_strtod_l+0x43c>
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	4640      	mov	r0, r8
 8008f70:	1b5d      	subs	r5, r3, r5
 8008f72:	4b59      	ldr	r3, [pc, #356]	; (80090d8 <_strtod_l+0x590>)
 8008f74:	4649      	mov	r1, r9
 8008f76:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f7e:	f7f7 fbd5 	bl	800072c <__aeabi_ddiv>
 8008f82:	e79d      	b.n	8008ec0 <_strtod_l+0x378>
 8008f84:	9b07      	ldr	r3, [sp, #28]
 8008f86:	1ba6      	subs	r6, r4, r6
 8008f88:	441e      	add	r6, r3
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	dd74      	ble.n	8009078 <_strtod_l+0x530>
 8008f8e:	f016 030f 	ands.w	r3, r6, #15
 8008f92:	d00a      	beq.n	8008faa <_strtod_l+0x462>
 8008f94:	4950      	ldr	r1, [pc, #320]	; (80090d8 <_strtod_l+0x590>)
 8008f96:	4642      	mov	r2, r8
 8008f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	f7f7 fa99 	bl	80004d8 <__aeabi_dmul>
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	4689      	mov	r9, r1
 8008faa:	f036 060f 	bics.w	r6, r6, #15
 8008fae:	d052      	beq.n	8009056 <_strtod_l+0x50e>
 8008fb0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008fb4:	dd27      	ble.n	8009006 <_strtod_l+0x4be>
 8008fb6:	f04f 0b00 	mov.w	fp, #0
 8008fba:	f8cd b010 	str.w	fp, [sp, #16]
 8008fbe:	f8cd b020 	str.w	fp, [sp, #32]
 8008fc2:	f8cd b018 	str.w	fp, [sp, #24]
 8008fc6:	2322      	movs	r3, #34	; 0x22
 8008fc8:	f04f 0800 	mov.w	r8, #0
 8008fcc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80090d0 <_strtod_l+0x588>
 8008fd0:	f8ca 3000 	str.w	r3, [sl]
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f43f adf7 	beq.w	8008bca <_strtod_l+0x82>
 8008fdc:	4650      	mov	r0, sl
 8008fde:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008fe0:	f001 fada 	bl	800a598 <_Bfree>
 8008fe4:	4650      	mov	r0, sl
 8008fe6:	9906      	ldr	r1, [sp, #24]
 8008fe8:	f001 fad6 	bl	800a598 <_Bfree>
 8008fec:	4650      	mov	r0, sl
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	f001 fad2 	bl	800a598 <_Bfree>
 8008ff4:	4650      	mov	r0, sl
 8008ff6:	9908      	ldr	r1, [sp, #32]
 8008ff8:	f001 face 	bl	800a598 <_Bfree>
 8008ffc:	4659      	mov	r1, fp
 8008ffe:	4650      	mov	r0, sl
 8009000:	f001 faca 	bl	800a598 <_Bfree>
 8009004:	e5e1      	b.n	8008bca <_strtod_l+0x82>
 8009006:	4b35      	ldr	r3, [pc, #212]	; (80090dc <_strtod_l+0x594>)
 8009008:	4640      	mov	r0, r8
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	2300      	movs	r3, #0
 800900e:	4649      	mov	r1, r9
 8009010:	461f      	mov	r7, r3
 8009012:	1136      	asrs	r6, r6, #4
 8009014:	2e01      	cmp	r6, #1
 8009016:	dc21      	bgt.n	800905c <_strtod_l+0x514>
 8009018:	b10b      	cbz	r3, 800901e <_strtod_l+0x4d6>
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	4b2f      	ldr	r3, [pc, #188]	; (80090dc <_strtod_l+0x594>)
 8009020:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009024:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009028:	4642      	mov	r2, r8
 800902a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902e:	464b      	mov	r3, r9
 8009030:	f7f7 fa52 	bl	80004d8 <__aeabi_dmul>
 8009034:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <_strtod_l+0x588>)
 8009036:	460a      	mov	r2, r1
 8009038:	400b      	ands	r3, r1
 800903a:	4929      	ldr	r1, [pc, #164]	; (80090e0 <_strtod_l+0x598>)
 800903c:	4680      	mov	r8, r0
 800903e:	428b      	cmp	r3, r1
 8009040:	d8b9      	bhi.n	8008fb6 <_strtod_l+0x46e>
 8009042:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009046:	428b      	cmp	r3, r1
 8009048:	bf86      	itte	hi
 800904a:	f04f 38ff 	movhi.w	r8, #4294967295
 800904e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80090e4 <_strtod_l+0x59c>
 8009052:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009056:	2300      	movs	r3, #0
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	e07f      	b.n	800915c <_strtod_l+0x614>
 800905c:	07f2      	lsls	r2, r6, #31
 800905e:	d505      	bpl.n	800906c <_strtod_l+0x524>
 8009060:	9b05      	ldr	r3, [sp, #20]
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f7f7 fa37 	bl	80004d8 <__aeabi_dmul>
 800906a:	2301      	movs	r3, #1
 800906c:	9a05      	ldr	r2, [sp, #20]
 800906e:	3701      	adds	r7, #1
 8009070:	3208      	adds	r2, #8
 8009072:	1076      	asrs	r6, r6, #1
 8009074:	9205      	str	r2, [sp, #20]
 8009076:	e7cd      	b.n	8009014 <_strtod_l+0x4cc>
 8009078:	d0ed      	beq.n	8009056 <_strtod_l+0x50e>
 800907a:	4276      	negs	r6, r6
 800907c:	f016 020f 	ands.w	r2, r6, #15
 8009080:	d00a      	beq.n	8009098 <_strtod_l+0x550>
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <_strtod_l+0x590>)
 8009084:	4640      	mov	r0, r8
 8009086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800908a:	4649      	mov	r1, r9
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 fb4c 	bl	800072c <__aeabi_ddiv>
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	1136      	asrs	r6, r6, #4
 800909a:	d0dc      	beq.n	8009056 <_strtod_l+0x50e>
 800909c:	2e1f      	cmp	r6, #31
 800909e:	dd23      	ble.n	80090e8 <_strtod_l+0x5a0>
 80090a0:	f04f 0b00 	mov.w	fp, #0
 80090a4:	f8cd b010 	str.w	fp, [sp, #16]
 80090a8:	f8cd b020 	str.w	fp, [sp, #32]
 80090ac:	f8cd b018 	str.w	fp, [sp, #24]
 80090b0:	2322      	movs	r3, #34	; 0x22
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	f04f 0900 	mov.w	r9, #0
 80090ba:	f8ca 3000 	str.w	r3, [sl]
 80090be:	e789      	b.n	8008fd4 <_strtod_l+0x48c>
 80090c0:	0800b799 	.word	0x0800b799
 80090c4:	0800b7b0 	.word	0x0800b7b0
 80090c8:	0800b790 	.word	0x0800b790
 80090cc:	0800b793 	.word	0x0800b793
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	0800bbc2 	.word	0x0800bbc2
 80090d8:	0800ba80 	.word	0x0800ba80
 80090dc:	0800ba58 	.word	0x0800ba58
 80090e0:	7ca00000 	.word	0x7ca00000
 80090e4:	7fefffff 	.word	0x7fefffff
 80090e8:	f016 0310 	ands.w	r3, r6, #16
 80090ec:	bf18      	it	ne
 80090ee:	236a      	movne	r3, #106	; 0x6a
 80090f0:	4640      	mov	r0, r8
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	4649      	mov	r1, r9
 80090f6:	2300      	movs	r3, #0
 80090f8:	4fb0      	ldr	r7, [pc, #704]	; (80093bc <_strtod_l+0x874>)
 80090fa:	07f2      	lsls	r2, r6, #31
 80090fc:	d504      	bpl.n	8009108 <_strtod_l+0x5c0>
 80090fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009102:	f7f7 f9e9 	bl	80004d8 <__aeabi_dmul>
 8009106:	2301      	movs	r3, #1
 8009108:	1076      	asrs	r6, r6, #1
 800910a:	f107 0708 	add.w	r7, r7, #8
 800910e:	d1f4      	bne.n	80090fa <_strtod_l+0x5b2>
 8009110:	b10b      	cbz	r3, 8009116 <_strtod_l+0x5ce>
 8009112:	4680      	mov	r8, r0
 8009114:	4689      	mov	r9, r1
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	b1c3      	cbz	r3, 800914c <_strtod_l+0x604>
 800911a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800911e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009122:	2b00      	cmp	r3, #0
 8009124:	4649      	mov	r1, r9
 8009126:	dd11      	ble.n	800914c <_strtod_l+0x604>
 8009128:	2b1f      	cmp	r3, #31
 800912a:	f340 8127 	ble.w	800937c <_strtod_l+0x834>
 800912e:	2b34      	cmp	r3, #52	; 0x34
 8009130:	bfd8      	it	le
 8009132:	f04f 33ff 	movle.w	r3, #4294967295
 8009136:	f04f 0800 	mov.w	r8, #0
 800913a:	bfcf      	iteee	gt
 800913c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009140:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009144:	fa03 f202 	lslle.w	r2, r3, r2
 8009148:	ea02 0901 	andle.w	r9, r2, r1
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	4640      	mov	r0, r8
 8009152:	4649      	mov	r1, r9
 8009154:	f7f7 fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8009158:	2800      	cmp	r0, #0
 800915a:	d1a1      	bne.n	80090a0 <_strtod_l+0x558>
 800915c:	9b06      	ldr	r3, [sp, #24]
 800915e:	465a      	mov	r2, fp
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4650      	mov	r0, sl
 8009164:	4623      	mov	r3, r4
 8009166:	9908      	ldr	r1, [sp, #32]
 8009168:	f001 fa7e 	bl	800a668 <__s2b>
 800916c:	9008      	str	r0, [sp, #32]
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f af21 	beq.w	8008fb6 <_strtod_l+0x46e>
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	f04f 0b00 	mov.w	fp, #0
 800917a:	1b5d      	subs	r5, r3, r5
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	f8cd b010 	str.w	fp, [sp, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfb4      	ite	lt
 8009186:	462b      	movlt	r3, r5
 8009188:	2300      	movge	r3, #0
 800918a:	930e      	str	r3, [sp, #56]	; 0x38
 800918c:	9b07      	ldr	r3, [sp, #28]
 800918e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009192:	9314      	str	r3, [sp, #80]	; 0x50
 8009194:	9b08      	ldr	r3, [sp, #32]
 8009196:	4650      	mov	r0, sl
 8009198:	6859      	ldr	r1, [r3, #4]
 800919a:	f001 f9bd 	bl	800a518 <_Balloc>
 800919e:	9006      	str	r0, [sp, #24]
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f af10 	beq.w	8008fc6 <_strtod_l+0x47e>
 80091a6:	9b08      	ldr	r3, [sp, #32]
 80091a8:	300c      	adds	r0, #12
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	f103 010c 	add.w	r1, r3, #12
 80091b0:	3202      	adds	r2, #2
 80091b2:	0092      	lsls	r2, r2, #2
 80091b4:	f001 f996 	bl	800a4e4 <memcpy>
 80091b8:	ab1c      	add	r3, sp, #112	; 0x70
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	4642      	mov	r2, r8
 80091c2:	464b      	mov	r3, r9
 80091c4:	4650      	mov	r0, sl
 80091c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80091ca:	f001 fd8f 	bl	800acec <__d2b>
 80091ce:	901a      	str	r0, [sp, #104]	; 0x68
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f aef8 	beq.w	8008fc6 <_strtod_l+0x47e>
 80091d6:	2101      	movs	r1, #1
 80091d8:	4650      	mov	r0, sl
 80091da:	f001 fadd 	bl	800a798 <__i2b>
 80091de:	4603      	mov	r3, r0
 80091e0:	9004      	str	r0, [sp, #16]
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f43f aeef 	beq.w	8008fc6 <_strtod_l+0x47e>
 80091e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80091ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	bfab      	itete	ge
 80091f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80091f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80091f4:	18ee      	addge	r6, r5, r3
 80091f6:	1b5c      	sublt	r4, r3, r5
 80091f8:	9b05      	ldr	r3, [sp, #20]
 80091fa:	bfa8      	it	ge
 80091fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80091fe:	eba5 0503 	sub.w	r5, r5, r3
 8009202:	4415      	add	r5, r2
 8009204:	4b6e      	ldr	r3, [pc, #440]	; (80093c0 <_strtod_l+0x878>)
 8009206:	f105 35ff 	add.w	r5, r5, #4294967295
 800920a:	bfb8      	it	lt
 800920c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800920e:	429d      	cmp	r5, r3
 8009210:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009214:	f280 80c4 	bge.w	80093a0 <_strtod_l+0x858>
 8009218:	1b5b      	subs	r3, r3, r5
 800921a:	2b1f      	cmp	r3, #31
 800921c:	f04f 0701 	mov.w	r7, #1
 8009220:	eba2 0203 	sub.w	r2, r2, r3
 8009224:	f300 80b1 	bgt.w	800938a <_strtod_l+0x842>
 8009228:	2500      	movs	r5, #0
 800922a:	fa07 f303 	lsl.w	r3, r7, r3
 800922e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009230:	18b7      	adds	r7, r6, r2
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	42be      	cmp	r6, r7
 8009236:	4414      	add	r4, r2
 8009238:	441c      	add	r4, r3
 800923a:	4633      	mov	r3, r6
 800923c:	bfa8      	it	ge
 800923e:	463b      	movge	r3, r7
 8009240:	42a3      	cmp	r3, r4
 8009242:	bfa8      	it	ge
 8009244:	4623      	movge	r3, r4
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfc2      	ittt	gt
 800924a:	1aff      	subgt	r7, r7, r3
 800924c:	1ae4      	subgt	r4, r4, r3
 800924e:	1af6      	subgt	r6, r6, r3
 8009250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	dd17      	ble.n	8009286 <_strtod_l+0x73e>
 8009256:	461a      	mov	r2, r3
 8009258:	4650      	mov	r0, sl
 800925a:	9904      	ldr	r1, [sp, #16]
 800925c:	f001 fb5a 	bl	800a914 <__pow5mult>
 8009260:	9004      	str	r0, [sp, #16]
 8009262:	2800      	cmp	r0, #0
 8009264:	f43f aeaf 	beq.w	8008fc6 <_strtod_l+0x47e>
 8009268:	4601      	mov	r1, r0
 800926a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800926c:	4650      	mov	r0, sl
 800926e:	f001 faa9 	bl	800a7c4 <__multiply>
 8009272:	9009      	str	r0, [sp, #36]	; 0x24
 8009274:	2800      	cmp	r0, #0
 8009276:	f43f aea6 	beq.w	8008fc6 <_strtod_l+0x47e>
 800927a:	4650      	mov	r0, sl
 800927c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800927e:	f001 f98b 	bl	800a598 <_Bfree>
 8009282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009284:	931a      	str	r3, [sp, #104]	; 0x68
 8009286:	2f00      	cmp	r7, #0
 8009288:	f300 808e 	bgt.w	80093a8 <_strtod_l+0x860>
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	dd08      	ble.n	80092a4 <_strtod_l+0x75c>
 8009292:	4650      	mov	r0, sl
 8009294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009296:	9906      	ldr	r1, [sp, #24]
 8009298:	f001 fb3c 	bl	800a914 <__pow5mult>
 800929c:	9006      	str	r0, [sp, #24]
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f ae91 	beq.w	8008fc6 <_strtod_l+0x47e>
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	dd08      	ble.n	80092ba <_strtod_l+0x772>
 80092a8:	4622      	mov	r2, r4
 80092aa:	4650      	mov	r0, sl
 80092ac:	9906      	ldr	r1, [sp, #24]
 80092ae:	f001 fb8b 	bl	800a9c8 <__lshift>
 80092b2:	9006      	str	r0, [sp, #24]
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f43f ae86 	beq.w	8008fc6 <_strtod_l+0x47e>
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	dd08      	ble.n	80092d0 <_strtod_l+0x788>
 80092be:	4632      	mov	r2, r6
 80092c0:	4650      	mov	r0, sl
 80092c2:	9904      	ldr	r1, [sp, #16]
 80092c4:	f001 fb80 	bl	800a9c8 <__lshift>
 80092c8:	9004      	str	r0, [sp, #16]
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f43f ae7b 	beq.w	8008fc6 <_strtod_l+0x47e>
 80092d0:	4650      	mov	r0, sl
 80092d2:	9a06      	ldr	r2, [sp, #24]
 80092d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092d6:	f001 fc03 	bl	800aae0 <__mdiff>
 80092da:	4683      	mov	fp, r0
 80092dc:	2800      	cmp	r0, #0
 80092de:	f43f ae72 	beq.w	8008fc6 <_strtod_l+0x47e>
 80092e2:	2400      	movs	r4, #0
 80092e4:	68c3      	ldr	r3, [r0, #12]
 80092e6:	9904      	ldr	r1, [sp, #16]
 80092e8:	60c4      	str	r4, [r0, #12]
 80092ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80092ec:	f001 fbdc 	bl	800aaa8 <__mcmp>
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	da6b      	bge.n	80093cc <_strtod_l+0x884>
 80092f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f6:	ea53 0308 	orrs.w	r3, r3, r8
 80092fa:	f040 8091 	bne.w	8009420 <_strtod_l+0x8d8>
 80092fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 808c 	bne.w	8009420 <_strtod_l+0x8d8>
 8009308:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800930c:	0d1b      	lsrs	r3, r3, #20
 800930e:	051b      	lsls	r3, r3, #20
 8009310:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009314:	f240 8084 	bls.w	8009420 <_strtod_l+0x8d8>
 8009318:	f8db 3014 	ldr.w	r3, [fp, #20]
 800931c:	b91b      	cbnz	r3, 8009326 <_strtod_l+0x7de>
 800931e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009322:	2b01      	cmp	r3, #1
 8009324:	dd7c      	ble.n	8009420 <_strtod_l+0x8d8>
 8009326:	4659      	mov	r1, fp
 8009328:	2201      	movs	r2, #1
 800932a:	4650      	mov	r0, sl
 800932c:	f001 fb4c 	bl	800a9c8 <__lshift>
 8009330:	9904      	ldr	r1, [sp, #16]
 8009332:	4683      	mov	fp, r0
 8009334:	f001 fbb8 	bl	800aaa8 <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	dd71      	ble.n	8009420 <_strtod_l+0x8d8>
 800933c:	9905      	ldr	r1, [sp, #20]
 800933e:	464b      	mov	r3, r9
 8009340:	4a20      	ldr	r2, [pc, #128]	; (80093c4 <_strtod_l+0x87c>)
 8009342:	2900      	cmp	r1, #0
 8009344:	f000 808c 	beq.w	8009460 <_strtod_l+0x918>
 8009348:	ea02 0109 	and.w	r1, r2, r9
 800934c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009350:	f300 8086 	bgt.w	8009460 <_strtod_l+0x918>
 8009354:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009358:	f77f aeaa 	ble.w	80090b0 <_strtod_l+0x568>
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <_strtod_l+0x880>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f7 f8b8 	bl	80004d8 <__aeabi_dmul>
 8009368:	460b      	mov	r3, r1
 800936a:	4303      	orrs	r3, r0
 800936c:	bf08      	it	eq
 800936e:	2322      	moveq	r3, #34	; 0x22
 8009370:	4680      	mov	r8, r0
 8009372:	4689      	mov	r9, r1
 8009374:	bf08      	it	eq
 8009376:	f8ca 3000 	streq.w	r3, [sl]
 800937a:	e62f      	b.n	8008fdc <_strtod_l+0x494>
 800937c:	f04f 32ff 	mov.w	r2, #4294967295
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	ea03 0808 	and.w	r8, r3, r8
 8009388:	e6e0      	b.n	800914c <_strtod_l+0x604>
 800938a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800938e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009392:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009396:	35e2      	adds	r5, #226	; 0xe2
 8009398:	fa07 f505 	lsl.w	r5, r7, r5
 800939c:	970f      	str	r7, [sp, #60]	; 0x3c
 800939e:	e747      	b.n	8009230 <_strtod_l+0x6e8>
 80093a0:	2301      	movs	r3, #1
 80093a2:	2500      	movs	r5, #0
 80093a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a6:	e743      	b.n	8009230 <_strtod_l+0x6e8>
 80093a8:	463a      	mov	r2, r7
 80093aa:	4650      	mov	r0, sl
 80093ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093ae:	f001 fb0b 	bl	800a9c8 <__lshift>
 80093b2:	901a      	str	r0, [sp, #104]	; 0x68
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f47f af69 	bne.w	800928c <_strtod_l+0x744>
 80093ba:	e604      	b.n	8008fc6 <_strtod_l+0x47e>
 80093bc:	0800b7c8 	.word	0x0800b7c8
 80093c0:	fffffc02 	.word	0xfffffc02
 80093c4:	7ff00000 	.word	0x7ff00000
 80093c8:	39500000 	.word	0x39500000
 80093cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80093d0:	d165      	bne.n	800949e <_strtod_l+0x956>
 80093d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093d8:	b35a      	cbz	r2, 8009432 <_strtod_l+0x8ea>
 80093da:	4a99      	ldr	r2, [pc, #612]	; (8009640 <_strtod_l+0xaf8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d12b      	bne.n	8009438 <_strtod_l+0x8f0>
 80093e0:	9b05      	ldr	r3, [sp, #20]
 80093e2:	4641      	mov	r1, r8
 80093e4:	b303      	cbz	r3, 8009428 <_strtod_l+0x8e0>
 80093e6:	464a      	mov	r2, r9
 80093e8:	4b96      	ldr	r3, [pc, #600]	; (8009644 <_strtod_l+0xafc>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093f0:	f04f 32ff 	mov.w	r2, #4294967295
 80093f4:	d81b      	bhi.n	800942e <_strtod_l+0x8e6>
 80093f6:	0d1b      	lsrs	r3, r3, #20
 80093f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	4299      	cmp	r1, r3
 8009402:	d119      	bne.n	8009438 <_strtod_l+0x8f0>
 8009404:	4b90      	ldr	r3, [pc, #576]	; (8009648 <_strtod_l+0xb00>)
 8009406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009408:	429a      	cmp	r2, r3
 800940a:	d102      	bne.n	8009412 <_strtod_l+0x8ca>
 800940c:	3101      	adds	r1, #1
 800940e:	f43f adda 	beq.w	8008fc6 <_strtod_l+0x47e>
 8009412:	f04f 0800 	mov.w	r8, #0
 8009416:	4b8b      	ldr	r3, [pc, #556]	; (8009644 <_strtod_l+0xafc>)
 8009418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941a:	401a      	ands	r2, r3
 800941c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d19a      	bne.n	800935c <_strtod_l+0x814>
 8009426:	e5d9      	b.n	8008fdc <_strtod_l+0x494>
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	e7e8      	b.n	8009400 <_strtod_l+0x8b8>
 800942e:	4613      	mov	r3, r2
 8009430:	e7e6      	b.n	8009400 <_strtod_l+0x8b8>
 8009432:	ea53 0308 	orrs.w	r3, r3, r8
 8009436:	d081      	beq.n	800933c <_strtod_l+0x7f4>
 8009438:	b1e5      	cbz	r5, 8009474 <_strtod_l+0x92c>
 800943a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943c:	421d      	tst	r5, r3
 800943e:	d0ef      	beq.n	8009420 <_strtod_l+0x8d8>
 8009440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	b1c3      	cbz	r3, 800947c <_strtod_l+0x934>
 800944a:	f7ff fb5b 	bl	8008b04 <sulp>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009456:	f7f6 fe89 	bl	800016c <__adddf3>
 800945a:	4680      	mov	r8, r0
 800945c:	4689      	mov	r9, r1
 800945e:	e7df      	b.n	8009420 <_strtod_l+0x8d8>
 8009460:	4013      	ands	r3, r2
 8009462:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009466:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800946a:	f04f 38ff 	mov.w	r8, #4294967295
 800946e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009472:	e7d5      	b.n	8009420 <_strtod_l+0x8d8>
 8009474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009476:	ea13 0f08 	tst.w	r3, r8
 800947a:	e7e0      	b.n	800943e <_strtod_l+0x8f6>
 800947c:	f7ff fb42 	bl	8008b04 <sulp>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009488:	f7f6 fe6e 	bl	8000168 <__aeabi_dsub>
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	f7f7 fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8009498:	2800      	cmp	r0, #0
 800949a:	d0c1      	beq.n	8009420 <_strtod_l+0x8d8>
 800949c:	e608      	b.n	80090b0 <_strtod_l+0x568>
 800949e:	4658      	mov	r0, fp
 80094a0:	9904      	ldr	r1, [sp, #16]
 80094a2:	f001 fc7f 	bl	800ada4 <__ratio>
 80094a6:	2200      	movs	r2, #0
 80094a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	f7f7 fa8e 	bl	80009d0 <__aeabi_dcmple>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d070      	beq.n	800959a <_strtod_l+0xa52>
 80094b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d042      	beq.n	8009544 <_strtod_l+0x9fc>
 80094be:	2600      	movs	r6, #0
 80094c0:	4f62      	ldr	r7, [pc, #392]	; (800964c <_strtod_l+0xb04>)
 80094c2:	4d62      	ldr	r5, [pc, #392]	; (800964c <_strtod_l+0xb04>)
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094ca:	0d1b      	lsrs	r3, r3, #20
 80094cc:	051b      	lsls	r3, r3, #20
 80094ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80094d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094d2:	4b5f      	ldr	r3, [pc, #380]	; (8009650 <_strtod_l+0xb08>)
 80094d4:	429a      	cmp	r2, r3
 80094d6:	f040 80c3 	bne.w	8009660 <_strtod_l+0xb18>
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	4640      	mov	r0, r8
 80094de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80094e2:	4649      	mov	r1, r9
 80094e4:	f001 fb88 	bl	800abf8 <__ulp>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4630      	mov	r0, r6
 80094ee:	4639      	mov	r1, r7
 80094f0:	f7f6 fff2 	bl	80004d8 <__aeabi_dmul>
 80094f4:	4642      	mov	r2, r8
 80094f6:	464b      	mov	r3, r9
 80094f8:	f7f6 fe38 	bl	800016c <__adddf3>
 80094fc:	460b      	mov	r3, r1
 80094fe:	4951      	ldr	r1, [pc, #324]	; (8009644 <_strtod_l+0xafc>)
 8009500:	4a54      	ldr	r2, [pc, #336]	; (8009654 <_strtod_l+0xb0c>)
 8009502:	4019      	ands	r1, r3
 8009504:	4291      	cmp	r1, r2
 8009506:	4680      	mov	r8, r0
 8009508:	d95d      	bls.n	80095c6 <_strtod_l+0xa7e>
 800950a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800950c:	4b4e      	ldr	r3, [pc, #312]	; (8009648 <_strtod_l+0xb00>)
 800950e:	429a      	cmp	r2, r3
 8009510:	d103      	bne.n	800951a <_strtod_l+0x9d2>
 8009512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009514:	3301      	adds	r3, #1
 8009516:	f43f ad56 	beq.w	8008fc6 <_strtod_l+0x47e>
 800951a:	f04f 38ff 	mov.w	r8, #4294967295
 800951e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009648 <_strtod_l+0xb00>
 8009522:	4650      	mov	r0, sl
 8009524:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009526:	f001 f837 	bl	800a598 <_Bfree>
 800952a:	4650      	mov	r0, sl
 800952c:	9906      	ldr	r1, [sp, #24]
 800952e:	f001 f833 	bl	800a598 <_Bfree>
 8009532:	4650      	mov	r0, sl
 8009534:	9904      	ldr	r1, [sp, #16]
 8009536:	f001 f82f 	bl	800a598 <_Bfree>
 800953a:	4659      	mov	r1, fp
 800953c:	4650      	mov	r0, sl
 800953e:	f001 f82b 	bl	800a598 <_Bfree>
 8009542:	e627      	b.n	8009194 <_strtod_l+0x64c>
 8009544:	f1b8 0f00 	cmp.w	r8, #0
 8009548:	d119      	bne.n	800957e <_strtod_l+0xa36>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009550:	b9e3      	cbnz	r3, 800958c <_strtod_l+0xa44>
 8009552:	2200      	movs	r2, #0
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	4b3c      	ldr	r3, [pc, #240]	; (800964c <_strtod_l+0xb04>)
 800955a:	f7f7 fa2f 	bl	80009bc <__aeabi_dcmplt>
 800955e:	b9c8      	cbnz	r0, 8009594 <_strtod_l+0xa4c>
 8009560:	2200      	movs	r2, #0
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	4b3c      	ldr	r3, [pc, #240]	; (8009658 <_strtod_l+0xb10>)
 8009568:	f7f6 ffb6 	bl	80004d8 <__aeabi_dmul>
 800956c:	4604      	mov	r4, r0
 800956e:	460d      	mov	r5, r1
 8009570:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009574:	9416      	str	r4, [sp, #88]	; 0x58
 8009576:	9317      	str	r3, [sp, #92]	; 0x5c
 8009578:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800957c:	e7a2      	b.n	80094c4 <_strtod_l+0x97c>
 800957e:	f1b8 0f01 	cmp.w	r8, #1
 8009582:	d103      	bne.n	800958c <_strtod_l+0xa44>
 8009584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009586:	2b00      	cmp	r3, #0
 8009588:	f43f ad92 	beq.w	80090b0 <_strtod_l+0x568>
 800958c:	2600      	movs	r6, #0
 800958e:	2400      	movs	r4, #0
 8009590:	4f32      	ldr	r7, [pc, #200]	; (800965c <_strtod_l+0xb14>)
 8009592:	e796      	b.n	80094c2 <_strtod_l+0x97a>
 8009594:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009596:	4d30      	ldr	r5, [pc, #192]	; (8009658 <_strtod_l+0xb10>)
 8009598:	e7ea      	b.n	8009570 <_strtod_l+0xa28>
 800959a:	4b2f      	ldr	r3, [pc, #188]	; (8009658 <_strtod_l+0xb10>)
 800959c:	2200      	movs	r2, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 ff99 	bl	80004d8 <__aeabi_dmul>
 80095a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	b933      	cbnz	r3, 80095bc <_strtod_l+0xa74>
 80095ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095b2:	9010      	str	r0, [sp, #64]	; 0x40
 80095b4:	9311      	str	r3, [sp, #68]	; 0x44
 80095b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80095ba:	e783      	b.n	80094c4 <_strtod_l+0x97c>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80095c4:	e7f7      	b.n	80095b6 <_strtod_l+0xa6e>
 80095c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1a8      	bne.n	8009522 <_strtod_l+0x9da>
 80095d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095d6:	0d1b      	lsrs	r3, r3, #20
 80095d8:	051b      	lsls	r3, r3, #20
 80095da:	429a      	cmp	r2, r3
 80095dc:	d1a1      	bne.n	8009522 <_strtod_l+0x9da>
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	f7f7 fd4f 	bl	8001084 <__aeabi_d2lz>
 80095e6:	f7f6 ff49 	bl	800047c <__aeabi_l2d>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fdb9 	bl	8000168 <__aeabi_dsub>
 80095f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095fc:	ea43 0308 	orr.w	r3, r3, r8
 8009600:	4313      	orrs	r3, r2
 8009602:	4604      	mov	r4, r0
 8009604:	460d      	mov	r5, r1
 8009606:	d066      	beq.n	80096d6 <_strtod_l+0xb8e>
 8009608:	a309      	add	r3, pc, #36	; (adr r3, 8009630 <_strtod_l+0xae8>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f7f7 f9d5 	bl	80009bc <__aeabi_dcmplt>
 8009612:	2800      	cmp	r0, #0
 8009614:	f47f ace2 	bne.w	8008fdc <_strtod_l+0x494>
 8009618:	a307      	add	r3, pc, #28	; (adr r3, 8009638 <_strtod_l+0xaf0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f7 f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 8009626:	2800      	cmp	r0, #0
 8009628:	f43f af7b 	beq.w	8009522 <_strtod_l+0x9da>
 800962c:	e4d6      	b.n	8008fdc <_strtod_l+0x494>
 800962e:	bf00      	nop
 8009630:	94a03595 	.word	0x94a03595
 8009634:	3fdfffff 	.word	0x3fdfffff
 8009638:	35afe535 	.word	0x35afe535
 800963c:	3fe00000 	.word	0x3fe00000
 8009640:	000fffff 	.word	0x000fffff
 8009644:	7ff00000 	.word	0x7ff00000
 8009648:	7fefffff 	.word	0x7fefffff
 800964c:	3ff00000 	.word	0x3ff00000
 8009650:	7fe00000 	.word	0x7fe00000
 8009654:	7c9fffff 	.word	0x7c9fffff
 8009658:	3fe00000 	.word	0x3fe00000
 800965c:	bff00000 	.word	0xbff00000
 8009660:	9b05      	ldr	r3, [sp, #20]
 8009662:	b313      	cbz	r3, 80096aa <_strtod_l+0xb62>
 8009664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009666:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800966a:	d81e      	bhi.n	80096aa <_strtod_l+0xb62>
 800966c:	a326      	add	r3, pc, #152	; (adr r3, 8009708 <_strtod_l+0xbc0>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f7 f9ab 	bl	80009d0 <__aeabi_dcmple>
 800967a:	b190      	cbz	r0, 80096a2 <_strtod_l+0xb5a>
 800967c:	4629      	mov	r1, r5
 800967e:	4620      	mov	r0, r4
 8009680:	f7f7 f9ec 	bl	8000a5c <__aeabi_d2uiz>
 8009684:	2801      	cmp	r0, #1
 8009686:	bf38      	it	cc
 8009688:	2001      	movcc	r0, #1
 800968a:	f7f6 feab 	bl	80003e4 <__aeabi_ui2d>
 800968e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	b9d3      	cbnz	r3, 80096cc <_strtod_l+0xb84>
 8009696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800969a:	9012      	str	r0, [sp, #72]	; 0x48
 800969c:	9313      	str	r3, [sp, #76]	; 0x4c
 800969e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80096a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80096a8:	1a9f      	subs	r7, r3, r2
 80096aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096ae:	f001 faa3 	bl	800abf8 <__ulp>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 ff0d 	bl	80004d8 <__aeabi_dmul>
 80096be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096c2:	f7f6 fd53 	bl	800016c <__adddf3>
 80096c6:	4680      	mov	r8, r0
 80096c8:	4689      	mov	r9, r1
 80096ca:	e77e      	b.n	80095ca <_strtod_l+0xa82>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80096d4:	e7e3      	b.n	800969e <_strtod_l+0xb56>
 80096d6:	a30e      	add	r3, pc, #56	; (adr r3, 8009710 <_strtod_l+0xbc8>)
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f7f7 f96e 	bl	80009bc <__aeabi_dcmplt>
 80096e0:	e7a1      	b.n	8009626 <_strtod_l+0xade>
 80096e2:	2300      	movs	r3, #0
 80096e4:	930a      	str	r3, [sp, #40]	; 0x28
 80096e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	f7ff ba71 	b.w	8008bd2 <_strtod_l+0x8a>
 80096f0:	2a65      	cmp	r2, #101	; 0x65
 80096f2:	f43f ab63 	beq.w	8008dbc <_strtod_l+0x274>
 80096f6:	2a45      	cmp	r2, #69	; 0x45
 80096f8:	f43f ab60 	beq.w	8008dbc <_strtod_l+0x274>
 80096fc:	2301      	movs	r3, #1
 80096fe:	f7ff bb95 	b.w	8008e2c <_strtod_l+0x2e4>
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w
 8009708:	ffc00000 	.word	0xffc00000
 800970c:	41dfffff 	.word	0x41dfffff
 8009710:	94a03595 	.word	0x94a03595
 8009714:	3fcfffff 	.word	0x3fcfffff

08009718 <strtod>:
 8009718:	460a      	mov	r2, r1
 800971a:	4601      	mov	r1, r0
 800971c:	4802      	ldr	r0, [pc, #8]	; (8009728 <strtod+0x10>)
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <strtod+0x14>)
 8009720:	6800      	ldr	r0, [r0, #0]
 8009722:	f7ff ba11 	b.w	8008b48 <_strtod_l>
 8009726:	bf00      	nop
 8009728:	2000003c 	.word	0x2000003c
 800972c:	200000a4 	.word	0x200000a4

08009730 <_strtol_l.constprop.0>:
 8009730:	2b01      	cmp	r3, #1
 8009732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009736:	4680      	mov	r8, r0
 8009738:	d001      	beq.n	800973e <_strtol_l.constprop.0+0xe>
 800973a:	2b24      	cmp	r3, #36	; 0x24
 800973c:	d906      	bls.n	800974c <_strtol_l.constprop.0+0x1c>
 800973e:	f7ff f8bb 	bl	80088b8 <__errno>
 8009742:	2316      	movs	r3, #22
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	2000      	movs	r0, #0
 8009748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974c:	460d      	mov	r5, r1
 800974e:	4f35      	ldr	r7, [pc, #212]	; (8009824 <_strtol_l.constprop.0+0xf4>)
 8009750:	4628      	mov	r0, r5
 8009752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009756:	5de6      	ldrb	r6, [r4, r7]
 8009758:	f016 0608 	ands.w	r6, r6, #8
 800975c:	d1f8      	bne.n	8009750 <_strtol_l.constprop.0+0x20>
 800975e:	2c2d      	cmp	r4, #45	; 0x2d
 8009760:	d12f      	bne.n	80097c2 <_strtol_l.constprop.0+0x92>
 8009762:	2601      	movs	r6, #1
 8009764:	782c      	ldrb	r4, [r5, #0]
 8009766:	1c85      	adds	r5, r0, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d057      	beq.n	800981c <_strtol_l.constprop.0+0xec>
 800976c:	2b10      	cmp	r3, #16
 800976e:	d109      	bne.n	8009784 <_strtol_l.constprop.0+0x54>
 8009770:	2c30      	cmp	r4, #48	; 0x30
 8009772:	d107      	bne.n	8009784 <_strtol_l.constprop.0+0x54>
 8009774:	7828      	ldrb	r0, [r5, #0]
 8009776:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800977a:	2858      	cmp	r0, #88	; 0x58
 800977c:	d149      	bne.n	8009812 <_strtol_l.constprop.0+0xe2>
 800977e:	2310      	movs	r3, #16
 8009780:	786c      	ldrb	r4, [r5, #1]
 8009782:	3502      	adds	r5, #2
 8009784:	2700      	movs	r7, #0
 8009786:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800978a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800978e:	fbbe f9f3 	udiv	r9, lr, r3
 8009792:	4638      	mov	r0, r7
 8009794:	fb03 ea19 	mls	sl, r3, r9, lr
 8009798:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800979c:	f1bc 0f09 	cmp.w	ip, #9
 80097a0:	d814      	bhi.n	80097cc <_strtol_l.constprop.0+0x9c>
 80097a2:	4664      	mov	r4, ip
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	dd22      	ble.n	80097ee <_strtol_l.constprop.0+0xbe>
 80097a8:	2f00      	cmp	r7, #0
 80097aa:	db1d      	blt.n	80097e8 <_strtol_l.constprop.0+0xb8>
 80097ac:	4581      	cmp	r9, r0
 80097ae:	d31b      	bcc.n	80097e8 <_strtol_l.constprop.0+0xb8>
 80097b0:	d101      	bne.n	80097b6 <_strtol_l.constprop.0+0x86>
 80097b2:	45a2      	cmp	sl, r4
 80097b4:	db18      	blt.n	80097e8 <_strtol_l.constprop.0+0xb8>
 80097b6:	2701      	movs	r7, #1
 80097b8:	fb00 4003 	mla	r0, r0, r3, r4
 80097bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097c0:	e7ea      	b.n	8009798 <_strtol_l.constprop.0+0x68>
 80097c2:	2c2b      	cmp	r4, #43	; 0x2b
 80097c4:	bf04      	itt	eq
 80097c6:	782c      	ldrbeq	r4, [r5, #0]
 80097c8:	1c85      	addeq	r5, r0, #2
 80097ca:	e7cd      	b.n	8009768 <_strtol_l.constprop.0+0x38>
 80097cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80097d0:	f1bc 0f19 	cmp.w	ip, #25
 80097d4:	d801      	bhi.n	80097da <_strtol_l.constprop.0+0xaa>
 80097d6:	3c37      	subs	r4, #55	; 0x37
 80097d8:	e7e4      	b.n	80097a4 <_strtol_l.constprop.0+0x74>
 80097da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097de:	f1bc 0f19 	cmp.w	ip, #25
 80097e2:	d804      	bhi.n	80097ee <_strtol_l.constprop.0+0xbe>
 80097e4:	3c57      	subs	r4, #87	; 0x57
 80097e6:	e7dd      	b.n	80097a4 <_strtol_l.constprop.0+0x74>
 80097e8:	f04f 37ff 	mov.w	r7, #4294967295
 80097ec:	e7e6      	b.n	80097bc <_strtol_l.constprop.0+0x8c>
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	da07      	bge.n	8009802 <_strtol_l.constprop.0+0xd2>
 80097f2:	2322      	movs	r3, #34	; 0x22
 80097f4:	4670      	mov	r0, lr
 80097f6:	f8c8 3000 	str.w	r3, [r8]
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	d0a4      	beq.n	8009748 <_strtol_l.constprop.0+0x18>
 80097fe:	1e69      	subs	r1, r5, #1
 8009800:	e005      	b.n	800980e <_strtol_l.constprop.0+0xde>
 8009802:	b106      	cbz	r6, 8009806 <_strtol_l.constprop.0+0xd6>
 8009804:	4240      	negs	r0, r0
 8009806:	2a00      	cmp	r2, #0
 8009808:	d09e      	beq.n	8009748 <_strtol_l.constprop.0+0x18>
 800980a:	2f00      	cmp	r7, #0
 800980c:	d1f7      	bne.n	80097fe <_strtol_l.constprop.0+0xce>
 800980e:	6011      	str	r1, [r2, #0]
 8009810:	e79a      	b.n	8009748 <_strtol_l.constprop.0+0x18>
 8009812:	2430      	movs	r4, #48	; 0x30
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1b5      	bne.n	8009784 <_strtol_l.constprop.0+0x54>
 8009818:	2308      	movs	r3, #8
 800981a:	e7b3      	b.n	8009784 <_strtol_l.constprop.0+0x54>
 800981c:	2c30      	cmp	r4, #48	; 0x30
 800981e:	d0a9      	beq.n	8009774 <_strtol_l.constprop.0+0x44>
 8009820:	230a      	movs	r3, #10
 8009822:	e7af      	b.n	8009784 <_strtol_l.constprop.0+0x54>
 8009824:	0800b7f1 	.word	0x0800b7f1

08009828 <strtol>:
 8009828:	4613      	mov	r3, r2
 800982a:	460a      	mov	r2, r1
 800982c:	4601      	mov	r1, r0
 800982e:	4802      	ldr	r0, [pc, #8]	; (8009838 <strtol+0x10>)
 8009830:	6800      	ldr	r0, [r0, #0]
 8009832:	f7ff bf7d 	b.w	8009730 <_strtol_l.constprop.0>
 8009836:	bf00      	nop
 8009838:	2000003c 	.word	0x2000003c

0800983c <__swbuf_r>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	460e      	mov	r6, r1
 8009840:	4614      	mov	r4, r2
 8009842:	4605      	mov	r5, r0
 8009844:	b118      	cbz	r0, 800984e <__swbuf_r+0x12>
 8009846:	6983      	ldr	r3, [r0, #24]
 8009848:	b90b      	cbnz	r3, 800984e <__swbuf_r+0x12>
 800984a:	f000 f9cd 	bl	8009be8 <__sinit>
 800984e:	4b21      	ldr	r3, [pc, #132]	; (80098d4 <__swbuf_r+0x98>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d12b      	bne.n	80098ac <__swbuf_r+0x70>
 8009854:	686c      	ldr	r4, [r5, #4]
 8009856:	69a3      	ldr	r3, [r4, #24]
 8009858:	60a3      	str	r3, [r4, #8]
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	071a      	lsls	r2, r3, #28
 800985e:	d52f      	bpl.n	80098c0 <__swbuf_r+0x84>
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	b36b      	cbz	r3, 80098c0 <__swbuf_r+0x84>
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	6820      	ldr	r0, [r4, #0]
 8009868:	b2f6      	uxtb	r6, r6
 800986a:	1ac0      	subs	r0, r0, r3
 800986c:	6963      	ldr	r3, [r4, #20]
 800986e:	4637      	mov	r7, r6
 8009870:	4283      	cmp	r3, r0
 8009872:	dc04      	bgt.n	800987e <__swbuf_r+0x42>
 8009874:	4621      	mov	r1, r4
 8009876:	4628      	mov	r0, r5
 8009878:	f000 f922 	bl	8009ac0 <_fflush_r>
 800987c:	bb30      	cbnz	r0, 80098cc <__swbuf_r+0x90>
 800987e:	68a3      	ldr	r3, [r4, #8]
 8009880:	3001      	adds	r0, #1
 8009882:	3b01      	subs	r3, #1
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	6022      	str	r2, [r4, #0]
 800988c:	701e      	strb	r6, [r3, #0]
 800988e:	6963      	ldr	r3, [r4, #20]
 8009890:	4283      	cmp	r3, r0
 8009892:	d004      	beq.n	800989e <__swbuf_r+0x62>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	07db      	lsls	r3, r3, #31
 8009898:	d506      	bpl.n	80098a8 <__swbuf_r+0x6c>
 800989a:	2e0a      	cmp	r6, #10
 800989c:	d104      	bne.n	80098a8 <__swbuf_r+0x6c>
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f90d 	bl	8009ac0 <_fflush_r>
 80098a6:	b988      	cbnz	r0, 80098cc <__swbuf_r+0x90>
 80098a8:	4638      	mov	r0, r7
 80098aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ac:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <__swbuf_r+0x9c>)
 80098ae:	429c      	cmp	r4, r3
 80098b0:	d101      	bne.n	80098b6 <__swbuf_r+0x7a>
 80098b2:	68ac      	ldr	r4, [r5, #8]
 80098b4:	e7cf      	b.n	8009856 <__swbuf_r+0x1a>
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <__swbuf_r+0xa0>)
 80098b8:	429c      	cmp	r4, r3
 80098ba:	bf08      	it	eq
 80098bc:	68ec      	ldreq	r4, [r5, #12]
 80098be:	e7ca      	b.n	8009856 <__swbuf_r+0x1a>
 80098c0:	4621      	mov	r1, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	f000 f80c 	bl	80098e0 <__swsetup_r>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0cb      	beq.n	8009864 <__swbuf_r+0x28>
 80098cc:	f04f 37ff 	mov.w	r7, #4294967295
 80098d0:	e7ea      	b.n	80098a8 <__swbuf_r+0x6c>
 80098d2:	bf00      	nop
 80098d4:	0800b914 	.word	0x0800b914
 80098d8:	0800b934 	.word	0x0800b934
 80098dc:	0800b8f4 	.word	0x0800b8f4

080098e0 <__swsetup_r>:
 80098e0:	4b32      	ldr	r3, [pc, #200]	; (80099ac <__swsetup_r+0xcc>)
 80098e2:	b570      	push	{r4, r5, r6, lr}
 80098e4:	681d      	ldr	r5, [r3, #0]
 80098e6:	4606      	mov	r6, r0
 80098e8:	460c      	mov	r4, r1
 80098ea:	b125      	cbz	r5, 80098f6 <__swsetup_r+0x16>
 80098ec:	69ab      	ldr	r3, [r5, #24]
 80098ee:	b913      	cbnz	r3, 80098f6 <__swsetup_r+0x16>
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 f979 	bl	8009be8 <__sinit>
 80098f6:	4b2e      	ldr	r3, [pc, #184]	; (80099b0 <__swsetup_r+0xd0>)
 80098f8:	429c      	cmp	r4, r3
 80098fa:	d10f      	bne.n	800991c <__swsetup_r+0x3c>
 80098fc:	686c      	ldr	r4, [r5, #4]
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009904:	0719      	lsls	r1, r3, #28
 8009906:	d42c      	bmi.n	8009962 <__swsetup_r+0x82>
 8009908:	06dd      	lsls	r5, r3, #27
 800990a:	d411      	bmi.n	8009930 <__swsetup_r+0x50>
 800990c:	2309      	movs	r3, #9
 800990e:	6033      	str	r3, [r6, #0]
 8009910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	e03e      	b.n	800999a <__swsetup_r+0xba>
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <__swsetup_r+0xd4>)
 800991e:	429c      	cmp	r4, r3
 8009920:	d101      	bne.n	8009926 <__swsetup_r+0x46>
 8009922:	68ac      	ldr	r4, [r5, #8]
 8009924:	e7eb      	b.n	80098fe <__swsetup_r+0x1e>
 8009926:	4b24      	ldr	r3, [pc, #144]	; (80099b8 <__swsetup_r+0xd8>)
 8009928:	429c      	cmp	r4, r3
 800992a:	bf08      	it	eq
 800992c:	68ec      	ldreq	r4, [r5, #12]
 800992e:	e7e6      	b.n	80098fe <__swsetup_r+0x1e>
 8009930:	0758      	lsls	r0, r3, #29
 8009932:	d512      	bpl.n	800995a <__swsetup_r+0x7a>
 8009934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009936:	b141      	cbz	r1, 800994a <__swsetup_r+0x6a>
 8009938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800993c:	4299      	cmp	r1, r3
 800993e:	d002      	beq.n	8009946 <__swsetup_r+0x66>
 8009940:	4630      	mov	r0, r6
 8009942:	f7fe fff3 	bl	800892c <_free_r>
 8009946:	2300      	movs	r3, #0
 8009948:	6363      	str	r3, [r4, #52]	; 0x34
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	2300      	movs	r3, #0
 8009954:	6063      	str	r3, [r4, #4]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f043 0308 	orr.w	r3, r3, #8
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	b94b      	cbnz	r3, 800997a <__swsetup_r+0x9a>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800996c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009970:	d003      	beq.n	800997a <__swsetup_r+0x9a>
 8009972:	4621      	mov	r1, r4
 8009974:	4630      	mov	r0, r6
 8009976:	f000 fd63 	bl	800a440 <__smakebuf_r>
 800997a:	89a0      	ldrh	r0, [r4, #12]
 800997c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009980:	f010 0301 	ands.w	r3, r0, #1
 8009984:	d00a      	beq.n	800999c <__swsetup_r+0xbc>
 8009986:	2300      	movs	r3, #0
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	6963      	ldr	r3, [r4, #20]
 800998c:	425b      	negs	r3, r3
 800998e:	61a3      	str	r3, [r4, #24]
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	b943      	cbnz	r3, 80099a6 <__swsetup_r+0xc6>
 8009994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009998:	d1ba      	bne.n	8009910 <__swsetup_r+0x30>
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	0781      	lsls	r1, r0, #30
 800999e:	bf58      	it	pl
 80099a0:	6963      	ldrpl	r3, [r4, #20]
 80099a2:	60a3      	str	r3, [r4, #8]
 80099a4:	e7f4      	b.n	8009990 <__swsetup_r+0xb0>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e7f7      	b.n	800999a <__swsetup_r+0xba>
 80099aa:	bf00      	nop
 80099ac:	2000003c 	.word	0x2000003c
 80099b0:	0800b914 	.word	0x0800b914
 80099b4:	0800b934 	.word	0x0800b934
 80099b8:	0800b8f4 	.word	0x0800b8f4

080099bc <__sflush_r>:
 80099bc:	898a      	ldrh	r2, [r1, #12]
 80099be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c0:	4605      	mov	r5, r0
 80099c2:	0710      	lsls	r0, r2, #28
 80099c4:	460c      	mov	r4, r1
 80099c6:	d457      	bmi.n	8009a78 <__sflush_r+0xbc>
 80099c8:	684b      	ldr	r3, [r1, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dc04      	bgt.n	80099d8 <__sflush_r+0x1c>
 80099ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dc01      	bgt.n	80099d8 <__sflush_r+0x1c>
 80099d4:	2000      	movs	r0, #0
 80099d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099da:	2e00      	cmp	r6, #0
 80099dc:	d0fa      	beq.n	80099d4 <__sflush_r+0x18>
 80099de:	2300      	movs	r3, #0
 80099e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099e4:	682f      	ldr	r7, [r5, #0]
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	d032      	beq.n	8009a50 <__sflush_r+0x94>
 80099ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	075a      	lsls	r2, r3, #29
 80099f0:	d505      	bpl.n	80099fe <__sflush_r+0x42>
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f8:	b10b      	cbz	r3, 80099fe <__sflush_r+0x42>
 80099fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099fc:	1ac0      	subs	r0, r0, r3
 80099fe:	2300      	movs	r3, #0
 8009a00:	4602      	mov	r2, r0
 8009a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a04:	4628      	mov	r0, r5
 8009a06:	6a21      	ldr	r1, [r4, #32]
 8009a08:	47b0      	blx	r6
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	d106      	bne.n	8009a1e <__sflush_r+0x62>
 8009a10:	6829      	ldr	r1, [r5, #0]
 8009a12:	291d      	cmp	r1, #29
 8009a14:	d82c      	bhi.n	8009a70 <__sflush_r+0xb4>
 8009a16:	4a29      	ldr	r2, [pc, #164]	; (8009abc <__sflush_r+0x100>)
 8009a18:	40ca      	lsrs	r2, r1
 8009a1a:	07d6      	lsls	r6, r2, #31
 8009a1c:	d528      	bpl.n	8009a70 <__sflush_r+0xb4>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	6062      	str	r2, [r4, #4]
 8009a22:	6922      	ldr	r2, [r4, #16]
 8009a24:	04d9      	lsls	r1, r3, #19
 8009a26:	6022      	str	r2, [r4, #0]
 8009a28:	d504      	bpl.n	8009a34 <__sflush_r+0x78>
 8009a2a:	1c42      	adds	r2, r0, #1
 8009a2c:	d101      	bne.n	8009a32 <__sflush_r+0x76>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	b903      	cbnz	r3, 8009a34 <__sflush_r+0x78>
 8009a32:	6560      	str	r0, [r4, #84]	; 0x54
 8009a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a36:	602f      	str	r7, [r5, #0]
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	d0cb      	beq.n	80099d4 <__sflush_r+0x18>
 8009a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d002      	beq.n	8009a4a <__sflush_r+0x8e>
 8009a44:	4628      	mov	r0, r5
 8009a46:	f7fe ff71 	bl	800892c <_free_r>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a4e:	e7c2      	b.n	80099d6 <__sflush_r+0x1a>
 8009a50:	6a21      	ldr	r1, [r4, #32]
 8009a52:	2301      	movs	r3, #1
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b0      	blx	r6
 8009a58:	1c41      	adds	r1, r0, #1
 8009a5a:	d1c7      	bne.n	80099ec <__sflush_r+0x30>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0c4      	beq.n	80099ec <__sflush_r+0x30>
 8009a62:	2b1d      	cmp	r3, #29
 8009a64:	d001      	beq.n	8009a6a <__sflush_r+0xae>
 8009a66:	2b16      	cmp	r3, #22
 8009a68:	d101      	bne.n	8009a6e <__sflush_r+0xb2>
 8009a6a:	602f      	str	r7, [r5, #0]
 8009a6c:	e7b2      	b.n	80099d4 <__sflush_r+0x18>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	e7ae      	b.n	80099d6 <__sflush_r+0x1a>
 8009a78:	690f      	ldr	r7, [r1, #16]
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	d0aa      	beq.n	80099d4 <__sflush_r+0x18>
 8009a7e:	0793      	lsls	r3, r2, #30
 8009a80:	bf18      	it	ne
 8009a82:	2300      	movne	r3, #0
 8009a84:	680e      	ldr	r6, [r1, #0]
 8009a86:	bf08      	it	eq
 8009a88:	694b      	ldreq	r3, [r1, #20]
 8009a8a:	1bf6      	subs	r6, r6, r7
 8009a8c:	600f      	str	r7, [r1, #0]
 8009a8e:	608b      	str	r3, [r1, #8]
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	dd9f      	ble.n	80099d4 <__sflush_r+0x18>
 8009a94:	4633      	mov	r3, r6
 8009a96:	463a      	mov	r2, r7
 8009a98:	4628      	mov	r0, r5
 8009a9a:	6a21      	ldr	r1, [r4, #32]
 8009a9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009aa0:	47e0      	blx	ip
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	dc06      	bgt.n	8009ab4 <__sflush_r+0xf8>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	e790      	b.n	80099d6 <__sflush_r+0x1a>
 8009ab4:	4407      	add	r7, r0
 8009ab6:	1a36      	subs	r6, r6, r0
 8009ab8:	e7ea      	b.n	8009a90 <__sflush_r+0xd4>
 8009aba:	bf00      	nop
 8009abc:	20400001 	.word	0x20400001

08009ac0 <_fflush_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	690b      	ldr	r3, [r1, #16]
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	b913      	cbnz	r3, 8009ad0 <_fflush_r+0x10>
 8009aca:	2500      	movs	r5, #0
 8009acc:	4628      	mov	r0, r5
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	b118      	cbz	r0, 8009ada <_fflush_r+0x1a>
 8009ad2:	6983      	ldr	r3, [r0, #24]
 8009ad4:	b90b      	cbnz	r3, 8009ada <_fflush_r+0x1a>
 8009ad6:	f000 f887 	bl	8009be8 <__sinit>
 8009ada:	4b14      	ldr	r3, [pc, #80]	; (8009b2c <_fflush_r+0x6c>)
 8009adc:	429c      	cmp	r4, r3
 8009ade:	d11b      	bne.n	8009b18 <_fflush_r+0x58>
 8009ae0:	686c      	ldr	r4, [r5, #4]
 8009ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0ef      	beq.n	8009aca <_fflush_r+0xa>
 8009aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009aec:	07d0      	lsls	r0, r2, #31
 8009aee:	d404      	bmi.n	8009afa <_fflush_r+0x3a>
 8009af0:	0599      	lsls	r1, r3, #22
 8009af2:	d402      	bmi.n	8009afa <_fflush_r+0x3a>
 8009af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af6:	f000 fc7c 	bl	800a3f2 <__retarget_lock_acquire_recursive>
 8009afa:	4628      	mov	r0, r5
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7ff ff5d 	bl	80099bc <__sflush_r>
 8009b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b04:	4605      	mov	r5, r0
 8009b06:	07da      	lsls	r2, r3, #31
 8009b08:	d4e0      	bmi.n	8009acc <_fflush_r+0xc>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	059b      	lsls	r3, r3, #22
 8009b0e:	d4dd      	bmi.n	8009acc <_fflush_r+0xc>
 8009b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b12:	f000 fc6f 	bl	800a3f4 <__retarget_lock_release_recursive>
 8009b16:	e7d9      	b.n	8009acc <_fflush_r+0xc>
 8009b18:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <_fflush_r+0x70>)
 8009b1a:	429c      	cmp	r4, r3
 8009b1c:	d101      	bne.n	8009b22 <_fflush_r+0x62>
 8009b1e:	68ac      	ldr	r4, [r5, #8]
 8009b20:	e7df      	b.n	8009ae2 <_fflush_r+0x22>
 8009b22:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <_fflush_r+0x74>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	bf08      	it	eq
 8009b28:	68ec      	ldreq	r4, [r5, #12]
 8009b2a:	e7da      	b.n	8009ae2 <_fflush_r+0x22>
 8009b2c:	0800b914 	.word	0x0800b914
 8009b30:	0800b934 	.word	0x0800b934
 8009b34:	0800b8f4 	.word	0x0800b8f4

08009b38 <std>:
 8009b38:	2300      	movs	r3, #0
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b46:	6083      	str	r3, [r0, #8]
 8009b48:	8181      	strh	r1, [r0, #12]
 8009b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b4c:	81c2      	strh	r2, [r0, #14]
 8009b4e:	6183      	str	r3, [r0, #24]
 8009b50:	4619      	mov	r1, r3
 8009b52:	2208      	movs	r2, #8
 8009b54:	305c      	adds	r0, #92	; 0x5c
 8009b56:	f7fe fee1 	bl	800891c <memset>
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x38>)
 8009b5c:	6224      	str	r4, [r4, #32]
 8009b5e:	6263      	str	r3, [r4, #36]	; 0x24
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <std+0x3c>)
 8009b62:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <std+0x40>)
 8009b66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <std+0x44>)
 8009b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	bf00      	nop
 8009b70:	0800b499 	.word	0x0800b499
 8009b74:	0800b4bb 	.word	0x0800b4bb
 8009b78:	0800b4f3 	.word	0x0800b4f3
 8009b7c:	0800b517 	.word	0x0800b517

08009b80 <_cleanup_r>:
 8009b80:	4901      	ldr	r1, [pc, #4]	; (8009b88 <_cleanup_r+0x8>)
 8009b82:	f000 b8af 	b.w	8009ce4 <_fwalk_reent>
 8009b86:	bf00      	nop
 8009b88:	08009ac1 	.word	0x08009ac1

08009b8c <__sfmoreglue>:
 8009b8c:	2268      	movs	r2, #104	; 0x68
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	1e4d      	subs	r5, r1, #1
 8009b92:	4355      	muls	r5, r2
 8009b94:	460e      	mov	r6, r1
 8009b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b9a:	f7fe ff2f 	bl	80089fc <_malloc_r>
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	b140      	cbz	r0, 8009bb4 <__sfmoreglue+0x28>
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba8:	300c      	adds	r0, #12
 8009baa:	60a0      	str	r0, [r4, #8]
 8009bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bb0:	f7fe feb4 	bl	800891c <memset>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}

08009bb8 <__sfp_lock_acquire>:
 8009bb8:	4801      	ldr	r0, [pc, #4]	; (8009bc0 <__sfp_lock_acquire+0x8>)
 8009bba:	f000 bc1a 	b.w	800a3f2 <__retarget_lock_acquire_recursive>
 8009bbe:	bf00      	nop
 8009bc0:	20000b25 	.word	0x20000b25

08009bc4 <__sfp_lock_release>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	; (8009bcc <__sfp_lock_release+0x8>)
 8009bc6:	f000 bc15 	b.w	800a3f4 <__retarget_lock_release_recursive>
 8009bca:	bf00      	nop
 8009bcc:	20000b25 	.word	0x20000b25

08009bd0 <__sinit_lock_acquire>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__sinit_lock_acquire+0x8>)
 8009bd2:	f000 bc0e 	b.w	800a3f2 <__retarget_lock_acquire_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20000b26 	.word	0x20000b26

08009bdc <__sinit_lock_release>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__sinit_lock_release+0x8>)
 8009bde:	f000 bc09 	b.w	800a3f4 <__retarget_lock_release_recursive>
 8009be2:	bf00      	nop
 8009be4:	20000b26 	.word	0x20000b26

08009be8 <__sinit>:
 8009be8:	b510      	push	{r4, lr}
 8009bea:	4604      	mov	r4, r0
 8009bec:	f7ff fff0 	bl	8009bd0 <__sinit_lock_acquire>
 8009bf0:	69a3      	ldr	r3, [r4, #24]
 8009bf2:	b11b      	cbz	r3, 8009bfc <__sinit+0x14>
 8009bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf8:	f7ff bff0 	b.w	8009bdc <__sinit_lock_release>
 8009bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c00:	6523      	str	r3, [r4, #80]	; 0x50
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <__sinit+0x68>)
 8009c04:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <__sinit+0x6c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c0a:	42a3      	cmp	r3, r4
 8009c0c:	bf08      	it	eq
 8009c0e:	2301      	moveq	r3, #1
 8009c10:	4620      	mov	r0, r4
 8009c12:	bf08      	it	eq
 8009c14:	61a3      	streq	r3, [r4, #24]
 8009c16:	f000 f81f 	bl	8009c58 <__sfp>
 8009c1a:	6060      	str	r0, [r4, #4]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 f81b 	bl	8009c58 <__sfp>
 8009c22:	60a0      	str	r0, [r4, #8]
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 f817 	bl	8009c58 <__sfp>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2104      	movs	r1, #4
 8009c2e:	60e0      	str	r0, [r4, #12]
 8009c30:	6860      	ldr	r0, [r4, #4]
 8009c32:	f7ff ff81 	bl	8009b38 <std>
 8009c36:	2201      	movs	r2, #1
 8009c38:	2109      	movs	r1, #9
 8009c3a:	68a0      	ldr	r0, [r4, #8]
 8009c3c:	f7ff ff7c 	bl	8009b38 <std>
 8009c40:	2202      	movs	r2, #2
 8009c42:	2112      	movs	r1, #18
 8009c44:	68e0      	ldr	r0, [r4, #12]
 8009c46:	f7ff ff77 	bl	8009b38 <std>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	61a3      	str	r3, [r4, #24]
 8009c4e:	e7d1      	b.n	8009bf4 <__sinit+0xc>
 8009c50:	0800b78c 	.word	0x0800b78c
 8009c54:	08009b81 	.word	0x08009b81

08009c58 <__sfp>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	f7ff ffac 	bl	8009bb8 <__sfp_lock_acquire>
 8009c60:	4b1e      	ldr	r3, [pc, #120]	; (8009cdc <__sfp+0x84>)
 8009c62:	681e      	ldr	r6, [r3, #0]
 8009c64:	69b3      	ldr	r3, [r6, #24]
 8009c66:	b913      	cbnz	r3, 8009c6e <__sfp+0x16>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff ffbd 	bl	8009be8 <__sinit>
 8009c6e:	3648      	adds	r6, #72	; 0x48
 8009c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	d503      	bpl.n	8009c80 <__sfp+0x28>
 8009c78:	6833      	ldr	r3, [r6, #0]
 8009c7a:	b30b      	cbz	r3, 8009cc0 <__sfp+0x68>
 8009c7c:	6836      	ldr	r6, [r6, #0]
 8009c7e:	e7f7      	b.n	8009c70 <__sfp+0x18>
 8009c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c84:	b9d5      	cbnz	r5, 8009cbc <__sfp+0x64>
 8009c86:	4b16      	ldr	r3, [pc, #88]	; (8009ce0 <__sfp+0x88>)
 8009c88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c8c:	60e3      	str	r3, [r4, #12]
 8009c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c90:	f000 fbae 	bl	800a3f0 <__retarget_lock_init_recursive>
 8009c94:	f7ff ff96 	bl	8009bc4 <__sfp_lock_release>
 8009c98:	2208      	movs	r2, #8
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	61a5      	str	r5, [r4, #24]
 8009ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cac:	f7fe fe36 	bl	800891c <memset>
 8009cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb8:	4620      	mov	r0, r4
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cbc:	3468      	adds	r4, #104	; 0x68
 8009cbe:	e7d9      	b.n	8009c74 <__sfp+0x1c>
 8009cc0:	2104      	movs	r1, #4
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7ff ff62 	bl	8009b8c <__sfmoreglue>
 8009cc8:	4604      	mov	r4, r0
 8009cca:	6030      	str	r0, [r6, #0]
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d1d5      	bne.n	8009c7c <__sfp+0x24>
 8009cd0:	f7ff ff78 	bl	8009bc4 <__sfp_lock_release>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	e7ee      	b.n	8009cb8 <__sfp+0x60>
 8009cda:	bf00      	nop
 8009cdc:	0800b78c 	.word	0x0800b78c
 8009ce0:	ffff0001 	.word	0xffff0001

08009ce4 <_fwalk_reent>:
 8009ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce8:	4606      	mov	r6, r0
 8009cea:	4688      	mov	r8, r1
 8009cec:	2700      	movs	r7, #0
 8009cee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8009cfa:	d505      	bpl.n	8009d08 <_fwalk_reent+0x24>
 8009cfc:	6824      	ldr	r4, [r4, #0]
 8009cfe:	2c00      	cmp	r4, #0
 8009d00:	d1f7      	bne.n	8009cf2 <_fwalk_reent+0xe>
 8009d02:	4638      	mov	r0, r7
 8009d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d08:	89ab      	ldrh	r3, [r5, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d907      	bls.n	8009d1e <_fwalk_reent+0x3a>
 8009d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d12:	3301      	adds	r3, #1
 8009d14:	d003      	beq.n	8009d1e <_fwalk_reent+0x3a>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4630      	mov	r0, r6
 8009d1a:	47c0      	blx	r8
 8009d1c:	4307      	orrs	r7, r0
 8009d1e:	3568      	adds	r5, #104	; 0x68
 8009d20:	e7e9      	b.n	8009cf6 <_fwalk_reent+0x12>

08009d22 <rshift>:
 8009d22:	6903      	ldr	r3, [r0, #16]
 8009d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d28:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d2c:	f100 0414 	add.w	r4, r0, #20
 8009d30:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d34:	dd46      	ble.n	8009dc4 <rshift+0xa2>
 8009d36:	f011 011f 	ands.w	r1, r1, #31
 8009d3a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d3e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d42:	d10c      	bne.n	8009d5e <rshift+0x3c>
 8009d44:	4629      	mov	r1, r5
 8009d46:	f100 0710 	add.w	r7, r0, #16
 8009d4a:	42b1      	cmp	r1, r6
 8009d4c:	d335      	bcc.n	8009dba <rshift+0x98>
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	1eea      	subs	r2, r5, #3
 8009d54:	4296      	cmp	r6, r2
 8009d56:	bf38      	it	cc
 8009d58:	2300      	movcc	r3, #0
 8009d5a:	4423      	add	r3, r4
 8009d5c:	e015      	b.n	8009d8a <rshift+0x68>
 8009d5e:	46a1      	mov	r9, r4
 8009d60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d64:	f1c1 0820 	rsb	r8, r1, #32
 8009d68:	40cf      	lsrs	r7, r1
 8009d6a:	f105 0e04 	add.w	lr, r5, #4
 8009d6e:	4576      	cmp	r6, lr
 8009d70:	46f4      	mov	ip, lr
 8009d72:	d816      	bhi.n	8009da2 <rshift+0x80>
 8009d74:	1a9a      	subs	r2, r3, r2
 8009d76:	0092      	lsls	r2, r2, #2
 8009d78:	3a04      	subs	r2, #4
 8009d7a:	3501      	adds	r5, #1
 8009d7c:	42ae      	cmp	r6, r5
 8009d7e:	bf38      	it	cc
 8009d80:	2200      	movcc	r2, #0
 8009d82:	18a3      	adds	r3, r4, r2
 8009d84:	50a7      	str	r7, [r4, r2]
 8009d86:	b107      	cbz	r7, 8009d8a <rshift+0x68>
 8009d88:	3304      	adds	r3, #4
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	eba3 0204 	sub.w	r2, r3, r4
 8009d90:	bf08      	it	eq
 8009d92:	2300      	moveq	r3, #0
 8009d94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d98:	6102      	str	r2, [r0, #16]
 8009d9a:	bf08      	it	eq
 8009d9c:	6143      	streq	r3, [r0, #20]
 8009d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009da2:	f8dc c000 	ldr.w	ip, [ip]
 8009da6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009daa:	ea4c 0707 	orr.w	r7, ip, r7
 8009dae:	f849 7b04 	str.w	r7, [r9], #4
 8009db2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009db6:	40cf      	lsrs	r7, r1
 8009db8:	e7d9      	b.n	8009d6e <rshift+0x4c>
 8009dba:	f851 cb04 	ldr.w	ip, [r1], #4
 8009dbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009dc2:	e7c2      	b.n	8009d4a <rshift+0x28>
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	e7e0      	b.n	8009d8a <rshift+0x68>

08009dc8 <__hexdig_fun>:
 8009dc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009dcc:	2b09      	cmp	r3, #9
 8009dce:	d802      	bhi.n	8009dd6 <__hexdig_fun+0xe>
 8009dd0:	3820      	subs	r0, #32
 8009dd2:	b2c0      	uxtb	r0, r0
 8009dd4:	4770      	bx	lr
 8009dd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d801      	bhi.n	8009de2 <__hexdig_fun+0x1a>
 8009dde:	3847      	subs	r0, #71	; 0x47
 8009de0:	e7f7      	b.n	8009dd2 <__hexdig_fun+0xa>
 8009de2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d801      	bhi.n	8009dee <__hexdig_fun+0x26>
 8009dea:	3827      	subs	r0, #39	; 0x27
 8009dec:	e7f1      	b.n	8009dd2 <__hexdig_fun+0xa>
 8009dee:	2000      	movs	r0, #0
 8009df0:	4770      	bx	lr
	...

08009df4 <__gethex>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	b08b      	sub	sp, #44	; 0x2c
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	4bb2      	ldr	r3, [pc, #712]	; (800a0c8 <__gethex+0x2d4>)
 8009dfe:	9002      	str	r0, [sp, #8]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	468b      	mov	fp, r1
 8009e04:	4618      	mov	r0, r3
 8009e06:	4690      	mov	r8, r2
 8009e08:	9303      	str	r3, [sp, #12]
 8009e0a:	f7f6 f9a1 	bl	8000150 <strlen>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	f8db 2000 	ldr.w	r2, [fp]
 8009e16:	4403      	add	r3, r0
 8009e18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e1c:	9306      	str	r3, [sp, #24]
 8009e1e:	1c93      	adds	r3, r2, #2
 8009e20:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e24:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e28:	32fe      	adds	r2, #254	; 0xfe
 8009e2a:	18d1      	adds	r1, r2, r3
 8009e2c:	461f      	mov	r7, r3
 8009e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e32:	9101      	str	r1, [sp, #4]
 8009e34:	2830      	cmp	r0, #48	; 0x30
 8009e36:	d0f8      	beq.n	8009e2a <__gethex+0x36>
 8009e38:	f7ff ffc6 	bl	8009dc8 <__hexdig_fun>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d13a      	bne.n	8009eb8 <__gethex+0xc4>
 8009e42:	4652      	mov	r2, sl
 8009e44:	4638      	mov	r0, r7
 8009e46:	9903      	ldr	r1, [sp, #12]
 8009e48:	f001 fb69 	bl	800b51e <strncmp>
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d166      	bne.n	8009f20 <__gethex+0x12c>
 8009e52:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009e56:	eb07 060a 	add.w	r6, r7, sl
 8009e5a:	f7ff ffb5 	bl	8009dc8 <__hexdig_fun>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d060      	beq.n	8009f24 <__gethex+0x130>
 8009e62:	4633      	mov	r3, r6
 8009e64:	7818      	ldrb	r0, [r3, #0]
 8009e66:	461f      	mov	r7, r3
 8009e68:	2830      	cmp	r0, #48	; 0x30
 8009e6a:	f103 0301 	add.w	r3, r3, #1
 8009e6e:	d0f9      	beq.n	8009e64 <__gethex+0x70>
 8009e70:	f7ff ffaa 	bl	8009dc8 <__hexdig_fun>
 8009e74:	2301      	movs	r3, #1
 8009e76:	fab0 f480 	clz	r4, r0
 8009e7a:	4635      	mov	r5, r6
 8009e7c:	0964      	lsrs	r4, r4, #5
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	463a      	mov	r2, r7
 8009e82:	4616      	mov	r6, r2
 8009e84:	7830      	ldrb	r0, [r6, #0]
 8009e86:	3201      	adds	r2, #1
 8009e88:	f7ff ff9e 	bl	8009dc8 <__hexdig_fun>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d1f8      	bne.n	8009e82 <__gethex+0x8e>
 8009e90:	4652      	mov	r2, sl
 8009e92:	4630      	mov	r0, r6
 8009e94:	9903      	ldr	r1, [sp, #12]
 8009e96:	f001 fb42 	bl	800b51e <strncmp>
 8009e9a:	b980      	cbnz	r0, 8009ebe <__gethex+0xca>
 8009e9c:	b94d      	cbnz	r5, 8009eb2 <__gethex+0xbe>
 8009e9e:	eb06 050a 	add.w	r5, r6, sl
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	7830      	ldrb	r0, [r6, #0]
 8009ea8:	3201      	adds	r2, #1
 8009eaa:	f7ff ff8d 	bl	8009dc8 <__hexdig_fun>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d1f8      	bne.n	8009ea4 <__gethex+0xb0>
 8009eb2:	1bad      	subs	r5, r5, r6
 8009eb4:	00ad      	lsls	r5, r5, #2
 8009eb6:	e004      	b.n	8009ec2 <__gethex+0xce>
 8009eb8:	2400      	movs	r4, #0
 8009eba:	4625      	mov	r5, r4
 8009ebc:	e7e0      	b.n	8009e80 <__gethex+0x8c>
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	d1f7      	bne.n	8009eb2 <__gethex+0xbe>
 8009ec2:	7833      	ldrb	r3, [r6, #0]
 8009ec4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ec8:	2b50      	cmp	r3, #80	; 0x50
 8009eca:	d139      	bne.n	8009f40 <__gethex+0x14c>
 8009ecc:	7873      	ldrb	r3, [r6, #1]
 8009ece:	2b2b      	cmp	r3, #43	; 0x2b
 8009ed0:	d02a      	beq.n	8009f28 <__gethex+0x134>
 8009ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8009ed4:	d02c      	beq.n	8009f30 <__gethex+0x13c>
 8009ed6:	f04f 0900 	mov.w	r9, #0
 8009eda:	1c71      	adds	r1, r6, #1
 8009edc:	7808      	ldrb	r0, [r1, #0]
 8009ede:	f7ff ff73 	bl	8009dc8 <__hexdig_fun>
 8009ee2:	1e43      	subs	r3, r0, #1
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b18      	cmp	r3, #24
 8009ee8:	d82a      	bhi.n	8009f40 <__gethex+0x14c>
 8009eea:	f1a0 0210 	sub.w	r2, r0, #16
 8009eee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ef2:	f7ff ff69 	bl	8009dc8 <__hexdig_fun>
 8009ef6:	1e43      	subs	r3, r0, #1
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b18      	cmp	r3, #24
 8009efc:	d91b      	bls.n	8009f36 <__gethex+0x142>
 8009efe:	f1b9 0f00 	cmp.w	r9, #0
 8009f02:	d000      	beq.n	8009f06 <__gethex+0x112>
 8009f04:	4252      	negs	r2, r2
 8009f06:	4415      	add	r5, r2
 8009f08:	f8cb 1000 	str.w	r1, [fp]
 8009f0c:	b1d4      	cbz	r4, 8009f44 <__gethex+0x150>
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bf14      	ite	ne
 8009f14:	2700      	movne	r7, #0
 8009f16:	2706      	moveq	r7, #6
 8009f18:	4638      	mov	r0, r7
 8009f1a:	b00b      	add	sp, #44	; 0x2c
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	463e      	mov	r6, r7
 8009f22:	4625      	mov	r5, r4
 8009f24:	2401      	movs	r4, #1
 8009f26:	e7cc      	b.n	8009ec2 <__gethex+0xce>
 8009f28:	f04f 0900 	mov.w	r9, #0
 8009f2c:	1cb1      	adds	r1, r6, #2
 8009f2e:	e7d5      	b.n	8009edc <__gethex+0xe8>
 8009f30:	f04f 0901 	mov.w	r9, #1
 8009f34:	e7fa      	b.n	8009f2c <__gethex+0x138>
 8009f36:	230a      	movs	r3, #10
 8009f38:	fb03 0202 	mla	r2, r3, r2, r0
 8009f3c:	3a10      	subs	r2, #16
 8009f3e:	e7d6      	b.n	8009eee <__gethex+0xfa>
 8009f40:	4631      	mov	r1, r6
 8009f42:	e7e1      	b.n	8009f08 <__gethex+0x114>
 8009f44:	4621      	mov	r1, r4
 8009f46:	1bf3      	subs	r3, r6, r7
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	2b07      	cmp	r3, #7
 8009f4c:	dc0a      	bgt.n	8009f64 <__gethex+0x170>
 8009f4e:	9802      	ldr	r0, [sp, #8]
 8009f50:	f000 fae2 	bl	800a518 <_Balloc>
 8009f54:	4604      	mov	r4, r0
 8009f56:	b940      	cbnz	r0, 8009f6a <__gethex+0x176>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	21de      	movs	r1, #222	; 0xde
 8009f5c:	4b5b      	ldr	r3, [pc, #364]	; (800a0cc <__gethex+0x2d8>)
 8009f5e:	485c      	ldr	r0, [pc, #368]	; (800a0d0 <__gethex+0x2dc>)
 8009f60:	f001 fb10 	bl	800b584 <__assert_func>
 8009f64:	3101      	adds	r1, #1
 8009f66:	105b      	asrs	r3, r3, #1
 8009f68:	e7ef      	b.n	8009f4a <__gethex+0x156>
 8009f6a:	f04f 0b00 	mov.w	fp, #0
 8009f6e:	f100 0914 	add.w	r9, r0, #20
 8009f72:	f1ca 0301 	rsb	r3, sl, #1
 8009f76:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f7a:	f8cd b004 	str.w	fp, [sp, #4]
 8009f7e:	9308      	str	r3, [sp, #32]
 8009f80:	42b7      	cmp	r7, r6
 8009f82:	d33f      	bcc.n	800a004 <__gethex+0x210>
 8009f84:	9f04      	ldr	r7, [sp, #16]
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	f847 3b04 	str.w	r3, [r7], #4
 8009f8c:	eba7 0709 	sub.w	r7, r7, r9
 8009f90:	10bf      	asrs	r7, r7, #2
 8009f92:	6127      	str	r7, [r4, #16]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fbb1 	bl	800a6fc <__hi0bits>
 8009f9a:	017f      	lsls	r7, r7, #5
 8009f9c:	f8d8 6000 	ldr.w	r6, [r8]
 8009fa0:	1a3f      	subs	r7, r7, r0
 8009fa2:	42b7      	cmp	r7, r6
 8009fa4:	dd62      	ble.n	800a06c <__gethex+0x278>
 8009fa6:	1bbf      	subs	r7, r7, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 ff4b 	bl	800ae46 <__any_on>
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	b1a8      	cbz	r0, 8009fe0 <__gethex+0x1ec>
 8009fb4:	f04f 0a01 	mov.w	sl, #1
 8009fb8:	1e7b      	subs	r3, r7, #1
 8009fba:	1159      	asrs	r1, r3, #5
 8009fbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009fc0:	f003 021f 	and.w	r2, r3, #31
 8009fc4:	fa0a f202 	lsl.w	r2, sl, r2
 8009fc8:	420a      	tst	r2, r1
 8009fca:	d009      	beq.n	8009fe0 <__gethex+0x1ec>
 8009fcc:	4553      	cmp	r3, sl
 8009fce:	dd05      	ble.n	8009fdc <__gethex+0x1e8>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	1eb9      	subs	r1, r7, #2
 8009fd4:	f000 ff37 	bl	800ae46 <__any_on>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d144      	bne.n	800a066 <__gethex+0x272>
 8009fdc:	f04f 0a02 	mov.w	sl, #2
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff fe9d 	bl	8009d22 <rshift>
 8009fe8:	443d      	add	r5, r7
 8009fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fee:	42ab      	cmp	r3, r5
 8009ff0:	da4a      	bge.n	800a088 <__gethex+0x294>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	9802      	ldr	r0, [sp, #8]
 8009ff6:	f000 facf 	bl	800a598 <_Bfree>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ffe:	27a3      	movs	r7, #163	; 0xa3
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	e789      	b.n	8009f18 <__gethex+0x124>
 800a004:	1e73      	subs	r3, r6, #1
 800a006:	9a06      	ldr	r2, [sp, #24]
 800a008:	9307      	str	r3, [sp, #28]
 800a00a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a00e:	4293      	cmp	r3, r2
 800a010:	d019      	beq.n	800a046 <__gethex+0x252>
 800a012:	f1bb 0f20 	cmp.w	fp, #32
 800a016:	d107      	bne.n	800a028 <__gethex+0x234>
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	9a01      	ldr	r2, [sp, #4]
 800a01c:	f843 2b04 	str.w	r2, [r3], #4
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	2300      	movs	r3, #0
 800a024:	469b      	mov	fp, r3
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a02c:	f7ff fecc 	bl	8009dc8 <__hexdig_fun>
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	f000 000f 	and.w	r0, r0, #15
 800a036:	fa00 f00b 	lsl.w	r0, r0, fp
 800a03a:	4303      	orrs	r3, r0
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	f10b 0b04 	add.w	fp, fp, #4
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	e00d      	b.n	800a062 <__gethex+0x26e>
 800a046:	9a08      	ldr	r2, [sp, #32]
 800a048:	1e73      	subs	r3, r6, #1
 800a04a:	4413      	add	r3, r2
 800a04c:	42bb      	cmp	r3, r7
 800a04e:	d3e0      	bcc.n	800a012 <__gethex+0x21e>
 800a050:	4618      	mov	r0, r3
 800a052:	4652      	mov	r2, sl
 800a054:	9903      	ldr	r1, [sp, #12]
 800a056:	9309      	str	r3, [sp, #36]	; 0x24
 800a058:	f001 fa61 	bl	800b51e <strncmp>
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	2800      	cmp	r0, #0
 800a060:	d1d7      	bne.n	800a012 <__gethex+0x21e>
 800a062:	461e      	mov	r6, r3
 800a064:	e78c      	b.n	8009f80 <__gethex+0x18c>
 800a066:	f04f 0a03 	mov.w	sl, #3
 800a06a:	e7b9      	b.n	8009fe0 <__gethex+0x1ec>
 800a06c:	da09      	bge.n	800a082 <__gethex+0x28e>
 800a06e:	1bf7      	subs	r7, r6, r7
 800a070:	4621      	mov	r1, r4
 800a072:	463a      	mov	r2, r7
 800a074:	9802      	ldr	r0, [sp, #8]
 800a076:	f000 fca7 	bl	800a9c8 <__lshift>
 800a07a:	4604      	mov	r4, r0
 800a07c:	1bed      	subs	r5, r5, r7
 800a07e:	f100 0914 	add.w	r9, r0, #20
 800a082:	f04f 0a00 	mov.w	sl, #0
 800a086:	e7b0      	b.n	8009fea <__gethex+0x1f6>
 800a088:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a08c:	42a8      	cmp	r0, r5
 800a08e:	dd72      	ble.n	800a176 <__gethex+0x382>
 800a090:	1b45      	subs	r5, r0, r5
 800a092:	42ae      	cmp	r6, r5
 800a094:	dc35      	bgt.n	800a102 <__gethex+0x30e>
 800a096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d029      	beq.n	800a0f2 <__gethex+0x2fe>
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d02b      	beq.n	800a0fa <__gethex+0x306>
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d11c      	bne.n	800a0e0 <__gethex+0x2ec>
 800a0a6:	42ae      	cmp	r6, r5
 800a0a8:	d11a      	bne.n	800a0e0 <__gethex+0x2ec>
 800a0aa:	2e01      	cmp	r6, #1
 800a0ac:	d112      	bne.n	800a0d4 <__gethex+0x2e0>
 800a0ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a0b2:	9a05      	ldr	r2, [sp, #20]
 800a0b4:	2762      	movs	r7, #98	; 0x62
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	f8c9 3000 	str.w	r3, [r9]
 800a0c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0c2:	601c      	str	r4, [r3, #0]
 800a0c4:	e728      	b.n	8009f18 <__gethex+0x124>
 800a0c6:	bf00      	nop
 800a0c8:	0800b9cc 	.word	0x0800b9cc
 800a0cc:	0800b954 	.word	0x0800b954
 800a0d0:	0800b965 	.word	0x0800b965
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	1e71      	subs	r1, r6, #1
 800a0d8:	f000 feb5 	bl	800ae46 <__any_on>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d1e6      	bne.n	800a0ae <__gethex+0x2ba>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	9802      	ldr	r0, [sp, #8]
 800a0e4:	f000 fa58 	bl	800a598 <_Bfree>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0ec:	2750      	movs	r7, #80	; 0x50
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e712      	b.n	8009f18 <__gethex+0x124>
 800a0f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f3      	bne.n	800a0e0 <__gethex+0x2ec>
 800a0f8:	e7d9      	b.n	800a0ae <__gethex+0x2ba>
 800a0fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1d6      	bne.n	800a0ae <__gethex+0x2ba>
 800a100:	e7ee      	b.n	800a0e0 <__gethex+0x2ec>
 800a102:	1e6f      	subs	r7, r5, #1
 800a104:	f1ba 0f00 	cmp.w	sl, #0
 800a108:	d132      	bne.n	800a170 <__gethex+0x37c>
 800a10a:	b127      	cbz	r7, 800a116 <__gethex+0x322>
 800a10c:	4639      	mov	r1, r7
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fe99 	bl	800ae46 <__any_on>
 800a114:	4682      	mov	sl, r0
 800a116:	2101      	movs	r1, #1
 800a118:	117b      	asrs	r3, r7, #5
 800a11a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a11e:	f007 071f 	and.w	r7, r7, #31
 800a122:	fa01 f707 	lsl.w	r7, r1, r7
 800a126:	421f      	tst	r7, r3
 800a128:	f04f 0702 	mov.w	r7, #2
 800a12c:	4629      	mov	r1, r5
 800a12e:	4620      	mov	r0, r4
 800a130:	bf18      	it	ne
 800a132:	f04a 0a02 	orrne.w	sl, sl, #2
 800a136:	1b76      	subs	r6, r6, r5
 800a138:	f7ff fdf3 	bl	8009d22 <rshift>
 800a13c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	d048      	beq.n	800a1d8 <__gethex+0x3e4>
 800a146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d015      	beq.n	800a17a <__gethex+0x386>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d017      	beq.n	800a182 <__gethex+0x38e>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d109      	bne.n	800a16a <__gethex+0x376>
 800a156:	f01a 0f02 	tst.w	sl, #2
 800a15a:	d006      	beq.n	800a16a <__gethex+0x376>
 800a15c:	f8d9 0000 	ldr.w	r0, [r9]
 800a160:	ea4a 0a00 	orr.w	sl, sl, r0
 800a164:	f01a 0f01 	tst.w	sl, #1
 800a168:	d10e      	bne.n	800a188 <__gethex+0x394>
 800a16a:	f047 0710 	orr.w	r7, r7, #16
 800a16e:	e033      	b.n	800a1d8 <__gethex+0x3e4>
 800a170:	f04f 0a01 	mov.w	sl, #1
 800a174:	e7cf      	b.n	800a116 <__gethex+0x322>
 800a176:	2701      	movs	r7, #1
 800a178:	e7e2      	b.n	800a140 <__gethex+0x34c>
 800a17a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a17c:	f1c3 0301 	rsb	r3, r3, #1
 800a180:	9315      	str	r3, [sp, #84]	; 0x54
 800a182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0f0      	beq.n	800a16a <__gethex+0x376>
 800a188:	f04f 0c00 	mov.w	ip, #0
 800a18c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a190:	f104 0314 	add.w	r3, r4, #20
 800a194:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a198:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a1a6:	d01c      	beq.n	800a1e2 <__gethex+0x3ee>
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	6002      	str	r2, [r0, #0]
 800a1ac:	2f02      	cmp	r7, #2
 800a1ae:	f104 0314 	add.w	r3, r4, #20
 800a1b2:	d13d      	bne.n	800a230 <__gethex+0x43c>
 800a1b4:	f8d8 2000 	ldr.w	r2, [r8]
 800a1b8:	3a01      	subs	r2, #1
 800a1ba:	42b2      	cmp	r2, r6
 800a1bc:	d10a      	bne.n	800a1d4 <__gethex+0x3e0>
 800a1be:	2201      	movs	r2, #1
 800a1c0:	1171      	asrs	r1, r6, #5
 800a1c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a1c6:	f006 061f 	and.w	r6, r6, #31
 800a1ca:	fa02 f606 	lsl.w	r6, r2, r6
 800a1ce:	421e      	tst	r6, r3
 800a1d0:	bf18      	it	ne
 800a1d2:	4617      	movne	r7, r2
 800a1d4:	f047 0720 	orr.w	r7, r7, #32
 800a1d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1da:	601c      	str	r4, [r3, #0]
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	601d      	str	r5, [r3, #0]
 800a1e0:	e69a      	b.n	8009f18 <__gethex+0x124>
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a1e8:	d8d8      	bhi.n	800a19c <__gethex+0x3a8>
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	459b      	cmp	fp, r3
 800a1ee:	db17      	blt.n	800a220 <__gethex+0x42c>
 800a1f0:	6861      	ldr	r1, [r4, #4]
 800a1f2:	9802      	ldr	r0, [sp, #8]
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	f000 f98f 	bl	800a518 <_Balloc>
 800a1fa:	4681      	mov	r9, r0
 800a1fc:	b918      	cbnz	r0, 800a206 <__gethex+0x412>
 800a1fe:	4602      	mov	r2, r0
 800a200:	2184      	movs	r1, #132	; 0x84
 800a202:	4b19      	ldr	r3, [pc, #100]	; (800a268 <__gethex+0x474>)
 800a204:	e6ab      	b.n	8009f5e <__gethex+0x16a>
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	f104 010c 	add.w	r1, r4, #12
 800a20c:	3202      	adds	r2, #2
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	300c      	adds	r0, #12
 800a212:	f000 f967 	bl	800a4e4 <memcpy>
 800a216:	4621      	mov	r1, r4
 800a218:	9802      	ldr	r0, [sp, #8]
 800a21a:	f000 f9bd 	bl	800a598 <_Bfree>
 800a21e:	464c      	mov	r4, r9
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	1c5a      	adds	r2, r3, #1
 800a224:	6122      	str	r2, [r4, #16]
 800a226:	2201      	movs	r2, #1
 800a228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a22c:	615a      	str	r2, [r3, #20]
 800a22e:	e7bd      	b.n	800a1ac <__gethex+0x3b8>
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	455a      	cmp	r2, fp
 800a234:	dd0b      	ble.n	800a24e <__gethex+0x45a>
 800a236:	2101      	movs	r1, #1
 800a238:	4620      	mov	r0, r4
 800a23a:	f7ff fd72 	bl	8009d22 <rshift>
 800a23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a242:	3501      	adds	r5, #1
 800a244:	42ab      	cmp	r3, r5
 800a246:	f6ff aed4 	blt.w	8009ff2 <__gethex+0x1fe>
 800a24a:	2701      	movs	r7, #1
 800a24c:	e7c2      	b.n	800a1d4 <__gethex+0x3e0>
 800a24e:	f016 061f 	ands.w	r6, r6, #31
 800a252:	d0fa      	beq.n	800a24a <__gethex+0x456>
 800a254:	4453      	add	r3, sl
 800a256:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a25a:	f000 fa4f 	bl	800a6fc <__hi0bits>
 800a25e:	f1c6 0620 	rsb	r6, r6, #32
 800a262:	42b0      	cmp	r0, r6
 800a264:	dbe7      	blt.n	800a236 <__gethex+0x442>
 800a266:	e7f0      	b.n	800a24a <__gethex+0x456>
 800a268:	0800b954 	.word	0x0800b954

0800a26c <L_shift>:
 800a26c:	f1c2 0208 	rsb	r2, r2, #8
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	b570      	push	{r4, r5, r6, lr}
 800a274:	f1c2 0620 	rsb	r6, r2, #32
 800a278:	6843      	ldr	r3, [r0, #4]
 800a27a:	6804      	ldr	r4, [r0, #0]
 800a27c:	fa03 f506 	lsl.w	r5, r3, r6
 800a280:	432c      	orrs	r4, r5
 800a282:	40d3      	lsrs	r3, r2
 800a284:	6004      	str	r4, [r0, #0]
 800a286:	f840 3f04 	str.w	r3, [r0, #4]!
 800a28a:	4288      	cmp	r0, r1
 800a28c:	d3f4      	bcc.n	800a278 <L_shift+0xc>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}

0800a290 <__match>:
 800a290:	b530      	push	{r4, r5, lr}
 800a292:	6803      	ldr	r3, [r0, #0]
 800a294:	3301      	adds	r3, #1
 800a296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a29a:	b914      	cbnz	r4, 800a2a2 <__match+0x12>
 800a29c:	6003      	str	r3, [r0, #0]
 800a29e:	2001      	movs	r0, #1
 800a2a0:	bd30      	pop	{r4, r5, pc}
 800a2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a2aa:	2d19      	cmp	r5, #25
 800a2ac:	bf98      	it	ls
 800a2ae:	3220      	addls	r2, #32
 800a2b0:	42a2      	cmp	r2, r4
 800a2b2:	d0f0      	beq.n	800a296 <__match+0x6>
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	e7f3      	b.n	800a2a0 <__match+0x10>

0800a2b8 <__hexnan>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	2500      	movs	r5, #0
 800a2be:	680b      	ldr	r3, [r1, #0]
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	115e      	asrs	r6, r3, #5
 800a2c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a2c8:	f013 031f 	ands.w	r3, r3, #31
 800a2cc:	bf18      	it	ne
 800a2ce:	3604      	addne	r6, #4
 800a2d0:	1f37      	subs	r7, r6, #4
 800a2d2:	46b9      	mov	r9, r7
 800a2d4:	463c      	mov	r4, r7
 800a2d6:	46ab      	mov	fp, r5
 800a2d8:	b087      	sub	sp, #28
 800a2da:	4690      	mov	r8, r2
 800a2dc:	6802      	ldr	r2, [r0, #0]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800a2e4:	9502      	str	r5, [sp, #8]
 800a2e6:	7851      	ldrb	r1, [r2, #1]
 800a2e8:	1c53      	adds	r3, r2, #1
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	b341      	cbz	r1, 800a340 <__hexnan+0x88>
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	9205      	str	r2, [sp, #20]
 800a2f2:	9104      	str	r1, [sp, #16]
 800a2f4:	f7ff fd68 	bl	8009dc8 <__hexdig_fun>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d14f      	bne.n	800a39c <__hexnan+0xe4>
 800a2fc:	9904      	ldr	r1, [sp, #16]
 800a2fe:	9a05      	ldr	r2, [sp, #20]
 800a300:	2920      	cmp	r1, #32
 800a302:	d818      	bhi.n	800a336 <__hexnan+0x7e>
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	459b      	cmp	fp, r3
 800a308:	dd13      	ble.n	800a332 <__hexnan+0x7a>
 800a30a:	454c      	cmp	r4, r9
 800a30c:	d206      	bcs.n	800a31c <__hexnan+0x64>
 800a30e:	2d07      	cmp	r5, #7
 800a310:	dc04      	bgt.n	800a31c <__hexnan+0x64>
 800a312:	462a      	mov	r2, r5
 800a314:	4649      	mov	r1, r9
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff ffa8 	bl	800a26c <L_shift>
 800a31c:	4544      	cmp	r4, r8
 800a31e:	d950      	bls.n	800a3c2 <__hexnan+0x10a>
 800a320:	2300      	movs	r3, #0
 800a322:	f1a4 0904 	sub.w	r9, r4, #4
 800a326:	f844 3c04 	str.w	r3, [r4, #-4]
 800a32a:	461d      	mov	r5, r3
 800a32c:	464c      	mov	r4, r9
 800a32e:	f8cd b008 	str.w	fp, [sp, #8]
 800a332:	9a03      	ldr	r2, [sp, #12]
 800a334:	e7d7      	b.n	800a2e6 <__hexnan+0x2e>
 800a336:	2929      	cmp	r1, #41	; 0x29
 800a338:	d156      	bne.n	800a3e8 <__hexnan+0x130>
 800a33a:	3202      	adds	r2, #2
 800a33c:	f8ca 2000 	str.w	r2, [sl]
 800a340:	f1bb 0f00 	cmp.w	fp, #0
 800a344:	d050      	beq.n	800a3e8 <__hexnan+0x130>
 800a346:	454c      	cmp	r4, r9
 800a348:	d206      	bcs.n	800a358 <__hexnan+0xa0>
 800a34a:	2d07      	cmp	r5, #7
 800a34c:	dc04      	bgt.n	800a358 <__hexnan+0xa0>
 800a34e:	462a      	mov	r2, r5
 800a350:	4649      	mov	r1, r9
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff ff8a 	bl	800a26c <L_shift>
 800a358:	4544      	cmp	r4, r8
 800a35a:	d934      	bls.n	800a3c6 <__hexnan+0x10e>
 800a35c:	4623      	mov	r3, r4
 800a35e:	f1a8 0204 	sub.w	r2, r8, #4
 800a362:	f853 1b04 	ldr.w	r1, [r3], #4
 800a366:	429f      	cmp	r7, r3
 800a368:	f842 1f04 	str.w	r1, [r2, #4]!
 800a36c:	d2f9      	bcs.n	800a362 <__hexnan+0xaa>
 800a36e:	1b3b      	subs	r3, r7, r4
 800a370:	f023 0303 	bic.w	r3, r3, #3
 800a374:	3304      	adds	r3, #4
 800a376:	3401      	adds	r4, #1
 800a378:	3e03      	subs	r6, #3
 800a37a:	42b4      	cmp	r4, r6
 800a37c:	bf88      	it	hi
 800a37e:	2304      	movhi	r3, #4
 800a380:	2200      	movs	r2, #0
 800a382:	4443      	add	r3, r8
 800a384:	f843 2b04 	str.w	r2, [r3], #4
 800a388:	429f      	cmp	r7, r3
 800a38a:	d2fb      	bcs.n	800a384 <__hexnan+0xcc>
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	b91b      	cbnz	r3, 800a398 <__hexnan+0xe0>
 800a390:	4547      	cmp	r7, r8
 800a392:	d127      	bne.n	800a3e4 <__hexnan+0x12c>
 800a394:	2301      	movs	r3, #1
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	2005      	movs	r0, #5
 800a39a:	e026      	b.n	800a3ea <__hexnan+0x132>
 800a39c:	3501      	adds	r5, #1
 800a39e:	2d08      	cmp	r5, #8
 800a3a0:	f10b 0b01 	add.w	fp, fp, #1
 800a3a4:	dd06      	ble.n	800a3b4 <__hexnan+0xfc>
 800a3a6:	4544      	cmp	r4, r8
 800a3a8:	d9c3      	bls.n	800a332 <__hexnan+0x7a>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2501      	movs	r5, #1
 800a3ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3b2:	3c04      	subs	r4, #4
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	f000 000f 	and.w	r0, r0, #15
 800a3ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a3be:	6022      	str	r2, [r4, #0]
 800a3c0:	e7b7      	b.n	800a332 <__hexnan+0x7a>
 800a3c2:	2508      	movs	r5, #8
 800a3c4:	e7b5      	b.n	800a332 <__hexnan+0x7a>
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0df      	beq.n	800a38c <__hexnan+0xd4>
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	f1c3 0320 	rsb	r3, r3, #32
 800a3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3dc:	401a      	ands	r2, r3
 800a3de:	f846 2c04 	str.w	r2, [r6, #-4]
 800a3e2:	e7d3      	b.n	800a38c <__hexnan+0xd4>
 800a3e4:	3f04      	subs	r7, #4
 800a3e6:	e7d1      	b.n	800a38c <__hexnan+0xd4>
 800a3e8:	2004      	movs	r0, #4
 800a3ea:	b007      	add	sp, #28
 800a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3f0 <__retarget_lock_init_recursive>:
 800a3f0:	4770      	bx	lr

0800a3f2 <__retarget_lock_acquire_recursive>:
 800a3f2:	4770      	bx	lr

0800a3f4 <__retarget_lock_release_recursive>:
 800a3f4:	4770      	bx	lr

0800a3f6 <__swhatbuf_r>:
 800a3f6:	b570      	push	{r4, r5, r6, lr}
 800a3f8:	460e      	mov	r6, r1
 800a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fe:	4614      	mov	r4, r2
 800a400:	2900      	cmp	r1, #0
 800a402:	461d      	mov	r5, r3
 800a404:	b096      	sub	sp, #88	; 0x58
 800a406:	da08      	bge.n	800a41a <__swhatbuf_r+0x24>
 800a408:	2200      	movs	r2, #0
 800a40a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a40e:	602a      	str	r2, [r5, #0]
 800a410:	061a      	lsls	r2, r3, #24
 800a412:	d410      	bmi.n	800a436 <__swhatbuf_r+0x40>
 800a414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a418:	e00e      	b.n	800a438 <__swhatbuf_r+0x42>
 800a41a:	466a      	mov	r2, sp
 800a41c:	f001 f8f2 	bl	800b604 <_fstat_r>
 800a420:	2800      	cmp	r0, #0
 800a422:	dbf1      	blt.n	800a408 <__swhatbuf_r+0x12>
 800a424:	9a01      	ldr	r2, [sp, #4]
 800a426:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a42a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a42e:	425a      	negs	r2, r3
 800a430:	415a      	adcs	r2, r3
 800a432:	602a      	str	r2, [r5, #0]
 800a434:	e7ee      	b.n	800a414 <__swhatbuf_r+0x1e>
 800a436:	2340      	movs	r3, #64	; 0x40
 800a438:	2000      	movs	r0, #0
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	b016      	add	sp, #88	; 0x58
 800a43e:	bd70      	pop	{r4, r5, r6, pc}

0800a440 <__smakebuf_r>:
 800a440:	898b      	ldrh	r3, [r1, #12]
 800a442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a444:	079d      	lsls	r5, r3, #30
 800a446:	4606      	mov	r6, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	d507      	bpl.n	800a45c <__smakebuf_r+0x1c>
 800a44c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	6123      	str	r3, [r4, #16]
 800a454:	2301      	movs	r3, #1
 800a456:	6163      	str	r3, [r4, #20]
 800a458:	b002      	add	sp, #8
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	466a      	mov	r2, sp
 800a45e:	ab01      	add	r3, sp, #4
 800a460:	f7ff ffc9 	bl	800a3f6 <__swhatbuf_r>
 800a464:	9900      	ldr	r1, [sp, #0]
 800a466:	4605      	mov	r5, r0
 800a468:	4630      	mov	r0, r6
 800a46a:	f7fe fac7 	bl	80089fc <_malloc_r>
 800a46e:	b948      	cbnz	r0, 800a484 <__smakebuf_r+0x44>
 800a470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a474:	059a      	lsls	r2, r3, #22
 800a476:	d4ef      	bmi.n	800a458 <__smakebuf_r+0x18>
 800a478:	f023 0303 	bic.w	r3, r3, #3
 800a47c:	f043 0302 	orr.w	r3, r3, #2
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	e7e3      	b.n	800a44c <__smakebuf_r+0xc>
 800a484:	4b0d      	ldr	r3, [pc, #52]	; (800a4bc <__smakebuf_r+0x7c>)
 800a486:	62b3      	str	r3, [r6, #40]	; 0x28
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	6120      	str	r0, [r4, #16]
 800a496:	6163      	str	r3, [r4, #20]
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	b15b      	cbz	r3, 800a4b4 <__smakebuf_r+0x74>
 800a49c:	4630      	mov	r0, r6
 800a49e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4a2:	f001 f8c1 	bl	800b628 <_isatty_r>
 800a4a6:	b128      	cbz	r0, 800a4b4 <__smakebuf_r+0x74>
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f023 0303 	bic.w	r3, r3, #3
 800a4ae:	f043 0301 	orr.w	r3, r3, #1
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	89a0      	ldrh	r0, [r4, #12]
 800a4b6:	4305      	orrs	r5, r0
 800a4b8:	81a5      	strh	r5, [r4, #12]
 800a4ba:	e7cd      	b.n	800a458 <__smakebuf_r+0x18>
 800a4bc:	08009b81 	.word	0x08009b81

0800a4c0 <__ascii_mbtowc>:
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	b901      	cbnz	r1, 800a4c6 <__ascii_mbtowc+0x6>
 800a4c4:	a901      	add	r1, sp, #4
 800a4c6:	b142      	cbz	r2, 800a4da <__ascii_mbtowc+0x1a>
 800a4c8:	b14b      	cbz	r3, 800a4de <__ascii_mbtowc+0x1e>
 800a4ca:	7813      	ldrb	r3, [r2, #0]
 800a4cc:	600b      	str	r3, [r1, #0]
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	1e10      	subs	r0, r2, #0
 800a4d2:	bf18      	it	ne
 800a4d4:	2001      	movne	r0, #1
 800a4d6:	b002      	add	sp, #8
 800a4d8:	4770      	bx	lr
 800a4da:	4610      	mov	r0, r2
 800a4dc:	e7fb      	b.n	800a4d6 <__ascii_mbtowc+0x16>
 800a4de:	f06f 0001 	mvn.w	r0, #1
 800a4e2:	e7f8      	b.n	800a4d6 <__ascii_mbtowc+0x16>

0800a4e4 <memcpy>:
 800a4e4:	440a      	add	r2, r1
 800a4e6:	4291      	cmp	r1, r2
 800a4e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ec:	d100      	bne.n	800a4f0 <memcpy+0xc>
 800a4ee:	4770      	bx	lr
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f6:	4291      	cmp	r1, r2
 800a4f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4fc:	d1f9      	bne.n	800a4f2 <memcpy+0xe>
 800a4fe:	bd10      	pop	{r4, pc}

0800a500 <__malloc_lock>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__malloc_lock+0x8>)
 800a502:	f7ff bf76 	b.w	800a3f2 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	20000b24 	.word	0x20000b24

0800a50c <__malloc_unlock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__malloc_unlock+0x8>)
 800a50e:	f7ff bf71 	b.w	800a3f4 <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	20000b24 	.word	0x20000b24

0800a518 <_Balloc>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a51c:	4604      	mov	r4, r0
 800a51e:	460d      	mov	r5, r1
 800a520:	b976      	cbnz	r6, 800a540 <_Balloc+0x28>
 800a522:	2010      	movs	r0, #16
 800a524:	f7fe f9f2 	bl	800890c <malloc>
 800a528:	4602      	mov	r2, r0
 800a52a:	6260      	str	r0, [r4, #36]	; 0x24
 800a52c:	b920      	cbnz	r0, 800a538 <_Balloc+0x20>
 800a52e:	2166      	movs	r1, #102	; 0x66
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <_Balloc+0x78>)
 800a532:	4818      	ldr	r0, [pc, #96]	; (800a594 <_Balloc+0x7c>)
 800a534:	f001 f826 	bl	800b584 <__assert_func>
 800a538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a53c:	6006      	str	r6, [r0, #0]
 800a53e:	60c6      	str	r6, [r0, #12]
 800a540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a542:	68f3      	ldr	r3, [r6, #12]
 800a544:	b183      	cbz	r3, 800a568 <_Balloc+0x50>
 800a546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a54e:	b9b8      	cbnz	r0, 800a580 <_Balloc+0x68>
 800a550:	2101      	movs	r1, #1
 800a552:	fa01 f605 	lsl.w	r6, r1, r5
 800a556:	1d72      	adds	r2, r6, #5
 800a558:	4620      	mov	r0, r4
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	f000 fc94 	bl	800ae88 <_calloc_r>
 800a560:	b160      	cbz	r0, 800a57c <_Balloc+0x64>
 800a562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a566:	e00e      	b.n	800a586 <_Balloc+0x6e>
 800a568:	2221      	movs	r2, #33	; 0x21
 800a56a:	2104      	movs	r1, #4
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fc8b 	bl	800ae88 <_calloc_r>
 800a572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a574:	60f0      	str	r0, [r6, #12]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e4      	bne.n	800a546 <_Balloc+0x2e>
 800a57c:	2000      	movs	r0, #0
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	6802      	ldr	r2, [r0, #0]
 800a582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a586:	2300      	movs	r3, #0
 800a588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a58c:	e7f7      	b.n	800a57e <_Balloc+0x66>
 800a58e:	bf00      	nop
 800a590:	0800b9e0 	.word	0x0800b9e0
 800a594:	0800b9f7 	.word	0x0800b9f7

0800a598 <_Bfree>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b976      	cbnz	r6, 800a5c0 <_Bfree+0x28>
 800a5a2:	2010      	movs	r0, #16
 800a5a4:	f7fe f9b2 	bl	800890c <malloc>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	6268      	str	r0, [r5, #36]	; 0x24
 800a5ac:	b920      	cbnz	r0, 800a5b8 <_Bfree+0x20>
 800a5ae:	218a      	movs	r1, #138	; 0x8a
 800a5b0:	4b08      	ldr	r3, [pc, #32]	; (800a5d4 <_Bfree+0x3c>)
 800a5b2:	4809      	ldr	r0, [pc, #36]	; (800a5d8 <_Bfree+0x40>)
 800a5b4:	f000 ffe6 	bl	800b584 <__assert_func>
 800a5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5bc:	6006      	str	r6, [r0, #0]
 800a5be:	60c6      	str	r6, [r0, #12]
 800a5c0:	b13c      	cbz	r4, 800a5d2 <_Bfree+0x3a>
 800a5c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5c4:	6862      	ldr	r2, [r4, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5cc:	6021      	str	r1, [r4, #0]
 800a5ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	0800b9e0 	.word	0x0800b9e0
 800a5d8:	0800b9f7 	.word	0x0800b9f7

0800a5dc <__multadd>:
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	461e      	mov	r6, r3
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	690d      	ldr	r5, [r1, #16]
 800a5ea:	f101 0c14 	add.w	ip, r1, #20
 800a5ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	b299      	uxth	r1, r3
 800a5f6:	fb02 6101 	mla	r1, r2, r1, r6
 800a5fa:	0c1e      	lsrs	r6, r3, #16
 800a5fc:	0c0b      	lsrs	r3, r1, #16
 800a5fe:	fb02 3306 	mla	r3, r2, r6, r3
 800a602:	b289      	uxth	r1, r1
 800a604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a608:	4285      	cmp	r5, r0
 800a60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a60e:	f84c 1b04 	str.w	r1, [ip], #4
 800a612:	dcec      	bgt.n	800a5ee <__multadd+0x12>
 800a614:	b30e      	cbz	r6, 800a65a <__multadd+0x7e>
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	42ab      	cmp	r3, r5
 800a61a:	dc19      	bgt.n	800a650 <__multadd+0x74>
 800a61c:	6861      	ldr	r1, [r4, #4]
 800a61e:	4638      	mov	r0, r7
 800a620:	3101      	adds	r1, #1
 800a622:	f7ff ff79 	bl	800a518 <_Balloc>
 800a626:	4680      	mov	r8, r0
 800a628:	b928      	cbnz	r0, 800a636 <__multadd+0x5a>
 800a62a:	4602      	mov	r2, r0
 800a62c:	21b5      	movs	r1, #181	; 0xb5
 800a62e:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <__multadd+0x84>)
 800a630:	480c      	ldr	r0, [pc, #48]	; (800a664 <__multadd+0x88>)
 800a632:	f000 ffa7 	bl	800b584 <__assert_func>
 800a636:	6922      	ldr	r2, [r4, #16]
 800a638:	f104 010c 	add.w	r1, r4, #12
 800a63c:	3202      	adds	r2, #2
 800a63e:	0092      	lsls	r2, r2, #2
 800a640:	300c      	adds	r0, #12
 800a642:	f7ff ff4f 	bl	800a4e4 <memcpy>
 800a646:	4621      	mov	r1, r4
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ffa5 	bl	800a598 <_Bfree>
 800a64e:	4644      	mov	r4, r8
 800a650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a654:	3501      	adds	r5, #1
 800a656:	615e      	str	r6, [r3, #20]
 800a658:	6125      	str	r5, [r4, #16]
 800a65a:	4620      	mov	r0, r4
 800a65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a660:	0800b954 	.word	0x0800b954
 800a664:	0800b9f7 	.word	0x0800b9f7

0800a668 <__s2b>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	4615      	mov	r5, r2
 800a66e:	2209      	movs	r2, #9
 800a670:	461f      	mov	r7, r3
 800a672:	3308      	adds	r3, #8
 800a674:	460c      	mov	r4, r1
 800a676:	fb93 f3f2 	sdiv	r3, r3, r2
 800a67a:	4606      	mov	r6, r0
 800a67c:	2201      	movs	r2, #1
 800a67e:	2100      	movs	r1, #0
 800a680:	429a      	cmp	r2, r3
 800a682:	db09      	blt.n	800a698 <__s2b+0x30>
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff ff47 	bl	800a518 <_Balloc>
 800a68a:	b940      	cbnz	r0, 800a69e <__s2b+0x36>
 800a68c:	4602      	mov	r2, r0
 800a68e:	21ce      	movs	r1, #206	; 0xce
 800a690:	4b18      	ldr	r3, [pc, #96]	; (800a6f4 <__s2b+0x8c>)
 800a692:	4819      	ldr	r0, [pc, #100]	; (800a6f8 <__s2b+0x90>)
 800a694:	f000 ff76 	bl	800b584 <__assert_func>
 800a698:	0052      	lsls	r2, r2, #1
 800a69a:	3101      	adds	r1, #1
 800a69c:	e7f0      	b.n	800a680 <__s2b+0x18>
 800a69e:	9b08      	ldr	r3, [sp, #32]
 800a6a0:	2d09      	cmp	r5, #9
 800a6a2:	6143      	str	r3, [r0, #20]
 800a6a4:	f04f 0301 	mov.w	r3, #1
 800a6a8:	6103      	str	r3, [r0, #16]
 800a6aa:	dd16      	ble.n	800a6da <__s2b+0x72>
 800a6ac:	f104 0909 	add.w	r9, r4, #9
 800a6b0:	46c8      	mov	r8, r9
 800a6b2:	442c      	add	r4, r5
 800a6b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	4630      	mov	r0, r6
 800a6be:	3b30      	subs	r3, #48	; 0x30
 800a6c0:	f7ff ff8c 	bl	800a5dc <__multadd>
 800a6c4:	45a0      	cmp	r8, r4
 800a6c6:	d1f5      	bne.n	800a6b4 <__s2b+0x4c>
 800a6c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a6cc:	444c      	add	r4, r9
 800a6ce:	1b2d      	subs	r5, r5, r4
 800a6d0:	1963      	adds	r3, r4, r5
 800a6d2:	42bb      	cmp	r3, r7
 800a6d4:	db04      	blt.n	800a6e0 <__s2b+0x78>
 800a6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6da:	2509      	movs	r5, #9
 800a6dc:	340a      	adds	r4, #10
 800a6de:	e7f6      	b.n	800a6ce <__s2b+0x66>
 800a6e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6e4:	4601      	mov	r1, r0
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	3b30      	subs	r3, #48	; 0x30
 800a6ec:	f7ff ff76 	bl	800a5dc <__multadd>
 800a6f0:	e7ee      	b.n	800a6d0 <__s2b+0x68>
 800a6f2:	bf00      	nop
 800a6f4:	0800b954 	.word	0x0800b954
 800a6f8:	0800b9f7 	.word	0x0800b9f7

0800a6fc <__hi0bits>:
 800a6fc:	0c02      	lsrs	r2, r0, #16
 800a6fe:	0412      	lsls	r2, r2, #16
 800a700:	4603      	mov	r3, r0
 800a702:	b9ca      	cbnz	r2, 800a738 <__hi0bits+0x3c>
 800a704:	0403      	lsls	r3, r0, #16
 800a706:	2010      	movs	r0, #16
 800a708:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a70c:	bf04      	itt	eq
 800a70e:	021b      	lsleq	r3, r3, #8
 800a710:	3008      	addeq	r0, #8
 800a712:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a716:	bf04      	itt	eq
 800a718:	011b      	lsleq	r3, r3, #4
 800a71a:	3004      	addeq	r0, #4
 800a71c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a720:	bf04      	itt	eq
 800a722:	009b      	lsleq	r3, r3, #2
 800a724:	3002      	addeq	r0, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	db05      	blt.n	800a736 <__hi0bits+0x3a>
 800a72a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a72e:	f100 0001 	add.w	r0, r0, #1
 800a732:	bf08      	it	eq
 800a734:	2020      	moveq	r0, #32
 800a736:	4770      	bx	lr
 800a738:	2000      	movs	r0, #0
 800a73a:	e7e5      	b.n	800a708 <__hi0bits+0xc>

0800a73c <__lo0bits>:
 800a73c:	6803      	ldr	r3, [r0, #0]
 800a73e:	4602      	mov	r2, r0
 800a740:	f013 0007 	ands.w	r0, r3, #7
 800a744:	d00b      	beq.n	800a75e <__lo0bits+0x22>
 800a746:	07d9      	lsls	r1, r3, #31
 800a748:	d421      	bmi.n	800a78e <__lo0bits+0x52>
 800a74a:	0798      	lsls	r0, r3, #30
 800a74c:	bf49      	itett	mi
 800a74e:	085b      	lsrmi	r3, r3, #1
 800a750:	089b      	lsrpl	r3, r3, #2
 800a752:	2001      	movmi	r0, #1
 800a754:	6013      	strmi	r3, [r2, #0]
 800a756:	bf5c      	itt	pl
 800a758:	2002      	movpl	r0, #2
 800a75a:	6013      	strpl	r3, [r2, #0]
 800a75c:	4770      	bx	lr
 800a75e:	b299      	uxth	r1, r3
 800a760:	b909      	cbnz	r1, 800a766 <__lo0bits+0x2a>
 800a762:	2010      	movs	r0, #16
 800a764:	0c1b      	lsrs	r3, r3, #16
 800a766:	b2d9      	uxtb	r1, r3
 800a768:	b909      	cbnz	r1, 800a76e <__lo0bits+0x32>
 800a76a:	3008      	adds	r0, #8
 800a76c:	0a1b      	lsrs	r3, r3, #8
 800a76e:	0719      	lsls	r1, r3, #28
 800a770:	bf04      	itt	eq
 800a772:	091b      	lsreq	r3, r3, #4
 800a774:	3004      	addeq	r0, #4
 800a776:	0799      	lsls	r1, r3, #30
 800a778:	bf04      	itt	eq
 800a77a:	089b      	lsreq	r3, r3, #2
 800a77c:	3002      	addeq	r0, #2
 800a77e:	07d9      	lsls	r1, r3, #31
 800a780:	d403      	bmi.n	800a78a <__lo0bits+0x4e>
 800a782:	085b      	lsrs	r3, r3, #1
 800a784:	f100 0001 	add.w	r0, r0, #1
 800a788:	d003      	beq.n	800a792 <__lo0bits+0x56>
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	4770      	bx	lr
 800a78e:	2000      	movs	r0, #0
 800a790:	4770      	bx	lr
 800a792:	2020      	movs	r0, #32
 800a794:	4770      	bx	lr
	...

0800a798 <__i2b>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	2101      	movs	r1, #1
 800a79e:	f7ff febb 	bl	800a518 <_Balloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	b928      	cbnz	r0, 800a7b2 <__i2b+0x1a>
 800a7a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <__i2b+0x24>)
 800a7ac:	4804      	ldr	r0, [pc, #16]	; (800a7c0 <__i2b+0x28>)
 800a7ae:	f000 fee9 	bl	800b584 <__assert_func>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	6144      	str	r4, [r0, #20]
 800a7b6:	6103      	str	r3, [r0, #16]
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800b954 	.word	0x0800b954
 800a7c0:	0800b9f7 	.word	0x0800b9f7

0800a7c4 <__multiply>:
 800a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	4691      	mov	r9, r2
 800a7ca:	690a      	ldr	r2, [r1, #16]
 800a7cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	bfbe      	ittt	lt
 800a7d6:	460b      	movlt	r3, r1
 800a7d8:	464c      	movlt	r4, r9
 800a7da:	4699      	movlt	r9, r3
 800a7dc:	6927      	ldr	r7, [r4, #16]
 800a7de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	6861      	ldr	r1, [r4, #4]
 800a7e6:	eb07 060a 	add.w	r6, r7, sl
 800a7ea:	42b3      	cmp	r3, r6
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	bfb8      	it	lt
 800a7f0:	3101      	addlt	r1, #1
 800a7f2:	f7ff fe91 	bl	800a518 <_Balloc>
 800a7f6:	b930      	cbnz	r0, 800a806 <__multiply+0x42>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	f240 115d 	movw	r1, #349	; 0x15d
 800a7fe:	4b43      	ldr	r3, [pc, #268]	; (800a90c <__multiply+0x148>)
 800a800:	4843      	ldr	r0, [pc, #268]	; (800a910 <__multiply+0x14c>)
 800a802:	f000 febf 	bl	800b584 <__assert_func>
 800a806:	f100 0514 	add.w	r5, r0, #20
 800a80a:	462b      	mov	r3, r5
 800a80c:	2200      	movs	r2, #0
 800a80e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a812:	4543      	cmp	r3, r8
 800a814:	d321      	bcc.n	800a85a <__multiply+0x96>
 800a816:	f104 0314 	add.w	r3, r4, #20
 800a81a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a81e:	f109 0314 	add.w	r3, r9, #20
 800a822:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a826:	9202      	str	r2, [sp, #8]
 800a828:	1b3a      	subs	r2, r7, r4
 800a82a:	3a15      	subs	r2, #21
 800a82c:	f022 0203 	bic.w	r2, r2, #3
 800a830:	3204      	adds	r2, #4
 800a832:	f104 0115 	add.w	r1, r4, #21
 800a836:	428f      	cmp	r7, r1
 800a838:	bf38      	it	cc
 800a83a:	2204      	movcc	r2, #4
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9a02      	ldr	r2, [sp, #8]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d80c      	bhi.n	800a860 <__multiply+0x9c>
 800a846:	2e00      	cmp	r6, #0
 800a848:	dd03      	ble.n	800a852 <__multiply+0x8e>
 800a84a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d059      	beq.n	800a906 <__multiply+0x142>
 800a852:	6106      	str	r6, [r0, #16]
 800a854:	b005      	add	sp, #20
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	f843 2b04 	str.w	r2, [r3], #4
 800a85e:	e7d8      	b.n	800a812 <__multiply+0x4e>
 800a860:	f8b3 a000 	ldrh.w	sl, [r3]
 800a864:	f1ba 0f00 	cmp.w	sl, #0
 800a868:	d023      	beq.n	800a8b2 <__multiply+0xee>
 800a86a:	46a9      	mov	r9, r5
 800a86c:	f04f 0c00 	mov.w	ip, #0
 800a870:	f104 0e14 	add.w	lr, r4, #20
 800a874:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a878:	f8d9 1000 	ldr.w	r1, [r9]
 800a87c:	fa1f fb82 	uxth.w	fp, r2
 800a880:	b289      	uxth	r1, r1
 800a882:	fb0a 110b 	mla	r1, sl, fp, r1
 800a886:	4461      	add	r1, ip
 800a888:	f8d9 c000 	ldr.w	ip, [r9]
 800a88c:	0c12      	lsrs	r2, r2, #16
 800a88e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a892:	fb0a c202 	mla	r2, sl, r2, ip
 800a896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a89a:	b289      	uxth	r1, r1
 800a89c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8a0:	4577      	cmp	r7, lr
 800a8a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8a6:	f849 1b04 	str.w	r1, [r9], #4
 800a8aa:	d8e3      	bhi.n	800a874 <__multiply+0xb0>
 800a8ac:	9a01      	ldr	r2, [sp, #4]
 800a8ae:	f845 c002 	str.w	ip, [r5, r2]
 800a8b2:	9a03      	ldr	r2, [sp, #12]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	d020      	beq.n	800a902 <__multiply+0x13e>
 800a8c0:	46ae      	mov	lr, r5
 800a8c2:	f04f 0a00 	mov.w	sl, #0
 800a8c6:	6829      	ldr	r1, [r5, #0]
 800a8c8:	f104 0c14 	add.w	ip, r4, #20
 800a8cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a8d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8d4:	b289      	uxth	r1, r1
 800a8d6:	fb09 220b 	mla	r2, r9, fp, r2
 800a8da:	4492      	add	sl, r2
 800a8dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a8e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a8e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a8ec:	0c12      	lsrs	r2, r2, #16
 800a8ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a8f2:	4567      	cmp	r7, ip
 800a8f4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a8f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8fc:	d8e6      	bhi.n	800a8cc <__multiply+0x108>
 800a8fe:	9a01      	ldr	r2, [sp, #4]
 800a900:	50a9      	str	r1, [r5, r2]
 800a902:	3504      	adds	r5, #4
 800a904:	e79b      	b.n	800a83e <__multiply+0x7a>
 800a906:	3e01      	subs	r6, #1
 800a908:	e79d      	b.n	800a846 <__multiply+0x82>
 800a90a:	bf00      	nop
 800a90c:	0800b954 	.word	0x0800b954
 800a910:	0800b9f7 	.word	0x0800b9f7

0800a914 <__pow5mult>:
 800a914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a918:	4615      	mov	r5, r2
 800a91a:	f012 0203 	ands.w	r2, r2, #3
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	d007      	beq.n	800a934 <__pow5mult+0x20>
 800a924:	4c25      	ldr	r4, [pc, #148]	; (800a9bc <__pow5mult+0xa8>)
 800a926:	3a01      	subs	r2, #1
 800a928:	2300      	movs	r3, #0
 800a92a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a92e:	f7ff fe55 	bl	800a5dc <__multadd>
 800a932:	4607      	mov	r7, r0
 800a934:	10ad      	asrs	r5, r5, #2
 800a936:	d03d      	beq.n	800a9b4 <__pow5mult+0xa0>
 800a938:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a93a:	b97c      	cbnz	r4, 800a95c <__pow5mult+0x48>
 800a93c:	2010      	movs	r0, #16
 800a93e:	f7fd ffe5 	bl	800890c <malloc>
 800a942:	4602      	mov	r2, r0
 800a944:	6270      	str	r0, [r6, #36]	; 0x24
 800a946:	b928      	cbnz	r0, 800a954 <__pow5mult+0x40>
 800a948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a94c:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <__pow5mult+0xac>)
 800a94e:	481d      	ldr	r0, [pc, #116]	; (800a9c4 <__pow5mult+0xb0>)
 800a950:	f000 fe18 	bl	800b584 <__assert_func>
 800a954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a958:	6004      	str	r4, [r0, #0]
 800a95a:	60c4      	str	r4, [r0, #12]
 800a95c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a964:	b94c      	cbnz	r4, 800a97a <__pow5mult+0x66>
 800a966:	f240 2171 	movw	r1, #625	; 0x271
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ff14 	bl	800a798 <__i2b>
 800a970:	2300      	movs	r3, #0
 800a972:	4604      	mov	r4, r0
 800a974:	f8c8 0008 	str.w	r0, [r8, #8]
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	f04f 0900 	mov.w	r9, #0
 800a97e:	07eb      	lsls	r3, r5, #31
 800a980:	d50a      	bpl.n	800a998 <__pow5mult+0x84>
 800a982:	4639      	mov	r1, r7
 800a984:	4622      	mov	r2, r4
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff ff1c 	bl	800a7c4 <__multiply>
 800a98c:	4680      	mov	r8, r0
 800a98e:	4639      	mov	r1, r7
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff fe01 	bl	800a598 <_Bfree>
 800a996:	4647      	mov	r7, r8
 800a998:	106d      	asrs	r5, r5, #1
 800a99a:	d00b      	beq.n	800a9b4 <__pow5mult+0xa0>
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	b938      	cbnz	r0, 800a9b0 <__pow5mult+0x9c>
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f7ff ff0d 	bl	800a7c4 <__multiply>
 800a9aa:	6020      	str	r0, [r4, #0]
 800a9ac:	f8c0 9000 	str.w	r9, [r0]
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	e7e4      	b.n	800a97e <__pow5mult+0x6a>
 800a9b4:	4638      	mov	r0, r7
 800a9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ba:	bf00      	nop
 800a9bc:	0800bb48 	.word	0x0800bb48
 800a9c0:	0800b9e0 	.word	0x0800b9e0
 800a9c4:	0800b9f7 	.word	0x0800b9f7

0800a9c8 <__lshift>:
 800a9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	4607      	mov	r7, r0
 800a9d0:	4691      	mov	r9, r2
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	6849      	ldr	r1, [r1, #4]
 800a9d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9da:	68a3      	ldr	r3, [r4, #8]
 800a9dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9e0:	f108 0601 	add.w	r6, r8, #1
 800a9e4:	42b3      	cmp	r3, r6
 800a9e6:	db0b      	blt.n	800aa00 <__lshift+0x38>
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff fd95 	bl	800a518 <_Balloc>
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	b948      	cbnz	r0, 800aa06 <__lshift+0x3e>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9f8:	4b29      	ldr	r3, [pc, #164]	; (800aaa0 <__lshift+0xd8>)
 800a9fa:	482a      	ldr	r0, [pc, #168]	; (800aaa4 <__lshift+0xdc>)
 800a9fc:	f000 fdc2 	bl	800b584 <__assert_func>
 800aa00:	3101      	adds	r1, #1
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	e7ee      	b.n	800a9e4 <__lshift+0x1c>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f100 0114 	add.w	r1, r0, #20
 800aa0c:	f100 0210 	add.w	r2, r0, #16
 800aa10:	4618      	mov	r0, r3
 800aa12:	4553      	cmp	r3, sl
 800aa14:	db37      	blt.n	800aa86 <__lshift+0xbe>
 800aa16:	6920      	ldr	r0, [r4, #16]
 800aa18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa1c:	f104 0314 	add.w	r3, r4, #20
 800aa20:	f019 091f 	ands.w	r9, r9, #31
 800aa24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa2c:	d02f      	beq.n	800aa8e <__lshift+0xc6>
 800aa2e:	468a      	mov	sl, r1
 800aa30:	f04f 0c00 	mov.w	ip, #0
 800aa34:	f1c9 0e20 	rsb	lr, r9, #32
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	fa02 f209 	lsl.w	r2, r2, r9
 800aa3e:	ea42 020c 	orr.w	r2, r2, ip
 800aa42:	f84a 2b04 	str.w	r2, [sl], #4
 800aa46:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4a:	4298      	cmp	r0, r3
 800aa4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa50:	d8f2      	bhi.n	800aa38 <__lshift+0x70>
 800aa52:	1b03      	subs	r3, r0, r4
 800aa54:	3b15      	subs	r3, #21
 800aa56:	f023 0303 	bic.w	r3, r3, #3
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	f104 0215 	add.w	r2, r4, #21
 800aa60:	4290      	cmp	r0, r2
 800aa62:	bf38      	it	cc
 800aa64:	2304      	movcc	r3, #4
 800aa66:	f841 c003 	str.w	ip, [r1, r3]
 800aa6a:	f1bc 0f00 	cmp.w	ip, #0
 800aa6e:	d001      	beq.n	800aa74 <__lshift+0xac>
 800aa70:	f108 0602 	add.w	r6, r8, #2
 800aa74:	3e01      	subs	r6, #1
 800aa76:	4638      	mov	r0, r7
 800aa78:	4621      	mov	r1, r4
 800aa7a:	612e      	str	r6, [r5, #16]
 800aa7c:	f7ff fd8c 	bl	800a598 <_Bfree>
 800aa80:	4628      	mov	r0, r5
 800aa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa86:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	e7c1      	b.n	800aa12 <__lshift+0x4a>
 800aa8e:	3904      	subs	r1, #4
 800aa90:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa94:	4298      	cmp	r0, r3
 800aa96:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa9a:	d8f9      	bhi.n	800aa90 <__lshift+0xc8>
 800aa9c:	e7ea      	b.n	800aa74 <__lshift+0xac>
 800aa9e:	bf00      	nop
 800aaa0:	0800b954 	.word	0x0800b954
 800aaa4:	0800b9f7 	.word	0x0800b9f7

0800aaa8 <__mcmp>:
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	690a      	ldr	r2, [r1, #16]
 800aaac:	6900      	ldr	r0, [r0, #16]
 800aaae:	b530      	push	{r4, r5, lr}
 800aab0:	1a80      	subs	r0, r0, r2
 800aab2:	d10d      	bne.n	800aad0 <__mcmp+0x28>
 800aab4:	3314      	adds	r3, #20
 800aab6:	3114      	adds	r1, #20
 800aab8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aabc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aac8:	4295      	cmp	r5, r2
 800aaca:	d002      	beq.n	800aad2 <__mcmp+0x2a>
 800aacc:	d304      	bcc.n	800aad8 <__mcmp+0x30>
 800aace:	2001      	movs	r0, #1
 800aad0:	bd30      	pop	{r4, r5, pc}
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	d3f4      	bcc.n	800aac0 <__mcmp+0x18>
 800aad6:	e7fb      	b.n	800aad0 <__mcmp+0x28>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e7f8      	b.n	800aad0 <__mcmp+0x28>
	...

0800aae0 <__mdiff>:
 800aae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	460d      	mov	r5, r1
 800aae6:	4607      	mov	r7, r0
 800aae8:	4611      	mov	r1, r2
 800aaea:	4628      	mov	r0, r5
 800aaec:	4614      	mov	r4, r2
 800aaee:	f7ff ffdb 	bl	800aaa8 <__mcmp>
 800aaf2:	1e06      	subs	r6, r0, #0
 800aaf4:	d111      	bne.n	800ab1a <__mdiff+0x3a>
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f7ff fd0d 	bl	800a518 <_Balloc>
 800aafe:	4602      	mov	r2, r0
 800ab00:	b928      	cbnz	r0, 800ab0e <__mdiff+0x2e>
 800ab02:	f240 2132 	movw	r1, #562	; 0x232
 800ab06:	4b3a      	ldr	r3, [pc, #232]	; (800abf0 <__mdiff+0x110>)
 800ab08:	483a      	ldr	r0, [pc, #232]	; (800abf4 <__mdiff+0x114>)
 800ab0a:	f000 fd3b 	bl	800b584 <__assert_func>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab14:	4610      	mov	r0, r2
 800ab16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1a:	bfa4      	itt	ge
 800ab1c:	4623      	movge	r3, r4
 800ab1e:	462c      	movge	r4, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	6861      	ldr	r1, [r4, #4]
 800ab24:	bfa6      	itte	ge
 800ab26:	461d      	movge	r5, r3
 800ab28:	2600      	movge	r6, #0
 800ab2a:	2601      	movlt	r6, #1
 800ab2c:	f7ff fcf4 	bl	800a518 <_Balloc>
 800ab30:	4602      	mov	r2, r0
 800ab32:	b918      	cbnz	r0, 800ab3c <__mdiff+0x5c>
 800ab34:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab38:	4b2d      	ldr	r3, [pc, #180]	; (800abf0 <__mdiff+0x110>)
 800ab3a:	e7e5      	b.n	800ab08 <__mdiff+0x28>
 800ab3c:	f102 0814 	add.w	r8, r2, #20
 800ab40:	46c2      	mov	sl, r8
 800ab42:	f04f 0c00 	mov.w	ip, #0
 800ab46:	6927      	ldr	r7, [r4, #16]
 800ab48:	60c6      	str	r6, [r0, #12]
 800ab4a:	692e      	ldr	r6, [r5, #16]
 800ab4c:	f104 0014 	add.w	r0, r4, #20
 800ab50:	f105 0914 	add.w	r9, r5, #20
 800ab54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ab58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab5c:	3410      	adds	r4, #16
 800ab5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ab62:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab66:	fa1f f18b 	uxth.w	r1, fp
 800ab6a:	448c      	add	ip, r1
 800ab6c:	b299      	uxth	r1, r3
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	ebac 0101 	sub.w	r1, ip, r1
 800ab74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab7c:	b289      	uxth	r1, r1
 800ab7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab82:	454e      	cmp	r6, r9
 800ab84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab88:	f84a 3b04 	str.w	r3, [sl], #4
 800ab8c:	d8e7      	bhi.n	800ab5e <__mdiff+0x7e>
 800ab8e:	1b73      	subs	r3, r6, r5
 800ab90:	3b15      	subs	r3, #21
 800ab92:	f023 0303 	bic.w	r3, r3, #3
 800ab96:	3515      	adds	r5, #21
 800ab98:	3304      	adds	r3, #4
 800ab9a:	42ae      	cmp	r6, r5
 800ab9c:	bf38      	it	cc
 800ab9e:	2304      	movcc	r3, #4
 800aba0:	4418      	add	r0, r3
 800aba2:	4443      	add	r3, r8
 800aba4:	461e      	mov	r6, r3
 800aba6:	4605      	mov	r5, r0
 800aba8:	4575      	cmp	r5, lr
 800abaa:	d30e      	bcc.n	800abca <__mdiff+0xea>
 800abac:	f10e 0103 	add.w	r1, lr, #3
 800abb0:	1a09      	subs	r1, r1, r0
 800abb2:	f021 0103 	bic.w	r1, r1, #3
 800abb6:	3803      	subs	r0, #3
 800abb8:	4586      	cmp	lr, r0
 800abba:	bf38      	it	cc
 800abbc:	2100      	movcc	r1, #0
 800abbe:	4419      	add	r1, r3
 800abc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800abc4:	b18b      	cbz	r3, 800abea <__mdiff+0x10a>
 800abc6:	6117      	str	r7, [r2, #16]
 800abc8:	e7a4      	b.n	800ab14 <__mdiff+0x34>
 800abca:	f855 8b04 	ldr.w	r8, [r5], #4
 800abce:	fa1f f188 	uxth.w	r1, r8
 800abd2:	4461      	add	r1, ip
 800abd4:	140c      	asrs	r4, r1, #16
 800abd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abda:	b289      	uxth	r1, r1
 800abdc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800abe0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800abe4:	f846 1b04 	str.w	r1, [r6], #4
 800abe8:	e7de      	b.n	800aba8 <__mdiff+0xc8>
 800abea:	3f01      	subs	r7, #1
 800abec:	e7e8      	b.n	800abc0 <__mdiff+0xe0>
 800abee:	bf00      	nop
 800abf0:	0800b954 	.word	0x0800b954
 800abf4:	0800b9f7 	.word	0x0800b9f7

0800abf8 <__ulp>:
 800abf8:	4b11      	ldr	r3, [pc, #68]	; (800ac40 <__ulp+0x48>)
 800abfa:	400b      	ands	r3, r1
 800abfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dd02      	ble.n	800ac0a <__ulp+0x12>
 800ac04:	2000      	movs	r0, #0
 800ac06:	4619      	mov	r1, r3
 800ac08:	4770      	bx	lr
 800ac0a:	425b      	negs	r3, r3
 800ac0c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ac10:	f04f 0000 	mov.w	r0, #0
 800ac14:	f04f 0100 	mov.w	r1, #0
 800ac18:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac1c:	da04      	bge.n	800ac28 <__ulp+0x30>
 800ac1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac22:	fa43 f102 	asr.w	r1, r3, r2
 800ac26:	4770      	bx	lr
 800ac28:	f1a2 0314 	sub.w	r3, r2, #20
 800ac2c:	2b1e      	cmp	r3, #30
 800ac2e:	bfd6      	itet	le
 800ac30:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ac34:	2301      	movgt	r3, #1
 800ac36:	fa22 f303 	lsrle.w	r3, r2, r3
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	7ff00000 	.word	0x7ff00000

0800ac44 <__b2d>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	6907      	ldr	r7, [r0, #16]
 800ac4a:	f100 0914 	add.w	r9, r0, #20
 800ac4e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ac52:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ac56:	f1a7 0804 	sub.w	r8, r7, #4
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7ff fd4e 	bl	800a6fc <__hi0bits>
 800ac60:	f1c0 0320 	rsb	r3, r0, #32
 800ac64:	280a      	cmp	r0, #10
 800ac66:	600b      	str	r3, [r1, #0]
 800ac68:	491f      	ldr	r1, [pc, #124]	; (800ace8 <__b2d+0xa4>)
 800ac6a:	dc17      	bgt.n	800ac9c <__b2d+0x58>
 800ac6c:	45c1      	cmp	r9, r8
 800ac6e:	bf28      	it	cs
 800ac70:	2200      	movcs	r2, #0
 800ac72:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac76:	fa26 f30c 	lsr.w	r3, r6, ip
 800ac7a:	bf38      	it	cc
 800ac7c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ac80:	ea43 0501 	orr.w	r5, r3, r1
 800ac84:	f100 0315 	add.w	r3, r0, #21
 800ac88:	fa06 f303 	lsl.w	r3, r6, r3
 800ac8c:	fa22 f20c 	lsr.w	r2, r2, ip
 800ac90:	ea43 0402 	orr.w	r4, r3, r2
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9c:	45c1      	cmp	r9, r8
 800ac9e:	bf2e      	itee	cs
 800aca0:	2200      	movcs	r2, #0
 800aca2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aca6:	f1a7 0808 	subcc.w	r8, r7, #8
 800acaa:	f1b0 030b 	subs.w	r3, r0, #11
 800acae:	d016      	beq.n	800acde <__b2d+0x9a>
 800acb0:	f1c3 0720 	rsb	r7, r3, #32
 800acb4:	fa22 f107 	lsr.w	r1, r2, r7
 800acb8:	45c8      	cmp	r8, r9
 800acba:	fa06 f603 	lsl.w	r6, r6, r3
 800acbe:	ea46 0601 	orr.w	r6, r6, r1
 800acc2:	bf94      	ite	ls
 800acc4:	2100      	movls	r1, #0
 800acc6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800acca:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800acce:	fa02 f003 	lsl.w	r0, r2, r3
 800acd2:	40f9      	lsrs	r1, r7
 800acd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800acd8:	ea40 0401 	orr.w	r4, r0, r1
 800acdc:	e7da      	b.n	800ac94 <__b2d+0x50>
 800acde:	4614      	mov	r4, r2
 800ace0:	ea46 0501 	orr.w	r5, r6, r1
 800ace4:	e7d6      	b.n	800ac94 <__b2d+0x50>
 800ace6:	bf00      	nop
 800ace8:	3ff00000 	.word	0x3ff00000

0800acec <__d2b>:
 800acec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acf0:	2101      	movs	r1, #1
 800acf2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800acf6:	4690      	mov	r8, r2
 800acf8:	461d      	mov	r5, r3
 800acfa:	f7ff fc0d 	bl	800a518 <_Balloc>
 800acfe:	4604      	mov	r4, r0
 800ad00:	b930      	cbnz	r0, 800ad10 <__d2b+0x24>
 800ad02:	4602      	mov	r2, r0
 800ad04:	f240 310a 	movw	r1, #778	; 0x30a
 800ad08:	4b24      	ldr	r3, [pc, #144]	; (800ad9c <__d2b+0xb0>)
 800ad0a:	4825      	ldr	r0, [pc, #148]	; (800ada0 <__d2b+0xb4>)
 800ad0c:	f000 fc3a 	bl	800b584 <__assert_func>
 800ad10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ad14:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ad18:	bb2d      	cbnz	r5, 800ad66 <__d2b+0x7a>
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	f1b8 0300 	subs.w	r3, r8, #0
 800ad20:	d026      	beq.n	800ad70 <__d2b+0x84>
 800ad22:	4668      	mov	r0, sp
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	f7ff fd09 	bl	800a73c <__lo0bits>
 800ad2a:	9900      	ldr	r1, [sp, #0]
 800ad2c:	b1f0      	cbz	r0, 800ad6c <__d2b+0x80>
 800ad2e:	9a01      	ldr	r2, [sp, #4]
 800ad30:	f1c0 0320 	rsb	r3, r0, #32
 800ad34:	fa02 f303 	lsl.w	r3, r2, r3
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	40c2      	lsrs	r2, r0
 800ad3c:	6163      	str	r3, [r4, #20]
 800ad3e:	9201      	str	r2, [sp, #4]
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bf14      	ite	ne
 800ad46:	2102      	movne	r1, #2
 800ad48:	2101      	moveq	r1, #1
 800ad4a:	61a3      	str	r3, [r4, #24]
 800ad4c:	6121      	str	r1, [r4, #16]
 800ad4e:	b1c5      	cbz	r5, 800ad82 <__d2b+0x96>
 800ad50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad54:	4405      	add	r5, r0
 800ad56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad5a:	603d      	str	r5, [r7, #0]
 800ad5c:	6030      	str	r0, [r6, #0]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	b002      	add	sp, #8
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad6a:	e7d6      	b.n	800ad1a <__d2b+0x2e>
 800ad6c:	6161      	str	r1, [r4, #20]
 800ad6e:	e7e7      	b.n	800ad40 <__d2b+0x54>
 800ad70:	a801      	add	r0, sp, #4
 800ad72:	f7ff fce3 	bl	800a73c <__lo0bits>
 800ad76:	2101      	movs	r1, #1
 800ad78:	9b01      	ldr	r3, [sp, #4]
 800ad7a:	6121      	str	r1, [r4, #16]
 800ad7c:	6163      	str	r3, [r4, #20]
 800ad7e:	3020      	adds	r0, #32
 800ad80:	e7e5      	b.n	800ad4e <__d2b+0x62>
 800ad82:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ad86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad8a:	6038      	str	r0, [r7, #0]
 800ad8c:	6918      	ldr	r0, [r3, #16]
 800ad8e:	f7ff fcb5 	bl	800a6fc <__hi0bits>
 800ad92:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ad96:	6031      	str	r1, [r6, #0]
 800ad98:	e7e1      	b.n	800ad5e <__d2b+0x72>
 800ad9a:	bf00      	nop
 800ad9c:	0800b954 	.word	0x0800b954
 800ada0:	0800b9f7 	.word	0x0800b9f7

0800ada4 <__ratio>:
 800ada4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	4688      	mov	r8, r1
 800adaa:	4669      	mov	r1, sp
 800adac:	4681      	mov	r9, r0
 800adae:	f7ff ff49 	bl	800ac44 <__b2d>
 800adb2:	460f      	mov	r7, r1
 800adb4:	4604      	mov	r4, r0
 800adb6:	460d      	mov	r5, r1
 800adb8:	4640      	mov	r0, r8
 800adba:	a901      	add	r1, sp, #4
 800adbc:	f7ff ff42 	bl	800ac44 <__b2d>
 800adc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800adc8:	468b      	mov	fp, r1
 800adca:	eba3 0c02 	sub.w	ip, r3, r2
 800adce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfd5      	itete	le
 800addc:	460a      	movle	r2, r1
 800adde:	462a      	movgt	r2, r5
 800ade0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ade4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ade8:	bfd8      	it	le
 800adea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800adee:	465b      	mov	r3, fp
 800adf0:	4602      	mov	r2, r0
 800adf2:	4639      	mov	r1, r7
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7f5 fc99 	bl	800072c <__aeabi_ddiv>
 800adfa:	b003      	add	sp, #12
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae00 <__copybits>:
 800ae00:	3901      	subs	r1, #1
 800ae02:	b570      	push	{r4, r5, r6, lr}
 800ae04:	1149      	asrs	r1, r1, #5
 800ae06:	6914      	ldr	r4, [r2, #16]
 800ae08:	3101      	adds	r1, #1
 800ae0a:	f102 0314 	add.w	r3, r2, #20
 800ae0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae16:	1f05      	subs	r5, r0, #4
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	d30c      	bcc.n	800ae36 <__copybits+0x36>
 800ae1c:	1aa3      	subs	r3, r4, r2
 800ae1e:	3b11      	subs	r3, #17
 800ae20:	f023 0303 	bic.w	r3, r3, #3
 800ae24:	3211      	adds	r2, #17
 800ae26:	42a2      	cmp	r2, r4
 800ae28:	bf88      	it	hi
 800ae2a:	2300      	movhi	r3, #0
 800ae2c:	4418      	add	r0, r3
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4288      	cmp	r0, r1
 800ae32:	d305      	bcc.n	800ae40 <__copybits+0x40>
 800ae34:	bd70      	pop	{r4, r5, r6, pc}
 800ae36:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae3a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae3e:	e7eb      	b.n	800ae18 <__copybits+0x18>
 800ae40:	f840 3b04 	str.w	r3, [r0], #4
 800ae44:	e7f4      	b.n	800ae30 <__copybits+0x30>

0800ae46 <__any_on>:
 800ae46:	f100 0214 	add.w	r2, r0, #20
 800ae4a:	6900      	ldr	r0, [r0, #16]
 800ae4c:	114b      	asrs	r3, r1, #5
 800ae4e:	4298      	cmp	r0, r3
 800ae50:	b510      	push	{r4, lr}
 800ae52:	db11      	blt.n	800ae78 <__any_on+0x32>
 800ae54:	dd0a      	ble.n	800ae6c <__any_on+0x26>
 800ae56:	f011 011f 	ands.w	r1, r1, #31
 800ae5a:	d007      	beq.n	800ae6c <__any_on+0x26>
 800ae5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae60:	fa24 f001 	lsr.w	r0, r4, r1
 800ae64:	fa00 f101 	lsl.w	r1, r0, r1
 800ae68:	428c      	cmp	r4, r1
 800ae6a:	d10b      	bne.n	800ae84 <__any_on+0x3e>
 800ae6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d803      	bhi.n	800ae7c <__any_on+0x36>
 800ae74:	2000      	movs	r0, #0
 800ae76:	bd10      	pop	{r4, pc}
 800ae78:	4603      	mov	r3, r0
 800ae7a:	e7f7      	b.n	800ae6c <__any_on+0x26>
 800ae7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae80:	2900      	cmp	r1, #0
 800ae82:	d0f5      	beq.n	800ae70 <__any_on+0x2a>
 800ae84:	2001      	movs	r0, #1
 800ae86:	e7f6      	b.n	800ae76 <__any_on+0x30>

0800ae88 <_calloc_r>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	fba1 5402 	umull	r5, r4, r1, r2
 800ae8e:	b934      	cbnz	r4, 800ae9e <_calloc_r+0x16>
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7fd fdb3 	bl	80089fc <_malloc_r>
 800ae96:	4606      	mov	r6, r0
 800ae98:	b928      	cbnz	r0, 800aea6 <_calloc_r+0x1e>
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	220c      	movs	r2, #12
 800aea0:	2600      	movs	r6, #0
 800aea2:	6002      	str	r2, [r0, #0]
 800aea4:	e7f9      	b.n	800ae9a <_calloc_r+0x12>
 800aea6:	462a      	mov	r2, r5
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f7fd fd37 	bl	800891c <memset>
 800aeae:	e7f4      	b.n	800ae9a <_calloc_r+0x12>

0800aeb0 <__sfputc_r>:
 800aeb0:	6893      	ldr	r3, [r2, #8]
 800aeb2:	b410      	push	{r4}
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	6093      	str	r3, [r2, #8]
 800aeba:	da07      	bge.n	800aecc <__sfputc_r+0x1c>
 800aebc:	6994      	ldr	r4, [r2, #24]
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	db01      	blt.n	800aec6 <__sfputc_r+0x16>
 800aec2:	290a      	cmp	r1, #10
 800aec4:	d102      	bne.n	800aecc <__sfputc_r+0x1c>
 800aec6:	bc10      	pop	{r4}
 800aec8:	f7fe bcb8 	b.w	800983c <__swbuf_r>
 800aecc:	6813      	ldr	r3, [r2, #0]
 800aece:	1c58      	adds	r0, r3, #1
 800aed0:	6010      	str	r0, [r2, #0]
 800aed2:	7019      	strb	r1, [r3, #0]
 800aed4:	4608      	mov	r0, r1
 800aed6:	bc10      	pop	{r4}
 800aed8:	4770      	bx	lr

0800aeda <__sfputs_r>:
 800aeda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aedc:	4606      	mov	r6, r0
 800aede:	460f      	mov	r7, r1
 800aee0:	4614      	mov	r4, r2
 800aee2:	18d5      	adds	r5, r2, r3
 800aee4:	42ac      	cmp	r4, r5
 800aee6:	d101      	bne.n	800aeec <__sfputs_r+0x12>
 800aee8:	2000      	movs	r0, #0
 800aeea:	e007      	b.n	800aefc <__sfputs_r+0x22>
 800aeec:	463a      	mov	r2, r7
 800aeee:	4630      	mov	r0, r6
 800aef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aef4:	f7ff ffdc 	bl	800aeb0 <__sfputc_r>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d1f3      	bne.n	800aee4 <__sfputs_r+0xa>
 800aefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af00 <_vfiprintf_r>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	460d      	mov	r5, r1
 800af06:	4614      	mov	r4, r2
 800af08:	4698      	mov	r8, r3
 800af0a:	4606      	mov	r6, r0
 800af0c:	b09d      	sub	sp, #116	; 0x74
 800af0e:	b118      	cbz	r0, 800af18 <_vfiprintf_r+0x18>
 800af10:	6983      	ldr	r3, [r0, #24]
 800af12:	b90b      	cbnz	r3, 800af18 <_vfiprintf_r+0x18>
 800af14:	f7fe fe68 	bl	8009be8 <__sinit>
 800af18:	4b89      	ldr	r3, [pc, #548]	; (800b140 <_vfiprintf_r+0x240>)
 800af1a:	429d      	cmp	r5, r3
 800af1c:	d11b      	bne.n	800af56 <_vfiprintf_r+0x56>
 800af1e:	6875      	ldr	r5, [r6, #4]
 800af20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af22:	07d9      	lsls	r1, r3, #31
 800af24:	d405      	bmi.n	800af32 <_vfiprintf_r+0x32>
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	059a      	lsls	r2, r3, #22
 800af2a:	d402      	bmi.n	800af32 <_vfiprintf_r+0x32>
 800af2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2e:	f7ff fa60 	bl	800a3f2 <__retarget_lock_acquire_recursive>
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	071b      	lsls	r3, r3, #28
 800af36:	d501      	bpl.n	800af3c <_vfiprintf_r+0x3c>
 800af38:	692b      	ldr	r3, [r5, #16]
 800af3a:	b9eb      	cbnz	r3, 800af78 <_vfiprintf_r+0x78>
 800af3c:	4629      	mov	r1, r5
 800af3e:	4630      	mov	r0, r6
 800af40:	f7fe fcce 	bl	80098e0 <__swsetup_r>
 800af44:	b1c0      	cbz	r0, 800af78 <_vfiprintf_r+0x78>
 800af46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af48:	07dc      	lsls	r4, r3, #31
 800af4a:	d50e      	bpl.n	800af6a <_vfiprintf_r+0x6a>
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	b01d      	add	sp, #116	; 0x74
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	4b7b      	ldr	r3, [pc, #492]	; (800b144 <_vfiprintf_r+0x244>)
 800af58:	429d      	cmp	r5, r3
 800af5a:	d101      	bne.n	800af60 <_vfiprintf_r+0x60>
 800af5c:	68b5      	ldr	r5, [r6, #8]
 800af5e:	e7df      	b.n	800af20 <_vfiprintf_r+0x20>
 800af60:	4b79      	ldr	r3, [pc, #484]	; (800b148 <_vfiprintf_r+0x248>)
 800af62:	429d      	cmp	r5, r3
 800af64:	bf08      	it	eq
 800af66:	68f5      	ldreq	r5, [r6, #12]
 800af68:	e7da      	b.n	800af20 <_vfiprintf_r+0x20>
 800af6a:	89ab      	ldrh	r3, [r5, #12]
 800af6c:	0598      	lsls	r0, r3, #22
 800af6e:	d4ed      	bmi.n	800af4c <_vfiprintf_r+0x4c>
 800af70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af72:	f7ff fa3f 	bl	800a3f4 <__retarget_lock_release_recursive>
 800af76:	e7e9      	b.n	800af4c <_vfiprintf_r+0x4c>
 800af78:	2300      	movs	r3, #0
 800af7a:	9309      	str	r3, [sp, #36]	; 0x24
 800af7c:	2320      	movs	r3, #32
 800af7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af82:	2330      	movs	r3, #48	; 0x30
 800af84:	f04f 0901 	mov.w	r9, #1
 800af88:	f8cd 800c 	str.w	r8, [sp, #12]
 800af8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b14c <_vfiprintf_r+0x24c>
 800af90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af94:	4623      	mov	r3, r4
 800af96:	469a      	mov	sl, r3
 800af98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af9c:	b10a      	cbz	r2, 800afa2 <_vfiprintf_r+0xa2>
 800af9e:	2a25      	cmp	r2, #37	; 0x25
 800afa0:	d1f9      	bne.n	800af96 <_vfiprintf_r+0x96>
 800afa2:	ebba 0b04 	subs.w	fp, sl, r4
 800afa6:	d00b      	beq.n	800afc0 <_vfiprintf_r+0xc0>
 800afa8:	465b      	mov	r3, fp
 800afaa:	4622      	mov	r2, r4
 800afac:	4629      	mov	r1, r5
 800afae:	4630      	mov	r0, r6
 800afb0:	f7ff ff93 	bl	800aeda <__sfputs_r>
 800afb4:	3001      	adds	r0, #1
 800afb6:	f000 80aa 	beq.w	800b10e <_vfiprintf_r+0x20e>
 800afba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afbc:	445a      	add	r2, fp
 800afbe:	9209      	str	r2, [sp, #36]	; 0x24
 800afc0:	f89a 3000 	ldrb.w	r3, [sl]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 80a2 	beq.w	800b10e <_vfiprintf_r+0x20e>
 800afca:	2300      	movs	r3, #0
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295
 800afd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd4:	f10a 0a01 	add.w	sl, sl, #1
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	9307      	str	r3, [sp, #28]
 800afdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afe0:	931a      	str	r3, [sp, #104]	; 0x68
 800afe2:	4654      	mov	r4, sl
 800afe4:	2205      	movs	r2, #5
 800afe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afea:	4858      	ldr	r0, [pc, #352]	; (800b14c <_vfiprintf_r+0x24c>)
 800afec:	f000 fb3e 	bl	800b66c <memchr>
 800aff0:	9a04      	ldr	r2, [sp, #16]
 800aff2:	b9d8      	cbnz	r0, 800b02c <_vfiprintf_r+0x12c>
 800aff4:	06d1      	lsls	r1, r2, #27
 800aff6:	bf44      	itt	mi
 800aff8:	2320      	movmi	r3, #32
 800affa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800affe:	0713      	lsls	r3, r2, #28
 800b000:	bf44      	itt	mi
 800b002:	232b      	movmi	r3, #43	; 0x2b
 800b004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b008:	f89a 3000 	ldrb.w	r3, [sl]
 800b00c:	2b2a      	cmp	r3, #42	; 0x2a
 800b00e:	d015      	beq.n	800b03c <_vfiprintf_r+0x13c>
 800b010:	4654      	mov	r4, sl
 800b012:	2000      	movs	r0, #0
 800b014:	f04f 0c0a 	mov.w	ip, #10
 800b018:	9a07      	ldr	r2, [sp, #28]
 800b01a:	4621      	mov	r1, r4
 800b01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b020:	3b30      	subs	r3, #48	; 0x30
 800b022:	2b09      	cmp	r3, #9
 800b024:	d94e      	bls.n	800b0c4 <_vfiprintf_r+0x1c4>
 800b026:	b1b0      	cbz	r0, 800b056 <_vfiprintf_r+0x156>
 800b028:	9207      	str	r2, [sp, #28]
 800b02a:	e014      	b.n	800b056 <_vfiprintf_r+0x156>
 800b02c:	eba0 0308 	sub.w	r3, r0, r8
 800b030:	fa09 f303 	lsl.w	r3, r9, r3
 800b034:	4313      	orrs	r3, r2
 800b036:	46a2      	mov	sl, r4
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	e7d2      	b.n	800afe2 <_vfiprintf_r+0xe2>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	1d19      	adds	r1, r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	9103      	str	r1, [sp, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	bfbb      	ittet	lt
 800b048:	425b      	neglt	r3, r3
 800b04a:	f042 0202 	orrlt.w	r2, r2, #2
 800b04e:	9307      	strge	r3, [sp, #28]
 800b050:	9307      	strlt	r3, [sp, #28]
 800b052:	bfb8      	it	lt
 800b054:	9204      	strlt	r2, [sp, #16]
 800b056:	7823      	ldrb	r3, [r4, #0]
 800b058:	2b2e      	cmp	r3, #46	; 0x2e
 800b05a:	d10c      	bne.n	800b076 <_vfiprintf_r+0x176>
 800b05c:	7863      	ldrb	r3, [r4, #1]
 800b05e:	2b2a      	cmp	r3, #42	; 0x2a
 800b060:	d135      	bne.n	800b0ce <_vfiprintf_r+0x1ce>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	3402      	adds	r4, #2
 800b066:	1d1a      	adds	r2, r3, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	9203      	str	r2, [sp, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfb8      	it	lt
 800b070:	f04f 33ff 	movlt.w	r3, #4294967295
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b150 <_vfiprintf_r+0x250>
 800b07a:	2203      	movs	r2, #3
 800b07c:	4650      	mov	r0, sl
 800b07e:	7821      	ldrb	r1, [r4, #0]
 800b080:	f000 faf4 	bl	800b66c <memchr>
 800b084:	b140      	cbz	r0, 800b098 <_vfiprintf_r+0x198>
 800b086:	2340      	movs	r3, #64	; 0x40
 800b088:	eba0 000a 	sub.w	r0, r0, sl
 800b08c:	fa03 f000 	lsl.w	r0, r3, r0
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	3401      	adds	r4, #1
 800b094:	4303      	orrs	r3, r0
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09c:	2206      	movs	r2, #6
 800b09e:	482d      	ldr	r0, [pc, #180]	; (800b154 <_vfiprintf_r+0x254>)
 800b0a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0a4:	f000 fae2 	bl	800b66c <memchr>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d03f      	beq.n	800b12c <_vfiprintf_r+0x22c>
 800b0ac:	4b2a      	ldr	r3, [pc, #168]	; (800b158 <_vfiprintf_r+0x258>)
 800b0ae:	bb1b      	cbnz	r3, 800b0f8 <_vfiprintf_r+0x1f8>
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	3307      	adds	r3, #7
 800b0b4:	f023 0307 	bic.w	r3, r3, #7
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0be:	443b      	add	r3, r7
 800b0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c2:	e767      	b.n	800af94 <_vfiprintf_r+0x94>
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0cc:	e7a5      	b.n	800b01a <_vfiprintf_r+0x11a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f04f 0c0a 	mov.w	ip, #10
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	3401      	adds	r4, #1
 800b0d8:	9305      	str	r3, [sp, #20]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e0:	3a30      	subs	r2, #48	; 0x30
 800b0e2:	2a09      	cmp	r2, #9
 800b0e4:	d903      	bls.n	800b0ee <_vfiprintf_r+0x1ee>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0c5      	beq.n	800b076 <_vfiprintf_r+0x176>
 800b0ea:	9105      	str	r1, [sp, #20]
 800b0ec:	e7c3      	b.n	800b076 <_vfiprintf_r+0x176>
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f6:	e7f0      	b.n	800b0da <_vfiprintf_r+0x1da>
 800b0f8:	ab03      	add	r3, sp, #12
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	4b16      	ldr	r3, [pc, #88]	; (800b15c <_vfiprintf_r+0x25c>)
 800b102:	a904      	add	r1, sp, #16
 800b104:	f3af 8000 	nop.w
 800b108:	4607      	mov	r7, r0
 800b10a:	1c78      	adds	r0, r7, #1
 800b10c:	d1d6      	bne.n	800b0bc <_vfiprintf_r+0x1bc>
 800b10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b110:	07d9      	lsls	r1, r3, #31
 800b112:	d405      	bmi.n	800b120 <_vfiprintf_r+0x220>
 800b114:	89ab      	ldrh	r3, [r5, #12]
 800b116:	059a      	lsls	r2, r3, #22
 800b118:	d402      	bmi.n	800b120 <_vfiprintf_r+0x220>
 800b11a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b11c:	f7ff f96a 	bl	800a3f4 <__retarget_lock_release_recursive>
 800b120:	89ab      	ldrh	r3, [r5, #12]
 800b122:	065b      	lsls	r3, r3, #25
 800b124:	f53f af12 	bmi.w	800af4c <_vfiprintf_r+0x4c>
 800b128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b12a:	e711      	b.n	800af50 <_vfiprintf_r+0x50>
 800b12c:	ab03      	add	r3, sp, #12
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	462a      	mov	r2, r5
 800b132:	4630      	mov	r0, r6
 800b134:	4b09      	ldr	r3, [pc, #36]	; (800b15c <_vfiprintf_r+0x25c>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	f000 f882 	bl	800b240 <_printf_i>
 800b13c:	e7e4      	b.n	800b108 <_vfiprintf_r+0x208>
 800b13e:	bf00      	nop
 800b140:	0800b914 	.word	0x0800b914
 800b144:	0800b934 	.word	0x0800b934
 800b148:	0800b8f4 	.word	0x0800b8f4
 800b14c:	0800bb54 	.word	0x0800bb54
 800b150:	0800bb5a 	.word	0x0800bb5a
 800b154:	0800bb5e 	.word	0x0800bb5e
 800b158:	00000000 	.word	0x00000000
 800b15c:	0800aedb 	.word	0x0800aedb

0800b160 <_printf_common>:
 800b160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	4616      	mov	r6, r2
 800b166:	4699      	mov	r9, r3
 800b168:	688a      	ldr	r2, [r1, #8]
 800b16a:	690b      	ldr	r3, [r1, #16]
 800b16c:	4607      	mov	r7, r0
 800b16e:	4293      	cmp	r3, r2
 800b170:	bfb8      	it	lt
 800b172:	4613      	movlt	r3, r2
 800b174:	6033      	str	r3, [r6, #0]
 800b176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b17a:	460c      	mov	r4, r1
 800b17c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b180:	b10a      	cbz	r2, 800b186 <_printf_common+0x26>
 800b182:	3301      	adds	r3, #1
 800b184:	6033      	str	r3, [r6, #0]
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	0699      	lsls	r1, r3, #26
 800b18a:	bf42      	ittt	mi
 800b18c:	6833      	ldrmi	r3, [r6, #0]
 800b18e:	3302      	addmi	r3, #2
 800b190:	6033      	strmi	r3, [r6, #0]
 800b192:	6825      	ldr	r5, [r4, #0]
 800b194:	f015 0506 	ands.w	r5, r5, #6
 800b198:	d106      	bne.n	800b1a8 <_printf_common+0x48>
 800b19a:	f104 0a19 	add.w	sl, r4, #25
 800b19e:	68e3      	ldr	r3, [r4, #12]
 800b1a0:	6832      	ldr	r2, [r6, #0]
 800b1a2:	1a9b      	subs	r3, r3, r2
 800b1a4:	42ab      	cmp	r3, r5
 800b1a6:	dc28      	bgt.n	800b1fa <_printf_common+0x9a>
 800b1a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1ac:	1e13      	subs	r3, r2, #0
 800b1ae:	6822      	ldr	r2, [r4, #0]
 800b1b0:	bf18      	it	ne
 800b1b2:	2301      	movne	r3, #1
 800b1b4:	0692      	lsls	r2, r2, #26
 800b1b6:	d42d      	bmi.n	800b214 <_printf_common+0xb4>
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1c0:	47c0      	blx	r8
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d020      	beq.n	800b208 <_printf_common+0xa8>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	68e5      	ldr	r5, [r4, #12]
 800b1ca:	f003 0306 	and.w	r3, r3, #6
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	bf18      	it	ne
 800b1d2:	2500      	movne	r5, #0
 800b1d4:	6832      	ldr	r2, [r6, #0]
 800b1d6:	f04f 0600 	mov.w	r6, #0
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	bf08      	it	eq
 800b1de:	1aad      	subeq	r5, r5, r2
 800b1e0:	6922      	ldr	r2, [r4, #16]
 800b1e2:	bf08      	it	eq
 800b1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	bfc4      	itt	gt
 800b1ec:	1a9b      	subgt	r3, r3, r2
 800b1ee:	18ed      	addgt	r5, r5, r3
 800b1f0:	341a      	adds	r4, #26
 800b1f2:	42b5      	cmp	r5, r6
 800b1f4:	d11a      	bne.n	800b22c <_printf_common+0xcc>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e008      	b.n	800b20c <_printf_common+0xac>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4652      	mov	r2, sl
 800b1fe:	4649      	mov	r1, r9
 800b200:	4638      	mov	r0, r7
 800b202:	47c0      	blx	r8
 800b204:	3001      	adds	r0, #1
 800b206:	d103      	bne.n	800b210 <_printf_common+0xb0>
 800b208:	f04f 30ff 	mov.w	r0, #4294967295
 800b20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b210:	3501      	adds	r5, #1
 800b212:	e7c4      	b.n	800b19e <_printf_common+0x3e>
 800b214:	2030      	movs	r0, #48	; 0x30
 800b216:	18e1      	adds	r1, r4, r3
 800b218:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b222:	4422      	add	r2, r4
 800b224:	3302      	adds	r3, #2
 800b226:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b22a:	e7c5      	b.n	800b1b8 <_printf_common+0x58>
 800b22c:	2301      	movs	r3, #1
 800b22e:	4622      	mov	r2, r4
 800b230:	4649      	mov	r1, r9
 800b232:	4638      	mov	r0, r7
 800b234:	47c0      	blx	r8
 800b236:	3001      	adds	r0, #1
 800b238:	d0e6      	beq.n	800b208 <_printf_common+0xa8>
 800b23a:	3601      	adds	r6, #1
 800b23c:	e7d9      	b.n	800b1f2 <_printf_common+0x92>
	...

0800b240 <_printf_i>:
 800b240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	7e0f      	ldrb	r7, [r1, #24]
 800b246:	4691      	mov	r9, r2
 800b248:	2f78      	cmp	r7, #120	; 0x78
 800b24a:	4680      	mov	r8, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	469a      	mov	sl, r3
 800b250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b256:	d807      	bhi.n	800b268 <_printf_i+0x28>
 800b258:	2f62      	cmp	r7, #98	; 0x62
 800b25a:	d80a      	bhi.n	800b272 <_printf_i+0x32>
 800b25c:	2f00      	cmp	r7, #0
 800b25e:	f000 80d9 	beq.w	800b414 <_printf_i+0x1d4>
 800b262:	2f58      	cmp	r7, #88	; 0x58
 800b264:	f000 80a4 	beq.w	800b3b0 <_printf_i+0x170>
 800b268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b270:	e03a      	b.n	800b2e8 <_printf_i+0xa8>
 800b272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b276:	2b15      	cmp	r3, #21
 800b278:	d8f6      	bhi.n	800b268 <_printf_i+0x28>
 800b27a:	a101      	add	r1, pc, #4	; (adr r1, 800b280 <_printf_i+0x40>)
 800b27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b280:	0800b2d9 	.word	0x0800b2d9
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b269 	.word	0x0800b269
 800b28c:	0800b269 	.word	0x0800b269
 800b290:	0800b269 	.word	0x0800b269
 800b294:	0800b269 	.word	0x0800b269
 800b298:	0800b2ed 	.word	0x0800b2ed
 800b29c:	0800b269 	.word	0x0800b269
 800b2a0:	0800b269 	.word	0x0800b269
 800b2a4:	0800b269 	.word	0x0800b269
 800b2a8:	0800b269 	.word	0x0800b269
 800b2ac:	0800b3fb 	.word	0x0800b3fb
 800b2b0:	0800b31d 	.word	0x0800b31d
 800b2b4:	0800b3dd 	.word	0x0800b3dd
 800b2b8:	0800b269 	.word	0x0800b269
 800b2bc:	0800b269 	.word	0x0800b269
 800b2c0:	0800b41d 	.word	0x0800b41d
 800b2c4:	0800b269 	.word	0x0800b269
 800b2c8:	0800b31d 	.word	0x0800b31d
 800b2cc:	0800b269 	.word	0x0800b269
 800b2d0:	0800b269 	.word	0x0800b269
 800b2d4:	0800b3e5 	.word	0x0800b3e5
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	1d1a      	adds	r2, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	602a      	str	r2, [r5, #0]
 800b2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e0a4      	b.n	800b436 <_printf_i+0x1f6>
 800b2ec:	6820      	ldr	r0, [r4, #0]
 800b2ee:	6829      	ldr	r1, [r5, #0]
 800b2f0:	0606      	lsls	r6, r0, #24
 800b2f2:	f101 0304 	add.w	r3, r1, #4
 800b2f6:	d50a      	bpl.n	800b30e <_printf_i+0xce>
 800b2f8:	680e      	ldr	r6, [r1, #0]
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	da03      	bge.n	800b308 <_printf_i+0xc8>
 800b300:	232d      	movs	r3, #45	; 0x2d
 800b302:	4276      	negs	r6, r6
 800b304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b308:	230a      	movs	r3, #10
 800b30a:	485e      	ldr	r0, [pc, #376]	; (800b484 <_printf_i+0x244>)
 800b30c:	e019      	b.n	800b342 <_printf_i+0x102>
 800b30e:	680e      	ldr	r6, [r1, #0]
 800b310:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b314:	602b      	str	r3, [r5, #0]
 800b316:	bf18      	it	ne
 800b318:	b236      	sxthne	r6, r6
 800b31a:	e7ef      	b.n	800b2fc <_printf_i+0xbc>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	6820      	ldr	r0, [r4, #0]
 800b320:	1d19      	adds	r1, r3, #4
 800b322:	6029      	str	r1, [r5, #0]
 800b324:	0601      	lsls	r1, r0, #24
 800b326:	d501      	bpl.n	800b32c <_printf_i+0xec>
 800b328:	681e      	ldr	r6, [r3, #0]
 800b32a:	e002      	b.n	800b332 <_printf_i+0xf2>
 800b32c:	0646      	lsls	r6, r0, #25
 800b32e:	d5fb      	bpl.n	800b328 <_printf_i+0xe8>
 800b330:	881e      	ldrh	r6, [r3, #0]
 800b332:	2f6f      	cmp	r7, #111	; 0x6f
 800b334:	bf0c      	ite	eq
 800b336:	2308      	moveq	r3, #8
 800b338:	230a      	movne	r3, #10
 800b33a:	4852      	ldr	r0, [pc, #328]	; (800b484 <_printf_i+0x244>)
 800b33c:	2100      	movs	r1, #0
 800b33e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b342:	6865      	ldr	r5, [r4, #4]
 800b344:	2d00      	cmp	r5, #0
 800b346:	bfa8      	it	ge
 800b348:	6821      	ldrge	r1, [r4, #0]
 800b34a:	60a5      	str	r5, [r4, #8]
 800b34c:	bfa4      	itt	ge
 800b34e:	f021 0104 	bicge.w	r1, r1, #4
 800b352:	6021      	strge	r1, [r4, #0]
 800b354:	b90e      	cbnz	r6, 800b35a <_printf_i+0x11a>
 800b356:	2d00      	cmp	r5, #0
 800b358:	d04d      	beq.n	800b3f6 <_printf_i+0x1b6>
 800b35a:	4615      	mov	r5, r2
 800b35c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b360:	fb03 6711 	mls	r7, r3, r1, r6
 800b364:	5dc7      	ldrb	r7, [r0, r7]
 800b366:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b36a:	4637      	mov	r7, r6
 800b36c:	42bb      	cmp	r3, r7
 800b36e:	460e      	mov	r6, r1
 800b370:	d9f4      	bls.n	800b35c <_printf_i+0x11c>
 800b372:	2b08      	cmp	r3, #8
 800b374:	d10b      	bne.n	800b38e <_printf_i+0x14e>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	07de      	lsls	r6, r3, #31
 800b37a:	d508      	bpl.n	800b38e <_printf_i+0x14e>
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	6861      	ldr	r1, [r4, #4]
 800b380:	4299      	cmp	r1, r3
 800b382:	bfde      	ittt	le
 800b384:	2330      	movle	r3, #48	; 0x30
 800b386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b38a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b38e:	1b52      	subs	r2, r2, r5
 800b390:	6122      	str	r2, [r4, #16]
 800b392:	464b      	mov	r3, r9
 800b394:	4621      	mov	r1, r4
 800b396:	4640      	mov	r0, r8
 800b398:	f8cd a000 	str.w	sl, [sp]
 800b39c:	aa03      	add	r2, sp, #12
 800b39e:	f7ff fedf 	bl	800b160 <_printf_common>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d14c      	bne.n	800b440 <_printf_i+0x200>
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	b004      	add	sp, #16
 800b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b0:	4834      	ldr	r0, [pc, #208]	; (800b484 <_printf_i+0x244>)
 800b3b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3b6:	6829      	ldr	r1, [r5, #0]
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3be:	6029      	str	r1, [r5, #0]
 800b3c0:	061d      	lsls	r5, r3, #24
 800b3c2:	d514      	bpl.n	800b3ee <_printf_i+0x1ae>
 800b3c4:	07df      	lsls	r7, r3, #31
 800b3c6:	bf44      	itt	mi
 800b3c8:	f043 0320 	orrmi.w	r3, r3, #32
 800b3cc:	6023      	strmi	r3, [r4, #0]
 800b3ce:	b91e      	cbnz	r6, 800b3d8 <_printf_i+0x198>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	f023 0320 	bic.w	r3, r3, #32
 800b3d6:	6023      	str	r3, [r4, #0]
 800b3d8:	2310      	movs	r3, #16
 800b3da:	e7af      	b.n	800b33c <_printf_i+0xfc>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	f043 0320 	orr.w	r3, r3, #32
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	2378      	movs	r3, #120	; 0x78
 800b3e6:	4828      	ldr	r0, [pc, #160]	; (800b488 <_printf_i+0x248>)
 800b3e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3ec:	e7e3      	b.n	800b3b6 <_printf_i+0x176>
 800b3ee:	0659      	lsls	r1, r3, #25
 800b3f0:	bf48      	it	mi
 800b3f2:	b2b6      	uxthmi	r6, r6
 800b3f4:	e7e6      	b.n	800b3c4 <_printf_i+0x184>
 800b3f6:	4615      	mov	r5, r2
 800b3f8:	e7bb      	b.n	800b372 <_printf_i+0x132>
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	6826      	ldr	r6, [r4, #0]
 800b3fe:	1d18      	adds	r0, r3, #4
 800b400:	6961      	ldr	r1, [r4, #20]
 800b402:	6028      	str	r0, [r5, #0]
 800b404:	0635      	lsls	r5, r6, #24
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	d501      	bpl.n	800b40e <_printf_i+0x1ce>
 800b40a:	6019      	str	r1, [r3, #0]
 800b40c:	e002      	b.n	800b414 <_printf_i+0x1d4>
 800b40e:	0670      	lsls	r0, r6, #25
 800b410:	d5fb      	bpl.n	800b40a <_printf_i+0x1ca>
 800b412:	8019      	strh	r1, [r3, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	4615      	mov	r5, r2
 800b418:	6123      	str	r3, [r4, #16]
 800b41a:	e7ba      	b.n	800b392 <_printf_i+0x152>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	2100      	movs	r1, #0
 800b420:	1d1a      	adds	r2, r3, #4
 800b422:	602a      	str	r2, [r5, #0]
 800b424:	681d      	ldr	r5, [r3, #0]
 800b426:	6862      	ldr	r2, [r4, #4]
 800b428:	4628      	mov	r0, r5
 800b42a:	f000 f91f 	bl	800b66c <memchr>
 800b42e:	b108      	cbz	r0, 800b434 <_printf_i+0x1f4>
 800b430:	1b40      	subs	r0, r0, r5
 800b432:	6060      	str	r0, [r4, #4]
 800b434:	6863      	ldr	r3, [r4, #4]
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	2300      	movs	r3, #0
 800b43a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b43e:	e7a8      	b.n	800b392 <_printf_i+0x152>
 800b440:	462a      	mov	r2, r5
 800b442:	4649      	mov	r1, r9
 800b444:	4640      	mov	r0, r8
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	47d0      	blx	sl
 800b44a:	3001      	adds	r0, #1
 800b44c:	d0ab      	beq.n	800b3a6 <_printf_i+0x166>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	079b      	lsls	r3, r3, #30
 800b452:	d413      	bmi.n	800b47c <_printf_i+0x23c>
 800b454:	68e0      	ldr	r0, [r4, #12]
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	4298      	cmp	r0, r3
 800b45a:	bfb8      	it	lt
 800b45c:	4618      	movlt	r0, r3
 800b45e:	e7a4      	b.n	800b3aa <_printf_i+0x16a>
 800b460:	2301      	movs	r3, #1
 800b462:	4632      	mov	r2, r6
 800b464:	4649      	mov	r1, r9
 800b466:	4640      	mov	r0, r8
 800b468:	47d0      	blx	sl
 800b46a:	3001      	adds	r0, #1
 800b46c:	d09b      	beq.n	800b3a6 <_printf_i+0x166>
 800b46e:	3501      	adds	r5, #1
 800b470:	68e3      	ldr	r3, [r4, #12]
 800b472:	9903      	ldr	r1, [sp, #12]
 800b474:	1a5b      	subs	r3, r3, r1
 800b476:	42ab      	cmp	r3, r5
 800b478:	dcf2      	bgt.n	800b460 <_printf_i+0x220>
 800b47a:	e7eb      	b.n	800b454 <_printf_i+0x214>
 800b47c:	2500      	movs	r5, #0
 800b47e:	f104 0619 	add.w	r6, r4, #25
 800b482:	e7f5      	b.n	800b470 <_printf_i+0x230>
 800b484:	0800bb65 	.word	0x0800bb65
 800b488:	0800bb76 	.word	0x0800bb76

0800b48c <nan>:
 800b48c:	2000      	movs	r0, #0
 800b48e:	4901      	ldr	r1, [pc, #4]	; (800b494 <nan+0x8>)
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	7ff80000 	.word	0x7ff80000

0800b498 <__sread>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	460c      	mov	r4, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	f000 f8f2 	bl	800b688 <_read_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	bfab      	itete	ge
 800b4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b4ac:	181b      	addge	r3, r3, r0
 800b4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4b2:	bfac      	ite	ge
 800b4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4b6:	81a3      	strhlt	r3, [r4, #12]
 800b4b8:	bd10      	pop	{r4, pc}

0800b4ba <__swrite>:
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	461f      	mov	r7, r3
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	05db      	lsls	r3, r3, #23
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	d505      	bpl.n	800b4d8 <__swrite+0x1e>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d4:	f000 f8b8 	bl	800b648 <_lseek_r>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	4632      	mov	r2, r6
 800b4dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	f000 b837 	b.w	800b560 <_write_r>

0800b4f2 <__sseek>:
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 f8a5 	bl	800b648 <_lseek_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	bf15      	itete	ne
 800b504:	6560      	strne	r0, [r4, #84]	; 0x54
 800b506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strheq	r3, [r4, #12]
 800b510:	bf18      	it	ne
 800b512:	81a3      	strhne	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__sclose>:
 800b516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51a:	f000 b851 	b.w	800b5c0 <_close_r>

0800b51e <strncmp>:
 800b51e:	4603      	mov	r3, r0
 800b520:	b510      	push	{r4, lr}
 800b522:	b172      	cbz	r2, 800b542 <strncmp+0x24>
 800b524:	3901      	subs	r1, #1
 800b526:	1884      	adds	r4, r0, r2
 800b528:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b52c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b530:	4290      	cmp	r0, r2
 800b532:	d101      	bne.n	800b538 <strncmp+0x1a>
 800b534:	42a3      	cmp	r3, r4
 800b536:	d101      	bne.n	800b53c <strncmp+0x1e>
 800b538:	1a80      	subs	r0, r0, r2
 800b53a:	bd10      	pop	{r4, pc}
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d1f3      	bne.n	800b528 <strncmp+0xa>
 800b540:	e7fa      	b.n	800b538 <strncmp+0x1a>
 800b542:	4610      	mov	r0, r2
 800b544:	e7f9      	b.n	800b53a <strncmp+0x1c>

0800b546 <__ascii_wctomb>:
 800b546:	4603      	mov	r3, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	b141      	cbz	r1, 800b55e <__ascii_wctomb+0x18>
 800b54c:	2aff      	cmp	r2, #255	; 0xff
 800b54e:	d904      	bls.n	800b55a <__ascii_wctomb+0x14>
 800b550:	228a      	movs	r2, #138	; 0x8a
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	4770      	bx	lr
 800b55a:	2001      	movs	r0, #1
 800b55c:	700a      	strb	r2, [r1, #0]
 800b55e:	4770      	bx	lr

0800b560 <_write_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	2200      	movs	r2, #0
 800b56a:	4d05      	ldr	r5, [pc, #20]	; (800b580 <_write_r+0x20>)
 800b56c:	602a      	str	r2, [r5, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f7f6 fb1a 	bl	8001ba8 <_write>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_write_r+0x1e>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_write_r+0x1e>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20000b28 	.word	0x20000b28

0800b584 <__assert_func>:
 800b584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b586:	4614      	mov	r4, r2
 800b588:	461a      	mov	r2, r3
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <__assert_func+0x2c>)
 800b58c:	4605      	mov	r5, r0
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68d8      	ldr	r0, [r3, #12]
 800b592:	b14c      	cbz	r4, 800b5a8 <__assert_func+0x24>
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <__assert_func+0x30>)
 800b596:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b59a:	9100      	str	r1, [sp, #0]
 800b59c:	462b      	mov	r3, r5
 800b59e:	4906      	ldr	r1, [pc, #24]	; (800b5b8 <__assert_func+0x34>)
 800b5a0:	f000 f81e 	bl	800b5e0 <fiprintf>
 800b5a4:	f000 f882 	bl	800b6ac <abort>
 800b5a8:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <__assert_func+0x38>)
 800b5aa:	461c      	mov	r4, r3
 800b5ac:	e7f3      	b.n	800b596 <__assert_func+0x12>
 800b5ae:	bf00      	nop
 800b5b0:	2000003c 	.word	0x2000003c
 800b5b4:	0800bb87 	.word	0x0800bb87
 800b5b8:	0800bb94 	.word	0x0800bb94
 800b5bc:	0800bbc2 	.word	0x0800bbc2

0800b5c0 <_close_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4d05      	ldr	r5, [pc, #20]	; (800b5dc <_close_r+0x1c>)
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f6 fb08 	bl	8001be0 <_close>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_close_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_close_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20000b28 	.word	0x20000b28

0800b5e0 <fiprintf>:
 800b5e0:	b40e      	push	{r1, r2, r3}
 800b5e2:	b503      	push	{r0, r1, lr}
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	4805      	ldr	r0, [pc, #20]	; (800b600 <fiprintf+0x20>)
 800b5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ee:	6800      	ldr	r0, [r0, #0]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	f7ff fc85 	bl	800af00 <_vfiprintf_r>
 800b5f6:	b002      	add	sp, #8
 800b5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5fc:	b003      	add	sp, #12
 800b5fe:	4770      	bx	lr
 800b600:	2000003c 	.word	0x2000003c

0800b604 <_fstat_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	2300      	movs	r3, #0
 800b608:	4d06      	ldr	r5, [pc, #24]	; (800b624 <_fstat_r+0x20>)
 800b60a:	4604      	mov	r4, r0
 800b60c:	4608      	mov	r0, r1
 800b60e:	4611      	mov	r1, r2
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	f7f6 faf0 	bl	8001bf6 <_fstat>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d102      	bne.n	800b620 <_fstat_r+0x1c>
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	b103      	cbz	r3, 800b620 <_fstat_r+0x1c>
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	bd38      	pop	{r3, r4, r5, pc}
 800b622:	bf00      	nop
 800b624:	20000b28 	.word	0x20000b28

0800b628 <_isatty_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	2300      	movs	r3, #0
 800b62c:	4d05      	ldr	r5, [pc, #20]	; (800b644 <_isatty_r+0x1c>)
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f7f6 faee 	bl	8001c14 <_isatty>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_isatty_r+0x1a>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_isatty_r+0x1a>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	20000b28 	.word	0x20000b28

0800b648 <_lseek_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4604      	mov	r4, r0
 800b64c:	4608      	mov	r0, r1
 800b64e:	4611      	mov	r1, r2
 800b650:	2200      	movs	r2, #0
 800b652:	4d05      	ldr	r5, [pc, #20]	; (800b668 <_lseek_r+0x20>)
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7f6 fae6 	bl	8001c28 <_lseek>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_lseek_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_lseek_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000b28 	.word	0x20000b28

0800b66c <memchr>:
 800b66c:	4603      	mov	r3, r0
 800b66e:	b510      	push	{r4, lr}
 800b670:	b2c9      	uxtb	r1, r1
 800b672:	4402      	add	r2, r0
 800b674:	4293      	cmp	r3, r2
 800b676:	4618      	mov	r0, r3
 800b678:	d101      	bne.n	800b67e <memchr+0x12>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e003      	b.n	800b686 <memchr+0x1a>
 800b67e:	7804      	ldrb	r4, [r0, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	428c      	cmp	r4, r1
 800b684:	d1f6      	bne.n	800b674 <memchr+0x8>
 800b686:	bd10      	pop	{r4, pc}

0800b688 <_read_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	2200      	movs	r2, #0
 800b692:	4d05      	ldr	r5, [pc, #20]	; (800b6a8 <_read_r+0x20>)
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	f7f6 fa69 	bl	8001b6e <_read>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_read_r+0x1e>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_read_r+0x1e>
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	20000b28 	.word	0x20000b28

0800b6ac <abort>:
 800b6ac:	2006      	movs	r0, #6
 800b6ae:	b508      	push	{r3, lr}
 800b6b0:	f000 f82c 	bl	800b70c <raise>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	f7f6 fa50 	bl	8001b5a <_exit>

0800b6ba <_raise_r>:
 800b6ba:	291f      	cmp	r1, #31
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4604      	mov	r4, r0
 800b6c0:	460d      	mov	r5, r1
 800b6c2:	d904      	bls.n	800b6ce <_raise_r+0x14>
 800b6c4:	2316      	movs	r3, #22
 800b6c6:	6003      	str	r3, [r0, #0]
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6d0:	b112      	cbz	r2, 800b6d8 <_raise_r+0x1e>
 800b6d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d6:	b94b      	cbnz	r3, 800b6ec <_raise_r+0x32>
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 f831 	bl	800b740 <_getpid_r>
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4601      	mov	r1, r0
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e8:	f000 b818 	b.w	800b71c <_kill_r>
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d00a      	beq.n	800b706 <_raise_r+0x4c>
 800b6f0:	1c59      	adds	r1, r3, #1
 800b6f2:	d103      	bne.n	800b6fc <_raise_r+0x42>
 800b6f4:	2316      	movs	r3, #22
 800b6f6:	6003      	str	r3, [r0, #0]
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	e7e7      	b.n	800b6cc <_raise_r+0x12>
 800b6fc:	2400      	movs	r4, #0
 800b6fe:	4628      	mov	r0, r5
 800b700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b704:	4798      	blx	r3
 800b706:	2000      	movs	r0, #0
 800b708:	e7e0      	b.n	800b6cc <_raise_r+0x12>
	...

0800b70c <raise>:
 800b70c:	4b02      	ldr	r3, [pc, #8]	; (800b718 <raise+0xc>)
 800b70e:	4601      	mov	r1, r0
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	f7ff bfd2 	b.w	800b6ba <_raise_r>
 800b716:	bf00      	nop
 800b718:	2000003c 	.word	0x2000003c

0800b71c <_kill_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	2300      	movs	r3, #0
 800b720:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_kill_r+0x20>)
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	f7f6 fa06 	bl	8001b3a <_kill>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d102      	bne.n	800b738 <_kill_r+0x1c>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	b103      	cbz	r3, 800b738 <_kill_r+0x1c>
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	bf00      	nop
 800b73c:	20000b28 	.word	0x20000b28

0800b740 <_getpid_r>:
 800b740:	f7f6 b9f4 	b.w	8001b2c <_getpid>

0800b744 <_init>:
 800b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b746:	bf00      	nop
 800b748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74a:	bc08      	pop	{r3}
 800b74c:	469e      	mov	lr, r3
 800b74e:	4770      	bx	lr

0800b750 <_fini>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	bf00      	nop
 800b754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b756:	bc08      	pop	{r3}
 800b758:	469e      	mov	lr, r3
 800b75a:	4770      	bx	lr
