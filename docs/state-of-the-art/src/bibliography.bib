%SIL
@article{4599511,
    author = "James Shore; Shane Warden",
    title = "The Art of Agile Development",
    year = "2021",
    pages = "2",
    DOI = ""
}

%SIL
@article{04455268,
    author = "Stephanie Demers, Praveen Gopalakrishnan, Latha Kant",
    title = "A Generic Solution to Software-in-the-Loop",
    year = "2007",
    pages = "6",
    DOI = "10.1109/MILCOM.2007.4455268"
}
%SIL & HIL
@article{08411749,
    author = "DENG Fei, GAO Feng",
    title = "Design of High Confidence Embedded Software Hardware-in-Loop Simulation Test Platform Based on Hierarchical Model",
    year = "2018",
    pages = "163-168",
    DOI = "10.1109/ICSTW.2018.00046"
}

%SIL
@article{06384402,
    author = "Marius Muresan, Dan Pitica",
    title = "Software in the Loop environment reliability for testing embedded code",
    year = "2012",
    pages = "325-328",
    DOI = "10.1109/SIITME.2012.6384402"
}


%Agile
@inproceedings{stolberg_enabling_2009,
	title = {Enabling {Agile} {Testing} through {Continuous} {Integration}},
	doi = {10.1109/AGILE.2009.16},
	booktitle = {2009 {Agile} {Conference}},
	author = {Stolberg, S.},
	month = aug,
	year = {2009},
	pages = {369--374}
}
%Agile_Oreilly
@misc{media_art_nodate,
	title = {The {Art} of {Agile} {Development}, 2nd {Edition}},
	url = {https://learning.oreilly.com/library/view/the-art-of/9781492080688/},
	language = {en},
	urldate = {2021-01-29},
	year="2021",
	page=2,
	author ={James Shore, Shane Warden}
}

%HIL
@misc{065893,
	title = {What {Is} {Hardware}-in-the-{Loop}?},
	url = {https://www.ni.com/fr-fr/innovations/white-papers/17/what-is-hardware-in-the-loop-.html},
	language = {en},
	urldate = {2021-01-29},
	journal = {NI},
}

%HIL
@misc{065894,
	title = {What {Is} {Hardware}-{In}-{The}-{Loop} {Simulation}?},
	url = {https://www.mathworks.com/help/physmod/simscape/ug/what-is-hardware-in-the-loop-simulation.html?w.mathworks.com},
	urldate = {2021-01-28},
	journal = {MATLAB \& Simulink},
}

%HIL
@article{HIL-simu,
    author = {Darcy Bullock and Brian Johnson and Richard B. Wells and Michael Kyte and Zhen LI},
    title = "Hardware-in-the-loop simulation",
    year = "2004",
    pages = "17",
    DOI = "10.1016/j.trc.2002.10.002"
}


%HIL
@article{On-HIL-simu,
    author = {M. Bacic},
    title = "On hardware-in-the-loop simulation",
    year = "2005",
    pages = "3194-3198",
    DOI = "10.1109/CDC.2005.1582653"
}
%MIL
@article{Model_in_the_loop,
    author = "A R Plummer",
    title = "Model-in-the-loop testing",
    year = "2006",
    pages = "183-199",
    DOI = "10.1243/09596518JSCE207"
}

%MIL
@article{MIL_Complex,
    author = "A. VIDANAPATHIRANA, S. D. DEWASURENDRA, S. G.ABEYARATNE",
    title = "Model in the loop testing of Complex Reactive Systems",
    year = "2013",
    pages = "30-35",
    DOI = "10.1109/ICIInfS.2013.6731950"
}

%other method of testing
@article{06933521,
    author = "Xuqin Yan, Lei Wang, Xiaobo Che, Yanqiang Li",
    title = "Source code testing for automotive software based on UPPAAL model",
    year = "2014",
    pages = "95-98",
    DOI = "10.1109/ICSESS.2014.6933521"
}

% V-Model
@article{7890592,
  author={B. {Liu} and H. {Zhang} and S. {Zhu}},
  booktitle={2016 23rd Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={An Incremental V-Model Process for Automotive Development}, 
  year={2016},
  volume={},
  number={},
  pages={225-232},
  doi={10.1109/APSEC.2016.040}
 }

% Unit-testing
@ARTICLE{27763,  author={},  journal={ANSI/IEEE Std 1008-1987},   title={IEEE Standard for Software Unit Testing},   year={1986},  volume={},  number={},  pages={1-28},  doi={10.1109/IEEESTD.1986.81001}}

% Difference between unit and integration tests
@INPROCEEDINGS{7100358,  author={H. K. {Brar} and P. J. {Kaur}},  booktitle={2015 2nd International Conference on Computing for Sustainable Global Development (INDIACom)},   title={Differentiating Integration Testing and unit testing},   year={2015},  volume={},  number={},  pages={796-798},  doi={}}

% Agile methodology
@INPROCEEDINGS{4599511,  author={C. {Vriens} and R. {Barto}},  booktitle={Agile 2008 Conference},   title={7 Years of Agile Management},   year={2008},  volume={},  number={},  pages={390-394},  doi={10.1109/Agile.2008.97}}

% Agile testing and CI
@INPROCEEDINGS{5261055,  author={S. {Stolberg}},  booktitle={2009 Agile Conference},   title={Enabling Agile Testing through Continuous Integration},   year={2009},  volume={},  number={},  pages={369-374},  doi={10.1109/AGILE.2009.16}}

% Code coverage
@article{8804437,
  author={V. {Antinyan} and M. {Staron}},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)}, 
  title={Mythical Unit Test Coverage}, 
  year={2019},
  volume={},
  number={},
  pages={267-268},
  doi={10.1109/ICSE-SEIP.2019.00038}}
  
  
  % Regression Testing
  @article{regression,
  author={Michael A. Long},
  title={Software Regression Testing Success Story}, 
  year={1993},
  pages={271-272},
  doi={10.1109/TEST.1993.470688}
  }
  
  
  %Software Testing From Theory to Practice
  @article{Software_Testing,
  author={M. {Aniche,}},
  booktitle={Software Testing: From Theory to Practice}, 
  title={Software Testing: From Theory to Practice}, 
  year={},
  volume={},
  number={},
  pages={},
  doi={}
 }
 
 %Design of Controllers Applied to Autonomous Unmanned..
 @inproceedings{silva_design_2019,
	address = {Krakow-Wieliczka, Poland},
	title = {Design of {Controllers} {Applied} to {Autonomous} {Unmanned} {Aerial} {Vehicles} {Using} {Software} {In} {The} {Loop}},
	isbn = {978-1-72810-702-8},
	url = {https://ieeexplore.ieee.org/document/8766036/},
	doi = {10.1109/CarpathianCC.2019.8766036},
	abstract = {This paper presents the design of the altitude controller of Unmanned Aerial Vehicle (UAV) based on the data acquired from the Software in the Loop (SITL). More speciﬁcally, the developed methodology permits to describe a test procedure where an algorithm or even a control strategy can be designed and validated based on the physical model of the system. In this way, the PID controller with a technique known as Successive Loop Closure is designed. The paper also shows how to establish a remote communication with the quadcopter using all the versatility of the Software in the Loop (SITL) in combination with a Ground Control Station and Dronekit developing tool. Finally, the ﬂight simulation tests show that the designed controller was able to reach a stable ﬂight with its performance evaluated through non-intrusive performance indexes and analysis of the system response in the time domain.},
	language = {en},
	urldate = {2021-01-25},
	booktitle = {2019 20th {International} {Carpathian} {Control} {Conference} ({ICCC})},
	publisher = {IEEE},
	author = {Silva, D.H.C. and Santos, M. F. and Silva, M. F. and S. Neto, A. F. and Mercorelli, P.},
	month = may,
	year = {2019},
	pages = {1--6}
}

%Windows Lifter
@inproceedings{beyer_software_2017,
	address = {Athens, Greece},
	title = {Software in the loop — {A} window lifter model to guide students through the software development process},
	isbn = {978-1-5090-5467-1},
	url = {http://ieeexplore.ieee.org/document/7943045/},
	doi = {10.1109/EDUCON.2017.7943045},
	abstract = {With software in the loop, a graphical user interface, and a free programmable window lifter model this project provides techniques to improve teaching the software development process. Students can write their own program everywhere and any time with the aid of a virtual model and a graphical user interface. During the lecture “Design of Software-Intensive Systems” at Fulda University of Applied Sciences they can run the same software on the physical model without any modifications.},
	language = {en},
	urldate = {2021-01-25},
	booktitle = {2017 {IEEE} {Global} {Engineering} {Education} {Conference} ({EDUCON})},
	publisher = {IEEE},
	author = {Beyer, Carsten and Emmerich, Jan and Werner, Uwe},
	month = apr,
	year = {2017},
	pages = {1488--1493}
}

%Real Time Software
@article{xiang_chen_real_2008,
	title = {Real {Time} {Software}-in-the-{Loop} {Simulation} for {Control} {Performance} {Validation}},
	volume = {84},
	issn = {0037-5497, 1741-3133},
	url = {http://journals.sagepub.com/doi/10.1177/0037549708097420},
	doi = {10.1177/0037549708097420},
	language = {en},
	number = {8-9},
	urldate = {2021-01-25},
	journal = {SIMULATION},
	author = {{Xiang Chen} and Salem, Meranda and Das, Tuhin and {Xiaoqun Chen}},
	month = aug,
	year = {2008},
	pages = {457--471}
}


%WB-Dyna-analysis
@ARTICLE{4815280,
author={B. {Cornelissen} and A. {Zaidman} and A. {van Deursen} and L. {Moonen} and R. {Koschke}},
journal={IEEE Transactions on Software Engineering},
title={A Systematic Survey of Program Comprehension through Dynamic Analysis},
year={2009},
volume={35},
number={5},
pages={684-702},
doi={10.1109/TSE.2009.28}
}

% Unit tests
@INPROCEEDINGS{76037,  author={R. {Hamlet}},  booktitle={Proceedings of the Fourth Annual Conference on Computer Assurance, 'Systems Integrity, Software Safety and Process Security},   title={Unit testing for software assurance},   year={1989},  volume={},  number={},  pages={42-48},  doi={10.1109/CMPASS.1989.76037}}


% system test
@article{hartmann_uml-based_2005,
	title = {A {UML}-based approach to system testing},
	volume = {1},
	issn = {1614-5054},
	url = {https://doi.org/10.1007/s11334-005-0006-0},
	doi = {10.1007/s11334-005-0006-0},
	abstract = {This article describes an approach for automatically generating and executing system tests, which can be used to improve the validation of an application. Tests are automatically generated from behavioural models of the application using the unified modelling language (UML) and then executed using a suitable test execution environment. For this paper, we demonstrate our approach by means of an application that interacts with its users via a graphical user interface. Thus, we discuss the test- execution phase with respect to a commercial user interface (UI) or capture–replay tool.},
	language = {en},
	number = {1},
	urldate = {2021-01-28},
	journal = {Innovations in Systems and Software Engineering},
	author = {Hartmann, Jean and Vieira, Marlon and Foster, Herbert and Ruder, Axel},
	month = apr,
	year = {2005},
	pages = {12--24},
	file = {Springer Full Text PDF:C\:\\Users\\pierr\\Zotero\\storage\\B66FMCGS\\Hartmann et al. - 2005 - A UML-based approach to system testing.pdf:application/pdf}
}



% State transition testing
@inproceedings{de_souza_carvalho_coverage_2014,
	title = {Coverage {Criteria} for {State} {Transition} {Testing} and {Model} {Checker}-{Based} {Test} {Case} {Generation}},
	doi = {10.1109/CANDAR.2014.111},
	abstract = {State Transition Testing is an important category of software testing. Our work focuses on coverage criteria which adopt the notion of pair-wise testing. We propose an approach that uses model checking tool NuSMV to generate test cases that satisfy these coverage criteria from a given state chart specification. We also propose to use an algorithm for the set covering problem to reduce the number of test cases.},
	language = {eng},
	publisher = {IEEE},
	author = {de Souza Carvalho, Cassia and Tsuchiya, Tatsuhiro},
	year = {2014},
	keywords = {Software testing ; NuSMV ; Software algorithms ; state transition testing ; set covering problem ; coverage criteria ; Model checking ; Educational institutions ; Software ; Silicon ; statechart},
	pages = {596--598}
}


% Fuzz testing
@article{zhang_discover_2018,
	title = {Discover deeper bugs with dynamic symbolic execution and coverage-based fuzz testing},
	volume = {12},
	issn = {1751-8806},
	doi = {10.1049/iet-sen.2017.0200},
	abstract = {Coverage-based fuzz testing and dynamic symbolic execution are both popular program testing techniques. However, on their own, both techniques suffer from scalability problems when considering the complexity of modern software. Hybrid testing methods attempt to mitigate these problems by leveraging dynamic symbolic execution to assist fuzz testing. Unfortunately, the efficiency of such methods is still limited by specific program structures and the schedule of seed files. In this study, the authors introduce a novel lazy symbolic pointer concretisation method and a symbolic loop bucket optimisation to mitigate path explosion caused by dynamic symbolic execution in hybrid testing. They also propose a distance-based seed selection method to rearrange the seed queue of the fuzzer engine in order to achieve higher coverage. They implemented a prototype and evaluate its ability to find vulnerabilities in software and cover new execution paths. They show on different benchmarks that it can find more crashes than other off-the-shelf vulnerability detection tools. They also show that the proposed method can discover 43\% more unique paths than vanilla fuzz testing.},
	language = {eng},
	number = {6},
	journal = {IET software},
	author = {Zhang, Bin and Feng, Chao and Herrera, Adrian and Chipounov, Vitaly and Candea, George and Tang, Chaojing},
	year = {2018},
	pages = {507--519}
}



% Decision table testing
@misc{jorgensen_decision_2014,
	title = {Decision {Table}–{Based} {Testing}},
	abstract = {Of all the functional testing methods, those based on decision tables are the most rigorous because of their strong logical basis. Two closely related methods are used: cause-and-effect graphing (Elmendorf, 1973; Myers, 1979) and the decision tableau method (Mosley, 1993). These are more cumbersome to use and are fully redundant with decision tables; both are covered in Mosley (1993). For the curious, or for the sake of completeness, Section 7.5 offers a short discussion of cause-and-effect graphing.},
	language = {eng},
	publisher = {CRC Press},
	author = {Jorgensen, Paul C.},
	year = {2014}
}

%Hacker-in-the-loop
@article{noauthor_hacker---loop_nodate,
	title = {Hacker-in-the-loop},
	abstract = {Over the years, ETAS and ESCRYPT have built up a wealth of expertise in HiL/SiL systems and automotive security. This combined know-how is now helping automakers and developers to guarantee the safety and security of networked systems in vehicles. Proven HiL/SiL systems provide an ideal platform for testing both these aspects in an efficient, effective, and comprehensive manner. Moreover, such testing can be conducted at an early stage of the development process. This means that car manufacturers can be confident of delivering the dependability demanded of today’s connected cars.},
	language = {en},
	pages = {3},
	author = {Dr. Tobias Kreuzinger, Dr. Marko Wolf, Jürgen Crepin}
}


