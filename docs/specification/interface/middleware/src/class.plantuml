@startuml

scale 1.5

package jbox {
  package comm {
    class VirtualComPort {
      connect(int port) : void
      listen() : void
      send(string) : void
    }
    Middleware --> "1" VirtualComPort
  }

  package decode {
    class Decoder {
      {static} decode(string) : Result
      {static} encode_failure(Failure) : string
      {static} encode_config(Config) : string
    }
  }


  enum Result{
    COM_ERROR
    CRK_IS_CONFIGURED
    CAM_IS_CONFIGURED
    CRK_SYNCHRONIZATION_READY
    CRK_SYNCHRONIZATION_LOST
    CAM_CRK_SYNCHRONIZATION_READY
    CAM_CRK_SYNCHRONIZATION_LOST
    FAILURE_ACTIVE
    FAILURE_PASSIVE
    FAILURE_CAM_BLANK_OUT_ACTIVE
    FAILURE_CAM_BLANK_OUT_PASSIVE
    SUCCESSFUL_COMMUNICATION
  }

  class CamConfig {
    char NumOfCamEdges[5];
    char CamEdgesPositions[100];
    char Active_edge[5];
    char FilterInMicroSec[10];
  }

  class Config{
    char NumOfTeeth[5];
    char NumOfGap[5];
    char NumOfTeethInGap[5];
    char FirstSegAngle[10];
    char NumOfCylinder[5];
    char CrkSensorType[5];
    char Tdc0[10];
    char NumOfCam[5];
    CamConfig CamConfig[2];
  }
  CamConfig   "2" *-- "1" Config

  class Middleware {
    start_failure(Failure) : void
    receive_result(Result) : void
    send_config(Config) : void
    reset_config() : void
  }

  package ui {
    class UI {}
    Middleware --> "1" UI
  }


  package failures {
    class Failure {
      identifier : char
      toStartMessage() : string
      toStopMessage() : string 
    }

    class CRK_RUN_OUT {
      start_position : int
      sc_type : char
      failure_period : int
    }
    CRK_RUN_OUT --|> Failure

    class CAM_PER {
      active_edges : char
      number_edges : int
    }
    CAM_PER --|> Failure

    class CRK_TOOTH_PER {
      start_tooth : int
      number_pulses : int
      number_revolutions : int
    }
    CRK_TOOTH_PER --|> Failure

    class CAM_PATH_ERR {

    }
    CAM_PATH_ERR --|> Failure

    class CAM_DELAY {
      shift : int
    }
    CAM_DELAY --|> Failure

    class CRK_TOOTH_OFF {
      number_tooth_off : int
    }
    CRK_TOOTH_OFF --|> Failure

    class CRK_GAP_NOT_DET {
      
    }
    CRK_GAP_NOT_DET --|> Failure

    class SEG_ADP_ER_LIM {
      crk_delay : float
    }
    SEG_ADP_ER_LIM --|> Failure

    class CRK_PLS_ORNG {
      crk_pulse_duration : float
    }
    CRK_PLS_ORNG --|> Failure

    class POSN_ENG_STST {
      crk_teeth_off : int
    }
    POSN_ENG_STST --|> Failure
  }
}

@enduml
